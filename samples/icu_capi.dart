// Generated from samples/icu_capi.wasm.

// ignore_for_file: curly_braces_in_flow_control_structures, dead_code
// ignore_for_file: non_constant_identifier_names, unused_element, unused_label
// ignore_for_file: unused_local_variable

import 'dart:typed_data';

import 'package:wasmd/runtime.dart';

/// A class representing the symbols imported from the 'env' module.
abstract class EnvImports {
  void warn_js(i32 arg0, i32 arg1);
  void log_js(i32 arg0, i32 arg1);
}

class IcuCapiModule implements Module {
  IcuCapiModule({required this.envImports}) {
    _data.init(memory);
    segments.init();
  }

  final EnvImports envImports;

  @override
  final Memory memory = Memory(16);

  final Globals globals = Globals();

  final DataSegments _data = DataSegments();

  final Table table0 = Table(
    36,
    36,
  );

  @override
  late final List<Table> tables = [table0];

  late final ElementSegments segments = ElementSegments(this);

  late final List<Function> functionTable = _initFunctionTable();

  i32 get $__data_end => globals.global1;
  i32 get $__heap_base => globals.global2;
  void icu4x_init() => _icu4x_init();
  void ICU4XFixedDecimalFormatter_create_with_grouping_strategy(i32 arg0, i32 arg1, i32 arg2, i32 arg3) =>
      _ICU4XFixedDecimalFormatter_create_with_grouping_strategy(arg0, arg1, arg2, arg3);
  void ICU4XFixedDecimalFormatter_format(i32 arg0, i32 arg1, i32 arg2, i32 arg3) =>
      _ICU4XFixedDecimalFormatter_format(arg0, arg1, arg2, arg3);
  void ICU4XFixedDecimalFormatter_destroy(i32 arg0) => _ICU4XFixedDecimalFormatter_destroy(arg0);
  i32 ICU4XFixedDecimal_create_from_i32(i32 arg0) => _ICU4XFixedDecimal_create_from_i32(arg0);
  void ICU4XFixedDecimal_multiply_pow10(i32 arg0, i32 arg1) => _ICU4XFixedDecimal_multiply_pow10(arg0, arg1);
  void ICU4XFixedDecimal_destroy(i32 arg0) => _ICU4XFixedDecimal_destroy(arg0);
  void ICU4XLocale_create_from_string(i32 arg0, i32 arg1, i32 arg2) =>
      _ICU4XLocale_create_from_string(arg0, arg1, arg2);
  void ICU4XLocale_destroy(i32 arg0) => _ICU4XLocale_destroy(arg0);
  void ICU4XDataProvider_create_from_byte_slice(i32 arg0, i32 arg1, i32 arg2) =>
      _ICU4XDataProvider_create_from_byte_slice(arg0, arg1, arg2);
  void ICU4XDataProvider_destroy(i32 arg0) => _ICU4XDataProvider_destroy(arg0);
  void diplomat_init() => _diplomat_init();
  void diplomat_simple_writeable(i32 arg0, i32 arg1, i32 arg2) =>
      _diplomat_simple_writeable(arg0, arg1, arg2);
  i32 diplomat_buffer_writeable_create(i32 arg0) => _diplomat_buffer_writeable_create(arg0);
  i32 diplomat_buffer_writeable_get_bytes(i32 arg0) => _diplomat_buffer_writeable_get_bytes(arg0);
  i32 diplomat_buffer_writeable_len(i32 arg0) => _diplomat_buffer_writeable_len(arg0);
  void diplomat_buffer_writeable_destroy(i32 arg0) => _diplomat_buffer_writeable_destroy(arg0);
  i32 diplomat_alloc(i32 arg0, i32 arg1) => _diplomat_alloc(arg0, arg1);
  void diplomat_free(i32 arg0, i32 arg1, i32 arg2) => _diplomat_free(arg0, arg1, arg2);

  i32 _memset(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN17compiler_builtins3mem6memset17h6d0d38d1f76c7d8bE(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _ZN17compiler_builtins3mem6memcpy17hfb2ed0fb8d3a86f1E(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(15);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        local0 = frame.pop();
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.push(arg0);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_and();
      local1 = frame.peek();
      frame.i32_add();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        local0 = frame.pop();
        frame.push(arg1);
        local3 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.push(local3);
          frame.i32_load8_u(0, 0);
          frame.i32_store8(0, 0);
          frame.push(local3);
          frame.i32_const(1);
          frame.i32_add();
          local3 = frame.pop();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.peek();
          frame.push(local2);
          frame.i32_lt_u();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.push(local2);
      frame.push(arg2);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_const(-4);
      frame.i32_and();
      local5 = frame.peek();
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.push(local1);
          frame.i32_add();
          local6 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local5);
          frame.i32_const(1);
          frame.i32_lt_s();
          if (frame.pop() != 0) break block_label_1;
          frame.push(local6);
          frame.i32_const(3);
          frame.i32_shl();
          local3 = frame.peek();
          frame.i32_const(24);
          frame.i32_and();
          arg2 = frame.pop();
          frame.push(local6);
          frame.i32_const(-4);
          frame.i32_and();
          local7 = frame.peek();
          frame.i32_const(4);
          frame.i32_add();
          arg1 = frame.pop();
          frame.i32_const(0);
          frame.push(local3);
          frame.i32_sub();
          frame.i32_const(24);
          frame.i32_and();
          local1 = frame.pop();
          frame.push(local7);
          frame.i32_load(2, 0);
          local3 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local2);
            frame.push(local3);
            frame.push(arg2);
            frame.i32_shr_u();
            frame.push(arg1);
            frame.i32_load(2, 0);
            local3 = frame.peek();
            frame.push(local1);
            frame.i32_shl();
            frame.i32_or();
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local2);
            frame.i32_const(4);
            frame.i32_add();
            local2 = frame.peek();
            frame.push(local0);
            frame.i32_lt_u();
            if (frame.pop() != 0) continue loop_label_3;
            break block_label_1;
            break;
          }
        }
        frame.push(local5);
        frame.i32_const(1);
        frame.i32_lt_s();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local6);
        arg1 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local2);
          frame.push(arg1);
          frame.i32_load(2, 0);
          frame.i32_store(2, 0);
          frame.push(arg1);
          frame.i32_const(4);
          frame.i32_add();
          arg1 = frame.pop();
          frame.push(local2);
          frame.i32_const(4);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local0);
          frame.i32_lt_u();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.push(local4);
      frame.i32_const(3);
      frame.i32_and();
      arg2 = frame.pop();
      frame.push(local6);
      frame.push(local5);
      frame.i32_add();
      arg1 = frame.pop();
    }
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.push(arg2);
      frame.i32_add();
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.push(arg1);
        frame.i32_load8_u(0, 0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_const(1);
        frame.i32_add();
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local2);
        frame.i32_lt_u();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _memcpy(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN17compiler_builtins3mem6memcpy17hfb2ed0fb8d3a86f1E(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _ZN17compiler_builtins3mem7memmove17hcbf0c909b02c427eE(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_sub();
            frame.push(arg2);
            frame.i32_ge_u();
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            local0 = frame.pop();
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_add();
            local1 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg0);
              local2 = frame.pop();
              break block_label_1;
            }
            frame.push(local1);
            frame.i32_const(-4);
            frame.i32_and();
            local3 = frame.pop();
            frame.i32_const(0);
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_and();
            local4 = frame.peek();
            frame.i32_sub();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.push(arg2);
              frame.i32_add();
              frame.i32_const(-1);
              frame.i32_add();
              local2 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.i32_const(-1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local2);
                frame.i32_load8_u(0, 0);
                frame.i32_store8(0, 0);
                frame.push(local2);
                frame.i32_const(-1);
                frame.i32_add();
                local2 = frame.pop();
                frame.push(local3);
                frame.push(local1);
                frame.i32_lt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
            }
            frame.push(local3);
            frame.push(arg2);
            frame.push(local4);
            frame.i32_sub();
            local6 = frame.peek();
            frame.i32_const(-4);
            frame.i32_and();
            local2 = frame.peek();
            frame.i32_sub();
            local1 = frame.pop();
            frame.i32_const(0);
            frame.push(local2);
            frame.i32_sub();
            local4 = frame.pop();
            block_label_4:
            {
              frame.push(local0);
              frame.push(local5);
              frame.i32_add();
              local5 = frame.peek();
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local4);
              frame.i32_const(-1);
              frame.i32_gt_s();
              if (frame.pop() != 0) break block_label_2;
              frame.push(local5);
              frame.i32_const(3);
              frame.i32_shl();
              local2 = frame.peek();
              frame.i32_const(24);
              frame.i32_and();
              arg2 = frame.pop();
              frame.push(local5);
              frame.i32_const(-4);
              frame.i32_and();
              local7 = frame.peek();
              frame.i32_const(-4);
              frame.i32_add();
              arg1 = frame.pop();
              frame.i32_const(0);
              frame.push(local2);
              frame.i32_sub();
              frame.i32_const(24);
              frame.i32_and();
              local0 = frame.pop();
              frame.push(local7);
              frame.i32_load(2, 0);
              local2 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local3);
                frame.i32_const(-4);
                frame.i32_add();
                local3 = frame.peek();
                frame.push(local2);
                frame.push(local0);
                frame.i32_shl();
                frame.push(arg1);
                frame.i32_load(2, 0);
                local2 = frame.peek();
                frame.push(arg2);
                frame.i32_shr_u();
                frame.i32_or();
                frame.i32_store(2, 0);
                frame.push(arg1);
                frame.i32_const(-4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(local3);
                frame.push(local1);
                frame.i32_gt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break block_label_2;
                break;
              }
            }
            frame.push(local4);
            frame.i32_const(-1);
            frame.i32_gt_s();
            if (frame.pop() != 0) break block_label_2;
            frame.push(local6);
            frame.push(arg1);
            frame.i32_add();
            frame.i32_const(-4);
            frame.i32_add();
            arg1 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local3);
              frame.i32_const(-4);
              frame.i32_add();
              local3 = frame.peek();
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_store(2, 0);
              frame.push(arg1);
              frame.i32_const(-4);
              frame.i32_add();
              arg1 = frame.pop();
              frame.push(local3);
              frame.push(local1);
              frame.i32_gt_u();
              if (frame.pop() != 0) continue loop_label_4;
              break block_label_2;
              break;
            }
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg0);
              local1 = frame.pop();
              break block_label_3;
            }
            frame.push(arg0);
            frame.i32_const(0);
            frame.push(arg0);
            frame.i32_sub();
            frame.i32_const(3);
            frame.i32_and();
            local0 = frame.peek();
            frame.i32_add();
            local2 = frame.pop();
            block_label_4:
            {
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg0);
              local1 = frame.pop();
              frame.push(arg1);
              local3 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.push(local3);
                frame.i32_load8_u(0, 0);
                frame.i32_store8(0, 0);
                frame.push(local3);
                frame.i32_const(1);
                frame.i32_add();
                local3 = frame.pop();
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local2);
                frame.i32_lt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
            }
            frame.push(local2);
            frame.push(arg2);
            frame.push(local0);
            frame.i32_sub();
            local5 = frame.peek();
            frame.i32_const(-4);
            frame.i32_and();
            local6 = frame.peek();
            frame.i32_add();
            local1 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg1);
                frame.push(local0);
                frame.i32_add();
                local4 = frame.peek();
                frame.i32_const(3);
                frame.i32_and();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_lt_s();
                if (frame.pop() != 0) break block_label_4;
                frame.push(local4);
                frame.i32_const(3);
                frame.i32_shl();
                local3 = frame.peek();
                frame.i32_const(24);
                frame.i32_and();
                arg2 = frame.pop();
                frame.push(local4);
                frame.i32_const(-4);
                frame.i32_and();
                local7 = frame.peek();
                frame.i32_const(4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.i32_const(0);
                frame.push(local3);
                frame.i32_sub();
                frame.i32_const(24);
                frame.i32_and();
                local0 = frame.pop();
                frame.push(local7);
                frame.i32_load(2, 0);
                local3 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local2);
                  frame.push(local3);
                  frame.push(arg2);
                  frame.i32_shr_u();
                  frame.push(arg1);
                  frame.i32_load(2, 0);
                  local3 = frame.peek();
                  frame.push(local0);
                  frame.i32_shl();
                  frame.i32_or();
                  frame.i32_store(2, 0);
                  frame.push(arg1);
                  frame.i32_const(4);
                  frame.i32_add();
                  arg1 = frame.pop();
                  frame.push(local2);
                  frame.i32_const(4);
                  frame.i32_add();
                  local2 = frame.peek();
                  frame.push(local1);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) continue loop_label_6;
                  break block_label_4;
                  break;
                }
              }
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_lt_s();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local4);
              arg1 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local2);
                frame.push(arg1);
                frame.i32_load(2, 0);
                frame.i32_store(2, 0);
                frame.push(arg1);
                frame.i32_const(4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(local2);
                frame.i32_const(4);
                frame.i32_add();
                local2 = frame.peek();
                frame.push(local1);
                frame.i32_lt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
            }
            frame.push(local5);
            frame.i32_const(3);
            frame.i32_and();
            arg2 = frame.pop();
            frame.push(local4);
            frame.push(local6);
            frame.i32_add();
            arg1 = frame.pop();
          }
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(local1);
          frame.push(arg2);
          frame.i32_add();
          local2 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local1);
            frame.push(arg1);
            frame.i32_load8_u(0, 0);
            frame.i32_store8(0, 0);
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(local2);
            frame.i32_lt_u();
            if (frame.pop() != 0) continue loop_label_3;
            break block_label_0;
            break;
          }
        }
        frame.push(local6);
        frame.i32_const(3);
        frame.i32_and();
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local5);
        frame.push(local4);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(local1);
        frame.push(arg1);
        frame.i32_sub();
        local2 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(-1);
      frame.i32_add();
      arg1 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local1);
        frame.i32_const(-1);
        frame.i32_add();
        local1 = frame.peek();
        frame.push(arg1);
        frame.i32_load8_u(0, 0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_const(-1);
        frame.i32_add();
        arg1 = frame.pop();
        frame.push(local2);
        frame.push(local1);
        frame.i32_lt_u();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _memmove(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN17compiler_builtins3mem7memmove17hcbf0c909b02c427eE(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _ZN17compiler_builtins3mem6memset17h6d0d38d1f76c7d8bE(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(15);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        local0 = frame.pop();
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.push(arg0);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_and();
      local1 = frame.peek();
      frame.i32_add();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        local0 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.push(arg1);
          frame.i32_store8(0, 0);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.peek();
          frame.push(local2);
          frame.i32_lt_u();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.push(arg1);
      frame.i32_const(255);
      frame.i32_and();
      local3 = frame.pop();
      frame.i32_const(8);
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local3);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_and();
        frame.i32_shl();
        frame.push(local3);
        frame.i32_or();
        local3 = frame.pop();
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_lt_u();
        local4 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_shl();
        local0 = frame.pop();
        frame.push(local4);
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
      frame.push(local2);
      frame.push(arg2);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_const(-4);
      frame.i32_and();
      arg2 = frame.peek();
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_lt_s();
        if (frame.pop() != 0) break block_label_1;

        loop_label_2:
        for (;;) {
          frame.push(local2);
          frame.push(local3);
          frame.i32_store(2, 0);
          frame.push(local2);
          frame.i32_const(4);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local0);
          frame.i32_lt_u();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.push(local4);
      frame.i32_const(3);
      frame.i32_and();
      arg2 = frame.pop();
    }
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.push(arg2);
      frame.i32_add();
      local3 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.push(arg1);
        frame.i32_store8(0, 0);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local3);
        frame.i32_lt_u();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _ZN17compiler_builtins3mem6memcmp17h67e272c2b8c197dfE(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(arg0);
          frame.i32_load8_u(0, 0);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_load8_u(0, 0);
          local2 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          arg1 = frame.pop();
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_add();
          arg0 = frame.pop();
          frame.push(arg2);
          frame.i32_const(-1);
          frame.i32_add();
          arg2 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          continue loop_label_2;
          break;
        }
      }
      frame.push(local1);
      frame.push(local2);
      frame.i32_sub();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _memcmp(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN17compiler_builtins3mem6memcmp17h67e272c2b8c197dfE(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 __rust_alloc(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(9);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg1);
      frame.push(arg0);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func020(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func019(t0, t1));
    }
    return frame.pop();
  }

  i32 __rust_realloc(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(9);
            frame.i32_lt_u();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0xf5160);
            frame.push(arg2);
            frame.push(arg3);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func020(t0, t1, t2));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_2;
            frame.i32_const(0);
            return frame.pop();
          }
          frame.i32_const(0);
          arg2 = frame.pop();
          frame.push(arg3);
          frame.i32_const(-0x10034);
          frame.i32_gt_u();
          if (frame.pop() != 0) break block_label_1;
          frame.i32_const(0xf5160);
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          frame.i32_const(16);
          frame.push(arg3);
          frame.i32_const(11);
          frame.i32_add();
          frame.i32_const(-8);
          frame.i32_and();
          frame.push(arg3);
          frame.i32_const(11);
          frame.i32_lt_u();
          frame.select();
          frame.i32_const(1);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func017(t0, t1, t2, t3));
          }
          arg1 = frame.peek();
          if (frame.pop() != 0) break block_label_0;
          frame.i32_const(0xf5160);
          frame.push(arg3);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func019(t0, t1));
          }
          arg1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg1);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_const(-8);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          frame.select();
          frame.push(arg2);
          frame.i32_const(-8);
          frame.i32_and();
          frame.i32_add();
          arg2 = frame.peek();
          frame.push(arg3);
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_lt_u();
          frame.select();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memcpy(t0, t1, t2));
          }
          arg3 = frame.pop();
          frame.i32_const(0xf5160);
          frame.push(arg0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
          frame.push(arg3);
          return frame.pop();
        }
        frame.push(arg2);
        frame.push(arg0);
        frame.push(arg1);
        frame.push(arg3);
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.drop();
        frame.i32_const(0xf5160);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func018(t0, t1);
        }
      }
      frame.push(arg2);
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    return frame.pop();
  }

  void __rust_alloc_error_handler(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      __rg_oom(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func011(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 400);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(-8);
      frame.i32_and();
      frame.i32_add();
      frame.i32_const(8);
      frame.i32_add();
      local1 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 408);
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 0);
          local3 = frame.peek();
          frame.i32_const(1);
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_shl();
          local0 = frame.peek();
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_load(2, 8);
          local0 = frame.pop();
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(local3);
        frame.push(local0);
        frame.i32_or();
        frame.i32_store(2, 0);
        frame.push(local1);
        local0 = frame.pop();
      }
      frame.push(local1);
      frame.push(local2);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.push(local2);
      frame.i32_store(2, 12);
      frame.push(local2);
      frame.push(local1);
      frame.i32_store(2, 12);
      frame.push(local2);
      frame.push(local0);
      frame.i32_store(2, 8);
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 408);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 400);
  }

  void _func012(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(arg1);
      frame.push(arg2);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func013(t0, t1, t2);
      }
      return;
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_const(-8);
    frame.i32_and();
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.i32_const(1);
        frame.push(arg2);
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_shl();
        arg2 = frame.peek();
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_load(2, 8);
        arg2 = frame.pop();
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local1);
      frame.push(arg2);
      frame.i32_or();
      frame.i32_store(2, 0);
      frame.push(local0);
      arg2 = frame.pop();
    }
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 8);
    frame.push(arg2);
    frame.push(arg1);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_store(2, 8);
  }

  void _func013(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(31);
      local0 = frame.pop();
      frame.push(arg2);
      frame.i32_const(0xffffff);
      frame.i32_gt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg2);
      frame.i32_const(6);
      frame.push(arg2);
      frame.i32_const(8);
      frame.i32_shr_u();
      frame.i32_clz();
      local0 = frame.peek();
      frame.i32_sub();
      frame.i32_shr_u();
      frame.i32_const(1);
      frame.i32_and();
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_shl();
      frame.i32_sub();
      frame.i32_const(62);
      frame.i32_add();
      local0 = frame.pop();
    }
    frame.push(arg1);
    frame.i64_const(0);
    frame.i64_store(2, 16);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_store(2, 28);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(2);
    frame.i32_shl();
    frame.i32_add();
    frame.i32_const(272);
    frame.i32_add();
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 4);
        local2 = frame.peek();
        frame.i32_const(1);
        frame.push(local0);
        frame.i32_shl();
        local3 = frame.peek();
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg2);
        frame.i32_const(0);
        frame.i32_const(25);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.i32_const(31);
        frame.i32_and();
        frame.push(local0);
        frame.i32_const(31);
        frame.i32_eq();
        frame.select();
        frame.i32_shl();
        local0 = frame.pop();
        frame.push(local1);
        frame.i32_load(2, 0);
        local1 = frame.pop();

        loop_label_2:
        for (;;) {
          block_label_3:
          {
            frame.push(local1);
            arg0 = frame.peek();
            frame.i32_load(2, 4);
            frame.i32_const(-8);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_ne();
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg0);
            frame.i32_load(2, 8);
            local0 = frame.peek();
            frame.push(arg1);
            frame.i32_store(2, 12);
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_store(2, 8);
            frame.push(arg1);
            frame.i32_const(0);
            frame.i32_store(2, 24);
            frame.push(arg1);
            frame.push(arg0);
            frame.i32_store(2, 12);
            frame.push(arg1);
            frame.push(local0);
            frame.i32_store(2, 8);
            return;
          }
          frame.push(local0);
          frame.i32_const(29);
          frame.i32_shr_u();
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_shl();
          local0 = frame.pop();
          frame.push(arg0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_and();
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          local2 = frame.peek();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.push(local2);
        frame.push(arg1);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(arg0);
        frame.i32_store(2, 24);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local2);
      frame.push(local3);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_store(2, 24);
      frame.push(local1);
      frame.push(arg1);
      frame.i32_store(2, 0);
    }
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_store(2, 8);
  }

  void _func014(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(arg1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func015(t0, t1);
      }
      return;
    }
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_load(2, 12);
      local0 = frame.peek();
      frame.push(arg1);
      frame.i32_load(2, 8);
      arg1 = frame.peek();
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg1);
      frame.push(local0);
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 8);
      return;
    }
    frame.push(arg0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(-2);
    frame.push(arg2);
    frame.i32_const(3);
    frame.i32_shr_u();
    frame.i32_rotl();
    frame.i32_and();
    frame.i32_store(2, 0);
  }

  void _func015(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 24);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 12);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_const(16);
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_add();
          local1 = frame.peek();
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.select();
          frame.i32_add();
          frame.i32_load(2, 0);
          local3 = frame.peek();
          if (frame.pop() != 0) break block_label_1;
          frame.i32_const(0);
          local1 = frame.pop();
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_load(2, 8);
        local3 = frame.peek();
        frame.push(local1);
        frame.i32_store(2, 12);
        frame.push(local1);
        frame.push(local3);
        frame.i32_store(2, 8);
        break block_label_0;
      }
      frame.push(local1);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local2);
      frame.select();
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local2);
        local4 = frame.pop();
        block_label_2:
        {
          frame.push(local3);
          local1 = frame.peek();
          frame.i32_const(20);
          frame.i32_add();
          local2 = frame.peek();
          frame.i32_load(2, 0);
          local3 = frame.peek();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_const(16);
          frame.i32_add();
          local2 = frame.pop();
          frame.push(local1);
          frame.i32_load(2, 16);
          local3 = frame.pop();
        }
        frame.push(local3);
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
      frame.push(local4);
      frame.i32_const(0);
      frame.i32_store(2, 0);
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_load(2, 28);
          local2 = frame.peek();
          frame.i32_const(2);
          frame.i32_shl();
          frame.i32_add();
          frame.i32_const(272);
          frame.i32_add();
          local3 = frame.peek();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(16);
          frame.i32_const(20);
          frame.push(local0);
          frame.i32_load(2, 16);
          frame.push(arg1);
          frame.i32_eq();
          frame.select();
          frame.i32_add();
          frame.push(local1);
          frame.i32_store(2, 0);
          frame.push(local1);
          if (frame.pop() != 0) break block_label_1;
          break block_label_0;
        }
        frame.push(local3);
        frame.push(local1);
        frame.i32_store(2, 0);
        frame.push(local1);
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load(2, 4);
        frame.i32_const(-2);
        frame.push(local2);
        frame.i32_rotl();
        frame.i32_and();
        frame.i32_store(2, 4);
        return;
      }
      frame.push(local1);
      frame.push(local0);
      frame.i32_store(2, 24);
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 16);
        local3 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local1);
        frame.push(local3);
        frame.i32_store(2, 16);
        frame.push(local3);
        frame.push(local1);
        frame.i32_store(2, 24);
      }
      frame.push(arg1);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      local3 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local1);
      frame.i32_const(20);
      frame.i32_add();
      frame.push(local3);
      frame.i32_store(2, 0);
      frame.push(local3);
      frame.push(local1);
      frame.i32_store(2, 24);
      return;
    }
  }

  void _func016(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(1);
          frame.i32_and();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg1);
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          block_label_3:
          {
            frame.push(arg1);
            frame.push(local1);
            frame.i32_sub();
            arg1 = frame.peek();
            frame.push(arg0);
            frame.i32_load(2, 408);
            frame.i32_ne();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_load(2, 4);
            local1 = frame.peek();
            frame.i32_const(3);
            frame.i32_and();
            frame.i32_const(3);
            frame.i32_ne();
            if (frame.pop() != 0) break block_label_2;
            frame.push(local0);
            frame.push(local1);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_store(2, 400);
            frame.push(local0);
            frame.push(arg2);
            frame.i32_store(2, 0);
            return;
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.push(local1);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func014(t0, t1, t2);
          }
        }
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(2);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(-2);
          frame.i32_and();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_add();
          frame.push(arg2);
          frame.i32_store(2, 0);
          break block_label_0;
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.push(arg0);
            frame.i32_load(2, 412);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.push(arg0);
            frame.i32_load(2, 408);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg0);
            frame.push(local0);
            frame.push(local1);
            frame.i32_const(-8);
            frame.i32_and();
            local1 = frame.peek();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func014(t0, t1, t2);
            }
            frame.push(arg1);
            frame.push(local1);
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.peek();
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.push(arg0);
            frame.i32_load(2, 408);
            frame.i32_ne();
            if (frame.pop() != 0) break block_label_0;
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_store(2, 400);
            return;
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_store(2, 412);
          frame.push(arg0);
          frame.push(arg0);
          frame.i32_load(2, 404);
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.peek();
          frame.i32_store(2, 404);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg0);
          frame.i32_load(2, 408);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 400);
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 408);
          return;
        }
        frame.push(arg1);
        frame.push(arg0);
        frame.i32_load(2, 400);
        frame.push(arg2);
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 408);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 400);
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_add();
        frame.push(arg2);
        frame.i32_store(2, 0);
      }
      return;
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func012(t0, t1, t2);
    }
  }

  i32 _func017(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 4);
    local0 = frame.peek();
    frame.i32_const(-8);
    frame.i32_and();
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_const(3);
                  frame.i32_and();
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(arg1);
                  frame.push(local1);
                  frame.i32_add();
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.push(arg2);
                  frame.i32_ge_u();
                  if (frame.pop() != 0) break block_label_5;
                  frame.push(local2);
                  frame.push(arg0);
                  frame.i32_load(2, 412);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_4;
                  frame.push(local2);
                  frame.push(arg0);
                  frame.i32_load(2, 408);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_3;
                  frame.i32_const(0);
                  local3 = frame.pop();
                  frame.push(local2);
                  frame.i32_load(2, 4);
                  local0 = frame.peek();
                  frame.i32_const(2);
                  frame.i32_and();
                  if (frame.pop() != 0) break block_label_0;
                  frame.push(local0);
                  frame.i32_const(-8);
                  frame.i32_and();
                  local0 = frame.peek();
                  frame.push(local1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg2);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) break block_label_0;
                  frame.push(arg0);
                  frame.push(local2);
                  frame.push(local0);
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func014(t0, t1, t2);
                  }
                  frame.push(local1);
                  frame.push(arg2);
                  frame.i32_sub();
                  local0 = frame.peek();
                  frame.i32_const(16);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) break block_label_2;
                  frame.push(arg1);
                  frame.push(arg1);
                  frame.i32_load(2, 4);
                  frame.i32_const(1);
                  frame.i32_and();
                  frame.push(arg2);
                  frame.i32_or();
                  frame.i32_const(2);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg1);
                  frame.push(arg2);
                  frame.i32_add();
                  arg2 = frame.peek();
                  frame.push(local0);
                  frame.i32_const(3);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg1);
                  frame.push(local1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(local1);
                  frame.i32_load(2, 4);
                  frame.i32_const(1);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg0);
                  frame.push(arg2);
                  frame.push(local0);
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func016(t0, t1, t2);
                  }
                  break block_label_1;
                }
                frame.i32_const(0);
                local3 = frame.pop();
                frame.push(arg2);
                frame.i32_const(256);
                frame.i32_lt_u();
                if (frame.pop() != 0) break block_label_0;
                frame.push(arg1);
                frame.i32_const(0);
                frame.push(local1);
                frame.push(arg2);
                frame.i32_sub();
                frame.i32_const(0x20001);
                frame.i32_lt_u();
                frame.select();
                frame.i32_const(0);
                frame.push(local1);
                frame.push(arg2);
                frame.i32_const(4);
                frame.i32_add();
                frame.i32_ge_u();
                frame.select();
                local3 = frame.pop();
                break block_label_0;
              }
              frame.push(local1);
              frame.push(arg2);
              frame.i32_sub();
              local1 = frame.peek();
              frame.i32_const(16);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_1;
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_and();
              frame.push(arg2);
              frame.i32_or();
              frame.i32_const(2);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(arg2);
              frame.i32_add();
              arg2 = frame.peek();
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(local2);
              frame.push(local2);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg0);
              frame.push(arg2);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func016(t0, t1, t2);
              }
              break block_label_1;
            }
            frame.i32_const(0);
            local3 = frame.pop();
            frame.push(arg0);
            frame.i32_load(2, 404);
            frame.push(local1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(arg2);
            frame.i32_le_u();
            if (frame.pop() != 0) break block_label_0;
            frame.push(arg1);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_or();
            frame.i32_const(2);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_store(2, 412);
            frame.push(arg0);
            frame.push(local1);
            frame.push(arg2);
            frame.i32_sub();
            arg2 = frame.peek();
            frame.i32_store(2, 404);
            frame.push(local0);
            frame.push(arg2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            break block_label_1;
          }
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 400);
          frame.push(local1);
          frame.i32_add();
          local1 = frame.peek();
          frame.push(arg2);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_0;
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.push(arg2);
              frame.i32_sub();
              local2 = frame.peek();
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_and();
              frame.push(local1);
              frame.i32_or();
              frame.i32_const(2);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              arg2 = frame.peek();
              frame.push(arg2);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.i32_const(0);
              local2 = frame.pop();
              frame.i32_const(0);
              arg2 = frame.pop();
              break block_label_3;
            }
            frame.push(arg1);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_or();
            frame.i32_const(2);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.peek();
            frame.push(local2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(local2);
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.push(local1);
            frame.i32_load(2, 4);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
          }
          frame.push(arg0);
          frame.push(arg2);
          frame.i32_store(2, 408);
          frame.push(arg0);
          frame.push(local2);
          frame.i32_store(2, 400);
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(local1);
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_and();
        frame.i32_or();
        frame.i32_const(2);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local1);
        frame.i32_add();
        arg2 = frame.peek();
        frame.push(arg2);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
      }
      frame.push(arg1);
      return frame.pop();
    }
    frame.push(local3);
    return frame.pop();
  }

  void _func018(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_const(-8);
    frame.i32_add();
    local0 = frame.peek();
    frame.push(arg1);
    frame.i32_const(-4);
    frame.i32_add();
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-8);
    frame.i32_and();
    arg1 = frame.peek();
    frame.i32_add();
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.i32_const(1);
              frame.i32_and();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(local0);
              frame.i32_load(2, 0);
              local1 = frame.peek();
              frame.push(arg1);
              frame.i32_add();
              arg1 = frame.pop();
              block_label_5:
              {
                frame.push(local0);
                frame.push(local1);
                frame.i32_sub();
                local0 = frame.peek();
                frame.push(arg0);
                frame.i32_load(2, 408);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local2);
                frame.i32_load(2, 4);
                local1 = frame.peek();
                frame.i32_const(3);
                frame.i32_and();
                frame.i32_const(3);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_4;
                frame.push(local2);
                frame.push(local1);
                frame.i32_const(-2);
                frame.i32_and();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg0);
                frame.push(arg1);
                frame.i32_store(2, 400);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_add();
                frame.push(arg1);
                frame.i32_store(2, 0);
                return;
              }
              frame.push(arg0);
              frame.push(local0);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func014(t0, t1, t2);
              }
            }
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local2);
                frame.i32_load(2, 4);
                local1 = frame.peek();
                frame.i32_const(2);
                frame.i32_and();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local2);
                frame.push(local1);
                frame.i32_const(-2);
                frame.i32_and();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_add();
                frame.push(arg1);
                frame.i32_store(2, 0);
                break block_label_4;
              }
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(local2);
                      frame.push(arg0);
                      frame.i32_load(2, 412);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_8;
                      frame.push(local2);
                      frame.push(arg0);
                      frame.i32_load(2, 408);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_7;
                      frame.push(arg0);
                      frame.push(local2);
                      frame.push(local1);
                      frame.i32_const(-8);
                      frame.i32_and();
                      local1 = frame.peek();
                      {
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        _func014(t0, t1, t2);
                      }
                      frame.push(local0);
                      frame.push(local1);
                      frame.push(arg1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_const(1);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      frame.push(local0);
                      frame.push(arg1);
                      frame.i32_add();
                      frame.push(arg1);
                      frame.i32_store(2, 0);
                      frame.push(local0);
                      frame.push(arg0);
                      frame.i32_load(2, 408);
                      frame.i32_ne();
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(arg0);
                      frame.push(arg1);
                      frame.i32_store(2, 400);
                      return;
                    }
                    frame.push(arg0);
                    frame.push(local0);
                    frame.i32_store(2, 412);
                    frame.push(arg0);
                    frame.push(arg0);
                    frame.i32_load(2, 404);
                    frame.push(arg1);
                    frame.i32_add();
                    arg1 = frame.peek();
                    frame.i32_store(2, 404);
                    frame.push(local0);
                    frame.push(arg1);
                    frame.i32_const(1);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(local0);
                    frame.push(arg0);
                    frame.i32_load(2, 408);
                    frame.i32_eq();
                    if (frame.pop() != 0) break block_label_6;
                    break block_label_5;
                  }
                  frame.push(local0);
                  frame.push(arg0);
                  frame.i32_load(2, 400);
                  frame.push(arg1);
                  frame.i32_add();
                  arg1 = frame.peek();
                  frame.i32_const(1);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_store(2, 408);
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.i32_store(2, 400);
                  frame.push(local0);
                  frame.push(arg1);
                  frame.i32_add();
                  frame.push(arg1);
                  frame.i32_store(2, 0);
                  break block_label_3;
                }
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store(2, 400);
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store(2, 408);
              }
              frame.push(arg0);
              frame.i32_load(2, 440);
              frame.push(arg1);
              frame.i32_ge_u();
              if (frame.pop() != 0) break block_label_3;
              block_label_5:
              {
                frame.push(arg1);
                frame.i32_const(40);
                frame.i32_le_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(arg0);
                frame.i32_const(424);
                frame.i32_add();
                arg1 = frame.pop();

                loop_label_6:
                for (;;) {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.i32_load(2, 0);
                    local2 = frame.peek();
                    frame.push(local0);
                    frame.i32_gt_u();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local2);
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_add();
                    frame.push(local0);
                    frame.i32_gt_u();
                    if (frame.pop() != 0) break block_label_5;
                  }
                  frame.push(arg1);
                  frame.i32_load(2, 8);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) continue loop_label_6;
                  break;
                }
              }
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.i32_const(432);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(0xfff);
                  local0 = frame.pop();
                  break block_label_5;
                }
                frame.i32_const(0);
                local0 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_add();
                  local0 = frame.pop();
                  frame.push(arg1);
                  frame.i32_load(2, 8);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) continue loop_label_6;
                  break;
                }
                frame.push(local0);
                frame.i32_const(0xfff);
                frame.push(local0);
                frame.i32_const(0xfff);
                frame.i32_gt_u();
                frame.select();
                local0 = frame.pop();
              }
              frame.push(arg0);
              frame.i32_const(-1);
              frame.i32_store(2, 440);
              frame.push(arg0);
              frame.push(local0);
              frame.i32_store(2, 448);
              return;
            }
            frame.push(arg1);
            frame.i32_const(256);
            frame.i32_lt_u();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg0);
            frame.push(local0);
            frame.push(arg1);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func013(t0, t1, t2);
            }
            frame.push(arg0);
            frame.push(arg0);
            frame.i32_load(2, 448);
            frame.i32_const(-1);
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_store(2, 448);
            frame.push(local0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg0);
            frame.i32_const(432);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg1 = frame.peek();
            if (frame.pop() != 0) break block_label_1;
            frame.i32_const(0xfff);
            local0 = frame.pop();
            break block_label_0;
          }
          return;
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_const(-8);
        frame.i32_and();
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        local2 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load(2, 0);
            local1 = frame.peek();
            frame.i32_const(1);
            frame.push(arg1);
            frame.i32_const(3);
            frame.i32_shr_u();
            frame.i32_shl();
            arg1 = frame.peek();
            frame.i32_and();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local2);
            frame.i32_load(2, 8);
            arg0 = frame.pop();
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local1);
          frame.push(arg1);
          frame.i32_or();
          frame.i32_store(2, 0);
          frame.push(local2);
          arg0 = frame.pop();
        }
        frame.push(local2);
        frame.push(local0);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store(2, 12);
        frame.push(local0);
        frame.push(local2);
        frame.i32_store(2, 12);
        frame.push(local0);
        frame.push(arg0);
        frame.i32_store(2, 8);
        return;
      }
      frame.i32_const(0);
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 8);
        arg1 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
      frame.push(local0);
      frame.i32_const(0xfff);
      frame.push(local0);
      frame.i32_const(0xfff);
      frame.i32_gt_u();
      frame.select();
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 448);
  }

  i32 _func019(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i64 local8 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(245);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              local0 = frame.pop();
              frame.push(arg1);
              frame.i32_const(-0x10033);
              frame.i32_ge_u();
              if (frame.pop() != 0) break block_label_0;
              frame.push(arg1);
              frame.i32_const(11);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_const(-8);
              frame.i32_and();
              local1 = frame.pop();
              frame.push(arg0);
              frame.i32_load(2, 4);
              local2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(0);
              local3 = frame.pop();
              block_label_5:
              {
                frame.push(local1);
                frame.i32_const(256);
                frame.i32_lt_u();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(31);
                local3 = frame.pop();
                frame.push(local1);
                frame.i32_const(0xffffff);
                frame.i32_gt_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local1);
                frame.i32_const(6);
                frame.push(arg1);
                frame.i32_const(8);
                frame.i32_shr_u();
                frame.i32_clz();
                arg1 = frame.peek();
                frame.i32_sub();
                frame.i32_shr_u();
                frame.i32_const(1);
                frame.i32_and();
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_shl();
                frame.i32_sub();
                frame.i32_const(62);
                frame.i32_add();
                local3 = frame.pop();
              }
              frame.i32_const(0);
              frame.push(local1);
              frame.i32_sub();
              local4 = frame.pop();
              block_label_5:
              {
                frame.push(arg0);
                frame.push(local3);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_add();
                frame.i32_const(272);
                frame.i32_add();
                frame.i32_load(2, 0);
                arg1 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(0);
                local5 = frame.pop();
                frame.push(local1);
                frame.i32_const(0);
                frame.i32_const(25);
                frame.push(local3);
                frame.i32_const(1);
                frame.i32_shr_u();
                frame.i32_sub();
                frame.i32_const(31);
                frame.i32_and();
                frame.push(local3);
                frame.i32_const(31);
                frame.i32_eq();
                frame.select();
                frame.i32_shl();
                local0 = frame.pop();
                frame.i32_const(0);
                local6 = frame.pop();

                loop_label_6:
                for (;;) {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_const(-8);
                    frame.i32_and();
                    local7 = frame.peek();
                    frame.push(local1);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local7);
                    frame.push(local1);
                    frame.i32_sub();
                    local7 = frame.peek();
                    frame.push(local4);
                    frame.i32_ge_u();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local7);
                    local4 = frame.pop();
                    frame.push(arg1);
                    local6 = frame.pop();
                    frame.push(local7);
                    if (frame.pop() != 0) break block_label_7;
                    frame.i32_const(0);
                    local4 = frame.pop();
                    frame.push(arg1);
                    local6 = frame.pop();
                    break block_label_3;
                  }
                  frame.push(arg1);
                  frame.i32_const(20);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  local7 = frame.peek();
                  frame.push(local5);
                  frame.push(local7);
                  frame.push(arg1);
                  frame.push(local0);
                  frame.i32_const(29);
                  frame.i32_shr_u();
                  frame.i32_const(4);
                  frame.i32_and();
                  frame.i32_add();
                  frame.i32_const(16);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  frame.i32_ne();
                  frame.select();
                  frame.push(local5);
                  frame.push(local7);
                  frame.select();
                  local5 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_shl();
                  local0 = frame.pop();
                  frame.push(arg1);
                  if (frame.pop() != 0) continue loop_label_6;
                  break;
                }
                block_label_6:
                {
                  frame.push(local5);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(local5);
                  arg1 = frame.pop();
                  break block_label_3;
                }
                frame.push(local6);
                if (frame.pop() != 0) break block_label_2;
              }
              frame.i32_const(0);
              local6 = frame.pop();
              frame.i32_const(2);
              frame.push(local3);
              frame.i32_shl();
              arg1 = frame.peek();
              frame.i32_const(0);
              frame.push(arg1);
              frame.i32_sub();
              frame.i32_or();
              frame.push(local2);
              frame.i32_and();
              arg1 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.push(arg0);
              frame.push(arg1);
              frame.i32_const(0);
              frame.push(arg1);
              frame.i32_sub();
              frame.i32_and();
              frame.i32_ctz();
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.i32_const(272);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg1 = frame.peek();
              if (frame.pop() != 0) break block_label_3;
              break block_label_1;
            }
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.i32_load(2, 0);
                  local0 = frame.peek();
                  frame.i32_const(16);
                  frame.push(arg1);
                  frame.i32_const(11);
                  frame.i32_add();
                  frame.i32_const(-8);
                  frame.i32_and();
                  frame.push(arg1);
                  frame.i32_const(11);
                  frame.i32_lt_u();
                  frame.select();
                  local1 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_shr_u();
                  local4 = frame.peek();
                  frame.i32_shr_u();
                  arg1 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_and();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(local1);
                  frame.push(arg0);
                  frame.i32_load(2, 400);
                  frame.i32_le_u();
                  if (frame.pop() != 0) break block_label_1;
                  frame.push(arg1);
                  if (frame.pop() != 0) break block_label_5;
                  frame.push(arg0);
                  frame.i32_load(2, 4);
                  arg1 = frame.peek();
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_1;
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_and();
                  frame.i32_ctz();
                  frame.i32_const(2);
                  frame.i32_shl();
                  frame.i32_add();
                  frame.i32_const(272);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  local5 = frame.peek();
                  frame.i32_load(2, 4);
                  frame.i32_const(-8);
                  frame.i32_and();
                  frame.push(local1);
                  frame.i32_sub();
                  local4 = frame.pop();
                  frame.push(local5);
                  local0 = frame.pop();

                  loop_label_7:
                  for (;;) {
                    block_label_8:
                    {
                      frame.push(local5);
                      frame.i32_load(2, 16);
                      arg1 = frame.peek();
                      if (frame.pop() != 0) break block_label_8;
                      frame.push(local5);
                      frame.i32_const(20);
                      frame.i32_add();
                      frame.i32_load(2, 0);
                      arg1 = frame.peek();
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_4;
                    }
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_const(-8);
                    frame.i32_and();
                    frame.push(local1);
                    frame.i32_sub();
                    local5 = frame.peek();
                    frame.push(local4);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_lt_u();
                    local5 = frame.peek();
                    frame.select();
                    local4 = frame.pop();
                    frame.push(arg1);
                    frame.push(local0);
                    frame.push(local5);
                    frame.select();
                    local0 = frame.pop();
                    frame.push(arg1);
                    local5 = frame.pop();
                    continue loop_label_7;
                    break;
                  }
                }
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg0);
                    frame.push(arg1);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.i32_const(1);
                    frame.i32_and();
                    frame.push(local4);
                    frame.i32_add();
                    local1 = frame.peek();
                    frame.i32_const(3);
                    frame.i32_shl();
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_const(16);
                    frame.i32_add();
                    frame.i32_load(2, 0);
                    arg1 = frame.peek();
                    frame.i32_load(2, 8);
                    local4 = frame.peek();
                    frame.push(local5);
                    frame.i32_const(8);
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_eq();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local4);
                    frame.push(local5);
                    frame.i32_store(2, 12);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_store(2, 8);
                    break block_label_6;
                  }
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_const(-2);
                  frame.push(local1);
                  frame.i32_rotl();
                  frame.i32_and();
                  frame.i32_store(2, 0);
                }
                frame.push(arg1);
                frame.push(local1);
                frame.i32_const(3);
                frame.i32_shl();
                local1 = frame.peek();
                frame.i32_const(3);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.push(local1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local1);
                frame.i32_load(2, 4);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.i32_const(8);
                frame.i32_add();
                return frame.pop();
              }
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.push(local4);
                  frame.i32_shl();
                  frame.i32_const(2);
                  frame.push(local4);
                  frame.i32_shl();
                  arg1 = frame.peek();
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_or();
                  frame.i32_and();
                  arg1 = frame.peek();
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_and();
                  frame.i32_ctz();
                  local4 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_shl();
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_const(16);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  frame.i32_load(2, 8);
                  local5 = frame.peek();
                  frame.push(local6);
                  frame.i32_const(8);
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(local5);
                  frame.push(local6);
                  frame.i32_store(2, 12);
                  frame.push(local6);
                  frame.push(local5);
                  frame.i32_store(2, 8);
                  break block_label_5;
                }
                frame.push(arg0);
                frame.push(local0);
                frame.i32_const(-2);
                frame.push(local4);
                frame.i32_rotl();
                frame.i32_and();
                frame.i32_store(2, 0);
              }
              frame.push(arg1);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              local5 = frame.peek();
              frame.push(local4);
              frame.i32_const(3);
              frame.i32_shl();
              local4 = frame.peek();
              frame.push(local1);
              frame.i32_sub();
              local1 = frame.peek();
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local4);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.push(local5);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func011(t0, t1, t2);
              }
              frame.push(arg1);
              frame.i32_const(8);
              frame.i32_add();
              return frame.pop();
            }
            frame.push(arg0);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func015(t0, t1);
            }
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local4);
                frame.i32_const(16);
                frame.i32_lt_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.push(local1);
                frame.i32_const(3);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(local1);
                frame.i32_add();
                arg1 = frame.peek();
                frame.push(local4);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.push(local4);
                frame.i32_add();
                frame.push(local4);
                frame.i32_store(2, 0);
                frame.push(arg0);
                frame.push(arg1);
                frame.push(local4);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func011(t0, t1, t2);
                }
                break block_label_4;
              }
              frame.push(local0);
              frame.push(local4);
              frame.push(local1);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_add();
              arg1 = frame.peek();
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
            }
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            return frame.pop();
          }

          loop_label_3:
          for (;;) {
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_const(-8);
            frame.i32_and();
            local5 = frame.peek();
            frame.push(local1);
            frame.i32_ge_u();
            frame.push(local5);
            frame.push(local1);
            frame.i32_sub();
            local7 = frame.peek();
            frame.push(local4);
            frame.i32_lt_u();
            frame.i32_and();
            local0 = frame.pop();
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 16);
              local5 = frame.peek();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.i32_const(20);
              frame.i32_add();
              frame.i32_load(2, 0);
              local5 = frame.pop();
            }
            frame.push(arg1);
            frame.push(local6);
            frame.push(local0);
            frame.select();
            local6 = frame.pop();
            frame.push(local7);
            frame.push(local4);
            frame.push(local0);
            frame.select();
            local4 = frame.pop();
            frame.push(local5);
            arg1 = frame.pop();
            frame.push(local5);
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.push(local6);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
        }
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 400);
          arg1 = frame.peek();
          frame.push(local1);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local4);
          frame.push(arg1);
          frame.push(local1);
          frame.i32_sub();
          frame.i32_ge_u();
          if (frame.pop() != 0) break block_label_1;
        }
        frame.push(arg0);
        frame.push(local6);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func015(t0, t1);
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local4);
            frame.i32_const(16);
            frame.i32_lt_u();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local6);
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(local6);
            frame.push(local1);
            frame.i32_add();
            arg1 = frame.peek();
            frame.push(local4);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local4);
            frame.i32_add();
            frame.push(local4);
            frame.i32_store(2, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(local4);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func012(t0, t1, t2);
            }
            break block_label_2;
          }
          frame.push(local6);
          frame.push(local4);
          frame.push(local1);
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_const(3);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(local6);
          frame.push(arg1);
          frame.i32_add();
          arg1 = frame.peek();
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
        }
        frame.push(local6);
        frame.i32_const(8);
        frame.i32_add();
        return frame.pop();
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(arg0);
                              frame.i32_load(2, 400);
                              arg1 = frame.peek();
                              frame.push(local1);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) break block_label_12;
                              frame.push(arg0);
                              frame.i32_load(2, 404);
                              arg1 = frame.peek();
                              frame.push(local1);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) break block_label_8;
                              frame.i32_const(0);
                              local0 = frame.pop();
                              frame.push(local1);
                              frame.i32_const(0x1002f);
                              frame.i32_add();
                              local4 = frame.peek();
                              frame.i32_const(16);
                              frame.i32_shr_u();
                              frame.memory_grow(0);
                              arg1 = frame.peek();
                              frame.i32_const(-1);
                              frame.i32_eq();
                              local5 = frame.peek();
                              if (frame.pop() != 0) break block_label_0;
                              frame.push(arg1);
                              frame.i32_const(16);
                              frame.i32_shl();
                              local6 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_0;
                              frame.push(arg0);
                              frame.push(arg0);
                              frame.i32_load(2, 416);
                              frame.i32_const(0);
                              frame.push(local4);
                              frame.i32_const(-0x10000);
                              frame.i32_and();
                              frame.push(local5);
                              frame.select();
                              local3 = frame.peek();
                              frame.i32_add();
                              arg1 = frame.peek();
                              frame.i32_store(2, 416);
                              frame.push(arg0);
                              frame.push(arg0);
                              frame.i32_load(2, 420);
                              local4 = frame.peek();
                              frame.push(arg1);
                              frame.push(local4);
                              frame.push(arg1);
                              frame.i32_gt_u();
                              frame.select();
                              frame.i32_store(2, 420);
                              frame.push(arg0);
                              frame.i32_load(2, 412);
                              local4 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_11;
                              frame.push(arg0);
                              frame.i32_const(424);
                              frame.i32_add();
                              local2 = frame.peek();
                              arg1 = frame.pop();

                              loop_label_13:
                              for (;;) {
                                frame.push(arg1);
                                frame.i32_load(2, 0);
                                local5 = frame.peek();
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                local7 = frame.peek();
                                frame.i32_add();
                                frame.push(local6);
                                frame.i32_eq();
                                if (frame.pop() != 0) break block_label_10;
                                frame.push(arg1);
                                frame.i32_load(2, 8);
                                arg1 = frame.peek();
                                if (frame.pop() != 0) continue loop_label_13;
                                break block_label_9;
                                break;
                              }
                            }
                            frame.push(arg0);
                            frame.i32_load(2, 408);
                            local4 = frame.pop();
                            block_label_12:
                            {
                              block_label_13:
                              {
                                frame.push(arg1);
                                frame.push(local1);
                                frame.i32_sub();
                                local5 = frame.peek();
                                frame.i32_const(15);
                                frame.i32_gt_u();
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(arg0);
                                frame.i32_const(0);
                                frame.i32_store(2, 408);
                                frame.push(arg0);
                                frame.i32_const(0);
                                frame.i32_store(2, 400);
                                frame.push(local4);
                                frame.push(arg1);
                                frame.i32_const(3);
                                frame.i32_or();
                                frame.i32_store(2, 4);
                                frame.push(local4);
                                frame.push(arg1);
                                frame.i32_add();
                                arg1 = frame.peek();
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                frame.i32_const(1);
                                frame.i32_or();
                                frame.i32_store(2, 4);
                                break block_label_12;
                              }
                              frame.push(arg0);
                              frame.push(local5);
                              frame.i32_store(2, 400);
                              frame.push(arg0);
                              frame.push(local4);
                              frame.push(local1);
                              frame.i32_add();
                              local0 = frame.peek();
                              frame.i32_store(2, 408);
                              frame.push(local0);
                              frame.push(local5);
                              frame.i32_const(1);
                              frame.i32_or();
                              frame.i32_store(2, 4);
                              frame.push(local4);
                              frame.push(arg1);
                              frame.i32_add();
                              frame.push(local5);
                              frame.i32_store(2, 0);
                              frame.push(local4);
                              frame.push(local1);
                              frame.i32_const(3);
                              frame.i32_or();
                              frame.i32_store(2, 4);
                            }
                            frame.push(local4);
                            frame.i32_const(8);
                            frame.i32_add();
                            return frame.pop();
                          }
                          frame.push(arg0);
                          frame.i32_load(2, 444);
                          arg1 = frame.peek();
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_7;
                          frame.push(arg1);
                          frame.push(local6);
                          frame.i32_gt_u();
                          if (frame.pop() != 0) break block_label_7;
                          break block_label_2;
                        }
                        frame.push(arg1);
                        frame.i32_load(2, 12);
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_gt_u();
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(local4);
                        frame.push(local6);
                        frame.i32_lt_u();
                        if (frame.pop() != 0) break block_label_6;
                      }
                      frame.push(arg0);
                      frame.push(arg0);
                      frame.i32_load(2, 444);
                      arg1 = frame.peek();
                      frame.push(local6);
                      frame.push(arg1);
                      frame.push(local6);
                      frame.i32_lt_u();
                      frame.select();
                      frame.i32_store(2, 444);
                      frame.push(local6);
                      frame.push(local3);
                      frame.i32_add();
                      local5 = frame.pop();
                      frame.push(local2);
                      arg1 = frame.pop();
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            loop_label_12:
                            for (;;) {
                              frame.push(arg1);
                              frame.i32_load(2, 0);
                              frame.push(local5);
                              frame.i32_eq();
                              if (frame.pop() != 0) break block_label_11;
                              frame.push(arg1);
                              frame.i32_load(2, 8);
                              arg1 = frame.peek();
                              if (frame.pop() != 0) continue loop_label_12;
                              break block_label_10;
                              break;
                            }
                          }
                          frame.push(arg1);
                          frame.i32_load(2, 12);
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_9;
                        }
                        frame.push(local2);
                        arg1 = frame.pop();
                        block_label_10:
                        {
                          loop_label_11:
                          for (;;) {
                            block_label_12:
                            {
                              frame.push(arg1);
                              frame.i32_load(2, 0);
                              local5 = frame.peek();
                              frame.push(local4);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) break block_label_12;
                              frame.push(local5);
                              frame.push(arg1);
                              frame.i32_load(2, 4);
                              frame.i32_add();
                              local5 = frame.peek();
                              frame.push(local4);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) break block_label_10;
                            }
                            frame.push(arg1);
                            frame.i32_load(2, 8);
                            arg1 = frame.pop();
                            continue loop_label_11;
                            break;
                          }
                        }
                        frame.push(local6);
                        frame.push(local3);
                        frame.i32_const(-40);
                        frame.i32_add();
                        arg1 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_or();
                        frame.i32_store(2, 4);
                        frame.push(local6);
                        frame.push(arg1);
                        frame.i32_add();
                        frame.i32_const(40);
                        frame.i32_store(2, 4);
                        frame.push(local4);
                        frame.push(local5);
                        frame.i32_const(-32);
                        frame.i32_add();
                        frame.i32_const(-8);
                        frame.i32_and();
                        frame.i32_const(-8);
                        frame.i32_add();
                        local7 = frame.peek();
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_const(16);
                        frame.i32_add();
                        frame.i32_lt_u();
                        frame.select();
                        local7 = frame.peek();
                        frame.i32_const(27);
                        frame.i32_store(2, 4);
                        frame.push(arg0);
                        frame.push(local6);
                        frame.i32_store(2, 412);
                        frame.push(arg0);
                        frame.i32_const(0x200000);
                        frame.i32_store(2, 440);
                        frame.push(arg0);
                        frame.push(arg1);
                        frame.i32_store(2, 404);
                        frame.push(local2);
                        frame.i64_load(2, 0);
                        local8 = frame.pop();
                        frame.push(local7);
                        frame.i32_const(16);
                        frame.i32_add();
                        frame.push(local2);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.i64_load(2, 0);
                        frame.i64_store(2, 0);
                        frame.push(local7);
                        frame.push(local8);
                        frame.i64_store(2, 8);
                        frame.push(arg0);
                        frame.i32_const(436);
                        frame.i32_add();
                        frame.i32_const(0);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.i32_const(428);
                        frame.i32_add();
                        frame.push(local3);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.push(local6);
                        frame.i32_store(2, 424);
                        frame.push(arg0);
                        frame.i32_const(432);
                        frame.i32_add();
                        frame.push(local7);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.i32_store(2, 0);
                        frame.push(local7);
                        frame.i32_const(28);
                        frame.i32_add();
                        arg1 = frame.pop();

                        loop_label_10:
                        for (;;) {
                          frame.push(arg1);
                          frame.i32_const(7);
                          frame.i32_store(2, 0);
                          frame.push(local5);
                          frame.push(arg1);
                          frame.i32_const(4);
                          frame.i32_add();
                          arg1 = frame.peek();
                          frame.i32_gt_u();
                          if (frame.pop() != 0) continue loop_label_10;
                          break;
                        }
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_eq();
                        if (frame.pop() != 0) break block_label_1;
                        frame.push(local7);
                        frame.push(local7);
                        frame.i32_load(2, 4);
                        frame.i32_const(-2);
                        frame.i32_and();
                        frame.i32_store(2, 4);
                        frame.push(local4);
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_sub();
                        arg1 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_or();
                        frame.i32_store(2, 4);
                        frame.push(local7);
                        frame.push(arg1);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.push(local4);
                        frame.push(arg1);
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func012(t0, t1, t2);
                        }
                        break block_label_1;
                      }
                      frame.push(arg1);
                      frame.push(local6);
                      frame.i32_store(2, 0);
                      frame.push(arg1);
                      frame.push(arg1);
                      frame.i32_load(2, 4);
                      frame.push(local3);
                      frame.i32_add();
                      frame.i32_store(2, 4);
                      frame.push(local6);
                      frame.push(local1);
                      frame.i32_const(3);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      frame.push(local5);
                      frame.push(local6);
                      frame.push(local1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_sub();
                      local1 = frame.pop();
                      block_label_9:
                      {
                        frame.push(arg0);
                        frame.i32_load(2, 412);
                        frame.push(local5);
                        frame.i32_eq();
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(arg0);
                        frame.i32_load(2, 408);
                        frame.push(local5);
                        frame.i32_eq();
                        if (frame.pop() != 0) break block_label_5;
                        frame.push(local5);
                        frame.i32_load(2, 4);
                        local4 = frame.peek();
                        frame.i32_const(3);
                        frame.i32_and();
                        frame.i32_const(1);
                        frame.i32_ne();
                        if (frame.pop() != 0) break block_label_4;
                        frame.push(arg0);
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_const(-8);
                        frame.i32_and();
                        local4 = frame.peek();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func014(t0, t1, t2);
                        }
                        frame.push(local4);
                        frame.push(local1);
                        frame.i32_add();
                        local1 = frame.pop();
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_add();
                        local5 = frame.peek();
                        frame.i32_load(2, 4);
                        local4 = frame.pop();
                        break block_label_4;
                      }
                      frame.push(arg0);
                      frame.push(arg1);
                      frame.i32_store(2, 412);
                      frame.push(arg0);
                      frame.push(arg0);
                      frame.i32_load(2, 404);
                      frame.push(local1);
                      frame.i32_add();
                      local1 = frame.peek();
                      frame.i32_store(2, 404);
                      frame.push(arg1);
                      frame.push(local1);
                      frame.i32_const(1);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      break block_label_3;
                    }
                    frame.push(arg0);
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_sub();
                    local4 = frame.peek();
                    frame.i32_store(2, 404);
                    frame.push(arg0);
                    frame.push(arg0);
                    frame.i32_load(2, 412);
                    arg1 = frame.peek();
                    frame.push(local1);
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_store(2, 412);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_const(1);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_const(3);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(arg1);
                    frame.i32_const(8);
                    frame.i32_add();
                    local0 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(arg0);
                  frame.push(local6);
                  frame.i32_store(2, 444);
                  break block_label_2;
                }
                frame.push(arg1);
                frame.push(local7);
                frame.push(local3);
                frame.i32_add();
                frame.i32_store(2, 4);
                frame.push(arg0);
                frame.i32_load(2, 412);
                arg1 = frame.peek();
                frame.i32_const(15);
                frame.i32_add();
                frame.i32_const(-8);
                frame.i32_and();
                local4 = frame.peek();
                frame.i32_const(-4);
                frame.i32_add();
                frame.push(arg1);
                frame.push(local4);
                frame.i32_sub();
                frame.push(arg0);
                frame.i32_load(2, 404);
                frame.push(local3);
                frame.i32_add();
                local5 = frame.peek();
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 0);
                frame.push(arg0);
                frame.i32_const(0x200000);
                frame.i32_store(2, 440);
                frame.push(arg0);
                frame.push(local4);
                frame.i32_const(-8);
                frame.i32_add();
                frame.i32_store(2, 412);
                frame.push(arg0);
                frame.push(local6);
                frame.i32_store(2, 404);
                frame.push(arg1);
                frame.push(local5);
                frame.i32_add();
                frame.i32_const(40);
                frame.i32_store(2, 4);
                break block_label_1;
              }
              frame.push(arg1);
              frame.push(arg0);
              frame.i32_load(2, 400);
              frame.push(local1);
              frame.i32_add();
              local1 = frame.peek();
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg0);
              frame.push(arg1);
              frame.i32_store(2, 408);
              frame.push(arg0);
              frame.push(local1);
              frame.i32_store(2, 400);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
              break block_label_3;
            }
            frame.push(local5);
            frame.push(local4);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_add();
            frame.push(local1);
            frame.i32_store(2, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(local1);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func012(t0, t1, t2);
            }
          }
          frame.push(local6);
          frame.i32_const(8);
          frame.i32_add();
          return frame.pop();
        }
        frame.push(arg0);
        frame.i32_const(0xfff);
        frame.i32_store(2, 448);
        frame.push(arg0);
        frame.push(local6);
        frame.i32_store(2, 424);
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(436);
        frame.i32_add();
        frame.i32_const(0);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(428);
        frame.i32_add();
        frame.push(local3);
        frame.i32_store(2, 0);

        loop_label_2:
        for (;;) {
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_add();
          local4 = frame.peek();
          frame.i32_const(16);
          frame.i32_add();
          frame.push(local4);
          frame.i32_const(8);
          frame.i32_add();
          local5 = frame.peek();
          frame.i32_store(2, 0);
          frame.push(local4);
          frame.i32_const(20);
          frame.i32_add();
          frame.push(local5);
          frame.i32_store(2, 0);
          frame.push(arg1);
          frame.i32_const(8);
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_const(256);
          frame.i32_ne();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.push(local6);
        frame.push(local3);
        frame.i32_const(-40);
        frame.i32_add();
        arg1 = frame.peek();
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(local6);
        frame.i32_store(2, 412);
        frame.push(arg0);
        frame.i32_const(0x200000);
        frame.i32_store(2, 440);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 404);
        frame.push(local6);
        frame.push(arg1);
        frame.i32_add();
        frame.i32_const(40);
        frame.i32_store(2, 4);
      }
      frame.push(arg0);
      frame.i32_load(2, 404);
      arg1 = frame.peek();
      frame.push(local1);
      frame.i32_le_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_store(2, 404);
      frame.push(arg0);
      frame.push(arg0);
      frame.i32_load(2, 412);
      arg1 = frame.peek();
      frame.push(local1);
      frame.i32_add();
      local5 = frame.peek();
      frame.i32_store(2, 412);
      frame.push(local5);
      frame.push(local4);
      frame.i32_const(1);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_const(3);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_add();
      return frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func020(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.i32_const(-0x10033);
      frame.push(arg1);
      frame.i32_const(16);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_sub();
      frame.push(arg2);
      frame.i32_le_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_const(16);
      frame.push(arg2);
      frame.i32_const(11);
      frame.i32_add();
      frame.i32_const(-8);
      frame.i32_and();
      frame.push(arg2);
      frame.i32_const(11);
      frame.i32_lt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func019(t0, t1));
      }
      arg2 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg2);
      frame.i32_const(-8);
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(-1);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(arg2);
          frame.i32_and();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          arg1 = frame.pop();
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_const(-4);
        frame.i32_add();
        local3 = frame.peek();
        frame.i32_load(2, 0);
        local4 = frame.peek();
        frame.i32_const(-8);
        frame.i32_and();
        frame.push(local2);
        frame.push(arg2);
        frame.i32_add();
        frame.i32_const(0);
        frame.push(arg1);
        frame.i32_sub();
        frame.i32_and();
        frame.i32_const(-8);
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_const(0);
        frame.push(arg1);
        frame.push(arg2);
        frame.push(local0);
        frame.i32_sub();
        frame.i32_const(16);
        frame.i32_gt_u();
        frame.select();
        frame.i32_add();
        arg1 = frame.peek();
        frame.push(local0);
        frame.i32_sub();
        arg2 = frame.peek();
        frame.i32_sub();
        local2 = frame.pop();
        block_label_2:
        {
          frame.push(local4);
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.push(local2);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_and();
          frame.i32_or();
          frame.i32_const(2);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(local2);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(local3);
          frame.push(arg2);
          frame.push(local3);
          frame.i32_load(2, 0);
          frame.i32_const(1);
          frame.i32_and();
          frame.i32_or();
          frame.i32_const(2);
          frame.i32_or();
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg0);
          frame.push(local0);
          frame.push(arg2);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func016(t0, t1, t2);
          }
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 0);
        local0 = frame.pop();
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local0);
        frame.push(arg2);
        frame.i32_add();
        frame.i32_store(2, 0);
      }
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg2 = frame.peek();
        frame.i32_const(3);
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg2);
        frame.i32_const(-8);
        frame.i32_and();
        local0 = frame.peek();
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_le_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.push(local1);
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_and();
        frame.i32_or();
        frame.i32_const(2);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local1);
        frame.i32_add();
        arg2 = frame.peek();
        frame.push(local0);
        frame.push(local1);
        frame.i32_sub();
        local1 = frame.peek();
        frame.i32_const(3);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local0);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.push(local1);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func016(t0, t1, t2);
        }
      }
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_add();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  void _rust_oom(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _ZN4core10intrinsics17const_eval_select17hb4bcbe4c479453feE(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func023(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func023(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5alloc5alloc18handle_alloc_error8rt_error17h40f589d8a9cac34fE(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _ZN5alloc5alloc18handle_alloc_error8rt_error17h40f589d8a9cac34fE(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      __rust_alloc_error_handler(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func025(i32 arg0) {
    final frame = Frame(this);
  }

  i32 _func026(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(128);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 12);
              frame.push(arg1);
              frame.i32_const(0x800);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_3;
              frame.push(arg1);
              frame.i32_const(0x10000);
              frame.i32_ge_u();
              if (frame.pop() != 0) break block_label_2;
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 14);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(12);
              frame.i32_shr_u();
              frame.i32_const(224);
              frame.i32_or();
              frame.i32_store8(0, 12);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(6);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 13);
              frame.i32_const(3);
              arg1 = frame.pop();
              break block_label_1;
            }
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load(2, 8);
              local1 = frame.peek();
              frame.push(arg0);
              frame.i32_load(2, 4);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg0);
              frame.push(local1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func027(t0, t1);
              }
              frame.push(arg0);
              frame.i32_load(2, 8);
              local1 = frame.pop();
            }
            frame.push(arg0);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            frame.i32_store(2, 8);
            frame.push(arg0);
            frame.i32_load(2, 0);
            frame.push(local1);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_store8(0, 0);
            break block_label_0;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(63);
          frame.i32_and();
          frame.i32_const(128);
          frame.i32_or();
          frame.i32_store8(0, 13);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(6);
          frame.i32_shr_u();
          frame.i32_const(192);
          frame.i32_or();
          frame.i32_store8(0, 12);
          frame.i32_const(2);
          arg1 = frame.pop();
          break block_label_1;
        }
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 15);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(18);
        frame.i32_shr_u();
        frame.i32_const(240);
        frame.i32_or();
        frame.i32_store8(0, 12);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(6);
        frame.i32_shr_u();
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 14);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_shr_u();
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 13);
        frame.i32_const(4);
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func028(t0, t1, t2);
      }
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    return frame.pop();
  }

  void _func027(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func034(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func028(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_sub();
      frame.push(arg2);
      frame.push(arg1);
      frame.i32_sub();
      arg2 = frame.peek();
      frame.i32_ge_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.push(local0);
      frame.push(arg2);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2);
      }
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(local0);
    frame.i32_add();
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_memcpy(t0, t1, t2));
    }
    frame.drop();
    frame.push(arg0);
    frame.push(local0);
    frame.push(arg2);
    frame.i32_add();
    frame.i32_store(2, 8);
  }

  i32 _func029(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_store(2, 4);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 8);
    frame.push(local0);
    frame.i32_const(4);
    frame.i32_add();
    frame.i32_const(0xf4240);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func030(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func028(t0, t1, t2);
    }
    frame.i32_const(0);
    return frame.pop();
  }

  void _func031(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(0);
          frame.i32_lt_s();
          if (frame.pop() != 0) break block_label_2;
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg2);
                if (frame.pop() != 0) break block_label_5;
                frame.push(arg1);
                if (frame.pop() != 0) break block_label_4;
                break block_label_1;
              }
              frame.push(arg1);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(0xf5160);
              frame.push(arg1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func019(t0, t1));
              }
              arg2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(arg2);
              frame.i32_const(-4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.push(arg2);
              frame.i32_const(0);
              frame.push(arg1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memset(t0, t1, t2));
              }
              frame.drop();
              break block_label_0;
            }
            frame.i32_const(0xf5160);
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_0;
          }
          frame.push(arg1);
          frame.i32_const(1);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
          }
          throw Trap('unreachable');
        }
        throw Trap('unreachable');
        throw Trap('unreachable');
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
  }

  void _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN4core10intrinsics17const_eval_select17hb4bcbe4c479453feE(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func033(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func034(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg2 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func034(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.push(arg3);
        frame.i32_add();
        arg3 = frame.peek();
        frame.push(arg2);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg2 = frame.peek();
        frame.i32_const(1);
        frame.i32_shl();
        local1 = frame.peek();
        frame.push(arg3);
        frame.push(local1);
        frame.push(arg3);
        frame.i32_gt_u();
        frame.select();
        arg3 = frame.peek();
        frame.i32_const(8);
        frame.push(arg3);
        frame.i32_const(8);
        frame.i32_gt_u();
        frame.select();
        arg3 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(16);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(1);
            frame.i32_store(2, 0);
            frame.push(local0);
            frame.push(arg2);
            frame.i32_store(2, 20);
            frame.push(local0);
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_store(2, 16);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 16);
        }
        frame.i32_const(1);
        arg2 = frame.pop();
        frame.push(local0);
        frame.push(arg3);
        frame.i32_const(1);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local0);
        {
          var t4 = frame.pop();
          var t3 = frame.pop();
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
        }
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 0);
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_load(2, 4);
          arg2 = frame.pop();
          frame.push(arg1);
          frame.push(arg3);
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_store(2, 0);
          frame.i32_const(0);
          arg2 = frame.pop();
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i64_load(2, 4);
        frame.i64_store(2, 4);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg3);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(0);
      frame.i32_store(2, 0);
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(i32 arg0, i32 arg1, i32 arg2, i32 arg3, i32 arg4) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            local0 = frame.pop();
            frame.push(arg1);
            frame.i32_const(0);
            frame.i32_ge_s();
            if (frame.pop() != 0) break block_label_2;
            break block_label_1;
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_store(2, 4);
          frame.i32_const(1);
          local0 = frame.pop();
          break block_label_1;
        }
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg3);
                frame.i32_load(2, 0);
                local1 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                block_label_6:
                {
                  frame.push(arg3);
                  frame.i32_load(2, 4);
                  arg3 = frame.peek();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(arg1);
                  if (frame.pop() != 0) break block_label_4;
                  break block_label_3;
                }
                frame.push(local1);
                frame.push(arg3);
                frame.push(arg2);
                frame.push(arg1);
                {
                  var t3 = frame.pop();
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(__rust_realloc(t0, t1, t2, t3));
                }
                arg3 = frame.pop();
                break block_label_2;
              }
              frame.push(arg1);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
            }
            frame.push(arg1);
            frame.push(arg2);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(__rust_alloc(t0, t1));
            }
            arg3 = frame.pop();
            break block_label_2;
          }
          frame.push(arg2);
          arg3 = frame.pop();
        }
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.push(arg3);
          frame.i32_store(2, 4);
          frame.i32_const(0);
          local0 = frame.pop();
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 4);
        frame.push(arg2);
        arg1 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(0);
      arg1 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void __rg_oom(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _rust_oom(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _ZN5alloc3fmt6format17h02f2f8599a399bc1E(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 4);
            local1 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_shl();
            local2 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 0);
            local3 = frame.peek();
            frame.i32_const(4);
            frame.i32_add();
            local1 = frame.pop();
            frame.i32_const(0);
            local4 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local1);
              frame.i32_load(2, 0);
              frame.push(local4);
              frame.i32_add();
              local4 = frame.pop();
              frame.push(local1);
              frame.i32_const(8);
              frame.i32_add();
              local1 = frame.pop();
              frame.push(local2);
              frame.i32_const(-8);
              frame.i32_add();
              local2 = frame.peek();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
            frame.push(arg1);
            frame.i32_const(20);
            frame.i32_add();
            frame.i32_load(2, 0);
            if (frame.pop() != 0) break block_label_2;
            frame.push(local4);
            local1 = frame.pop();
            break block_label_0;
          }
          frame.i32_const(0);
          local4 = frame.pop();
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_load(2, 0);
          if (frame.pop() != 0) break block_label_1;
          break block_label_0;
        }
        frame.push(local3);
        frame.i32_load(2, 4);
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        local1 = frame.pop();
        frame.push(local4);
        frame.i32_const(16);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_0;
      }
      frame.i32_const(0);
      frame.push(local4);
      frame.push(local4);
      frame.i32_add();
      local1 = frame.peek();
      frame.push(local1);
      frame.push(local4);
      frame.i32_lt_u();
      frame.select();
      local1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local1);
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func031(t0, t1, t2);
    }
    frame.push(local0);
    frame.i64_load(3, 8);
    local5 = frame.pop();
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.push(local5);
    frame.i64_store(2, 0);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 20);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 24);
    block_label_0:
    {
      frame.push(local0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(0xf4240);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
      }
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func038(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _ZN4core3ops8function6FnOnce9call_once17h8f8bb05231076c8eE(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.drop();

    loop_label_0:
    for (;;) {
      continue loop_label_0;
      break;
    }
    return frame.pop();
  }

  i32 _ZN4core3fmt5write17h10ba687f51516bbeE(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(52);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(3);
    frame.i32_store8(0, 56);
    frame.push(local0);
    frame.i64_const(0x2000000000);
    frame.i64_store(3, 24);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 48);
    frame.i32_const(0);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 40);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 32);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_load(2, 8);
            local2 = frame.peek();
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg2);
            frame.i32_const(20);
            frame.i32_add();
            frame.i32_load(2, 0);
            local3 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg2);
            frame.i32_load(2, 0);
            arg0 = frame.pop();
            frame.push(arg2);
            frame.i32_load(2, 16);
            arg1 = frame.pop();
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            frame.i32_const(0x1fffffff);
            frame.i32_and();
            frame.i32_const(1);
            frame.i32_add();
            local1 = frame.peek();
            local3 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_add();
                frame.i32_load(2, 0);
                local4 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_load(2, 48);
                frame.push(arg0);
                frame.i32_load(2, 0);
                frame.push(local4);
                frame.push(local0);
                frame.i32_load(2, 52);
                frame.i32_load(2, 12);
                {
                  var func = table0[frame.pop()];
                  if (func == null) throw Trap('uninitialized element');
                  if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1, t2));
                }
                if (frame.pop() != 0) break block_label_1;
              }
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.push(arg1);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_load(2, 0);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) break block_label_1;
              frame.push(arg1);
              frame.i32_const(8);
              frame.i32_add();
              arg1 = frame.pop();
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              arg0 = frame.pop();
              frame.push(local3);
              frame.i32_const(-1);
              frame.i32_add();
              local3 = frame.peek();
              if (frame.pop() != 0) continue loop_label_4;
              break block_label_2;
              break;
            }
          }
          frame.push(arg2);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(5);
          frame.i32_shl();
          local5 = frame.pop();
          frame.push(arg1);
          frame.i32_const(-1);
          frame.i32_add();
          frame.i32_const(0x7ffffff);
          frame.i32_and();
          frame.i32_const(1);
          frame.i32_add();
          local1 = frame.pop();
          frame.push(arg2);
          frame.i32_load(2, 0);
          arg0 = frame.pop();
          frame.i32_const(0);
          local3 = frame.pop();

          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg1 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_load(2, 48);
              frame.push(arg0);
              frame.i32_load(2, 0);
              frame.push(arg1);
              frame.push(local0);
              frame.i32_load(2, 52);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              if (frame.pop() != 0) break block_label_1;
            }
            frame.push(local0);
            frame.push(local2);
            frame.push(local3);
            frame.i32_add();
            arg1 = frame.peek();
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            frame.i32_store8(0, 56);
            frame.push(local0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            frame.i64_load(2, 0);
            frame.i64_const(32);
            frame.i64_rotl();
            frame.i64_store(3, 24);
            frame.push(local0);
            frame.i32_const(16);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_load(2, 16);
            local4 = frame.peek();
            frame.push(arg1);
            frame.i32_const(20);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _ZN4core3fmt8getcount17hc5486a81bc9369b0E(t0, t1, t2);
            }
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(3, 16);
            frame.i64_store(3, 32);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local4);
            frame.push(arg1);
            frame.i32_const(12);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _ZN4core3fmt8getcount17hc5486a81bc9369b0E(t0, t1, t2);
            }
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(3, 8);
            frame.i64_store(3, 40);
            frame.push(local4);
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_const(3);
            frame.i32_shl();
            frame.i32_add();
            arg1 = frame.peek();
            frame.i32_load(2, 0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_load(2, 4);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) break block_label_1;
            frame.push(arg0);
            frame.i32_const(8);
            frame.i32_add();
            arg0 = frame.pop();
            frame.push(local5);
            frame.push(local3);
            frame.i32_const(32);
            frame.i32_add();
            local3 = frame.peek();
            frame.i32_ne();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        block_label_2:
        {
          frame.push(local1);
          frame.push(arg2);
          frame.i32_load(2, 4);
          frame.i32_ge_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_load(2, 48);
          frame.push(arg2);
          frame.i32_load(2, 0);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.push(local0);
          frame.i32_load(2, 52);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType0) throw Trap('indirect call type mismatch');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          if (frame.pop() != 0) break block_label_1;
        }
        frame.i32_const(0);
        arg1 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(1);
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  void _ZN4core3fmt8getcount17hc5486a81bc9369b0E(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_load(2, 0);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_3;
              case 1:
                break block_label_2;
              case 2:
                break block_label_0;
              default:
                break block_label_3;
            }
          }
          frame.push(arg2);
          frame.i32_const(4);
          frame.i32_add();
          local1 = frame.pop();
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_load(2, 4);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_load(2, 4);
        frame.i32_const(5);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg2);
        frame.i32_load(2, 0);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.i32_load(2, 0);
      local1 = frame.pop();
      frame.i32_const(1);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  i32 _ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 16);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg0);
                frame.i32_load(2, 8);
                local1 = frame.peek();
                frame.i32_const(1);
                frame.i32_eq();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_const(1);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_1;
              frame.push(arg1);
              frame.push(arg2);
              frame.i32_add();
              local2 = frame.pop();
              frame.push(arg0);
              frame.i32_const(20);
              frame.i32_add();
              frame.i32_load(2, 0);
              local3 = frame.peek();
              if (frame.pop() != 0) break block_label_3;
              frame.i32_const(0);
              local4 = frame.pop();
              frame.push(arg1);
              local5 = frame.pop();
              break block_label_2;
            }
            frame.push(arg0);
            frame.i32_load(2, 24);
            frame.push(arg1);
            frame.push(arg2);
            frame.push(arg0);
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType0) throw Trap('indirect call type mismatch');
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1, t2));
            }
            local0 = frame.pop();
            break block_label_0;
          }
          frame.i32_const(0);
          local4 = frame.pop();
          frame.push(arg1);
          local5 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            local0 = frame.peek();
            frame.push(local2);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_1;
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local0);
                frame.i32_load8_s(0, 0);
                local5 = frame.peek();
                frame.i32_const(-1);
                frame.i32_le_s();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_const(1);
                frame.i32_add();
                local5 = frame.pop();
                break block_label_4;
              }
              block_label_5:
              {
                frame.push(local5);
                frame.i32_const(-32);
                frame.i32_ge_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_const(2);
                frame.i32_add();
                local5 = frame.pop();
                break block_label_4;
              }
              block_label_5:
              {
                frame.push(local5);
                frame.i32_const(-16);
                frame.i32_ge_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_const(3);
                frame.i32_add();
                local5 = frame.pop();
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_load8_u(0, 2);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(6);
              frame.i32_shl();
              frame.push(local0);
              frame.i32_load8_u(0, 1);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(12);
              frame.i32_shl();
              frame.i32_or();
              frame.push(local0);
              frame.i32_load8_u(0, 3);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_or();
              frame.push(local5);
              frame.i32_const(255);
              frame.i32_and();
              frame.i32_const(18);
              frame.i32_shl();
              frame.i32_const(0x1c0000);
              frame.i32_and();
              frame.i32_or();
              frame.i32_const(0x110000);
              frame.i32_eq();
              if (frame.pop() != 0) break block_label_1;
              frame.push(local0);
              frame.i32_const(4);
              frame.i32_add();
              local5 = frame.pop();
            }
            frame.push(local4);
            frame.push(local0);
            frame.i32_sub();
            frame.push(local5);
            frame.i32_add();
            local4 = frame.pop();
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.peek();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.push(local5);
        frame.push(local2);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        block_label_2:
        {
          frame.push(local5);
          frame.i32_load8_s(0, 0);
          local0 = frame.peek();
          frame.i32_const(-1);
          frame.i32_gt_s();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(-32);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(-16);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local5);
          frame.i32_load8_u(0, 2);
          frame.i32_const(63);
          frame.i32_and();
          frame.i32_const(6);
          frame.i32_shl();
          frame.push(local5);
          frame.i32_load8_u(0, 1);
          frame.i32_const(63);
          frame.i32_and();
          frame.i32_const(12);
          frame.i32_shl();
          frame.i32_or();
          frame.push(local5);
          frame.i32_load8_u(0, 3);
          frame.i32_const(63);
          frame.i32_and();
          frame.i32_or();
          frame.push(local0);
          frame.i32_const(255);
          frame.i32_and();
          frame.i32_const(18);
          frame.i32_shl();
          frame.i32_const(0x1c0000);
          frame.i32_and();
          frame.i32_or();
          frame.i32_const(0x110000);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
        }
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              local5 = frame.pop();
              break block_label_3;
            }
            block_label_4:
            {
              frame.push(local4);
              frame.push(arg2);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              local0 = frame.pop();
              frame.push(arg2);
              local5 = frame.pop();
              frame.push(local4);
              frame.push(arg2);
              frame.i32_eq();
              if (frame.pop() != 0) break block_label_3;
              break block_label_2;
            }
            frame.i32_const(0);
            local0 = frame.pop();
            frame.push(local4);
            local5 = frame.pop();
            frame.push(arg1);
            frame.push(local4);
            frame.i32_add();
            frame.i32_load8_s(0, 0);
            frame.i32_const(-64);
            frame.i32_lt_s();
            if (frame.pop() != 0) break block_label_2;
          }
          frame.push(local5);
          local4 = frame.pop();
          frame.push(arg1);
          local0 = frame.pop();
        }
        frame.push(local4);
        frame.push(arg2);
        frame.push(local0);
        frame.select();
        arg2 = frame.pop();
        frame.push(local0);
        frame.push(arg1);
        frame.push(local0);
        frame.select();
        arg1 = frame.pop();
      }
      block_label_1:
      {
        frame.push(local1);
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.i32_load(2, 24);
        frame.push(arg1);
        frame.push(arg2);
        frame.push(arg0);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_load(2, 0);
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_const(16);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.push(arg2);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_ZN4core3str5count14do_count_chars17he783edca7ad4614fE(t0, t1));
          }
          local5 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(0);
        local5 = frame.pop();
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg2);
        local4 = frame.pop();
        frame.push(arg1);
        local0 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local5);
          frame.push(local0);
          frame.i32_load8_s(0, 0);
          frame.i32_const(-65);
          frame.i32_gt_s();
          frame.i32_add();
          local5 = frame.pop();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(local4);
          frame.i32_const(-1);
          frame.i32_add();
          local4 = frame.peek();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      block_label_1:
      {
        frame.push(local3);
        frame.push(local5);
        frame.i32_le_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local3);
        frame.push(local5);
        frame.i32_sub();
        local5 = frame.peek();
        local3 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.i32_const(0);
              frame.push(arg0);
              frame.i32_load8_u(0, 32);
              local0 = frame.peek();
              frame.push(local0);
              frame.i32_const(3);
              frame.i32_eq();
              frame.select();
              frame.i32_const(3);
              frame.i32_and();
              local0 = frame.peek();
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_2;
                case 1:
                  break block_label_4;
                case 2:
                  break block_label_3;
                case 3:
                  break block_label_4;
                default:
                  break block_label_2;
              }
            }
            frame.i32_const(0);
            local3 = frame.pop();
            frame.push(local5);
            local0 = frame.pop();
            break block_label_2;
          }
          frame.push(local5);
          frame.i32_const(1);
          frame.i32_shr_u();
          local0 = frame.pop();
          frame.push(local5);
          frame.i32_const(1);
          frame.i32_add();
          frame.i32_const(1);
          frame.i32_shr_u();
          local3 = frame.pop();
        }
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(arg0);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        local4 = frame.pop();
        frame.push(arg0);
        frame.i32_load(2, 4);
        local5 = frame.pop();
        frame.push(arg0);
        frame.i32_load(2, 24);
        arg0 = frame.pop();
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            frame.push(local0);
            frame.i32_const(-1);
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg0);
            frame.push(local5);
            frame.push(local4);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            frame.i32_eqz();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.i32_const(1);
          return frame.pop();
        }
        frame.i32_const(1);
        local0 = frame.pop();
        frame.push(local5);
        frame.i32_const(0x110000);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.push(arg1);
        frame.push(arg2);
        frame.push(local4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        if (frame.pop() != 0) break block_label_0;
        frame.i32_const(0);
        local0 = frame.pop();
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(local3);
              frame.push(local0);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local3);
              local0 = frame.pop();
              break block_label_2;
            }
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_add();
            local0 = frame.pop();
            frame.push(arg0);
            frame.push(local5);
            frame.push(local4);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            frame.i32_eqz();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.push(local0);
          frame.i32_const(-1);
          frame.i32_add();
          local0 = frame.pop();
        }
        frame.push(local0);
        frame.push(local3);
        frame.i32_lt_u();
        return frame.pop();
      }
      frame.push(arg0);
      frame.i32_load(2, 24);
      frame.push(arg1);
      frame.push(arg2);
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _ZN4core3str5count14do_count_chars17he783edca7ad4614fE(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(3);
        frame.i32_add();
        frame.i32_const(-4);
        frame.i32_and();
        local0 = frame.peek();
        frame.push(arg0);
        frame.i32_sub();
        local1 = frame.peek();
        frame.push(arg1);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local1);
        frame.i32_const(4);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.push(local1);
        frame.i32_sub();
        local2 = frame.peek();
        frame.i32_const(4);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local2);
        frame.i32_const(3);
        frame.i32_and();
        local3 = frame.pop();
        frame.i32_const(0);
        local4 = frame.pop();
        frame.i32_const(0);
        local5 = frame.pop();
        block_label_2:
        {
          frame.push(local0);
          frame.push(arg0);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.push(local0);
          frame.i32_sub();
          local0 = frame.pop();
          frame.i32_const(0);
          local5 = frame.pop();
          frame.push(arg0);
          arg1 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            frame.push(arg1);
            frame.i32_load8_s(0, 0);
            frame.i32_const(-65);
            frame.i32_gt_s();
            frame.i32_add();
            local5 = frame.pop();
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_add();
            local0 = frame.peek();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_add();
        local6 = frame.pop();
        block_label_2:
        {
          frame.push(local3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local6);
          frame.push(local2);
          frame.i32_const(-4);
          frame.i32_and();
          frame.i32_add();
          arg0 = frame.pop();
          frame.i32_const(0);
          local4 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local4);
            frame.push(arg0);
            frame.i32_load8_s(0, 0);
            frame.i32_const(-65);
            frame.i32_gt_s();
            frame.i32_add();
            local4 = frame.pop();
            frame.push(arg0);
            frame.i32_const(1);
            frame.i32_add();
            arg0 = frame.pop();
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.peek();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.push(local2);
        frame.i32_const(2);
        frame.i32_shr_u();
        arg0 = frame.pop();
        frame.push(local4);
        frame.push(local5);
        frame.i32_add();
        local0 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local6);
          local2 = frame.pop();
          frame.push(arg0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(local1);
          frame.i32_const(192);
          frame.push(local1);
          frame.i32_const(192);
          frame.i32_lt_u();
          frame.select();
          local6 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          local7 = frame.pop();
          frame.push(local6);
          frame.i32_const(2);
          frame.i32_shl();
          local8 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local6);
              frame.i32_const(252);
              frame.i32_and();
              local9 = frame.peek();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              arg1 = frame.pop();
              break block_label_3;
            }
            frame.push(local2);
            frame.push(local9);
            frame.i32_const(2);
            frame.i32_shl();
            frame.i32_add();
            local5 = frame.pop();
            frame.i32_const(0);
            arg1 = frame.pop();
            frame.push(local2);
            local3 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.i32_const(0);
              arg0 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local3);
                frame.push(arg0);
                frame.i32_add();
                frame.i32_load(2, 0);
                local4 = frame.peek();
                frame.i32_const(-1);
                frame.i32_xor();
                frame.i32_const(7);
                frame.i32_shr_u();
                frame.push(local4);
                frame.i32_const(6);
                frame.i32_shr_u();
                frame.i32_or();
                frame.i32_const(0x1010101);
                frame.i32_and();
                frame.push(arg1);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_add();
                arg0 = frame.peek();
                frame.i32_const(16);
                frame.i32_ne();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
              frame.push(local3);
              frame.i32_const(16);
              frame.i32_add();
              local3 = frame.peek();
              frame.push(local5);
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
          }
          frame.push(local1);
          frame.push(local6);
          frame.i32_sub();
          arg0 = frame.pop();
          frame.push(local2);
          frame.push(local8);
          frame.i32_add();
          local6 = frame.pop();
          frame.push(arg1);
          frame.i32_const(8);
          frame.i32_shr_u();
          frame.i32_const(0xff00ff);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_const(0xff00ff);
          frame.i32_and();
          frame.i32_add();
          frame.i32_const(0x10001);
          frame.i32_mul();
          frame.i32_const(16);
          frame.i32_shr_u();
          frame.push(local0);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(local7);
          frame.i32_eqz();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.push(local2);
        frame.push(local9);
        frame.i32_const(2);
        frame.i32_shl();
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local1);
        frame.i32_const(192);
        frame.push(local1);
        frame.i32_const(192);
        frame.i32_lt_u();
        frame.select();
        frame.i32_const(3);
        frame.i32_and();
        frame.i32_const(2);
        frame.i32_shl();
        local4 = frame.pop();
        frame.i32_const(0);
        arg1 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(arg0);
          frame.i32_load(2, 0);
          local3 = frame.peek();
          frame.i32_const(-1);
          frame.i32_xor();
          frame.i32_const(7);
          frame.i32_shr_u();
          frame.push(local3);
          frame.i32_const(6);
          frame.i32_shr_u();
          frame.i32_or();
          frame.i32_const(0x1010101);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_add();
          arg1 = frame.pop();
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          arg0 = frame.pop();
          frame.push(local4);
          frame.i32_const(-4);
          frame.i32_add();
          local4 = frame.peek();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.push(arg1);
        frame.i32_const(8);
        frame.i32_shr_u();
        frame.i32_const(0xff00ff);
        frame.i32_and();
        frame.push(arg1);
        frame.i32_const(0xff00ff);
        frame.i32_and();
        frame.i32_add();
        frame.i32_const(0x10001);
        frame.i32_mul();
        frame.i32_const(16);
        frame.i32_shr_u();
        frame.push(local0);
        frame.i32_add();
        return frame.pop();
      }
      frame.i32_const(0);
      local0 = frame.pop();
      frame.push(arg1);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.push(arg0);
        frame.i32_load8_s(0, 0);
        frame.i32_const(-65);
        frame.i32_gt_s();
        frame.i32_add();
        local0 = frame.pop();
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_const(-1);
        frame.i32_add();
        arg1 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(local0);
    return frame.pop();
  }

  void _ZN4core3str8converts9from_utf817h989570921179a6cfE(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;
    i64 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        frame.push(arg2);
        frame.i32_const(-7);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local0);
        frame.push(arg2);
        frame.i32_gt_u();
        frame.select();
        local1 = frame.pop();
        frame.push(arg1);
        frame.i32_const(3);
        frame.i32_add();
        frame.i32_const(-4);
        frame.i32_and();
        frame.push(arg1);
        frame.i32_sub();
        local2 = frame.pop();
        frame.i32_const(0);
        local0 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  loop_label_7:
                  for (;;) {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(arg1);
                          frame.push(local0);
                          frame.i32_add();
                          frame.i32_load8_u(0, 0);
                          local3 = frame.peek();
                          frame.i32_const(24);
                          frame.i32_shl();
                          frame.i32_const(24);
                          frame.i32_shr_s();
                          local4 = frame.peek();
                          frame.i32_const(0);
                          frame.i32_lt_s();
                          if (frame.pop() != 0) break block_label_10;
                          frame.push(local2);
                          frame.i32_const(-1);
                          frame.i32_eq();
                          if (frame.pop() != 0) break block_label_9;
                          frame.push(local2);
                          frame.push(local0);
                          frame.i32_sub();
                          frame.i32_const(3);
                          frame.i32_and();
                          if (frame.pop() != 0) break block_label_9;
                          block_label_11:
                          {
                            frame.push(local0);
                            frame.push(local1);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) break block_label_11;

                            loop_label_12:
                            for (;;) {
                              frame.push(arg1);
                              frame.push(local0);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.i32_load(2, 0);
                              frame.push(local3);
                              frame.i32_const(4);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              frame.i32_or();
                              frame.i32_const(-0x7f7f7f80);
                              frame.i32_and();
                              if (frame.pop() != 0) break block_label_11;
                              frame.push(local0);
                              frame.i32_const(8);
                              frame.i32_add();
                              local0 = frame.peek();
                              frame.push(local1);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) continue loop_label_12;
                              break;
                            }
                          }
                          frame.push(local0);
                          frame.push(arg2);
                          frame.i32_ge_u();
                          if (frame.pop() != 0) break block_label_8;

                          loop_label_11:
                          for (;;) {
                            frame.push(arg1);
                            frame.push(local0);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            frame.i32_const(0);
                            frame.i32_lt_s();
                            if (frame.pop() != 0) break block_label_8;
                            frame.push(arg2);
                            frame.push(local0);
                            frame.i32_const(1);
                            frame.i32_add();
                            local0 = frame.peek();
                            frame.i32_ne();
                            if (frame.pop() != 0) continue loop_label_11;
                            break block_label_1;
                            break;
                          }
                        }
                        frame.i64_const(0x10000000000);
                        local5 = frame.pop();
                        frame.i64_const(0x100000000);
                        local6 = frame.pop();
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.push(local3);
                                  frame.i32_const(0xf4285);
                                  frame.i32_add();
                                  frame.i32_load8_u(0, 0);
                                  frame.i32_const(-2);
                                  frame.i32_add();
                                  var t0 = frame.pop();
                                  switch (t0) {
                                    case 0:
                                      break block_label_14;
                                    case 1:
                                      break block_label_12;
                                    case 2:
                                      break block_label_13;
                                    default:
                                      break block_label_2;
                                  }
                                }
                                frame.push(local0);
                                frame.i32_const(1);
                                frame.i32_add();
                                local3 = frame.peek();
                                frame.push(arg2);
                                frame.i32_lt_u();
                                if (frame.pop() != 0) break block_label_11;
                                frame.i64_const(0);
                                local5 = frame.pop();
                                break block_label_3;
                              }
                              frame.i64_const(0);
                              local5 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(1);
                              frame.i32_add();
                              local7 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) break block_label_3;
                              frame.push(arg1);
                              frame.push(local7);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              local7 = frame.pop();
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      frame.push(local3);
                                      frame.i32_const(-240);
                                      frame.i32_add();
                                      var t0 = frame.pop();
                                      switch (t0) {
                                        case 0:
                                          break block_label_15;
                                        case 1:
                                          break block_label_16;
                                        case 2:
                                          break block_label_16;
                                        case 3:
                                          break block_label_16;
                                        case 4:
                                          break block_label_14;
                                        default:
                                          break block_label_16;
                                      }
                                    }
                                    frame.push(local4);
                                    frame.i32_const(15);
                                    frame.i32_add();
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    frame.i32_const(2);
                                    frame.i32_gt_u();
                                    if (frame.pop() != 0) break block_label_5;
                                    frame.push(local7);
                                    frame.i32_const(-1);
                                    frame.i32_gt_s();
                                    if (frame.pop() != 0) break block_label_5;
                                    frame.push(local7);
                                    frame.i32_const(-64);
                                    frame.i32_ge_u();
                                    if (frame.pop() != 0) break block_label_5;
                                    break block_label_13;
                                  }
                                  frame.push(local7);
                                  frame.i32_const(112);
                                  frame.i32_add();
                                  frame.i32_const(255);
                                  frame.i32_and();
                                  frame.i32_const(48);
                                  frame.i32_ge_u();
                                  if (frame.pop() != 0) break block_label_5;
                                  break block_label_13;
                                }
                                frame.push(local7);
                                frame.i32_const(-113);
                                frame.i32_gt_s();
                                if (frame.pop() != 0) break block_label_5;
                              }
                              frame.push(local0);
                              frame.i32_const(2);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) break block_label_3;
                              frame.push(arg1);
                              frame.push(local3);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              frame.i32_const(-65);
                              frame.i32_gt_s();
                              if (frame.pop() != 0) break block_label_6;
                              frame.i64_const(0);
                              local6 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(3);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) break block_label_2;
                              frame.push(arg1);
                              frame.push(local3);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              frame.i32_const(-65);
                              frame.i32_le_s();
                              if (frame.pop() != 0) break block_label_10;
                              frame.i64_const(0x30000000000);
                              local5 = frame.pop();
                              break block_label_4;
                            }
                            frame.i64_const(0);
                            local5 = frame.pop();
                            frame.push(local0);
                            frame.i32_const(1);
                            frame.i32_add();
                            local7 = frame.peek();
                            frame.push(arg2);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) break block_label_3;
                            frame.push(arg1);
                            frame.push(local7);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            local7 = frame.pop();
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    frame.push(local3);
                                    frame.i32_const(224);
                                    frame.i32_eq();
                                    if (frame.pop() != 0) break block_label_15;
                                    frame.push(local3);
                                    frame.i32_const(237);
                                    frame.i32_eq();
                                    if (frame.pop() != 0) break block_label_14;
                                    frame.push(local4);
                                    frame.i32_const(31);
                                    frame.i32_add();
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    frame.i32_const(12);
                                    frame.i32_lt_u();
                                    if (frame.pop() != 0) break block_label_13;
                                    frame.push(local4);
                                    frame.i32_const(-2);
                                    frame.i32_and();
                                    frame.i32_const(-18);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) break block_label_5;
                                    frame.push(local7);
                                    frame.i32_const(-1);
                                    frame.i32_gt_s();
                                    if (frame.pop() != 0) break block_label_5;
                                    frame.push(local7);
                                    frame.i32_const(-64);
                                    frame.i32_ge_u();
                                    if (frame.pop() != 0) break block_label_5;
                                    break block_label_12;
                                  }
                                  frame.push(local7);
                                  frame.i32_const(-32);
                                  frame.i32_and();
                                  frame.i32_const(-96);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) break block_label_5;
                                  break block_label_12;
                                }
                                frame.push(local7);
                                frame.i32_const(-96);
                                frame.i32_ge_s();
                                if (frame.pop() != 0) break block_label_5;
                                break block_label_12;
                              }
                              frame.push(local7);
                              frame.i32_const(-65);
                              frame.i32_gt_s();
                              if (frame.pop() != 0) break block_label_5;
                            }
                            frame.i64_const(0);
                            local6 = frame.pop();
                            frame.push(local0);
                            frame.i32_const(2);
                            frame.i32_add();
                            local3 = frame.peek();
                            frame.push(arg2);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) break block_label_2;
                            frame.push(arg1);
                            frame.push(local3);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            frame.i32_const(-65);
                            frame.i32_gt_s();
                            if (frame.pop() != 0) break block_label_6;
                            break block_label_10;
                          }
                          frame.i64_const(0x10000000000);
                          local5 = frame.pop();
                          frame.i64_const(0x100000000);
                          local6 = frame.pop();
                          frame.push(arg1);
                          frame.push(local3);
                          frame.i32_add();
                          frame.i32_load8_s(0, 0);
                          frame.i32_const(-65);
                          frame.i32_gt_s();
                          if (frame.pop() != 0) break block_label_2;
                        }
                        frame.push(local3);
                        frame.i32_const(1);
                        frame.i32_add();
                        local0 = frame.pop();
                        break block_label_8;
                      }
                      frame.push(local0);
                      frame.i32_const(1);
                      frame.i32_add();
                      local0 = frame.pop();
                    }
                    frame.push(local0);
                    frame.push(arg2);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) continue loop_label_7;
                    break block_label_1;
                    break;
                  }
                }
                frame.i64_const(0x20000000000);
                local5 = frame.pop();
                break block_label_4;
              }
              frame.i64_const(0x10000000000);
              local5 = frame.pop();
            }
            frame.i64_const(0x100000000);
            local6 = frame.pop();
            break block_label_2;
          }
          frame.i64_const(0);
          local6 = frame.pop();
        }
        frame.push(arg0);
        frame.push(local5);
        frame.push(local0);
        frame.i64_extend_i32_u();
        frame.i64_or();
        frame.push(local6);
        frame.i64_or();
        frame.i64_store(2, 4);
        frame.i32_const(1);
        local0 = frame.pop();
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg2);
      frame.i32_store(2, 0);
      frame.i32_const(0);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  i32 _func045(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 24);
    local2 = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg1 = frame.peek();
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 8);
    frame.push(local2);
    frame.push(local1);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func046(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 4);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func047(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 4);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E(t0, t1, t2));
    }
    return frame.pop();
  }

  void _func048(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i64 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func049(t0, t1);
            }
            frame.push(local0);
            frame.i32_load(2, 8);
            local3 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_1;
            frame.push(local0);
            frame.i32_load(2, 12);
            arg1 = frame.peek();
            frame.i32_const(-9);
            frame.i32_add();
            frame.i32_const(-8);
            frame.i32_lt_u();
            if (frame.pop() != 0) break block_label_2;
            frame.push(local0);
            frame.i32_const(16);
            frame.i32_add();
            frame.push(local3);
            frame.push(arg1);
            frame.push(arg1);
            {
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func050(t0, t1, t2, t3);
            }
            frame.push(local0);
            frame.i32_load8_u(0, 16);
            if (frame.pop() != 0) break block_label_2;
            frame.push(local0);
            frame.i64_load(0, 17);
            local4 = frame.peek();
            frame.i64_const(0x7f7f7f7f7f7f7f7f);
            frame.i64_add();
            frame.i64_const(-0x5050505050505051);
            frame.push(local4);
            frame.i64_sub();
            frame.push(local4);
            frame.i64_const(0x4646464646464646);
            frame.i64_add();
            frame.i64_or();
            frame.i64_and();
            frame.i64_const(-0x1f1f1f1f1f1f1f20);
            frame.push(local4);
            frame.i64_const(0x2020202020202020);
            frame.i64_or();
            local5 = frame.peek();
            frame.i64_sub();
            frame.push(local5);
            frame.i64_const(0x505050505050505);
            frame.i64_add();
            frame.i64_or();
            frame.i64_and();
            frame.i64_const(-0x7f7f7f7f7f7f7f80);
            frame.i64_and();
            frame.i64_eqz();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_2;
            frame.push(local4);
            frame.i64_const(0x3f3f3f3f3f3f3f3f);
            frame.i64_add();
            frame.i64_const(-0x2525252525252526);
            frame.push(local4);
            frame.i64_sub();
            frame.i64_and();
            frame.i64_const(2);
            frame.i64_shr_u();
            frame.i64_const(0x2020202020202020);
            frame.i64_and();
            frame.push(local4);
            frame.i64_or();
            local4 = frame.peek();
            frame.i32_wrap_i64();
            frame.i32_const(24);
            frame.i32_shl();
            frame.i32_const(24);
            frame.i32_shr_s();
            frame.i32_const(-126);
            frame.i32_lt_s();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.push(local4);
          frame.i64_const(255);
          frame.i64_and();
          local5 = frame.peek();
          frame.i64_const(129);
          frame.i64_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.push(local5);
          frame.i64_const(128);
          frame.i64_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg0);
          frame.push(local4);
          frame.i64_store(0, 0);
          break block_label_0;
        }
        frame.push(local2);
        frame.i32_const(2);
        frame.i32_store8(0, 0);
      }
      frame.push(arg0);
      frame.i32_const(128);
      frame.i32_store8(0, 0);
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func049(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 16);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0);
          arg1 = frame.pop();
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        local1 = frame.pop();
        frame.i32_const(1);
        local2 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 8);
        local3 = frame.peek();
        local4 = frame.pop();
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local5 = frame.peek();
        local6 = frame.pop();
        block_label_2:
        {
          frame.push(local5);
          frame.push(arg1);
          frame.i32_load(2, 4);
          local7 = frame.peek();
          frame.i32_ge_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local1);
          frame.push(local7);
          frame.push(local5);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN9icu_locid6parser18get_current_subtag17h7a2bec06e6132e7cE(t0, t1, t2, t3);
          }
          frame.i32_const(0);
          local2 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 12);
          local6 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 8);
          local4 = frame.pop();
        }
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store8(0, 16);
        frame.push(arg1);
        frame.push(local6);
        frame.i32_store(2, 12);
        frame.push(arg1);
        frame.push(local4);
        frame.i32_store(2, 8);
        frame.push(local5);
        frame.push(local3);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local5);
        frame.push(local7);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local5);
        frame.push(local3);
        frame.i32_sub();
        local5 = frame.pop();
        frame.push(local1);
        frame.push(local3);
        frame.i32_add();
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local5);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func050(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(8);
          frame.i32_gt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.i64_const(0);
          local1 = frame.pop();
          frame.push(local0);
          frame.i64_const(0);
          frame.i64_store(3, 8);
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0);
            local2 = frame.pop();
            frame.i32_const(0);
            local3 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local2);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local4 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local4);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) break block_label_6;
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local4);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local3 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(8);
                  frame.i32_add();
                  frame.push(local2);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local3 = frame.pop();
                  frame.push(local2);
                  frame.i32_const(1);
                  frame.i32_add();
                  local2 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_0;
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(8);
                frame.i32_add();
                frame.push(local2);
                frame.i32_add();
                frame.push(local4);
                frame.i32_store8(0, 0);
                frame.push(local2);
                frame.i32_const(1);
                frame.i32_add();
                local2 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i64_load(3, 8);
                local1 = frame.pop();
                break block_label_1;
              }
              frame.push(local4);
              frame.i32_eqz();
              local3 = frame.pop();
              frame.push(local2);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i64_const(0x800000000);
        frame.i64_store(2, 0);
        return;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i64_store(0, 1);
      return;
    }
    frame.push(arg0);
    frame.i32_const(1);
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(4);
    frame.i32_add();
    frame.push(local3);
    frame.i32_store(2, 0);
  }

  void _func051(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(4);
    frame.i32_add();
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func052(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local1 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_const(8);
      frame.i32_add();
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local2);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0xf5160);
          frame.push(local0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
        }
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(local1);
        frame.i32_const(-16);
        frame.i32_add();
        local1 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 4);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func053(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load(2, 0);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_0;
              case 1:
                break block_label_2;
              default:
                break block_label_3;
            }
          }
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          local0 = frame.peek();
          {
            var t0 = frame.pop();
            _func054(t0);
          }
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(arg0);
          frame.i64_extend_i32_u();
          frame.i64_const(20);
          frame.i64_mul();
          frame.i32_wrap_i64();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_load(2, 0);
        local0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        local0 = frame.pop();
      }
      frame.i32_const(0xf5160);
      frame.push(local0);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func054(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(20);
      frame.i32_mul();
      local0 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_const(12);
      frame.i32_add();
      arg0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          frame.i32_const(2);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0xf5160);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-20);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
  }

  void _func055(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_const(3);
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      {
        var t0 = frame.pop();
        _func053(t0);
      }
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 24);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func056(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(1);
        local0 = frame.pop();
        frame.i32_const(0);
        local1 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.push(arg2);
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_shr_u();
        frame.push(local1);
        frame.i32_add();
        local3 = frame.peek();
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        local0 = frame.pop();
        frame.i32_const(0);
        arg2 = frame.pop();

        loop_label_2:
        for (;;) {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(8);
            frame.i32_ne();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0);
            local0 = frame.pop();
            frame.push(local3);
            local1 = frame.pop();
            break block_label_0;
          }
          frame.push(arg3);
          frame.push(arg2);
          frame.i32_add();
          local4 = frame.pop();
          frame.push(local0);
          frame.push(arg2);
          frame.i32_add();
          local5 = frame.pop();
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(local5);
          frame.i32_load8_u(0, 0);
          local5 = frame.peek();
          frame.push(local4);
          frame.i32_load8_u(0, 0);
          local4 = frame.peek();
          frame.i32_eq();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.i32_const(1);
        local0 = frame.pop();
        frame.push(local2);
        frame.push(local3);
        frame.push(local5);
        frame.push(local4);
        frame.i32_lt_u();
        arg2 = frame.peek();
        frame.select();
        local2 = frame.peek();
        frame.push(local3);
        frame.i32_const(1);
        frame.i32_add();
        frame.push(local1);
        frame.push(arg2);
        frame.select();
        local1 = frame.peek();
        frame.i32_sub();
        arg2 = frame.pop();
        frame.push(local2);
        frame.push(local1);
        frame.i32_gt_u();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  void _func057(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.push(arg1);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 4);
        frame.push(local0);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.push(local0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func058(t0, t1);
        }
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.push(arg1);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local1);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_shl();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_memmove(t0, t1, t2));
      }
      frame.drop();
      frame.push(local1);
      frame.push(arg2);
      frame.i64_load(0, 0);
      frame.i64_store(0, 0);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_add();
      frame.i32_store(2, 8);
      return;
    }
    frame.push(arg1);
    frame.push(local0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func038(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func058(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func061(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func059(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(0x1fffffff);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          local0 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          if (frame.pop() != 0) break block_label_2;
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg2);
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                if (frame.pop() != 0) break block_label_4;
                break block_label_1;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(0xf5160);
              frame.push(local0);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func019(t0, t1));
              }
              arg2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(arg2);
              frame.i32_const(-4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.push(arg2);
              frame.i32_const(0);
              frame.push(local0);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memset(t0, t1, t2));
              }
              frame.drop();
              break block_label_0;
            }
            frame.i32_const(0xf5160);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_0;
          }
          frame.push(local0);
          frame.i32_const(1);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
          }
          throw Trap('unreachable');
        }
        throw Trap('unreachable');
        throw Trap('unreachable');
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
  }

  void _func060(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(0x1fffffff);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          local0 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          if (frame.pop() != 0) break block_label_2;
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg2);
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                if (frame.pop() != 0) break block_label_4;
                break block_label_1;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(0xf5160);
              frame.push(local0);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func019(t0, t1));
              }
              arg2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(arg2);
              frame.i32_const(-4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.push(arg2);
              frame.i32_const(0);
              frame.push(local0);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memset(t0, t1, t2));
              }
              frame.drop();
              break block_label_0;
            }
            frame.i32_const(0xf5160);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_0;
          }
          frame.push(local0);
          frame.i32_const(1);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
          }
          throw Trap('unreachable');
        }
        throw Trap('unreachable');
        throw Trap('unreachable');
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
  }

  void _func061(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_add();
          arg3 = frame.peek();
          frame.push(arg2);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(1);
          frame.i32_shl();
          arg2 = frame.peek();
          frame.push(arg3);
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_gt_u();
          frame.select();
          arg2 = frame.peek();
          frame.i32_const(4);
          frame.push(arg2);
          frame.i32_const(4);
          frame.i32_gt_u();
          frame.select();
          arg2 = frame.peek();
          frame.i32_const(0x1fffffff);
          frame.i32_and();
          frame.push(arg2);
          frame.i32_eq();
          arg3 = frame.pop();
          frame.push(arg2);
          frame.i32_const(3);
          frame.i32_shl();
          local2 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_shl();
              frame.i32_store(2, 20);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_store(2, 16);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 16);
          }
          frame.push(local0);
          frame.push(local2);
          frame.push(arg3);
          frame.push(local0);
          frame.i32_const(16);
          frame.i32_add();
          frame.push(arg1);
          {
            var t4 = frame.pop();
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
          }
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load(2, 0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_load(2, 4);
            arg3 = frame.pop();
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg3);
            frame.i32_store(2, 0);
            frame.i32_const(0);
            arg2 = frame.pop();
            break block_label_0;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i64_load(2, 4);
          frame.i64_store(2, 4);
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(arg3);
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_const(0);
        frame.i32_store(2, 0);
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func062(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_add();
          arg3 = frame.peek();
          frame.push(arg2);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(1);
          frame.i32_shl();
          arg2 = frame.peek();
          frame.push(arg3);
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_gt_u();
          frame.select();
          arg2 = frame.peek();
          frame.i32_const(4);
          frame.push(arg2);
          frame.i32_const(4);
          frame.i32_gt_u();
          frame.select();
          arg2 = frame.peek();
          frame.i32_const(0x1fffffff);
          frame.i32_and();
          frame.push(arg2);
          frame.i32_eq();
          arg3 = frame.pop();
          frame.push(arg2);
          frame.i32_const(3);
          frame.i32_shl();
          local2 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_shl();
              frame.i32_store(2, 20);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_store(2, 16);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 16);
          }
          frame.push(local0);
          frame.push(local2);
          frame.push(arg3);
          frame.push(local0);
          frame.i32_const(16);
          frame.i32_add();
          frame.push(arg1);
          {
            var t4 = frame.pop();
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
          }
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load(2, 0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_load(2, 4);
            arg3 = frame.pop();
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg3);
            frame.i32_store(2, 0);
            frame.i32_const(0);
            arg2 = frame.pop();
            break block_label_0;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i64_load(2, 4);
          frame.i64_store(2, 4);
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(arg3);
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_const(0);
        frame.i32_store(2, 0);
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func063(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0x1fffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(3);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(1);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func064(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0x1fffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(3);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(1);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func065(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func062(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func066(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0xfffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      frame.i32_const(2);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func067(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0x1fffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(3);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(1);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func068(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i64 local4 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      local3 = frame.peek();
      frame.i64_extend_i32_u();
      frame.i64_const(20);
      frame.i64_mul();
      local4 = frame.peek();
      frame.i64_const(32);
      frame.i64_shr_u();
      frame.i32_wrap_i64();
      frame.i32_eqz();
      frame.i32_const(2);
      frame.i32_shl();
      arg1 = frame.pop();
      frame.push(local4);
      frame.i32_wrap_i64();
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          frame.push(local0);
          frame.push(local1);
          frame.i64_extend_i32_u();
          frame.i64_const(20);
          frame.i64_mul();
          frame.i64_store32(2, 20);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(arg1);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.push(local3);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func069(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0xfffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      frame.i32_const(2);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func070(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(0x1fffffff);
      frame.i32_and();
      frame.push(arg1);
      frame.i32_eq();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(3);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_const(1);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_store(2, 16);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 16);
      }
      frame.push(local0);
      frame.push(local3);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func071(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func062(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg2 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func072(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_load(2, 0);
      arg0 = frame.pop();
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0xf5160);
          frame.push(arg0);
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-16);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
  }

  void _func073(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local0 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_const(8);
      frame.i32_add();
      arg0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0xf5160);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-16);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
  }

  void _func074(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 8);
    local0 = frame.pop();
    frame.push(arg0);
    frame.i32_const(0xf4388);
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.i32_const(12);
    frame.i32_add();
    local1 = frame.peek();
    frame.i32_load(2, 0);
    local2 = frame.pop();
    frame.push(local1);
    frame.i32_const(0xf4388);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 4);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local2);
          frame.push(local0);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(arg0);
          frame.i32_load(2, 16);
          local2 = frame.peek();
          frame.i32_const(8);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 0);
          local3 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 8);
          arg0 = frame.peek();
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.push(local2);
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.push(arg0);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local2);
          frame.push(local3);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memmove(t0, t1, t2));
          }
          frame.drop();
          break block_label_1;
        }
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_load(2, 16);
        local2 = frame.peek();
        frame.i32_const(8);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(arg0);
        frame.i32_load(2, 0);
        local3 = frame.peek();
        frame.push(local2);
        frame.i32_load(2, 8);
        arg0 = frame.peek();
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local2);
        frame.i32_load(2, 0);
        local2 = frame.peek();
        frame.push(arg0);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        frame.push(local2);
        frame.push(local3);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        frame.push(local1);
        frame.i32_const(3);
        frame.i32_shl();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memmove(t0, t1, t2));
        }
        frame.drop();
      }
      frame.push(local0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_add();
      frame.i32_store(2, 0);
    }
  }

  void _func075(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i64 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_store16(1, 6);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.push(arg1);
                                  frame.i32_load(2, 0);
                                  local1 = frame.peek();
                                  var t0 = frame.pop();
                                  switch (t0) {
                                    case 0:
                                      break block_label_14;
                                    case 1:
                                      break block_label_12;
                                    case 2:
                                      break block_label_13;
                                    default:
                                      break block_label_14;
                                  }
                                }
                                frame.push(arg1);
                                frame.i32_const(0);
                                frame.i32_store(2, 0);
                                frame.push(arg2);
                                frame.i32_const(0xffff);
                                frame.i32_and();
                                local2 = frame.pop();
                                frame.push(arg3);
                                frame.i64_load(2, 8);
                                local3 = frame.pop();
                                frame.push(arg3);
                                frame.i32_load(2, 4);
                                local4 = frame.pop();
                                frame.push(arg3);
                                frame.i32_load(2, 0);
                                local5 = frame.pop();
                                frame.i32_const(1);
                                local6 = frame.pop();
                                break block_label_2;
                              }
                              block_label_13:
                              {
                                frame.push(arg1);
                                frame.i32_const(12);
                                frame.i32_add();
                                local6 = frame.peek();
                                frame.i32_load(2, 0);
                                local2 = frame.peek();
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                local7 = frame.pop();
                                break block_label_11;
                              }
                              frame.i32_const(0);
                              local8 = frame.pop();
                              frame.push(arg1);
                              frame.i32_const(0);
                              frame.i32_store(2, 0);
                              frame.push(arg3);
                              frame.i64_load(2, 8);
                              local3 = frame.pop();
                              frame.push(arg3);
                              frame.i32_load(2, 4);
                              local4 = frame.pop();
                              frame.push(arg3);
                              frame.i32_load(2, 0);
                              local5 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(16);
                              frame.i32_add();
                              frame.push(local6);
                              frame.i32_load(2, 0);
                              arg3 = frame.peek();
                              frame.i32_store(2, 0);
                              frame.push(local0);
                              frame.push(arg1);
                              frame.i64_load(2, 4);
                              frame.i64_store(3, 8);
                              frame.push(arg2);
                              frame.i32_const(0xffff);
                              frame.i32_and();
                              local2 = frame.pop();
                              break block_label_10;
                            }
                            frame.push(arg1);
                            frame.i32_const(4);
                            frame.i32_add();
                            local7 = frame.pop();
                            frame.i32_const(1);
                            local2 = frame.pop();
                          }
                          frame.i32_const(0);
                          local8 = frame.pop();
                          frame.push(local2);
                          local9 = frame.pop();

                          loop_label_11:
                          for (;;) {
                            frame.push(local7);
                            frame.push(local2);
                            frame.i32_const(1);
                            frame.i32_shr_u();
                            frame.push(local8);
                            frame.i32_add();
                            local10 = frame.peek();
                            frame.i32_const(20);
                            frame.i32_mul();
                            frame.i32_add();
                            local6 = frame.pop();
                            frame.i32_const(0);
                            local2 = frame.pop();

                            loop_label_12:
                            for (;;) {
                              frame.push(local2);
                              frame.i32_const(2);
                              frame.i32_eq();
                              if (frame.pop() != 0) break block_label_8;
                              frame.push(local6);
                              frame.push(local2);
                              frame.i32_add();
                              local4 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(6);
                              frame.i32_add();
                              frame.push(local2);
                              frame.i32_add();
                              local5 = frame.pop();
                              frame.push(local2);
                              frame.i32_const(1);
                              frame.i32_add();
                              local2 = frame.pop();
                              frame.push(local4);
                              frame.i32_load8_u(0, 0);
                              local4 = frame.peek();
                              frame.push(local5);
                              frame.i32_load8_u(0, 0);
                              local5 = frame.peek();
                              frame.i32_eq();
                              if (frame.pop() != 0) continue loop_label_12;
                              break;
                            }
                            frame.push(local9);
                            frame.push(local10);
                            frame.push(local4);
                            frame.push(local5);
                            frame.i32_lt_u();
                            local2 = frame.peek();
                            frame.select();
                            local9 = frame.peek();
                            frame.push(local10);
                            frame.i32_const(1);
                            frame.i32_add();
                            frame.push(local8);
                            frame.push(local2);
                            frame.select();
                            local8 = frame.peek();
                            frame.i32_sub();
                            local2 = frame.pop();
                            frame.push(local9);
                            frame.push(local8);
                            frame.i32_gt_u();
                            if (frame.pop() != 0) continue loop_label_11;
                            break;
                          }
                          frame.push(local1);
                          local2 = frame.pop();
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                frame.push(local1);
                                var t0 = frame.pop();
                                switch (t0) {
                                  case 0:
                                    break block_label_11;
                                  case 1:
                                    break block_label_12;
                                  case 2:
                                    break block_label_13;
                                  default:
                                    break block_label_11;
                                }
                              }
                              frame.push(arg1);
                              frame.i32_const(12);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              local2 = frame.pop();
                              break block_label_11;
                            }
                            frame.i32_const(1);
                            local2 = frame.pop();
                          }
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(local2);
                              frame.push(local8);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) break block_label_12;
                              frame.push(arg2);
                              frame.i32_const(0xffff);
                              frame.i32_and();
                              local2 = frame.pop();
                              frame.push(arg3);
                              frame.i64_load(2, 8);
                              local3 = frame.pop();
                              frame.push(arg3);
                              frame.i32_load(2, 4);
                              local4 = frame.pop();
                              frame.push(arg3);
                              frame.i32_load(2, 0);
                              local5 = frame.pop();
                              frame.push(arg1);
                              frame.i32_const(0);
                              frame.i32_store(2, 0);
                              frame.push(arg1);
                              frame.i32_const(4);
                              frame.i32_add();
                              arg2 = frame.pop();
                              frame.i32_const(1);
                              local6 = frame.pop();
                              frame.push(local1);
                              var t0 = frame.pop();
                              switch (t0) {
                                case 0:
                                  break block_label_2;
                                case 1:
                                  break block_label_9;
                                case 2:
                                  break block_label_11;
                                default:
                                  break block_label_2;
                              }
                            }
                            throw Trap('unreachable');
                            throw Trap('unreachable');
                          }
                          frame.push(local0);
                          frame.i32_const(8);
                          frame.i32_add();
                          frame.i32_const(8);
                          frame.i32_add();
                          frame.push(arg2);
                          frame.i32_const(8);
                          frame.i32_add();
                          frame.i32_load(2, 0);
                          arg3 = frame.peek();
                          frame.i32_store(2, 0);
                          frame.push(local0);
                          frame.push(arg2);
                          frame.i64_load(2, 0);
                          frame.i64_store(3, 8);
                          frame.push(arg3);
                          frame.push(local8);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) break block_label_7;
                        }
                        block_label_10:
                        {
                          frame.push(local0);
                          frame.i32_load(2, 12);
                          frame.push(arg3);
                          frame.i32_ne();
                          if (frame.pop() != 0) break block_label_10;
                          frame.push(local0);
                          frame.i32_const(8);
                          frame.i32_add();
                          frame.push(arg3);
                          {
                            var t1 = frame.pop();
                            var t0 = frame.pop();
                            _func068(t0, t1);
                          }
                        }
                        frame.push(local0);
                        frame.i32_load(2, 8);
                        frame.push(local8);
                        frame.i32_const(20);
                        frame.i32_mul();
                        frame.i32_add();
                        local6 = frame.peek();
                        frame.i32_const(20);
                        frame.i32_add();
                        frame.push(local6);
                        frame.push(arg3);
                        frame.push(local8);
                        frame.i32_sub();
                        frame.i32_const(20);
                        frame.i32_mul();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_memmove(t0, t1, t2));
                        }
                        frame.drop();
                        frame.push(local6);
                        frame.push(local3);
                        frame.i64_store(2, 12);
                        frame.push(local6);
                        frame.push(local4);
                        frame.i32_store(2, 8);
                        frame.push(local6);
                        frame.push(local5);
                        frame.i32_store(2, 4);
                        frame.push(local6);
                        frame.push(local2);
                        frame.i32_store(2, 0);
                        frame.push(arg3);
                        frame.i32_const(1);
                        frame.i32_add();
                        local4 = frame.pop();
                        frame.push(local0);
                        frame.i32_load(2, 12);
                        local5 = frame.pop();
                        frame.push(local0);
                        frame.i32_load(2, 8);
                        local2 = frame.pop();
                        break block_label_3;
                      }
                      frame.i32_const(0xf5160);
                      frame.i32_const(40);
                      {
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        frame.push(_func019(t0, t1));
                      }
                      local6 = frame.pop();
                      frame.push(local8);
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_5;
                      frame.push(local6);
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_6;
                      frame.push(local6);
                      frame.push(local3);
                      frame.i64_store(2, 32);
                      frame.push(local6);
                      frame.push(local4);
                      frame.i32_store(2, 28);
                      frame.push(local6);
                      frame.push(local5);
                      frame.i32_store(2, 24);
                      frame.push(local6);
                      frame.push(local2);
                      frame.i32_store(2, 20);
                      frame.push(local6);
                      frame.push(arg2);
                      frame.i64_load(2, 0);
                      frame.i64_store(2, 0);
                      frame.push(local6);
                      frame.i32_const(16);
                      frame.i32_add();
                      frame.push(arg2);
                      frame.i32_const(16);
                      frame.i32_add();
                      frame.i32_load(2, 0);
                      frame.i32_store(2, 0);
                      frame.push(local6);
                      frame.i32_const(8);
                      frame.i32_add();
                      frame.push(arg2);
                      frame.i32_const(8);
                      frame.i32_add();
                      frame.i64_load(2, 0);
                      frame.i64_store(2, 0);
                      break block_label_4;
                    }
                    frame.push(local0);
                    frame.i32_const(8);
                    frame.i32_add();
                    frame.i32_const(10);
                    frame.i32_add();
                    frame.push(arg3);
                    frame.i32_const(8);
                    frame.i32_add();
                    frame.i64_load(1, 0);
                    frame.i64_store(1, 0);
                    frame.push(arg0);
                    frame.push(arg2);
                    frame.i32_store16(1, 0);
                    frame.push(local0);
                    frame.push(arg3);
                    frame.i64_load(1, 0);
                    frame.i64_store(1, 10);
                    frame.push(arg0);
                    frame.push(local0);
                    frame.i64_load(3, 8);
                    frame.i64_store(1, 2);
                    frame.push(arg0);
                    frame.i32_const(10);
                    frame.i32_add();
                    frame.push(local0);
                    frame.i32_const(8);
                    frame.i32_add();
                    frame.i32_const(8);
                    frame.i32_add();
                    frame.i64_load(3, 0);
                    frame.i64_store(1, 0);
                    frame.push(arg0);
                    frame.i32_const(18);
                    frame.i32_add();
                    frame.push(local0);
                    frame.i32_const(24);
                    frame.i32_add();
                    frame.i32_load16_u(1, 0);
                    frame.i32_store16(1, 0);
                    break block_label_1;
                  }
                  frame.push(local8);
                  frame.push(arg3);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func038(t0, t1);
                  }
                  throw Trap('unreachable');
                }
                frame.i32_const(40);
                frame.i32_const(4);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
                }
                throw Trap('unreachable');
              }
              frame.push(local6);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.push(local6);
              frame.push(local3);
              frame.i64_store(2, 12);
              frame.push(local6);
              frame.push(local4);
              frame.i32_store(2, 8);
              frame.push(local6);
              frame.push(local5);
              frame.i32_store(2, 4);
              frame.push(local6);
              frame.push(local2);
              frame.i32_store(2, 0);
              frame.push(local6);
              frame.push(arg2);
              frame.i64_load(2, 0);
              frame.i64_store(2, 20);
              frame.push(local6);
              frame.i32_const(28);
              frame.i32_add();
              frame.push(arg2);
              frame.i32_const(8);
              frame.i32_add();
              frame.i64_load(2, 0);
              frame.i64_store(2, 0);
              frame.push(local6);
              frame.i32_const(36);
              frame.i32_add();
              frame.push(arg2);
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_load(2, 0);
              frame.i32_store(2, 0);
            }
            frame.i32_const(2);
            local5 = frame.pop();
            frame.push(local6);
            local2 = frame.pop();
            frame.i32_const(2);
            local4 = frame.pop();
          }
          frame.i32_const(2);
          local6 = frame.pop();
        }
        frame.push(arg1);
        {
          var t0 = frame.pop();
          _func053(t0);
        }
        frame.push(arg1);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local3);
        frame.i64_store(2, 0);
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(local4);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local5);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local6);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(3);
        frame.i32_store8(0, 4);
      }
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    frame.i32_const(40);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func076(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_store16(1, 0);
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 8);
              local2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              local3 = frame.pop();
              frame.push(local2);
              local4 = frame.pop();
              frame.push(local2);
              local5 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.push(local4);
                frame.i32_const(1);
                frame.i32_shr_u();
                frame.push(local3);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_const(4);
                frame.i32_shl();
                frame.i32_add();
                local7 = frame.pop();
                frame.i32_const(0);
                local4 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local4);
                  frame.i32_const(2);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_3;
                  frame.push(local7);
                  frame.push(local4);
                  frame.i32_add();
                  local8 = frame.pop();
                  frame.push(local0);
                  frame.push(local4);
                  frame.i32_add();
                  local9 = frame.pop();
                  frame.push(local4);
                  frame.i32_const(1);
                  frame.i32_add();
                  local4 = frame.pop();
                  frame.push(local8);
                  frame.i32_load8_u(0, 0);
                  local8 = frame.peek();
                  frame.push(local9);
                  frame.i32_load8_u(0, 0);
                  local9 = frame.peek();
                  frame.i32_eq();
                  if (frame.pop() != 0) continue loop_label_6;
                  break;
                }
                frame.push(local5);
                frame.push(local6);
                frame.push(local8);
                frame.push(local9);
                frame.i32_lt_u();
                local4 = frame.peek();
                frame.select();
                local5 = frame.peek();
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                frame.push(local3);
                frame.push(local4);
                frame.select();
                local3 = frame.peek();
                frame.i32_sub();
                local4 = frame.pop();
                frame.push(local5);
                frame.push(local3);
                frame.i32_gt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
              frame.push(local0);
              frame.i32_const(12);
              frame.i32_add();
              frame.push(arg3);
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_load(1, 0);
              frame.i32_store(1, 0);
              frame.push(local0);
              frame.push(arg3);
              frame.i64_load(1, 0);
              frame.i64_store(1, 4);
              frame.push(local2);
              frame.push(local3);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_2;
              break block_label_1;
            }
            frame.push(local0);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(arg3);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_load(1, 0);
            frame.i32_store(1, 0);
            frame.push(local0);
            frame.push(arg3);
            frame.i64_load(1, 0);
            frame.i64_store(1, 4);
            frame.i32_const(0);
            local3 = frame.pop();
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_const(12);
          frame.i32_add();
          frame.push(arg3);
          frame.i32_const(8);
          frame.i32_add();
          frame.i32_load(1, 0);
          frame.i32_store(1, 0);
          frame.push(arg0);
          frame.push(arg2);
          frame.i32_store16(1, 0);
          frame.push(local0);
          frame.push(arg3);
          frame.i64_load(1, 0);
          frame.i64_store(1, 4);
          frame.push(arg0);
          frame.i32_const(2);
          frame.i32_add();
          frame.push(local0);
          frame.i64_load(1, 2);
          frame.i64_store(1, 0);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(1, 0);
          frame.i64_store(1, 0);
          break block_label_0;
        }
        frame.push(local3);
        frame.push(local2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func038(t0, t1);
        }
        throw Trap('unreachable');
      }
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.push(local2);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.push(local2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func069(t0, t1);
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.push(local3);
      frame.i32_const(4);
      frame.i32_shl();
      frame.i32_add();
      local4 = frame.peek();
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local4);
      frame.push(local2);
      frame.push(local3);
      frame.i32_sub();
      frame.i32_const(4);
      frame.i32_shl();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_memmove(t0, t1, t2));
      }
      frame.drop();
      frame.push(local4);
      frame.push(arg2);
      frame.i32_store16(1, 0);
      frame.push(local4);
      frame.push(local0);
      frame.i64_load(1, 2);
      frame.i64_store(1, 2);
      frame.push(local4);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i64_load(1, 0);
      frame.i64_store(1, 0);
      frame.push(arg1);
      frame.push(local2);
      frame.i32_const(1);
      frame.i32_add();
      frame.i32_store(2, 8);
      frame.push(arg0);
      frame.i32_const(128);
      frame.i32_store8(0, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func077(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(3);
          frame.i32_gt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store8(0, 14);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store16(1, 12);
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0);
            local1 = frame.pop();
            frame.i32_const(0);
            local2 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local3 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local2);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) break block_label_6;
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local3);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local2 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(12);
                  frame.i32_add();
                  frame.push(local1);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_0;
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(12);
                frame.i32_add();
                frame.push(local1);
                frame.i32_add();
                frame.push(local3);
                frame.i32_store8(0, 0);
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_load16_u(1, 12);
                frame.push(local0);
                frame.i32_load8_u(0, 14);
                frame.i32_const(16);
                frame.i32_shl();
                frame.i32_or();
                local1 = frame.pop();
                break block_label_1;
              }
              frame.push(local3);
              frame.i32_eqz();
              local2 = frame.pop();
              frame.push(local1);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i64_const(0x300000000);
        frame.i64_store(2, 0);
        return;
      }
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store16(0, 1);
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_add();
      frame.push(local1);
      frame.i32_const(16);
      frame.i32_shr_u();
      frame.i32_store8(0, 0);
      return;
    }
    frame.push(arg0);
    frame.i32_const(1);
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(4);
    frame.i32_add();
    frame.push(local2);
    frame.i32_store(2, 0);
  }

  void _func078(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(2);
          frame.i32_gt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store16(1, 14);
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0);
            local1 = frame.pop();
            frame.i32_const(0);
            local2 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local3 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local2);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) break block_label_6;
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local3);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local2 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(14);
                  frame.i32_add();
                  frame.push(local1);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_0;
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(14);
                frame.i32_add();
                frame.push(local1);
                frame.i32_add();
                frame.push(local3);
                frame.i32_store8(0, 0);
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                frame.i32_load16_u(1, 14);
                local1 = frame.pop();
                break block_label_1;
              }
              frame.push(local3);
              frame.i32_eqz();
              local2 = frame.pop();
              frame.push(local1);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i64_const(0x200000000);
        frame.i64_store(2, 0);
        return;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store16(0, 1);
      return;
    }
    frame.push(arg0);
    frame.i32_const(1);
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(4);
    frame.i32_add();
    frame.push(local2);
    frame.i32_store(2, 0);
  }

  void _func079(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i64 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 8);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_3;
                case 1:
                  break block_label_2;
                default:
                  break block_label_4;
              }
            }
            frame.push(arg0);
            frame.i32_const(2);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(arg1);
            frame.i64_load(2, 0);
            frame.i64_store(2, 0);
            frame.push(arg0);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_store(2, 0);
            return;
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg0);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.i32_const(0xf5160);
          frame.push(arg1);
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
          return;
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        local0 = frame.peek();
        frame.i64_load(0, 0);
        local1 = frame.peek();
        frame.i64_const(255);
        frame.i64_and();
        frame.i64_const(128);
        frame.i64_eq();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.push(local1);
        frame.i64_store(0, 1);
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0xf5160);
        frame.push(local0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func018(t0, t1);
        }
      }
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _ZN9icu_locid6langid18LanguageIdentifier19for_each_subtag_str17h3d2e1910f53abcf4E(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_const(18);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    local0 = frame.pop();
    frame.push(arg0);
    frame.i32_load16_u(1, 16);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.i32_load8_u(0, 0);
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(1);
          local3 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg1 = frame.peek();
          frame.i32_load(2, 24);
          frame.i32_const(45);
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_load(2, 16);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType1) throw Trap('indirect call type mismatch');
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1));
          }
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          break block_label_0;
        }
        frame.push(local2);
        frame.i32_const(0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg1 = frame.pop();
      }
      frame.i32_const(1);
      local3 = frame.pop();
      frame.push(arg1);
      frame.i32_load(2, 24);
      frame.push(arg0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(4);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      frame.i32_clz();
      frame.i32_const(3);
      frame.i32_shr_u();
      frame.i32_sub();
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 19);
        frame.i32_const(128);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.i32_const(19);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_load(0, 0);
        local1 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local2);
            frame.i32_load8_u(0, 0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg1);
            frame.i32_load(2, 24);
            frame.i32_const(45);
            frame.push(arg1);
            frame.i32_load(2, 28);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) break block_label_0;
            break block_label_2;
          }
          frame.push(local2);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
        }
        frame.push(arg1);
        frame.i32_load(2, 24);
        frame.push(local0);
        frame.i32_const(4);
        frame.push(local1);
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_load(2, 28);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        if (frame.pop() != 0) break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 23);
        frame.i32_const(128);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.i32_const(23);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(2);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        local1 = frame.pop();
        frame.push(local0);
        frame.i32_load16_u(0, 0);
        local4 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local2);
            frame.i32_load8_u(0, 0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg1);
            frame.i32_load(2, 24);
            frame.i32_const(45);
            frame.push(arg1);
            frame.i32_load(2, 28);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) break block_label_0;
            break block_label_2;
          }
          frame.push(local2);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
        }
        frame.push(arg1);
        frame.i32_load(2, 24);
        frame.push(local0);
        frame.i32_const(4);
        frame.push(local4);
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_load(2, 28);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        if (frame.pop() != 0) break block_label_0;
      }
      frame.i32_const(0xf4388);
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 0);
            local0 = frame.peek();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_1;
              case 1:
                break block_label_3;
              case 2:
                break block_label_2;
              default:
                break block_label_1;
            }
          }
          frame.i32_const(1);
          local0 = frame.pop();
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_add();
          local3 = frame.pop();
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local0 = frame.pop();
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i32_load(2, 0);
        local3 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      local0 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(local0);
          arg0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(local3);
          frame.i64_load(0, 0);
          local5 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local2);
              frame.i32_load8_u(0, 0);
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.i32_load(2, 24);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 28);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) break block_label_1;
              break block_label_3;
            }
            frame.push(local2);
            frame.i32_const(0);
            frame.i32_store8(0, 0);
          }
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 24);
          frame.push(local3);
          frame.i32_const(8);
          frame.push(local5);
          frame.i64_clz();
          frame.i32_wrap_i64();
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_sub();
          frame.push(arg1);
          frame.i32_load(2, 28);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType0) throw Trap('indirect call type mismatch');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          local1 = frame.pop();
          frame.push(local3);
          frame.i32_const(8);
          frame.i32_add();
          local3 = frame.pop();
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_ne();
      local3 = frame.pop();
    }
    frame.push(local3);
    return frame.pop();
  }

  void _ZN9icu_locid6locale6Locale14try_from_bytes17h4e25ec3255dee6b0E(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;
    i32 local24 = 0;
    i32 local25 = 0;
    i32 local26 = 0;
    i32 local27 = 0;
    i64 local28 = 0;
    i64 local29 = 0;
    i32 local30 = 0;
    i32 local31 = 0;
    i64 local32 = 0;
    i64 local33 = 0;
    i64 local34 = 0;
    i64 local35 = 0;
    i32 local36 = 0;
    i32 local37 = 0;
    i32 local38 = 0;
    i32 local39 = 0;
    i32 local40 = 0;
    i32 local41 = 0;
    i32 local42 = 0;
    i32 local43 = 0;
    i64 local44 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(512);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    frame.i32_const(0);
    local2 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_load8_u(0, 0);
      local3 = frame.peek();
      frame.i32_const(45);
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      local2 = frame.pop();
      frame.push(local3);
      frame.i32_const(95);
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      frame.push(arg1);
      frame.push(arg2);
      frame.i32_const(0);
      {
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN9icu_locid6parser18get_current_subtag17h7a2bec06e6132e7cE(t0, t1, t2, t3);
      }
      frame.push(local0);
      frame.i32_load(2, 84);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 80);
      local2 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(88);
    frame.i32_add();
    frame.i32_const(12);
    frame.i32_add();
    frame.push(local1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store8(0, 104);
    frame.push(local0);
    frame.push(arg2);
    frame.i32_store(2, 92);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 88);
    frame.push(local0);
    frame.push(local2);
    frame.i32_store(2, 96);
    frame.i32_const(1);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(232);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(88);
    frame.i32_add();
    frame.i32_const(1);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN9icu_locid6parser6langid35parse_language_identifier_from_iter17hec27c1d439ee1af1E(t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local0);
              frame.i32_load8_u(0, 232);
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(134);
              frame.i32_add();
              local4 = frame.peek();
              frame.push(local0);
              frame.i32_load8_u(0, 239);
              frame.i32_store8(0, 0);
              frame.push(local0);
              frame.i32_const(112);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              local5 = frame.peek();
              frame.push(local0);
              frame.i32_const(232);
              frame.i32_add();
              frame.i32_const(24);
              frame.i32_add();
              frame.i64_load(3, 0);
              frame.i64_store(3, 0);
              frame.push(local0);
              frame.push(local0);
              frame.i32_load16_u(0, 237);
              frame.i32_store16(1, 132);
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(232);
              frame.i32_add();
              frame.i32_const(16);
              frame.i32_add();
              frame.i64_load(3, 0);
              frame.i64_store(3, 112);
              frame.push(local0);
              frame.i32_const(232);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_load(2, 0);
              local6 = frame.pop();
              frame.push(local0);
              frame.i32_const(232);
              frame.i32_add();
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_load(2, 0);
              local7 = frame.pop();
              frame.push(local0);
              frame.i32_load8_u(0, 236);
              local8 = frame.pop();
              frame.i32_const(3);
              local2 = frame.pop();
              frame.i32_const(0);
              local9 = frame.pop();
              frame.i32_const(0);
              local10 = frame.pop();
              frame.i32_const(4);
              local11 = frame.pop();
              frame.i32_const(0);
              local12 = frame.pop();
              frame.i32_const(0);
              local13 = frame.pop();
              frame.i32_const(0);
              arg2 = frame.pop();
              frame.i32_const(0);
              arg1 = frame.pop();
              frame.i32_const(4);
              local3 = frame.pop();
              frame.i32_const(0);
              local14 = frame.pop();
              frame.i32_const(0);
              local15 = frame.pop();
              frame.i32_const(1);
              local16 = frame.pop();
              frame.i32_const(0);
              local17 = frame.pop();
              frame.push(local0);
              frame.i32_load8_u(0, 104);
              if (frame.pop() != 0) break block_label_2;
              frame.push(local0);
              frame.i32_load(2, 100);
              local1 = frame.peek();
              frame.push(local0);
              frame.i32_load(2, 96);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_0;
              frame.push(local1);
              frame.push(local0);
              frame.i32_load(2, 92);
              frame.i32_le_u();
              if (frame.pop() != 0) break block_label_3;
              break block_label_0;
            }
            frame.push(local0);
            frame.i32_load8_u(0, 233);
            local1 = frame.pop();
            frame.push(arg0);
            frame.i32_const(1);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.push(local1);
            frame.i32_store8(0, 1);
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_store(2, 192);
          frame.push(local0);
          frame.i32_const(4);
          frame.i32_store8(0, 232);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 280);
          frame.push(local0);
          frame.i64_const(4);
          frame.i64_store(3, 272);
          frame.push(local0);
          frame.i32_const(72);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(88);
          frame.i32_add();
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func049(t0, t1);
          }
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_load(2, 72);
                  local1 = frame.peek();
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(1);
                  local16 = frame.pop();
                  frame.i32_const(0);
                  local18 = frame.pop();
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(288);
                frame.i32_add();
                frame.i32_const(2);
                frame.i32_add();
                local19 = frame.pop();
                frame.push(local0);
                frame.i32_const(328);
                frame.i32_add();
                frame.i32_const(2);
                frame.i32_add();
                local20 = frame.pop();
                frame.push(local0);
                frame.i32_const(448);
                frame.i32_add();
                local21 = frame.pop();
                frame.push(local0);
                frame.i32_load(2, 76);
                local2 = frame.pop();
                frame.push(local0);
                frame.i32_const(260);
                frame.i32_add();
                local22 = frame.pop();
                frame.push(local0);
                frame.i32_const(244);
                frame.i32_add();
                local23 = frame.pop();
                frame.push(local0);
                frame.i32_const(232);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_or();
                local24 = frame.pop();
                frame.push(local0);
                frame.i32_const(328);
                frame.i32_add();
                frame.i32_const(16);
                frame.i32_add();
                local25 = frame.pop();
                frame.push(local0);
                frame.i32_const(328);
                frame.i32_add();
                frame.i32_const(5);
                frame.i32_or();
                local26 = frame.pop();
                frame.push(local0);
                frame.i32_const(464);
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_add();
                local27 = frame.pop();
                frame.i32_const(0);
                local18 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    loop_label_8:
                    for (;;) {
                      frame.i32_const(2);
                      local12 = frame.pop();
                      frame.push(local2);
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_7;
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.push(local1);
                                                  frame.i32_load8_u(0, 0);
                                                  arg1 = frame.peek();
                                                  frame.i32_const(-65);
                                                  frame.i32_add();
                                                  frame.i32_const(255);
                                                  frame.i32_and();
                                                  frame.i32_const(26);
                                                  frame.i32_lt_u();
                                                  frame.i32_const(5);
                                                  frame.i32_shl();
                                                  frame.push(arg1);
                                                  frame.i32_or();
                                                  local14 = frame.peek();
                                                  frame.i32_const(255);
                                                  frame.i32_and();
                                                  local17 = frame.peek();
                                                  frame.i32_const(-116);
                                                  frame.i32_add();
                                                  var t0 = frame.pop();
                                                  switch (t0) {
                                                    case 0:
                                                      break block_label_21;
                                                    case 1:
                                                      break block_label_20;
                                                    case 2:
                                                      break block_label_22;
                                                    case 3:
                                                      break block_label_22;
                                                    case 4:
                                                      break block_label_18;
                                                    default:
                                                      break block_label_22;
                                                  }
                                                }
                                                frame.push(local14);
                                                frame.i32_const(-97);
                                                frame.i32_add();
                                                frame.i32_const(255);
                                                frame.i32_and();
                                                frame.i32_const(26);
                                                frame.i32_lt_u();
                                                if (frame.pop() != 0) break block_label_17;
                                                break block_label_7;
                                              }
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 232);
                                              frame.i32_const(4);
                                              frame.i32_eq();
                                              if (frame.pop() != 0) break block_label_19;
                                              break block_label_9;
                                            }
                                            frame.push(local0);
                                            frame.i32_load(2, 192);
                                            frame.i32_const(3);
                                            frame.i32_ne();
                                            if (frame.pop() != 0) break block_label_9;
                                            frame.push(local0);
                                            frame.i32_const(0);
                                            frame.i32_store(2, 488);
                                            frame.push(local0);
                                            frame.i64_const(1);
                                            frame.i64_store(3, 480);
                                            frame.push(local0);
                                            frame.i32_const(384);
                                            frame.i32_add();
                                            frame.i32_const(16);
                                            frame.i32_add();
                                            local13 = frame.peek();
                                            frame.i64_const(0);
                                            frame.i64_store(3, 0);
                                            frame.push(local0);
                                            frame.i32_const(384);
                                            frame.i32_add();
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            local14 = frame.peek();
                                            frame.i64_const(0);
                                            frame.i64_store(3, 0);
                                            frame.push(local0);
                                            frame.i64_const(0);
                                            frame.i64_store(3, 384);
                                            frame.push(local0);
                                            frame.i32_const(0);
                                            frame.i32_store(2, 504);
                                            frame.push(local0);
                                            frame.i64_const(1);
                                            frame.i64_store(3, 496);
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 104);
                                            if (frame.pop() != 0) break block_label_15;
                                            frame.push(local0);
                                            frame.i32_load(2, 100);
                                            local1 = frame.peek();
                                            frame.push(local0);
                                            frame.i32_load(2, 96);
                                            local2 = frame.peek();
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_0;
                                            frame.push(local1);
                                            frame.push(local0);
                                            frame.i32_load(2, 92);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) break block_label_0;
                                            frame.push(local1);
                                            frame.push(local2);
                                            frame.i32_sub();
                                            local1 = frame.peek();
                                            frame.i32_const(-9);
                                            frame.i32_add();
                                            frame.i32_const(-6);
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_16;
                                            frame.push(local0);
                                            frame.i32_load(2, 88);
                                            frame.push(local2);
                                            frame.i32_add();
                                            arg2 = frame.pop();

                                            loop_label_20:
                                            for (;;) {
                                              frame.push(local0);
                                              frame.i32_const(424);
                                              frame.i32_add();
                                              frame.push(arg2);
                                              frame.push(local1);
                                              frame.push(local1);
                                              {
                                                var t3 = frame.pop();
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func050(t0, t1, t2, t3);
                                              }
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 424);
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local0);
                                                  frame.i64_load(0, 425);
                                                  local28 = frame.peek();
                                                  frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                  frame.i64_add();
                                                  frame.i64_const(-0x5050505050505051);
                                                  frame.push(local28);
                                                  frame.i64_sub();
                                                  frame.push(local28);
                                                  frame.i64_const(0x4646464646464646);
                                                  frame.i64_add();
                                                  frame.i64_or();
                                                  frame.i64_and();
                                                  frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                  frame.push(local28);
                                                  frame.i64_const(0x2020202020202020);
                                                  frame.i64_or();
                                                  local29 = frame.peek();
                                                  frame.i64_sub();
                                                  frame.push(local29);
                                                  frame.i64_const(0x505050505050505);
                                                  frame.i64_add();
                                                  frame.i64_or();
                                                  frame.i64_and();
                                                  frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                  frame.i64_and();
                                                  frame.i64_eqz();
                                                  if (frame.pop() != 0) break block_label_21;
                                                }
                                                frame.push(local0);
                                                frame.i32_load8_u(0, 104);
                                                if (frame.pop() != 0) break block_label_15;
                                                break block_label_16;
                                              }
                                              frame.push(local0);
                                              frame.push(local28);
                                              frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                              frame.i64_add();
                                              frame.i64_const(-0x2525252525252526);
                                              frame.push(local28);
                                              frame.i64_sub();
                                              frame.i64_and();
                                              frame.i64_const(2);
                                              frame.i64_shr_u();
                                              frame.i64_const(0x2020202020202020);
                                              frame.i64_and();
                                              frame.push(local28);
                                              frame.i64_or();
                                              local28 = frame.peek();
                                              frame.i64_store(3, 424);
                                              frame.push(local0);
                                              frame.i32_load(2, 480);
                                              local9 = frame.pop();
                                              frame.i32_const(0);
                                              local3 = frame.pop();
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.push(local0);
                                                  frame.i32_load(2, 488);
                                                  local17 = frame.peek();
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local17);
                                                  local1 = frame.pop();
                                                  frame.push(local17);
                                                  local10 = frame.pop();

                                                  loop_label_23:
                                                  for (;;) {
                                                    frame.push(local9);
                                                    frame.push(local1);
                                                    frame.i32_const(1);
                                                    frame.i32_shr_u();
                                                    frame.push(local3);
                                                    frame.i32_add();
                                                    local11 = frame.peek();
                                                    frame.i32_const(3);
                                                    frame.i32_shl();
                                                    frame.i32_add();
                                                    arg1 = frame.pop();
                                                    frame.i32_const(0);
                                                    local1 = frame.pop();

                                                    loop_label_24:
                                                    for (;;) {
                                                      frame.push(local1);
                                                      frame.i32_const(8);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) break block_label_21;
                                                      frame.push(arg1);
                                                      frame.push(local1);
                                                      frame.i32_add();
                                                      local2 = frame.pop();
                                                      frame.push(local0);
                                                      frame.i32_const(424);
                                                      frame.i32_add();
                                                      frame.push(local1);
                                                      frame.i32_add();
                                                      arg2 = frame.pop();
                                                      frame.push(local1);
                                                      frame.i32_const(1);
                                                      frame.i32_add();
                                                      local1 = frame.pop();
                                                      frame.push(local2);
                                                      frame.i32_load8_u(0, 0);
                                                      local2 = frame.peek();
                                                      frame.push(arg2);
                                                      frame.i32_load8_u(0, 0);
                                                      arg2 = frame.peek();
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) continue loop_label_24;
                                                      break;
                                                    }
                                                    frame.push(local10);
                                                    frame.push(local11);
                                                    frame.push(local2);
                                                    frame.push(arg2);
                                                    frame.i32_lt_u();
                                                    local1 = frame.peek();
                                                    frame.select();
                                                    local10 = frame.peek();
                                                    frame.push(local11);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    frame.push(local3);
                                                    frame.push(local1);
                                                    frame.select();
                                                    local3 = frame.peek();
                                                    frame.i32_sub();
                                                    local1 = frame.pop();
                                                    frame.push(local10);
                                                    frame.push(local3);
                                                    frame.i32_gt_u();
                                                    if (frame.pop() != 0) continue loop_label_23;
                                                    break;
                                                  }
                                                  frame.push(local17);
                                                  frame.push(local3);
                                                  frame.i32_ge_u();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local3);
                                                  frame.push(local17);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func038(t0, t1);
                                                  }
                                                  throw Trap('unreachable');
                                                }
                                                block_label_22:
                                                {
                                                  frame.push(local0);
                                                  frame.i32_load(2, 484);
                                                  frame.push(local17);
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local0);
                                                  frame.i32_const(480);
                                                  frame.i32_add();
                                                  frame.push(local17);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func067(t0, t1);
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load(2, 480);
                                                  local9 = frame.pop();
                                                }
                                                frame.push(local9);
                                                frame.push(local3);
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                frame.i32_add();
                                                local1 = frame.peek();
                                                frame.i32_const(8);
                                                frame.i32_add();
                                                frame.push(local1);
                                                frame.push(local17);
                                                frame.push(local3);
                                                frame.i32_sub();
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                {
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  frame.push(_memmove(t0, t1, t2));
                                                }
                                                frame.drop();
                                                frame.push(local1);
                                                frame.push(local28);
                                                frame.i64_store(0, 0);
                                                frame.push(local0);
                                                frame.push(local17);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                frame.i32_store(2, 488);
                                              }
                                              frame.push(local0);
                                              frame.i32_const(32);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(88);
                                              frame.i32_add();
                                              {
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func049(t0, t1);
                                              }
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 104);
                                              if (frame.pop() != 0) break block_label_15;
                                              frame.push(local0);
                                              frame.i32_load(2, 100);
                                              local1 = frame.peek();
                                              frame.push(local0);
                                              frame.i32_load(2, 96);
                                              local2 = frame.peek();
                                              frame.i32_lt_u();
                                              if (frame.pop() != 0) break block_label_0;
                                              frame.push(local1);
                                              frame.push(local0);
                                              frame.i32_load(2, 92);
                                              frame.i32_gt_u();
                                              if (frame.pop() != 0) break block_label_0;
                                              frame.push(local0);
                                              frame.i32_load(2, 88);
                                              frame.push(local2);
                                              frame.i32_add();
                                              arg2 = frame.pop();
                                              frame.push(local1);
                                              frame.push(local2);
                                              frame.i32_sub();
                                              local1 = frame.peek();
                                              frame.i32_const(-9);
                                              frame.i32_add();
                                              frame.i32_const(-6);
                                              frame.i32_ge_u();
                                              if (frame.pop() != 0) continue loop_label_20;
                                              break block_label_16;
                                              break;
                                            }
                                          }
                                          frame.push(local27);
                                          frame.i32_const(0);
                                          frame.i32_load(2, 0xf4390);
                                          frame.i32_store(2, 0);
                                          frame.push(local0);
                                          frame.i32_const(0);
                                          frame.i64_load(2, 0xf4388);
                                          frame.i64_store(3, 464);
                                          frame.i32_const(3);
                                          local13 = frame.pop();
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 104);
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local0);
                                            frame.i32_load(2, 100);
                                            local1 = frame.peek();
                                            frame.push(local0);
                                            frame.i32_load(2, 96);
                                            local2 = frame.peek();
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_0;
                                            frame.push(local1);
                                            frame.push(local0);
                                            frame.i32_load(2, 92);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) break block_label_0;
                                            frame.push(local0);
                                            frame.i32_load(2, 88);
                                            frame.push(local2);
                                            frame.i32_add();
                                            frame.push(local1);
                                            frame.push(local2);
                                            frame.i32_sub();
                                            local1 = frame.peek();
                                            frame.push(local1);
                                            {
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              frame.push(
                                                  _ZN9icu_locid7subtags8language8Language27try_from_bytes_manual_slice17h8c2c00b0b683313bE(
                                                      t0, t1, t2));
                                            }
                                            frame.i32_const(255);
                                            frame.i32_and();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local0);
                                            frame.i32_const(328);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(88);
                                            frame.i32_add();
                                            frame.i32_const(2);
                                            {
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _ZN9icu_locid6parser6langid35parse_language_identifier_from_iter17hec27c1d439ee1af1E(
                                                  t0, t1, t2);
                                            }
                                            block_label_20:
                                            {
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 328);
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local0);
                                              frame.i32_const(460);
                                              frame.i32_add();
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.push(local26);
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.i32_load8_u(0, 0);
                                              frame.i32_store8(0, 0);
                                              frame.push(local0);
                                              frame.i32_const(424);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.push(local25);
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.i64_load(2, 0);
                                              frame.i64_store(3, 0);
                                              frame.push(local0);
                                              frame.push(local26);
                                              frame.i32_load16_u(0, 0);
                                              frame.i32_store16(1, 460);
                                              frame.push(local0);
                                              frame.push(local25);
                                              frame.i64_load(2, 0);
                                              frame.i64_store(3, 424);
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 332);
                                              local13 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 336);
                                              local30 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 340);
                                              local31 = frame.pop();
                                              break block_label_19;
                                            }
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 329);
                                            local12 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_const(464);
                                            frame.i32_add();
                                            {
                                              var t0 = frame.pop();
                                              _func052(t0);
                                            }
                                            break block_label_7;
                                          }
                                          frame.i32_const(0);
                                          local1 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_const(0);
                                          frame.i32_store(2, 488);
                                          frame.push(local0);
                                          frame.i64_const(1);
                                          frame.i64_store(3, 480);
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 104);
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local0);
                                                  frame.i32_load(2, 100);
                                                  local1 = frame.peek();
                                                  frame.push(local0);
                                                  frame.i32_load(2, 96);
                                                  local2 = frame.peek();
                                                  frame.i32_lt_u();
                                                  if (frame.pop() != 0) break block_label_0;
                                                  frame.push(local1);
                                                  frame.push(local0);
                                                  frame.i32_load(2, 92);
                                                  frame.i32_gt_u();
                                                  if (frame.pop() != 0) break block_label_0;
                                                  frame.push(local1);
                                                  frame.push(local2);
                                                  frame.i32_sub();
                                                  arg2 = frame.pop();
                                                  frame.push(local0);
                                                  frame.i32_load(2, 88);
                                                  frame.push(local2);
                                                  frame.i32_add();
                                                  local3 = frame.pop();
                                                  frame.i32_const(128);
                                                  local17 = frame.pop();

                                                  loop_label_23:
                                                  for (;;) {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                frame.push(local17);
                                                                frame.i32_const(255);
                                                                frame.i32_and();
                                                                local10 = frame.peek();
                                                                frame.i32_const(128);
                                                                frame.i32_eq();
                                                                if (frame.pop() != 0) break block_label_29;
                                                                frame.i64_const(1);
                                                                local28 = frame.pop();
                                                                frame.push(arg2);
                                                                frame.i32_const(8);
                                                                frame.i32_gt_u();
                                                                if (frame.pop() != 0) break block_label_27;
                                                                frame.push(local0);
                                                                frame.i64_const(0);
                                                                frame.i64_store(3, 328);
                                                                frame.push(arg2);
                                                                frame.i32_eqz();
                                                                if (frame.pop() != 0) break block_label_28;
                                                                frame.i32_const(0);
                                                                local1 = frame.pop();
                                                                frame.i32_const(0);
                                                                arg1 = frame.pop();

                                                                loop_label_30:
                                                                for (;;) {
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      frame.push(local3);
                                                                      frame.push(local1);
                                                                      frame.i32_add();
                                                                      frame.i32_load8_s(0, 0);
                                                                      local2 = frame.peek();
                                                                      frame.i32_eqz();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_32;
                                                                      frame.push(arg1);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_xor();
                                                                      frame.push(local2);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_gt_s();
                                                                      frame.i32_and();
                                                                      frame.i32_eqz();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_27;
                                                                      frame.push(local0);
                                                                      frame.i32_const(328);
                                                                      frame.i32_add();
                                                                      frame.push(local1);
                                                                      frame.i32_add();
                                                                      frame.push(local2);
                                                                      frame.i32_store8(0, 0);
                                                                      frame.push(local1);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local1 = frame.peek();
                                                                      frame.push(arg2);
                                                                      frame.i32_ne();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_31;
                                                                      frame.i64_const(2);
                                                                      local28 = frame.pop();
                                                                      frame.push(arg2);
                                                                      frame.i32_const(-3);
                                                                      frame.i32_add();
                                                                      frame.i32_const(5);
                                                                      frame.i32_gt_u();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_27;
                                                                      frame.push(local0);
                                                                      frame.i64_load(3, 328);
                                                                      local32 = frame.peek();
                                                                      frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                                      frame.i64_add();
                                                                      frame.i64_const(-0x5050505050505051);
                                                                      frame.push(local32);
                                                                      frame.i64_sub();
                                                                      frame.push(local32);
                                                                      frame.i64_const(0x4646464646464646);
                                                                      frame.i64_add();
                                                                      frame.i64_or();
                                                                      frame.i64_and();
                                                                      frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                                      frame.push(local32);
                                                                      frame.i64_const(0x2020202020202020);
                                                                      frame.i64_or();
                                                                      local33 = frame.peek();
                                                                      frame.i64_sub();
                                                                      frame.push(local33);
                                                                      frame.i64_const(0x505050505050505);
                                                                      frame.i64_add();
                                                                      frame.i64_or();
                                                                      frame.i64_and();
                                                                      frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                                      frame.i64_and();
                                                                      frame.i64_const(0);
                                                                      frame.i64_ne();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_27;
                                                                      frame.push(local0);
                                                                      frame.push(local32);
                                                                      frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                                                      frame.i64_add();
                                                                      frame.i64_const(-0x2525252525252526);
                                                                      frame.push(local32);
                                                                      frame.i64_sub();
                                                                      frame.i64_and();
                                                                      frame.i64_const(2);
                                                                      frame.i64_shr_u();
                                                                      frame.i64_const(0x2020202020202020);
                                                                      frame.i64_and();
                                                                      frame.push(local32);
                                                                      frame.i64_or();
                                                                      local28 = frame.peek();
                                                                      frame.i64_store(3, 328);
                                                                      frame.i32_const(0);
                                                                      local1 = frame.pop();
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          loop_label_35:
                                                                          for (;;) {
                                                                            frame.push(local1);
                                                                            frame.i32_const(8);
                                                                            frame.i32_eq();
                                                                            if (frame.pop() != 0)
                                                                              break block_label_34;
                                                                            frame.push(local1);
                                                                            frame.i32_const(0xf4394);
                                                                            frame.i32_add();
                                                                            local2 = frame.pop();
                                                                            frame.push(local0);
                                                                            frame.i32_const(328);
                                                                            frame.i32_add();
                                                                            frame.push(local1);
                                                                            frame.i32_add();
                                                                            arg2 = frame.pop();
                                                                            frame.push(local1);
                                                                            frame.i32_const(1);
                                                                            frame.i32_add();
                                                                            arg1 = frame.peek();
                                                                            local1 = frame.pop();
                                                                            frame.push(arg2);
                                                                            frame.i32_load8_u(0, 0);
                                                                            frame.push(local2);
                                                                            frame.i32_load8_u(0, 0);
                                                                            frame.i32_eq();
                                                                            if (frame.pop() != 0)
                                                                              continue loop_label_35;
                                                                            break;
                                                                          }
                                                                          frame.push(arg1);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          frame.i32_const(8);
                                                                          frame.i32_lt_u();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_33;
                                                                        }
                                                                        frame.push(local29);
                                                                        frame.i64_const(-256);
                                                                        frame.i64_and();
                                                                        frame.i64_const(128);
                                                                        frame.i64_or();
                                                                        local28 = frame.pop();
                                                                      }
                                                                      block_label_33:
                                                                      {
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 488);
                                                                        local1 = frame.peek();
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 484);
                                                                        frame.i32_ne();
                                                                        if (frame.pop() != 0)
                                                                          break block_label_33;
                                                                        frame.push(local0);
                                                                        frame.i32_const(480);
                                                                        frame.i32_add();
                                                                        frame.push(local1);
                                                                        {
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          _func063(t0, t1);
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 488);
                                                                        local1 = frame.pop();
                                                                      }
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 480);
                                                                      frame.push(local1);
                                                                      frame.i32_const(3);
                                                                      frame.i32_shl();
                                                                      frame.i32_add();
                                                                      frame.push(local28);
                                                                      frame.i64_store(0, 0);
                                                                      frame.push(local0);
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 488);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      frame.i32_store(2, 488);
                                                                      break block_label_26;
                                                                    }
                                                                    frame.push(local0);
                                                                    frame.i32_const(328);
                                                                    frame.i32_add();
                                                                    frame.push(local1);
                                                                    frame.i32_add();
                                                                    frame.i32_const(0);
                                                                    frame.i32_store8(0, 0);
                                                                    frame.push(local1);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local1 = frame.peek();
                                                                    frame.push(arg2);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_27;
                                                                  }
                                                                  frame.push(local2);
                                                                  frame.i32_eqz();
                                                                  arg1 = frame.pop();
                                                                  frame.push(local1);
                                                                  frame.push(arg2);
                                                                  frame.i32_eq();
                                                                  if (frame.pop() != 0) break block_label_0;
                                                                  continue loop_label_30;
                                                                  break;
                                                                }
                                                              }
                                                              frame.push(arg2);
                                                              frame.i32_const(2);
                                                              frame.i32_ne();
                                                              if (frame.pop() != 0) break block_label_25;
                                                              frame.push(local0);
                                                              frame.i32_const(328);
                                                              frame.i32_add();
                                                              frame.push(local3);
                                                              frame.i32_const(2);
                                                              frame.i32_const(2);
                                                              {
                                                                var t3 = frame.pop();
                                                                var t2 = frame.pop();
                                                                var t1 = frame.pop();
                                                                var t0 = frame.pop();
                                                                _func078(t0, t1, t2, t3);
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_load8_u(0, 328);
                                                              if (frame.pop() != 0) break block_label_25;
                                                              frame.push(local0);
                                                              frame.i32_load8_u(0, 329);
                                                              frame.i32_const(223);
                                                              frame.i32_and();
                                                              frame.i32_const(-65);
                                                              frame.i32_add();
                                                              frame.i32_const(255);
                                                              frame.i32_and();
                                                              frame.i32_const(25);
                                                              frame.i32_gt_u();
                                                              if (frame.pop() != 0) break block_label_25;
                                                              frame.push(local0);
                                                              frame.i32_load8_u(0, 330);
                                                              frame.i32_const(-48);
                                                              frame.i32_add();
                                                              frame.i32_const(255);
                                                              frame.i32_and();
                                                              frame.i32_const(10);
                                                              frame.i32_ge_u();
                                                              if (frame.pop() != 0) break block_label_25;
                                                              frame.push(local0);
                                                              frame.i32_load16_u(0, 329);
                                                              local1 = frame.peek();
                                                              frame.i32_const(0x3f3f);
                                                              frame.i32_add();
                                                              frame.i32_const(0xdada);
                                                              frame.push(local1);
                                                              frame.i32_sub();
                                                              frame.i32_and();
                                                              frame.i32_const(2);
                                                              frame.i32_shr_u();
                                                              frame.i32_const(0x2020);
                                                              frame.i32_and();
                                                              frame.push(local1);
                                                              frame.i32_or();
                                                              local17 = frame.peek();
                                                              frame.i32_const(8);
                                                              frame.i32_shr_u();
                                                              local9 = frame.pop();
                                                              frame.push(local29);
                                                              local28 = frame.pop();
                                                              break block_label_26;
                                                            }
                                                            frame.i64_const(2);
                                                            local28 = frame.pop();
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 488);
                                                          local2 = frame.peek();
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) break block_label_19;
                                                          frame.push(local28);
                                                          frame.push(local29);
                                                          frame.i64_const(-256);
                                                          frame.i64_and();
                                                          frame.i64_or();
                                                          local29 = frame.pop();
                                                          frame.push(local0);
                                                          frame.i32_const(0);
                                                          frame.i32_store(2, 488);
                                                          frame.push(local0);
                                                          frame.i32_load(2, 480);
                                                          local1 = frame.pop();
                                                          frame.i32_const(129);
                                                          arg2 = frame.pop();
                                                          frame.push(local0);
                                                          frame.i32_const(129);
                                                          frame.i32_store8(0, 316);
                                                          frame.push(local0);
                                                          frame.i32_const(129);
                                                          frame.i32_store8(0, 308);
                                                          frame.push(local0);
                                                          frame.i32_const(0);
                                                          frame.i32_store(2, 292);
                                                          frame.push(local0);
                                                          frame.push(local2);
                                                          frame.i32_store(2, 288);
                                                          frame.push(local0);
                                                          frame.push(local1);
                                                          frame.push(local2);
                                                          frame.i32_const(3);
                                                          frame.i32_shl();
                                                          local2 = frame.peek();
                                                          frame.i32_add();
                                                          arg1 = frame.peek();
                                                          frame.i32_store(2, 300);
                                                          frame.push(local0);
                                                          frame.push(local0);
                                                          frame.i32_const(480);
                                                          frame.i32_add();
                                                          frame.i32_store(2, 304);
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                loop_label_30:
                                                                for (;;) {
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(arg2);
                                                                    frame.i32_const(255);
                                                                    frame.i32_and();
                                                                    frame.i32_const(129);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(local0);
                                                                    frame.i64_load(2, 308);
                                                                    local28 = frame.pop();
                                                                    frame.push(local0);
                                                                    frame.i64_const(128);
                                                                    frame.i64_store(2, 308);
                                                                    frame.push(local28);
                                                                    frame.i64_const(255);
                                                                    frame.i64_and();
                                                                    frame.i64_const(128);
                                                                    frame.i64_ne();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_28;
                                                                    frame.push(local0);
                                                                    frame.i32_const(129);
                                                                    frame.i32_store8(0, 308);
                                                                  }
                                                                  frame.push(local2);
                                                                  frame.i32_eqz();
                                                                  if (frame.pop() != 0) break block_label_29;
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local1);
                                                                    frame.i64_load(0, 0);
                                                                    local28 = frame.peek();
                                                                    frame.i32_wrap_i64();
                                                                    arg2 = frame.peek();
                                                                    frame.i32_const(255);
                                                                    frame.i32_and();
                                                                    frame.i32_const(129);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(local1);
                                                                    frame.i32_const(8);
                                                                    frame.i32_add();
                                                                    local1 = frame.pop();
                                                                    frame.push(local0);
                                                                    frame.push(local28);
                                                                    frame.i64_store(2, 308);
                                                                    frame.push(local2);
                                                                    frame.i32_const(-8);
                                                                    frame.i32_add();
                                                                    local2 = frame.pop();
                                                                    continue loop_label_30;
                                                                  }
                                                                  break;
                                                                }
                                                                frame.push(local1);
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                arg1 = frame.pop();
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_const(0);
                                                              frame.i32_store(2, 504);
                                                              frame.push(local0);
                                                              frame.i64_const(1);
                                                              frame.i64_store(3, 496);
                                                              frame.push(local0);
                                                              frame.push(arg1);
                                                              frame.i32_store(2, 296);
                                                              frame.push(local0);
                                                              frame.i32_const(288);
                                                              frame.i32_add();
                                                              {
                                                                var t0 = frame.pop();
                                                                _func074(t0);
                                                              }
                                                              break block_label_27;
                                                            }
                                                            frame.push(local0);
                                                            frame.push(local1);
                                                            frame.i32_store(2, 296);
                                                            frame.push(local0);
                                                            frame.i32_const(56);
                                                            frame.i32_add();
                                                            frame.i32_const(4);
                                                            frame.i32_const(0);
                                                            {
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func059(t0, t1, t2);
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_load(2, 60);
                                                            local1 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_load(2, 56);
                                                            local2 = frame.peek();
                                                            frame.push(local28);
                                                            frame.i64_store(0, 0);
                                                            frame.i32_const(1);
                                                            arg1 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_const(1);
                                                            frame.i32_store(2, 416);
                                                            frame.push(local0);
                                                            frame.push(local1);
                                                            frame.i32_store(2, 412);
                                                            frame.push(local0);
                                                            frame.push(local2);
                                                            frame.i32_store(2, 408);
                                                            frame.push(local0);
                                                            frame.i32_const(328);
                                                            frame.i32_add();
                                                            frame.push(local0);
                                                            frame.i32_const(288);
                                                            frame.i32_add();
                                                            frame.i32_const(36);
                                                            {
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              frame.push(_memcpy(t0, t1, t2));
                                                            }
                                                            frame.drop();
                                                            frame.push(local0);
                                                            frame.i32_load(2, 336);
                                                            local1 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_load8_u(0, 348);
                                                            local2 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_load(2, 340);
                                                            arg2 = frame.pop();

                                                            loop_label_28:
                                                            for (;;) {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  frame.push(local2);
                                                                  frame.i32_const(255);
                                                                  frame.i32_and();
                                                                  frame.i32_const(129);
                                                                  frame.i32_eq();
                                                                  if (frame.pop() != 0) break block_label_30;
                                                                  frame.push(local0);
                                                                  frame.i64_load(2, 348);
                                                                  local28 = frame.pop();
                                                                  frame.push(local0);
                                                                  frame.i64_const(128);
                                                                  frame.i64_store(2, 348);
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local28);
                                                                    frame.i64_const(255);
                                                                    frame.i64_and();
                                                                    frame.i64_const(128);
                                                                    frame.i64_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.i32_const(128);
                                                                    local2 = frame.pop();
                                                                    break block_label_29;
                                                                  }
                                                                  frame.push(local0);
                                                                  frame.i32_const(129);
                                                                  frame.i32_store8(0, 348);
                                                                }
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local1);
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.i32_const(0);
                                                                    local1 = frame.pop();
                                                                    break block_label_30;
                                                                  }
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local1);
                                                                    frame.push(arg2);
                                                                    frame.i32_ne();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(arg2);
                                                                    local1 = frame.pop();
                                                                    break block_label_30;
                                                                  }
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local1);
                                                                    frame.i64_load(0, 0);
                                                                    local28 = frame.peek();
                                                                    frame.i32_wrap_i64();
                                                                    local2 = frame.peek();
                                                                    frame.i32_const(255);
                                                                    frame.i32_and();
                                                                    frame.i32_const(129);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(local1);
                                                                    frame.i32_const(8);
                                                                    frame.i32_add();
                                                                    local1 = frame.pop();
                                                                    frame.push(local0);
                                                                    frame.push(local28);
                                                                    frame.i64_store(2, 348);
                                                                    continue loop_label_28;
                                                                  }
                                                                  frame.push(local1);
                                                                  frame.i32_const(8);
                                                                  frame.i32_add();
                                                                  local1 = frame.pop();
                                                                }
                                                                block_label_30:
                                                                {
                                                                  frame.push(local0);
                                                                  frame.i32_load8_u(0, 356);
                                                                  frame.i32_const(129);
                                                                  frame.i32_eq();
                                                                  if (frame.pop() != 0) break block_label_30;
                                                                  frame.push(local0);
                                                                  frame.i64_load(2, 356);
                                                                  local28 = frame.pop();
                                                                  frame.push(local0);
                                                                  frame.i64_const(128);
                                                                  frame.i64_store(2, 356);
                                                                  frame.i32_const(129);
                                                                  local2 = frame.pop();
                                                                  frame.push(local28);
                                                                  frame.i64_const(255);
                                                                  frame.i64_and();
                                                                  frame.i64_const(128);
                                                                  frame.i64_ne();
                                                                  if (frame.pop() != 0) break block_label_29;
                                                                  frame.push(local0);
                                                                  frame.i32_const(129);
                                                                  frame.i32_store8(0, 356);
                                                                }
                                                                frame.push(local0);
                                                                frame.push(local1);
                                                                frame.i32_store(2, 336);
                                                                block_label_30:
                                                                {
                                                                  frame.push(local1);
                                                                  frame.i32_eqz();
                                                                  if (frame.pop() != 0) break block_label_30;
                                                                  frame.push(local0);
                                                                  frame.i32_const(328);
                                                                  frame.i32_add();
                                                                  {
                                                                    var t0 = frame.pop();
                                                                    _func074(t0);
                                                                  }
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_const(496);
                                                                frame.i32_add();
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                frame.push(local0);
                                                                frame.i32_const(408);
                                                                frame.i32_add();
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                frame.i32_load(2, 0);
                                                                frame.i32_store(2, 0);
                                                                frame.push(local0);
                                                                frame.push(local0);
                                                                frame.i64_load(3, 408);
                                                                frame.i64_store(3, 496);
                                                                break block_label_27;
                                                              }
                                                              block_label_29:
                                                              {
                                                                frame.push(local0);
                                                                frame.i32_load(2, 412);
                                                                frame.push(arg1);
                                                                frame.i32_ne();
                                                                if (frame.pop() != 0) break block_label_29;
                                                                frame.push(local0);
                                                                frame.i32_const(408);
                                                                frame.i32_add();
                                                                frame.push(arg1);
                                                                frame.i32_const(1);
                                                                frame.i32_const(2);
                                                                frame.push(local0);
                                                                frame.i32_load8_u(0, 356);
                                                                frame.i32_const(254);
                                                                frame.i32_and();
                                                                frame.i32_const(128);
                                                                frame.i32_eq();
                                                                frame.select();
                                                                {
                                                                  var t2 = frame.pop();
                                                                  var t1 = frame.pop();
                                                                  var t0 = frame.pop();
                                                                  _func071(t0, t1, t2);
                                                                }
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_load(2, 408);
                                                              frame.push(arg1);
                                                              frame.i32_const(3);
                                                              frame.i32_shl();
                                                              frame.i32_add();
                                                              frame.push(local28);
                                                              frame.i64_store(0, 0);
                                                              frame.push(local0);
                                                              frame.push(arg1);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              arg1 = frame.peek();
                                                              frame.i32_store(2, 416);
                                                              continue loop_label_28;
                                                              break;
                                                            }
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(328);
                                                          frame.i32_add();
                                                          frame.push(local0);
                                                          frame.i32_const(464);
                                                          frame.i32_add();
                                                          frame.push(local9);
                                                          frame.i32_const(8);
                                                          frame.i32_shl();
                                                          frame.push(local10);
                                                          frame.i32_or();
                                                          frame.push(local0);
                                                          frame.i32_const(496);
                                                          frame.i32_add();
                                                          {
                                                            var t3 = frame.pop();
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func076(t0, t1, t2, t3);
                                                          }
                                                          block_label_27:
                                                          {
                                                            frame.push(local0);
                                                            frame.i32_load8_u(0, 328);
                                                            frame.i32_const(128);
                                                            frame.i32_eq();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local0);
                                                            frame.i32_load(2, 336);
                                                            local1 = frame.peek();
                                                            frame.i32_eqz();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local1);
                                                            frame.i32_const(3);
                                                            frame.i32_shl();
                                                            frame.i32_eqz();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.i32_const(0xf5160);
                                                            frame.push(local0);
                                                            frame.i32_load(2, 332);
                                                            {
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func018(t0, t1);
                                                            }
                                                          }
                                                          frame.i32_const(128);
                                                          local17 = frame.pop();
                                                          frame.push(local0);
                                                          frame.i32_load8_u(0, 104);
                                                          if (frame.pop() != 0) break block_label_25;
                                                          break block_label_24;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(48);
                                                        frame.i32_add();
                                                        frame.push(local0);
                                                        frame.i32_const(88);
                                                        frame.i32_add();
                                                        {
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func049(t0, t1);
                                                        }
                                                        block_label_26:
                                                        {
                                                          frame.push(local0);
                                                          frame.i32_load8_u(0, 104);
                                                          if (frame.pop() != 0) break block_label_26;
                                                          frame.push(local28);
                                                          local29 = frame.pop();
                                                          break block_label_24;
                                                        }
                                                        frame.push(local17);
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        local15 = frame.peek();
                                                        frame.i32_const(128);
                                                        frame.i32_ne();
                                                        if (frame.pop() != 0) break block_label_21;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 484);
                                                      local1 = frame.pop();
                                                      break block_label_22;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 100);
                                                    local1 = frame.peek();
                                                    frame.push(local0);
                                                    frame.i32_load(2, 96);
                                                    local2 = frame.peek();
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) break block_label_0;
                                                    frame.push(local1);
                                                    frame.push(local0);
                                                    frame.i32_load(2, 92);
                                                    frame.i32_gt_u();
                                                    if (frame.pop() != 0) break block_label_0;
                                                    frame.push(local1);
                                                    frame.push(local2);
                                                    frame.i32_sub();
                                                    arg2 = frame.pop();
                                                    frame.push(local0);
                                                    frame.i32_load(2, 88);
                                                    frame.push(local2);
                                                    frame.i32_add();
                                                    local3 = frame.pop();
                                                    continue loop_label_23;
                                                    break;
                                                  }
                                                }
                                                frame.push(local0);
                                                frame.i32_const(380);
                                                frame.i32_add();
                                                frame.i32_const(2);
                                                frame.i32_add();
                                                frame.push(local0);
                                                frame.i32_const(460);
                                                frame.i32_add();
                                                frame.i32_const(2);
                                                frame.i32_add();
                                                frame.i32_load8_u(0, 0);
                                                frame.i32_store8(0, 0);
                                                frame.push(local0);
                                                frame.i32_const(384);
                                                frame.i32_add();
                                                frame.i32_const(8);
                                                frame.i32_add();
                                                frame.push(local0);
                                                frame.i32_const(424);
                                                frame.i32_add();
                                                frame.i32_const(8);
                                                frame.i32_add();
                                                frame.i64_load(3, 0);
                                                frame.i64_store(3, 0);
                                                frame.push(local0);
                                                frame.i32_const(368);
                                                frame.i32_add();
                                                frame.i32_const(8);
                                                frame.i32_add();
                                                frame.push(local27);
                                                frame.i32_load(2, 0);
                                                frame.i32_store(2, 0);
                                                frame.push(local0);
                                                frame.push(local0);
                                                frame.i32_load16_u(1, 460);
                                                frame.i32_store16(1, 380);
                                                frame.push(local0);
                                                frame.push(local0);
                                                frame.i64_load(3, 424);
                                                frame.i64_store(3, 384);
                                                frame.push(local0);
                                                frame.push(local0);
                                                frame.i64_load(3, 464);
                                                frame.i64_store(3, 368);
                                                frame.push(local1);
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_20;
                                                frame.push(local1);
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_20;
                                                frame.i32_const(0xf5160);
                                                frame.push(local0);
                                                frame.i32_load(2, 480);
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func018(t0, t1);
                                                }
                                                break block_label_20;
                                              }
                                              frame.push(local0);
                                              frame.i32_load(2, 488);
                                              local1 = frame.peek();
                                              frame.i32_eqz();
                                              if (frame.pop() != 0) break block_label_19;
                                              frame.push(local34);
                                              frame.i64_const(-256);
                                              frame.i64_and();
                                              frame.i64_const(129);
                                              frame.i64_or();
                                              local34 = frame.pop();
                                              frame.push(local35);
                                              frame.i64_const(-256);
                                              frame.i64_and();
                                              frame.i64_const(129);
                                              frame.i64_or();
                                              local28 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 480);
                                              local14 = frame.peek();
                                              frame.push(local1);
                                              frame.i32_const(3);
                                              frame.i32_shl();
                                              arg1 = frame.peek();
                                              frame.i32_add();
                                              local11 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 484);
                                              local16 = frame.pop();
                                              frame.i32_const(129);
                                              arg2 = frame.pop();
                                              frame.i32_const(0);
                                              local2 = frame.pop();
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  loop_label_23:
                                                  for (;;) {
                                                    frame.push(local14);
                                                    frame.push(local2);
                                                    frame.i32_add();
                                                    local1 = frame.pop();
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        frame.push(arg2);
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        frame.i32_const(129);
                                                        frame.i32_ne();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.push(local28);
                                                        local35 = frame.pop();
                                                        break block_label_24;
                                                      }
                                                      frame.i64_const(129);
                                                      local35 = frame.pop();
                                                      frame.push(local28);
                                                      frame.i64_const(255);
                                                      frame.i64_and();
                                                      frame.i64_const(128);
                                                      frame.i64_ne();
                                                      if (frame.pop() != 0) break block_label_22;
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(arg1);
                                                      frame.push(local2);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) break block_label_24;
                                                      frame.push(local2);
                                                      frame.i32_const(8);
                                                      frame.i32_add();
                                                      local2 = frame.pop();
                                                      frame.push(local1);
                                                      frame.i64_load(0, 0);
                                                      local28 = frame.peek();
                                                      frame.i32_wrap_i64();
                                                      arg2 = frame.peek();
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(129);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) continue loop_label_23;
                                                    }
                                                    break;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_const(0);
                                                  frame.i32_store(2, 296);
                                                  frame.push(local0);
                                                  frame.i64_const(1);
                                                  frame.i64_store(3, 288);
                                                  frame.push(local16);
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) break block_label_21;
                                                  frame.push(local16);
                                                  frame.i32_const(3);
                                                  frame.i32_shl();
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) break block_label_21;
                                                  frame.i32_const(0xf5160);
                                                  frame.push(local14);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func018(t0, t1);
                                                  }
                                                  break block_label_21;
                                                }
                                                frame.push(local0);
                                                frame.i32_const(40);
                                                frame.i32_add();
                                                frame.i32_const(4);
                                                frame.i32_const(0);
                                                {
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func059(t0, t1, t2);
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 44);
                                                local2 = frame.pop();
                                                frame.push(local0);
                                                frame.i32_load(2, 40);
                                                arg2 = frame.peek();
                                                frame.push(local28);
                                                frame.i64_store(0, 0);
                                                frame.push(local0);
                                                frame.push(local2);
                                                frame.i32_store(2, 332);
                                                frame.push(local0);
                                                frame.push(arg2);
                                                frame.i32_store(2, 328);
                                                frame.i64_const(0);
                                                local29 = frame.pop();
                                                frame.i32_const(128);
                                                local2 = frame.pop();
                                                frame.i32_const(1);
                                                local12 = frame.pop();
                                                frame.push(local34);
                                                local32 = frame.pop();
                                                frame.i32_const(128);
                                                arg1 = frame.pop();
                                                frame.i32_const(128);
                                                arg2 = frame.pop();

                                                loop_label_22:
                                                for (;;) {
                                                  frame.push(local0);
                                                  frame.push(local12);
                                                  frame.i32_store(2, 336);
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      loop_label_25:
                                                      for (;;) {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            frame.push(arg2);
                                                            frame.i32_const(255);
                                                            frame.i32_and();
                                                            frame.i32_const(129);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local2);
                                                            local10 = frame.pop();
                                                            frame.push(local29);
                                                            local35 = frame.pop();
                                                            frame.push(arg1);
                                                            local3 = frame.pop();
                                                            break block_label_26;
                                                          }
                                                          frame.push(local2);
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          frame.i32_const(128);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) break block_label_24;
                                                          frame.i64_const(0);
                                                          local35 = frame.pop();
                                                          frame.i32_const(129);
                                                          local10 = frame.pop();
                                                          frame.i32_const(129);
                                                          local3 = frame.pop();
                                                        }
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            frame.push(local1);
                                                            frame.push(local11);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local11);
                                                            local17 = frame.pop();
                                                            break block_label_26;
                                                          }
                                                          frame.push(local1);
                                                          frame.i64_load(0, 0);
                                                          local28 = frame.peek();
                                                          frame.i64_const(8);
                                                          frame.i64_shr_u();
                                                          local29 = frame.pop();
                                                          frame.push(local28);
                                                          frame.i32_wrap_i64();
                                                          local2 = frame.peek();
                                                          arg1 = frame.pop();
                                                          frame.push(local2);
                                                          arg2 = frame.pop();
                                                          frame.push(local1);
                                                          frame.i32_const(8);
                                                          frame.i32_add();
                                                          local17 = frame.peek();
                                                          local1 = frame.pop();
                                                          frame.push(local2);
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          frame.i32_const(129);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) continue loop_label_25;
                                                        }
                                                        break;
                                                      }
                                                      frame.i64_const(128);
                                                      local28 = frame.pop();
                                                      frame.i32_const(129);
                                                      arg2 = frame.pop();
                                                      frame.push(local32);
                                                      frame.i64_const(254);
                                                      frame.i64_and();
                                                      frame.i64_const(128);
                                                      frame.i64_ne();
                                                      if (frame.pop() != 0) break block_label_23;
                                                      block_label_25:
                                                      {
                                                        frame.push(local16);
                                                        frame.i32_eqz();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.push(local16);
                                                        frame.i32_const(3);
                                                        frame.i32_shl();
                                                        frame.i32_eqz();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.i32_const(0xf5160);
                                                        frame.push(local14);
                                                        {
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func018(t0, t1);
                                                        }
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_const(288);
                                                      frame.i32_add();
                                                      frame.i32_const(8);
                                                      frame.i32_add();
                                                      frame.push(local0);
                                                      frame.i32_const(328);
                                                      frame.i32_add();
                                                      frame.i32_const(8);
                                                      frame.i32_add();
                                                      frame.i32_load(2, 0);
                                                      frame.i32_store(2, 0);
                                                      frame.push(local0);
                                                      frame.push(local0);
                                                      frame.i64_load(3, 328);
                                                      frame.i64_store(3, 288);
                                                      frame.i64_const(128);
                                                      local35 = frame.pop();
                                                      break block_label_21;
                                                    }
                                                    frame.i64_const(0);
                                                    local35 = frame.pop();
                                                    frame.i32_const(128);
                                                    local10 = frame.pop();
                                                    frame.push(local32);
                                                    local28 = frame.pop();
                                                    frame.i32_const(128);
                                                    local3 = frame.pop();
                                                    frame.i32_const(128);
                                                    arg2 = frame.pop();
                                                    frame.push(local1);
                                                    local17 = frame.pop();
                                                    frame.push(local29);
                                                    frame.i64_const(8);
                                                    frame.i64_shl();
                                                    frame.push(local2);
                                                    frame.i64_extend_i32_u();
                                                    frame.i64_const(255);
                                                    frame.i64_and();
                                                    frame.i64_or();
                                                    local32 = frame.pop();
                                                  }
                                                  block_label_23:
                                                  {
                                                    frame.push(local0);
                                                    frame.i32_load(2, 332);
                                                    frame.push(local12);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_const(328);
                                                    frame.i32_add();
                                                    frame.push(local12);
                                                    frame.i32_const(1);
                                                    frame.i32_const(2);
                                                    frame.push(local3);
                                                    frame.i32_const(254);
                                                    frame.i32_and();
                                                    frame.i32_const(128);
                                                    frame.i32_eq();
                                                    frame.select();
                                                    frame.push(local28);
                                                    frame.i64_const(254);
                                                    frame.i64_and();
                                                    frame.i64_const(128);
                                                    frame.i64_ne();
                                                    frame.i32_add();
                                                    {
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func071(t0, t1, t2);
                                                    }
                                                    frame.push(local3);
                                                    arg2 = frame.pop();
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load(2, 328);
                                                  frame.push(local12);
                                                  frame.i32_const(3);
                                                  frame.i32_shl();
                                                  frame.i32_add();
                                                  frame.push(local32);
                                                  frame.i64_store(0, 0);
                                                  frame.push(local12);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local12 = frame.pop();
                                                  frame.push(local28);
                                                  local32 = frame.pop();
                                                  frame.push(local10);
                                                  local2 = frame.pop();
                                                  frame.push(local35);
                                                  local29 = frame.pop();
                                                  frame.push(local3);
                                                  arg1 = frame.pop();
                                                  frame.push(local17);
                                                  local1 = frame.pop();
                                                  continue loop_label_22;
                                                  break;
                                                }
                                              }
                                              frame.push(local0);
                                              frame.i32_const(328);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(464);
                                              frame.i32_add();
                                              frame.push(local9);
                                              frame.i32_const(8);
                                              frame.i32_shl();
                                              frame.push(local15);
                                              frame.i32_or();
                                              frame.push(local0);
                                              frame.i32_const(288);
                                              frame.i32_add();
                                              {
                                                var t3 = frame.pop();
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func076(t0, t1, t2, t3);
                                              }
                                              block_label_21:
                                              {
                                                frame.push(local0);
                                                frame.i32_load8_u(0, 328);
                                                frame.i32_const(128);
                                                frame.i32_eq();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local0);
                                                frame.i32_load(2, 336);
                                                local1 = frame.peek();
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local1);
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.i32_const(0xf5160);
                                                frame.push(local0);
                                                frame.i32_load(2, 332);
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func018(t0, t1);
                                                }
                                              }
                                              frame.push(local0);
                                              frame.i32_const(380);
                                              frame.i32_add();
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(460);
                                              frame.i32_add();
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.i32_load8_u(0, 0);
                                              frame.i32_store8(0, 0);
                                              frame.push(local0);
                                              frame.i32_const(384);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(424);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.i64_load(3, 0);
                                              frame.i64_store(3, 0);
                                              frame.push(local0);
                                              frame.i32_const(368);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.push(local27);
                                              frame.i32_load(2, 0);
                                              frame.i32_store(2, 0);
                                              frame.push(local0);
                                              frame.push(local0);
                                              frame.i32_load16_u(1, 460);
                                              frame.i32_store16(1, 380);
                                              frame.push(local0);
                                              frame.push(local0);
                                              frame.i64_load(3, 424);
                                              frame.i64_store(3, 384);
                                              frame.push(local0);
                                              frame.push(local0);
                                              frame.i64_load(3, 464);
                                              frame.i64_store(3, 368);
                                            }
                                            frame.push(local24);
                                            frame.i32_const(2);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(380);
                                            frame.i32_add();
                                            frame.i32_const(2);
                                            frame.i32_add();
                                            frame.i32_load8_u(0, 0);
                                            frame.i32_store8(0, 0);
                                            frame.push(local24);
                                            frame.push(local0);
                                            frame.i32_load16_u(1, 380);
                                            frame.i32_store16(0, 0);
                                            frame.push(local23);
                                            frame.push(local0);
                                            frame.i64_load(3, 384);
                                            frame.i64_store(1, 0);
                                            frame.push(local23);
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(384);
                                            frame.i32_add();
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.i64_load(3, 0);
                                            frame.i64_store(1, 0);
                                            frame.push(local22);
                                            frame.push(local0);
                                            frame.i64_load(3, 368);
                                            frame.i64_store(1, 0);
                                            frame.push(local22);
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(368);
                                            frame.i32_add();
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.i32_load(2, 0);
                                            frame.i32_store(1, 0);
                                            frame.push(local0);
                                            frame.push(local31);
                                            frame.i32_store(2, 240);
                                            frame.push(local0);
                                            frame.push(local30);
                                            frame.i32_store(2, 236);
                                            frame.push(local0);
                                            frame.push(local13);
                                            frame.i32_store8(0, 232);
                                            break block_label_10;
                                          }
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load(2, 484);
                                            local1 = frame.peek();
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local1);
                                            frame.i32_const(3);
                                            frame.i32_shl();
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.i32_const(0xf5160);
                                            frame.push(local0);
                                            frame.i32_load(2, 480);
                                            {
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func018(t0, t1);
                                            }
                                          }
                                          frame.i32_const(2);
                                          local12 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_const(464);
                                          frame.i32_add();
                                          {
                                            var t0 = frame.pop();
                                            _func052(t0);
                                          }
                                          frame.push(local13);
                                          frame.i32_const(3);
                                          frame.i32_and();
                                          frame.i32_const(2);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) break block_label_7;
                                          frame.push(local31);
                                          frame.i32_eqz();
                                          if (frame.pop() != 0) break block_label_7;
                                          frame.push(local31);
                                          frame.i32_const(3);
                                          frame.i32_shl();
                                          frame.i32_eqz();
                                          if (frame.pop() != 0) break block_label_7;
                                          frame.i32_const(0xf5160);
                                          frame.push(local30);
                                          {
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func018(t0, t1);
                                          }
                                          break block_label_7;
                                        }
                                        frame.push(local18);
                                        if (frame.pop() != 0) break block_label_9;
                                        frame.push(local0);
                                        frame.i32_const(4);
                                        frame.i32_store8(0, 408);
                                        frame.push(local0);
                                        frame.push(local0);
                                        frame.i32_const(408);
                                        frame.i32_add();
                                        frame.i32_store(2, 388);
                                        frame.push(local0);
                                        frame.push(local0);
                                        frame.i32_const(88);
                                        frame.i32_add();
                                        frame.i32_store(2, 384);
                                        frame.push(local0);
                                        frame.i32_const(288);
                                        frame.i32_add();
                                        frame.push(local0);
                                        frame.i32_const(384);
                                        frame.i32_add();
                                        {
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          _func048(t0, t1);
                                        }
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 288);
                                            frame.i32_const(128);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local0);
                                            frame.i64_load(3, 288);
                                            local28 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_const(64);
                                            frame.i32_add();
                                            frame.i32_const(4);
                                            frame.i32_const(0);
                                            {
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func060(t0, t1, t2);
                                            }
                                            frame.push(local0);
                                            frame.i32_load(2, 68);
                                            local1 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_load(2, 64);
                                            local18 = frame.peek();
                                            frame.push(local28);
                                            frame.i64_store(0, 0);
                                            frame.i32_const(1);
                                            local36 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_const(1);
                                            frame.i32_store(2, 336);
                                            frame.push(local0);
                                            frame.push(local1);
                                            frame.i32_store(2, 332);
                                            frame.push(local0);
                                            frame.push(local18);
                                            frame.i32_store(2, 328);
                                            frame.push(local0);
                                            frame.push(local0);
                                            frame.i64_load(3, 384);
                                            frame.i64_store(3, 424);
                                            frame.push(local0);
                                            frame.i32_const(288);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(424);
                                            frame.i32_add();
                                            {
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func048(t0, t1);
                                            }
                                            block_label_20:
                                            {
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 288);
                                              frame.i32_const(128);
                                              frame.i32_eq();
                                              if (frame.pop() != 0) break block_label_20;

                                              loop_label_21:
                                              for (;;) {
                                                frame.push(local0);
                                                frame.i64_load(3, 288);
                                                local28 = frame.pop();
                                                block_label_22:
                                                {
                                                  frame.push(local0);
                                                  frame.i32_load(2, 332);
                                                  frame.push(local0);
                                                  frame.i32_load(2, 336);
                                                  local1 = frame.peek();
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local0);
                                                  frame.i32_const(328);
                                                  frame.i32_add();
                                                  frame.push(local1);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func070(t0, t1);
                                                  }
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 328);
                                                frame.push(local1);
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                frame.i32_add();
                                                frame.push(local28);
                                                frame.i64_store(0, 0);
                                                frame.push(local0);
                                                frame.push(local1);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                frame.i32_store(2, 336);
                                                frame.push(local0);
                                                frame.i32_const(288);
                                                frame.i32_add();
                                                frame.push(local0);
                                                frame.i32_const(424);
                                                frame.i32_add();
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func048(t0, t1);
                                                }
                                                frame.push(local0);
                                                frame.i32_load8_u(0, 288);
                                                frame.i32_const(128);
                                                frame.i32_ne();
                                                if (frame.pop() != 0) continue loop_label_21;
                                                break;
                                              }
                                              frame.push(local0);
                                              frame.i32_load(2, 336);
                                              local36 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 332);
                                              local1 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 328);
                                              local18 = frame.pop();
                                            }
                                            block_label_20:
                                            {
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 408);
                                              local12 = frame.peek();
                                              frame.i32_const(4);
                                              frame.i32_ne();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local1);
                                              local37 = frame.pop();
                                              break block_label_10;
                                            }
                                            frame.push(local1);
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_18;
                                            frame.push(local1);
                                            frame.i32_const(3);
                                            frame.i32_shl();
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_18;
                                            frame.i32_const(0xf5160);
                                            frame.push(local18);
                                            {
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func018(t0, t1);
                                            }
                                            break block_label_18;
                                          }
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 408);
                                          local12 = frame.peek();
                                          frame.i32_const(4);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) break block_label_18;
                                          frame.i32_const(0);
                                          local37 = frame.pop();
                                          frame.i32_const(1);
                                          local18 = frame.pop();
                                          frame.i32_const(0);
                                          local36 = frame.pop();
                                          break block_label_10;
                                        }
                                        frame.i32_const(0);
                                        local18 = frame.pop();
                                        break block_label_7;
                                      }
                                      frame.push(local0);
                                      frame.i32_load(2, 280);
                                      frame.i32_const(4);
                                      frame.i32_shl();
                                      local1 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 272);
                                      local2 = frame.pop();
                                      block_label_17:
                                      {
                                        loop_label_18:
                                        for (;;) {
                                          frame.push(local1);
                                          frame.i32_eqz();
                                          if (frame.pop() != 0) break block_label_17;
                                          frame.push(local1);
                                          frame.i32_const(-16);
                                          frame.i32_add();
                                          local1 = frame.pop();
                                          frame.push(local2);
                                          frame.i32_load8_u(0, 12);
                                          arg2 = frame.pop();
                                          frame.push(local2);
                                          frame.i32_const(16);
                                          frame.i32_add();
                                          local2 = frame.pop();
                                          frame.push(arg2);
                                          frame.push(local17);
                                          frame.i32_eq();
                                          if (frame.pop() != 0) break block_label_9;
                                          continue loop_label_18;
                                          break;
                                        }
                                      }
                                      frame.push(local0);
                                      frame.i32_const(0);
                                      frame.i32_store(2, 296);
                                      frame.push(local0);
                                      frame.i64_const(1);
                                      frame.i64_store(3, 288);
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 104);
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.push(local0);
                                        frame.i32_load(2, 100);
                                        local1 = frame.peek();
                                        frame.push(local0);
                                        frame.i32_load(2, 96);
                                        local2 = frame.peek();
                                        frame.i32_lt_u();
                                        if (frame.pop() != 0) break block_label_0;
                                        frame.push(local1);
                                        frame.push(local0);
                                        frame.i32_load(2, 92);
                                        frame.i32_gt_u();
                                        if (frame.pop() != 0) break block_label_0;
                                        frame.push(local1);
                                        frame.push(local2);
                                        frame.i32_sub();
                                        local1 = frame.peek();
                                        frame.i32_const(-2);
                                        frame.i32_add();
                                        frame.i32_const(6);
                                        frame.i32_gt_u();
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.push(local0);
                                        frame.i32_load(2, 88);
                                        frame.push(local2);
                                        frame.i32_add();
                                        arg2 = frame.pop();

                                        loop_label_18:
                                        for (;;) {
                                          frame.push(local0);
                                          frame.i32_const(328);
                                          frame.i32_add();
                                          frame.push(arg2);
                                          frame.push(local1);
                                          frame.push(local1);
                                          {
                                            var t3 = frame.pop();
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func050(t0, t1, t2, t3);
                                          }
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 328);
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local0);
                                            frame.i64_load(0, 329);
                                            local28 = frame.peek();
                                            frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                            frame.i64_add();
                                            frame.i64_const(-0x5050505050505051);
                                            frame.push(local28);
                                            frame.i64_sub();
                                            frame.push(local28);
                                            frame.i64_const(0x4646464646464646);
                                            frame.i64_add();
                                            frame.i64_or();
                                            frame.i64_and();
                                            frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                            frame.push(local28);
                                            frame.i64_const(0x2020202020202020);
                                            frame.i64_or();
                                            local29 = frame.peek();
                                            frame.i64_sub();
                                            frame.push(local29);
                                            frame.i64_const(0x505050505050505);
                                            frame.i64_add();
                                            frame.i64_or();
                                            frame.i64_and();
                                            frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                            frame.i64_and();
                                            frame.i64_eqz();
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local28);
                                            frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                            frame.i64_add();
                                            frame.i64_const(-0x2525252525252526);
                                            frame.push(local28);
                                            frame.i64_sub();
                                            frame.i64_and();
                                            frame.i64_const(2);
                                            frame.i64_shr_u();
                                            frame.i64_const(0x2020202020202020);
                                            frame.i64_and();
                                            frame.push(local28);
                                            frame.i64_or();
                                            local28 = frame.pop();
                                            block_label_20:
                                            {
                                              frame.push(local0);
                                              frame.i32_load(2, 296);
                                              local1 = frame.peek();
                                              frame.push(local0);
                                              frame.i32_load(2, 292);
                                              frame.i32_ne();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local0);
                                              frame.i32_const(288);
                                              frame.i32_add();
                                              frame.push(local1);
                                              {
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func064(t0, t1);
                                              }
                                              frame.push(local0);
                                              frame.i32_load(2, 296);
                                              local1 = frame.pop();
                                            }
                                            frame.push(local0);
                                            frame.i32_load(2, 288);
                                            frame.push(local1);
                                            frame.i32_const(3);
                                            frame.i32_shl();
                                            frame.i32_add();
                                            frame.push(local28);
                                            frame.i64_store(0, 0);
                                            frame.push(local0);
                                            frame.push(local0);
                                            frame.i32_load(2, 296);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            frame.i32_store(2, 296);
                                          }
                                          frame.push(local0);
                                          frame.i32_const(16);
                                          frame.i32_add();
                                          frame.push(local0);
                                          frame.i32_const(88);
                                          frame.i32_add();
                                          {
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func049(t0, t1);
                                          }
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 104);
                                          if (frame.pop() != 0) break block_label_17;
                                          frame.push(local0);
                                          frame.i32_load(2, 100);
                                          local1 = frame.peek();
                                          frame.push(local0);
                                          frame.i32_load(2, 96);
                                          local2 = frame.peek();
                                          frame.i32_lt_u();
                                          if (frame.pop() != 0) break block_label_0;
                                          frame.push(local1);
                                          frame.push(local0);
                                          frame.i32_load(2, 92);
                                          frame.i32_gt_u();
                                          if (frame.pop() != 0) break block_label_0;
                                          frame.push(local0);
                                          frame.i32_load(2, 88);
                                          frame.push(local2);
                                          frame.i32_add();
                                          arg2 = frame.pop();
                                          frame.push(local1);
                                          frame.push(local2);
                                          frame.i32_sub();
                                          local1 = frame.peek();
                                          frame.i32_const(-2);
                                          frame.i32_add();
                                          frame.i32_const(7);
                                          frame.i32_lt_u();
                                          if (frame.pop() != 0) continue loop_label_18;
                                          break;
                                        }
                                      }
                                      frame.push(arg1);
                                      frame.i32_const(223);
                                      frame.i32_and();
                                      frame.i32_const(-65);
                                      frame.i32_add();
                                      frame.i32_const(255);
                                      frame.i32_and();
                                      frame.i32_const(26);
                                      frame.i32_ge_u();
                                      if (frame.pop() != 0) break block_label_0;
                                      frame.push(local0);
                                      frame.i32_load(2, 296);
                                      local16 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 292);
                                      local38 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 288);
                                      local39 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 272);
                                      local15 = frame.pop();
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load(2, 280);
                                          local40 = frame.peek();
                                          frame.i32_eqz();
                                          if (frame.pop() != 0) break block_label_18;
                                          frame.i32_const(0);
                                          local9 = frame.pop();
                                          frame.push(local40);
                                          local1 = frame.pop();
                                          frame.push(local40);
                                          local10 = frame.pop();

                                          loop_label_19:
                                          for (;;) {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      frame.i32_const(-1);
                                                      frame.push(local15);
                                                      frame.push(local1);
                                                      frame.i32_const(1);
                                                      frame.i32_shr_u();
                                                      frame.push(local9);
                                                      frame.i32_add();
                                                      local11 = frame.peek();
                                                      frame.i32_const(4);
                                                      frame.i32_shl();
                                                      frame.i32_add();
                                                      local2 = frame.peek();
                                                      frame.i32_load8_u(0, 12);
                                                      local1 = frame.peek();
                                                      frame.push(local17);
                                                      frame.i32_ne();
                                                      frame.push(local1);
                                                      frame.push(local17);
                                                      frame.i32_lt_u();
                                                      frame.select();
                                                      local1 = frame.peek();
                                                      if (frame.pop() != 0) break block_label_24;
                                                      block_label_25:
                                                      {
                                                        frame.push(local2);
                                                        frame.i32_load(2, 8);
                                                        local41 = frame.peek();
                                                        frame.push(local16);
                                                        frame.push(local41);
                                                        frame.push(local16);
                                                        frame.i32_lt_u();
                                                        local42 = frame.peek();
                                                        frame.select();
                                                        local43 = frame.peek();
                                                        frame.i32_eqz();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.push(local2);
                                                        frame.i32_load(2, 0);
                                                        arg1 = frame.pop();
                                                        frame.i32_const(0);
                                                        local13 = frame.pop();
                                                        frame.push(local39);
                                                        local3 = frame.pop();

                                                        loop_label_26:
                                                        for (;;) {
                                                          frame.push(local13);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local13 = frame.pop();
                                                          frame.i32_const(0);
                                                          local1 = frame.pop();
                                                          block_label_27:
                                                          {
                                                            loop_label_28:
                                                            for (;;) {
                                                              frame.push(local1);
                                                              frame.i32_const(8);
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) break block_label_27;
                                                              frame.push(local3);
                                                              frame.push(local1);
                                                              frame.i32_add();
                                                              local2 = frame.pop();
                                                              frame.push(arg1);
                                                              frame.push(local1);
                                                              frame.i32_add();
                                                              arg2 = frame.pop();
                                                              frame.push(local1);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local1 = frame.pop();
                                                              frame.push(arg2);
                                                              frame.i32_load8_u(0, 0);
                                                              arg2 = frame.peek();
                                                              frame.push(local2);
                                                              frame.i32_load8_u(0, 0);
                                                              local2 = frame.peek();
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) continue loop_label_28;
                                                              break;
                                                            }
                                                            frame.push(arg2);
                                                            frame.push(local2);
                                                            frame.i32_lt_u();
                                                            if (frame.pop() != 0) break block_label_23;
                                                            break block_label_21;
                                                          }
                                                          frame.push(arg1);
                                                          frame.i32_const(8);
                                                          frame.i32_add();
                                                          arg1 = frame.pop();
                                                          frame.push(local3);
                                                          frame.i32_const(8);
                                                          frame.i32_add();
                                                          local3 = frame.pop();
                                                          frame.push(local13);
                                                          frame.push(local43);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) continue loop_label_26;
                                                          break;
                                                        }
                                                      }
                                                      frame.push(local42);
                                                      if (frame.pop() != 0) break block_label_23;
                                                      frame.push(local41);
                                                      frame.push(local16);
                                                      frame.i32_ne();
                                                      local1 = frame.pop();
                                                    }
                                                    frame.push(local1);
                                                    frame.i32_const(1);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) break block_label_21;
                                                    frame.push(local1);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(255);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_22;
                                                  }
                                                  frame.push(local11);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local9 = frame.pop();
                                                  break block_label_20;
                                                }
                                                frame.push(local38);
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_7;
                                                frame.push(local38);
                                                frame.i32_const(3);
                                                frame.i32_shl();
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) break block_label_7;
                                                frame.i32_const(0xf5160);
                                                frame.push(local39);
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func018(t0, t1);
                                                }
                                                break block_label_7;
                                              }
                                              frame.push(local11);
                                              local10 = frame.pop();
                                            }
                                            frame.push(local10);
                                            frame.push(local9);
                                            frame.i32_sub();
                                            local1 = frame.pop();
                                            frame.push(local10);
                                            frame.push(local9);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) continue loop_label_19;
                                            break;
                                          }
                                          frame.push(local40);
                                          frame.push(local9);
                                          frame.i32_ge_u();
                                          if (frame.pop() != 0) break block_label_17;
                                          frame.push(local9);
                                          frame.push(local40);
                                          {
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func038(t0, t1);
                                          }
                                          throw Trap('unreachable');
                                        }
                                        frame.i32_const(0);
                                        local9 = frame.pop();
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load(2, 276);
                                        frame.push(local40);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.push(local0);
                                        frame.i32_const(272);
                                        frame.i32_add();
                                        frame.push(local40);
                                        {
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          _func066(t0, t1);
                                        }
                                        frame.push(local0);
                                        frame.i32_load(2, 272);
                                        local15 = frame.pop();
                                      }
                                      frame.push(local15);
                                      frame.push(local9);
                                      frame.i32_const(4);
                                      frame.i32_shl();
                                      frame.i32_add();
                                      local1 = frame.peek();
                                      frame.i32_const(16);
                                      frame.i32_add();
                                      frame.push(local1);
                                      frame.push(local40);
                                      frame.push(local9);
                                      frame.i32_sub();
                                      frame.i32_const(4);
                                      frame.i32_shl();
                                      {
                                        var t2 = frame.pop();
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        frame.push(_memmove(t0, t1, t2));
                                      }
                                      frame.drop();
                                      frame.push(local1);
                                      frame.push(local14);
                                      frame.i32_store8(0, 12);
                                      frame.push(local1);
                                      frame.push(local16);
                                      frame.i32_store(2, 8);
                                      frame.push(local1);
                                      frame.push(local38);
                                      frame.i32_store(2, 4);
                                      frame.push(local1);
                                      frame.push(local39);
                                      frame.i32_store(2, 0);
                                      frame.push(local1);
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 328);
                                      frame.i32_store16(0, 13);
                                      frame.push(local1);
                                      frame.i32_const(15);
                                      frame.i32_add();
                                      frame.push(local20);
                                      frame.i32_load8_u(0, 0);
                                      frame.i32_store8(0, 0);
                                      frame.push(local0);
                                      frame.push(local40);
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      frame.i32_store(2, 280);
                                      break block_label_10;
                                    }
                                    frame.push(local0);
                                    frame.i32_load(2, 100);
                                    local1 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_load(2, 96);
                                    local2 = frame.peek();
                                    frame.i32_lt_u();
                                    if (frame.pop() != 0) break block_label_0;
                                    frame.push(local1);
                                    frame.push(local0);
                                    frame.i32_load(2, 92);
                                    frame.i32_gt_u();
                                    if (frame.pop() != 0) break block_label_0;
                                    frame.push(local1);
                                    frame.push(local2);
                                    frame.i32_sub();
                                    local1 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load(2, 88);
                                    frame.push(local2);
                                    frame.i32_add();
                                    local2 = frame.pop();
                                    frame.i32_const(128);
                                    arg2 = frame.pop();

                                    loop_label_16:
                                    for (;;) {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          frame.push(local1);
                                          frame.i32_const(2);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) break block_label_18;
                                          block_label_19:
                                          {
                                            frame.push(arg2);
                                            frame.i32_const(255);
                                            frame.i32_and();
                                            local1 = frame.peek();
                                            frame.i32_const(128);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local0);
                                            frame.i32_const(424);
                                            frame.i32_add();
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(496);
                                            frame.i32_add();
                                            frame.i32_const(8);
                                            frame.i32_add();
                                            frame.i32_load(2, 0);
                                            frame.i32_store(2, 0);
                                            frame.push(local0);
                                            frame.push(local0);
                                            frame.i64_load(3, 496);
                                            frame.i64_store(3, 424);
                                            frame.push(local0);
                                            frame.i32_const(408);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(424);
                                            frame.i32_add();
                                            {
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func079(t0, t1);
                                            }
                                            frame.push(local0);
                                            frame.i32_const(424);
                                            frame.i32_add();
                                            frame.push(local0);
                                            frame.i32_const(384);
                                            frame.i32_add();
                                            frame.push(arg1);
                                            frame.i32_const(8);
                                            frame.i32_shl();
                                            frame.push(local1);
                                            frame.i32_or();
                                            frame.push(local0);
                                            frame.i32_const(408);
                                            frame.i32_add();
                                            {
                                              var t3 = frame.pop();
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _func075(t0, t1, t2, t3);
                                            }
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                frame.i32_const(0);
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local0);
                                                frame.i32_load8_u(0, 428);
                                                frame.i32_const(2);
                                                frame.i32_ne();
                                                if (frame.pop() != 0) break block_label_20;
                                              }
                                              frame.push(local0);
                                              frame.i32_load(2, 436);
                                              local1 = frame.peek();
                                              frame.i32_eqz();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local1);
                                              frame.i32_const(3);
                                              frame.i32_shl();
                                              frame.i32_eqz();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.i32_const(0xf5160);
                                              frame.push(local0);
                                              frame.i32_load(2, 432);
                                              {
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func018(t0, t1);
                                              }
                                            }
                                            frame.push(local0);
                                            frame.i32_const(0);
                                            frame.i32_store(2, 504);
                                            frame.push(local0);
                                            frame.i64_const(1);
                                            frame.i64_store(3, 496);
                                          }
                                          frame.push(local0);
                                          frame.i32_const(424);
                                          frame.i32_add();
                                          frame.push(local2);
                                          frame.i32_const(2);
                                          frame.i32_const(2);
                                          {
                                            var t3 = frame.pop();
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func078(t0, t1, t2, t3);
                                          }
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 424);
                                          if (frame.pop() != 0) break block_label_14;
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 425);
                                            local1 = frame.peek();
                                            frame.i32_const(-48);
                                            frame.i32_add();
                                            frame.i32_const(255);
                                            frame.i32_and();
                                            frame.i32_const(10);
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local1);
                                            frame.i32_const(-65);
                                            frame.i32_add();
                                            frame.i32_const(255);
                                            frame.i32_and();
                                            frame.i32_const(26);
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.push(local1);
                                            frame.i32_const(-97);
                                            frame.i32_add();
                                            frame.i32_const(255);
                                            frame.i32_and();
                                            frame.i32_const(25);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) break block_label_14;
                                          }
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 426);
                                          frame.i32_const(223);
                                          frame.i32_and();
                                          frame.i32_const(-65);
                                          frame.i32_add();
                                          frame.i32_const(255);
                                          frame.i32_and();
                                          frame.i32_const(25);
                                          frame.i32_gt_u();
                                          if (frame.pop() != 0) break block_label_14;
                                          frame.push(local0);
                                          frame.i32_load16_u(0, 425);
                                          local1 = frame.peek();
                                          frame.i32_const(0x3f3f);
                                          frame.i32_add();
                                          frame.i32_const(0xdada);
                                          frame.push(local1);
                                          frame.i32_sub();
                                          frame.i32_and();
                                          frame.i32_const(2);
                                          frame.i32_shr_u();
                                          frame.i32_const(0x2020);
                                          frame.i32_and();
                                          frame.push(local1);
                                          frame.i32_or();
                                          arg2 = frame.peek();
                                          frame.i32_const(8);
                                          frame.i32_shr_u();
                                          arg1 = frame.pop();
                                          break block_label_17;
                                        }
                                        frame.push(arg2);
                                        frame.i32_const(255);
                                        frame.i32_and();
                                        frame.i32_const(128);
                                        frame.i32_eq();
                                        if (frame.pop() != 0) break block_label_15;
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              frame.push(local1);
                                              frame.i32_const(-9);
                                              frame.i32_add();
                                              frame.i32_const(-6);
                                              frame.i32_lt_u();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local0);
                                              frame.i32_const(424);
                                              frame.i32_add();
                                              frame.push(local2);
                                              frame.push(local1);
                                              frame.push(local1);
                                              {
                                                var t3 = frame.pop();
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func050(t0, t1, t2, t3);
                                              }
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 424);
                                                    frame.i32_eqz();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.i64_const(1);
                                                    local28 = frame.pop();
                                                    break block_label_22;
                                                  }
                                                  block_label_23:
                                                  {
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 425);
                                                    frame.i32_const(116);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 426);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(114);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 427);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(117);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 428);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(101);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 429);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 430);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 431);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 432);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_eqz();
                                                    if (frame.pop() != 0) break block_label_21;
                                                  }
                                                  frame.push(local0);
                                                  frame.i64_load(0, 425);
                                                  local28 = frame.peek();
                                                  frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                  frame.i64_add();
                                                  frame.i64_const(-0x5050505050505051);
                                                  frame.push(local28);
                                                  frame.i64_sub();
                                                  frame.push(local28);
                                                  frame.i64_const(0x4646464646464646);
                                                  frame.i64_add();
                                                  frame.i64_or();
                                                  frame.i64_and();
                                                  frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                  frame.push(local28);
                                                  frame.i64_const(0x2020202020202020);
                                                  frame.i64_or();
                                                  local29 = frame.peek();
                                                  frame.i64_sub();
                                                  frame.push(local29);
                                                  frame.i64_const(0x505050505050505);
                                                  frame.i64_add();
                                                  frame.i64_or();
                                                  frame.i64_and();
                                                  frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                  frame.i64_and();
                                                  frame.i64_eqz();
                                                  if (frame.pop() != 0) break block_label_19;
                                                  frame.i64_const(2);
                                                  local28 = frame.pop();
                                                }
                                                frame.push(local28);
                                                frame.push(local44);
                                                frame.i64_const(-256);
                                                frame.i64_and();
                                                frame.i64_or();
                                                local44 = frame.pop();
                                                break block_label_13;
                                              }
                                              frame.push(local44);
                                              frame.i64_const(-256);
                                              frame.i64_and();
                                              frame.i64_const(128);
                                              frame.i64_or();
                                              local44 = frame.pop();
                                              break block_label_18;
                                            }
                                            frame.push(local44);
                                            frame.i64_const(-256);
                                            frame.i64_and();
                                            frame.i64_const(2);
                                            frame.i64_or();
                                            local44 = frame.pop();
                                            break block_label_13;
                                          }
                                          frame.push(local28);
                                          frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                          frame.i64_add();
                                          frame.i64_const(-0x2525252525252526);
                                          frame.push(local28);
                                          frame.i64_sub();
                                          frame.i64_and();
                                          frame.i64_const(2);
                                          frame.i64_shr_u();
                                          frame.i64_const(0x2020202020202020);
                                          frame.i64_and();
                                          frame.push(local28);
                                          frame.i64_or();
                                          local44 = frame.pop();
                                        }
                                        frame.push(local44);
                                        frame.i64_const(255);
                                        frame.i64_and();
                                        frame.i64_const(128);
                                        frame.i64_eq();
                                        if (frame.pop() != 0) break block_label_17;
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load(2, 504);
                                          local1 = frame.peek();
                                          frame.push(local0);
                                          frame.i32_load(2, 500);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) break block_label_18;
                                          frame.push(local0);
                                          frame.i32_const(496);
                                          frame.i32_add();
                                          frame.push(local1);
                                          {
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _func065(t0, t1);
                                          }
                                          frame.push(local0);
                                          frame.i32_load(2, 504);
                                          local1 = frame.pop();
                                        }
                                        frame.push(local0);
                                        frame.i32_load(2, 496);
                                        frame.push(local1);
                                        frame.i32_const(3);
                                        frame.i32_shl();
                                        frame.i32_add();
                                        frame.push(local44);
                                        frame.i64_store(0, 0);
                                        frame.push(local0);
                                        frame.push(local0);
                                        frame.i32_load(2, 504);
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        frame.i32_store(2, 504);
                                      }
                                      frame.push(local0);
                                      frame.i32_const(24);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(88);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func049(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 104);
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.push(local0);
                                        frame.i32_load(2, 100);
                                        local1 = frame.peek();
                                        frame.push(local0);
                                        frame.i32_load(2, 96);
                                        local2 = frame.peek();
                                        frame.i32_lt_u();
                                        if (frame.pop() != 0) break block_label_0;
                                        frame.push(local1);
                                        frame.push(local0);
                                        frame.i32_load(2, 92);
                                        frame.i32_gt_u();
                                        if (frame.pop() != 0) break block_label_0;
                                        frame.push(local1);
                                        frame.push(local2);
                                        frame.i32_sub();
                                        local1 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_load(2, 88);
                                        frame.push(local2);
                                        frame.i32_add();
                                        local2 = frame.pop();
                                        continue loop_label_16;
                                      }
                                      break;
                                    }
                                    frame.push(arg2);
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    frame.i32_const(128);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) break block_label_13;
                                  }
                                  frame.push(local0);
                                  frame.i32_load(2, 488);
                                  frame.push(local0);
                                  frame.i32_load(2, 384);
                                  frame.i32_or();
                                  frame.i32_eqz();
                                  if (frame.pop() != 0) break block_label_14;
                                  frame.push(local21);
                                  frame.push(local0);
                                  frame.i64_load(3, 480);
                                  frame.i64_store(2, 0);
                                  frame.push(local0);
                                  frame.i32_const(424);
                                  frame.i32_add();
                                  frame.i32_const(16);
                                  frame.i32_add();
                                  frame.push(local13);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(3, 0);
                                  frame.push(local0);
                                  frame.i32_const(424);
                                  frame.i32_add();
                                  frame.i32_const(8);
                                  frame.i32_add();
                                  frame.push(local14);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(3, 0);
                                  frame.push(local21);
                                  frame.i32_const(8);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(480);
                                  frame.i32_add();
                                  frame.i32_const(8);
                                  frame.i32_add();
                                  frame.i32_load(2, 0);
                                  frame.i32_store(2, 0);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 384);
                                  frame.i64_store(3, 424);
                                  frame.push(local20);
                                  frame.push(local0);
                                  frame.i32_const(424);
                                  frame.i32_add();
                                  frame.i32_const(36);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_memcpy(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_load(2, 500);
                                  local1 = frame.peek();
                                  frame.i32_eqz();
                                  if (frame.pop() != 0) break block_label_12;
                                  frame.push(local1);
                                  frame.i32_const(3);
                                  frame.i32_shl();
                                  frame.i32_eqz();
                                  if (frame.pop() != 0) break block_label_12;
                                  frame.i32_const(0xf5160);
                                  frame.push(local0);
                                  frame.i32_load(2, 496);
                                  {
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func018(t0, t1);
                                  }
                                  break block_label_12;
                                }
                                frame.push(local0);
                                frame.i32_load(2, 500);
                                local1 = frame.peek();
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_11;
                                frame.push(local1);
                                frame.i32_const(3);
                                frame.i32_shl();
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_11;
                                frame.i32_const(0xf5160);
                                frame.push(local0);
                                frame.i32_load(2, 496);
                                {
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func018(t0, t1);
                                }
                                break block_label_11;
                              }
                              frame.push(local0);
                              frame.i32_const(424);
                              frame.i32_add();
                              frame.i32_const(8);
                              frame.i32_add();
                              local1 = frame.peek();
                              frame.push(local0);
                              frame.i32_const(496);
                              frame.i32_add();
                              frame.i32_const(8);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              frame.i32_store(2, 0);
                              frame.push(local0);
                              frame.push(local0);
                              frame.i64_load(3, 496);
                              frame.i64_store(3, 424);
                              frame.push(local0);
                              frame.i32_const(408);
                              frame.i32_add();
                              frame.push(local0);
                              frame.i32_const(424);
                              frame.i32_add();
                              {
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                _func079(t0, t1);
                              }
                              frame.push(local0);
                              frame.i32_const(424);
                              frame.i32_add();
                              frame.push(local0);
                              frame.i32_const(384);
                              frame.i32_add();
                              frame.push(arg1);
                              frame.i32_const(8);
                              frame.i32_shl();
                              frame.push(arg2);
                              frame.i32_const(255);
                              frame.i32_and();
                              frame.i32_or();
                              frame.push(local0);
                              frame.i32_const(408);
                              frame.i32_add();
                              {
                                var t3 = frame.pop();
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                _func075(t0, t1, t2, t3);
                              }
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.i32_const(0);
                                  if (frame.pop() != 0) break block_label_14;
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 428);
                                  frame.i32_const(2);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) break block_label_13;
                                }
                                frame.push(local0);
                                frame.i32_load(2, 436);
                                local2 = frame.peek();
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(local2);
                                frame.i32_const(3);
                                frame.i32_shl();
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_13;
                                frame.i32_const(0xf5160);
                                frame.push(local0);
                                frame.i32_load(2, 432);
                                {
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func018(t0, t1);
                                }
                              }
                              frame.push(local0);
                              frame.i32_load(2, 488);
                              frame.push(local0);
                              frame.i32_load(2, 384);
                              frame.i32_or();
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_11;
                              frame.push(local21);
                              frame.push(local0);
                              frame.i64_load(3, 480);
                              frame.i64_store(2, 0);
                              frame.push(local0);
                              frame.i32_const(424);
                              frame.i32_add();
                              frame.i32_const(16);
                              frame.i32_add();
                              frame.push(local13);
                              frame.i64_load(3, 0);
                              frame.i64_store(3, 0);
                              frame.push(local1);
                              frame.push(local14);
                              frame.i64_load(3, 0);
                              frame.i64_store(3, 0);
                              frame.push(local21);
                              frame.i32_const(8);
                              frame.i32_add();
                              frame.push(local0);
                              frame.i32_const(480);
                              frame.i32_add();
                              frame.i32_const(8);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              frame.i32_store(2, 0);
                              frame.push(local0);
                              frame.push(local0);
                              frame.i64_load(3, 384);
                              frame.i64_store(3, 424);
                              frame.push(local20);
                              frame.push(local0);
                              frame.i32_const(424);
                              frame.i32_add();
                              frame.i32_const(36);
                              {
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                frame.push(_memcpy(t0, t1, t2));
                              }
                              frame.drop();
                            }
                            frame.push(local19);
                            frame.push(local20);
                            frame.i32_const(36);
                            {
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              frame.push(_memcpy(t0, t1, t2));
                            }
                            local1 = frame.pop();
                            frame.push(local0);
                            frame.i32_const(192);
                            frame.i32_add();
                            {
                              var t0 = frame.pop();
                              _func055(t0);
                            }
                            frame.push(local0);
                            frame.i32_const(192);
                            frame.i32_add();
                            frame.push(local1);
                            frame.i32_const(36);
                            {
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              frame.push(_memcpy(t0, t1, t2));
                            }
                            frame.drop();
                            break block_label_10;
                          }
                          frame.push(local0);
                          frame.i32_const(384);
                          frame.i32_add();
                          {
                            var t0 = frame.pop();
                            _func053(t0);
                          }
                          frame.push(local0);
                          frame.i32_load(2, 484);
                          local1 = frame.peek();
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_7;
                          frame.push(local1);
                          frame.i32_const(3);
                          frame.i32_shl();
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_7;
                          frame.i32_const(0xf5160);
                          frame.push(local0);
                          frame.i32_load(2, 480);
                          {
                            var t1 = frame.pop();
                            var t0 = frame.pop();
                            _func018(t0, t1);
                          }
                          break block_label_7;
                        }
                        frame.push(local0);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.push(local0);
                        frame.i32_const(88);
                        frame.i32_add();
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func049(t0, t1);
                        }
                        frame.push(local0);
                        frame.i32_load(2, 12);
                        local2 = frame.pop();
                        frame.push(local0);
                        frame.i32_load(2, 8);
                        local1 = frame.peek();
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_6;
                        continue loop_label_8;
                      }
                      break;
                    }
                    frame.i32_const(3);
                    local12 = frame.pop();
                  }
                  block_label_7:
                  {
                    frame.push(local0);
                    frame.i32_load(2, 280);
                    local2 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local0);
                    frame.i32_load(2, 272);
                    local1 = frame.pop();
                    frame.push(local2);
                    frame.i32_const(4);
                    frame.i32_shl();
                    local2 = frame.pop();

                    loop_label_8:
                    for (;;) {
                      block_label_9:
                      {
                        frame.push(local1);
                        frame.i32_const(4);
                        frame.i32_add();
                        frame.i32_load(2, 0);
                        arg2 = frame.peek();
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(arg2);
                        frame.i32_const(3);
                        frame.i32_shl();
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_9;
                        frame.i32_const(0xf5160);
                        frame.push(local1);
                        frame.i32_load(2, 0);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func018(t0, t1);
                        }
                      }
                      frame.push(local1);
                      frame.i32_const(16);
                      frame.i32_add();
                      local1 = frame.pop();
                      frame.push(local2);
                      frame.i32_const(-16);
                      frame.i32_add();
                      local2 = frame.peek();
                      if (frame.pop() != 0) continue loop_label_8;
                      break;
                    }
                  }
                  block_label_7:
                  {
                    frame.push(local0);
                    frame.i32_load(2, 276);
                    local1 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local1);
                    frame.i32_const(4);
                    frame.i32_shl();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.i32_const(0xf5160);
                    frame.push(local0);
                    frame.i32_load(2, 272);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func018(t0, t1);
                    }
                  }
                  block_label_7:
                  {
                    frame.push(local18);
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local37);
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local37);
                    frame.i32_const(3);
                    frame.i32_shl();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.i32_const(0xf5160);
                    frame.push(local18);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func018(t0, t1);
                    }
                  }
                  block_label_7:
                  {
                    frame.push(local0);
                    frame.i32_load8_u(0, 232);
                    local1 = frame.peek();
                    frame.i32_const(4);
                    frame.i32_eq();
                    if (frame.pop() != 0) break block_label_7;
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.i32_const(0);
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(local1);
                        frame.i32_const(3);
                        frame.i32_and();
                        frame.i32_const(2);
                        frame.i32_ne();
                        if (frame.pop() != 0) break block_label_8;
                      }
                      frame.push(local0);
                      frame.i32_load(2, 240);
                      local1 = frame.peek();
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_8;
                      frame.push(local1);
                      frame.i32_const(3);
                      frame.i32_shl();
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_8;
                      frame.i32_const(0xf5160);
                      frame.push(local0);
                      frame.i32_load(2, 236);
                      {
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        _func018(t0, t1);
                      }
                    }
                    frame.push(local22);
                    {
                      var t0 = frame.pop();
                      _func052(t0);
                    }
                  }
                  frame.push(local0);
                  frame.i32_const(192);
                  frame.i32_add();
                  {
                    var t0 = frame.pop();
                    _func055(t0);
                  }
                  frame.push(arg0);
                  frame.i32_const(1);
                  frame.i32_store8(0, 0);
                  frame.push(arg0);
                  frame.push(local12);
                  frame.i32_store8(0, 1);
                  frame.push(local8);
                  frame.i32_const(255);
                  frame.i32_and();
                  frame.i32_const(2);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) break block_label_1;
                  frame.push(local7);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_1;
                  frame.push(local7);
                  frame.i32_const(3);
                  frame.i32_shl();
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_1;
                  frame.i32_const(0xf5160);
                  frame.push(local6);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func018(t0, t1);
                  }
                  break block_label_1;
                }
                frame.push(local0);
                frame.i32_load(2, 192);
                local17 = frame.peek();
                frame.i32_const(3);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_4;
                frame.i32_const(1);
                local16 = frame.pop();
              }
              frame.i32_const(0);
              local17 = frame.pop();
              frame.i32_const(0);
              local15 = frame.pop();
              frame.i32_const(0);
              local14 = frame.pop();
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(296);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(204);
            frame.i32_add();
            frame.i64_load(2, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(304);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(212);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_store(2, 0);
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(2, 196);
            frame.i64_store(3, 288);
            frame.push(local0);
            frame.i32_const(216);
            frame.i32_add();
            frame.i32_load(2, 0);
            local16 = frame.pop();
            frame.push(local0);
            frame.i32_const(220);
            frame.i32_add();
            frame.i32_load(2, 0);
            local15 = frame.pop();
            frame.push(local0);
            frame.i32_const(224);
            frame.i32_add();
            frame.i32_load(2, 0);
            local14 = frame.pop();
          }
          frame.i32_const(4);
          local3 = frame.pop();
          frame.i32_const(3);
          local2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.i32_const(0);
          arg2 = frame.pop();
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load8_u(0, 232);
            local1 = frame.peek();
            frame.i32_const(4);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(336);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(241);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(344);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(249);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(351);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(256);
            frame.i32_add();
            frame.i32_load(0, 0);
            frame.i32_store(0, 0);
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(0, 233);
            frame.i64_store(3, 328);
            frame.push(local0);
            frame.i32_const(264);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(268);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg2 = frame.pop();
            frame.push(local0);
            frame.i32_load(2, 260);
            local3 = frame.pop();
            frame.push(local1);
            local2 = frame.pop();
          }
          frame.push(local0);
          frame.i32_const(168);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(288);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(168);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(288);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(136);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(328);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(136);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(328);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(136);
          frame.i32_add();
          frame.i32_const(23);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(328);
          frame.i32_add();
          frame.i32_const(23);
          frame.i32_add();
          frame.i32_load(0, 0);
          frame.i32_store(0, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 288);
          frame.i64_store(3, 168);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 328);
          frame.i64_store(3, 136);
          frame.push(local36);
          frame.i32_const(0);
          frame.push(local18);
          frame.select();
          local12 = frame.pop();
          frame.push(local37);
          frame.i32_const(0);
          frame.push(local18);
          frame.select();
          local13 = frame.pop();
          frame.push(local18);
          frame.i32_const(1);
          frame.push(local18);
          frame.select();
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 272);
          local11 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 276);
          local10 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 280);
          local9 = frame.pop();
        }
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.push(local8);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(5);
        frame.i32_add();
        frame.push(local0);
        frame.i32_load16_u(1, 132);
        frame.i32_store16(0, 0);
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(local7);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local6);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local0);
        frame.i64_load(3, 112);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(36);
        frame.i32_add();
        frame.push(local0);
        frame.i64_load(3, 168);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(69);
        frame.i32_add();
        frame.push(local0);
        frame.i64_load(3, 136);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(7);
        frame.i32_add();
        frame.push(local4);
        frame.i32_load8_u(0, 0);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(24);
        frame.i32_add();
        frame.push(local5);
        frame.i64_load(3, 0);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(44);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(168);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(52);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(168);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(77);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(136);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(85);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(136);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(92);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(159);
        frame.i32_add();
        frame.i32_load(0, 0);
        frame.i32_store(0, 0);
        frame.push(arg0);
        frame.i32_const(128);
        frame.i32_add();
        frame.push(local9);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(124);
        frame.i32_add();
        frame.push(local10);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(120);
        frame.i32_add();
        frame.push(local11);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(116);
        frame.i32_add();
        frame.push(local12);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(112);
        frame.i32_add();
        frame.push(local13);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(108);
        frame.i32_add();
        frame.push(local1);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(104);
        frame.i32_add();
        frame.push(arg2);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(100);
        frame.i32_add();
        frame.push(arg1);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(96);
        frame.i32_add();
        frame.push(local3);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(68);
        frame.i32_add();
        frame.push(local2);
        frame.i32_store8(0, 0);
        frame.push(arg0);
        frame.i32_const(64);
        frame.i32_add();
        frame.push(local14);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(60);
        frame.i32_add();
        frame.push(local15);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(56);
        frame.i32_add();
        frame.push(local16);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(32);
        frame.i32_add();
        frame.push(local17);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(0);
        frame.i32_store8(0, 0);
      }
      frame.push(local0);
      frame.i32_const(512);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _ZN9icu_locid6parser18get_current_subtag17h7a2bec06e6132e7cE(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg3);
      frame.push(arg2);
      frame.i32_ge_u();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg3);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(1);
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        arg3 = frame.peek();
        frame.i32_const(45);
        frame.i32_eq();
        frame.push(arg3);
        frame.i32_const(95);
        frame.i32_eq();
        frame.i32_or();
        local1 = frame.peek();
        frame.select();
        arg3 = frame.peek();
        frame.push(arg2);
        frame.i32_ge_u();
        if (frame.pop() != 0) break block_label_1;

        loop_label_2:
        for (;;) {
          frame.push(arg1);
          frame.push(arg3);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          local2 = frame.peek();
          frame.i32_const(95);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.push(local2);
          frame.i32_const(45);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_const(1);
          frame.i32_add();
          arg3 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.push(arg2);
        arg3 = frame.pop();
      }
      frame.push(arg0);
      frame.push(arg3);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(0);
      frame.push(local1);
      frame.select();
      frame.i32_store(2, 0);
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _ZN9icu_locid6parser6langid35parse_language_identifier_from_iter17hec27c1d439ee1af1E(
      i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i64 local12 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(112);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 72);
    frame.push(local0);
    frame.i64_const(1);
    frame.i64_store(3, 64);
    frame.push(local0);
    frame.i32_const(56);
    frame.i32_add();
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func049(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 56);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local1);
          frame.push(local0);
          frame.i32_load(2, 60);
          local2 = frame.peek();
          frame.push(local2);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(
                _ZN9icu_locid7subtags8language8Language27try_from_bytes_manual_slice17h8c2c00b0b683313bE(
                    t0, t1, t2));
          }
          local3 = frame.peek();
          frame.i32_const(8);
          frame.i32_shr_u();
          local4 = frame.pop();
          block_label_3:
          {
            frame.push(local3);
            frame.i32_const(1);
            frame.i32_and();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(48);
            frame.i32_add();
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _ZN9icu_locid6parser14SubtagIterator4peek17ha422a99f1ee4c3a9E(t0, t1);
            }
            frame.i32_const(128);
            local5 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.push(local0);
                        frame.i32_load(2, 48);
                        local6 = frame.peek();
                        if (frame.pop() != 0) break block_label_9;
                        frame.i32_const(128);
                        local7 = frame.pop();
                        break block_label_8;
                      }
                      frame.i32_const(128);
                      local7 = frame.pop();
                      frame.push(local0);
                      frame.i32_load(2, 52);
                      local8 = frame.peek();
                      frame.i32_const(1);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_8;
                      frame.i32_const(128);
                      local7 = frame.pop();
                      frame.i32_const(128);
                      local5 = frame.pop();
                      frame.i32_const(0);
                      local1 = frame.pop();

                      loop_label_9:
                      for (;;) {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.push(local1);
                                  frame.i32_const(255);
                                  frame.i32_and();
                                  var t0 = frame.pop();
                                  switch (t0) {
                                    case 0:
                                      break block_label_14;
                                    case 1:
                                      break block_label_13;
                                    default:
                                      break block_label_12;
                                  }
                                }
                                block_label_14:
                                {
                                  frame.push(local8);
                                  frame.i32_const(4);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) break block_label_14;
                                  frame.i32_const(0);
                                  local1 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_const(0);
                                  frame.i32_store(2, 80);
                                  frame.i32_const(0);
                                  local9 = frame.pop();

                                  loop_label_15:
                                  for (;;) {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        frame.push(local6);
                                        frame.push(local1);
                                        frame.i32_add();
                                        frame.i32_load8_s(0, 0);
                                        local2 = frame.peek();
                                        frame.i32_eqz();
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.push(local9);
                                        frame.push(local2);
                                        frame.i32_const(0);
                                        frame.i32_lt_s();
                                        frame.i32_or();
                                        frame.i32_const(1);
                                        frame.i32_and();
                                        if (frame.pop() != 0) break block_label_14;
                                        frame.push(local0);
                                        frame.i32_const(80);
                                        frame.i32_add();
                                        frame.push(local1);
                                        frame.i32_add();
                                        frame.push(local2);
                                        frame.i32_store8(0, 0);
                                        frame.push(local1);
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        local1 = frame.peek();
                                        frame.i32_const(4);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) break block_label_16;
                                        frame.push(local0);
                                        frame.i32_load(2, 80);
                                        local1 = frame.peek();
                                        frame.i32_const(0x7f7f7f7f);
                                        frame.i32_add();
                                        frame.i32_const(-0x1f1f1f20);
                                        frame.push(local1);
                                        frame.i32_const(0x20202020);
                                        frame.i32_or();
                                        local2 = frame.peek();
                                        frame.i32_sub();
                                        frame.push(local2);
                                        frame.i32_const(0x5050505);
                                        frame.i32_add();
                                        frame.i32_or();
                                        frame.i32_and();
                                        frame.i32_const(-0x7f7f7f80);
                                        frame.i32_and();
                                        if (frame.pop() != 0) break block_label_14;
                                        frame.push(local1);
                                        frame.i32_const(0x3f3f3f1f);
                                        frame.i32_add();
                                        frame.i32_const(-0x25252506);
                                        frame.push(local1);
                                        frame.i32_sub();
                                        frame.i32_and();
                                        frame.i32_const(2);
                                        frame.i32_shr_u();
                                        local2 = frame.peek();
                                        frame.i32_const(0x20202020);
                                        frame.i32_and();
                                        frame.push(local1);
                                        frame.i32_or();
                                        local1 = frame.peek();
                                        frame.push(local2);
                                        frame.i32_const(-1);
                                        frame.i32_xor();
                                        frame.i32_const(-33);
                                        frame.i32_or();
                                        frame.i32_and();
                                        local7 = frame.pop();
                                        frame.push(local1);
                                        frame.i32_const(8);
                                        frame.i32_shr_u();
                                        local10 = frame.pop();
                                        frame.i32_const(1);
                                        local1 = frame.pop();
                                        break block_label_10;
                                      }
                                      frame.push(local0);
                                      frame.i32_const(80);
                                      frame.i32_add();
                                      frame.push(local1);
                                      frame.i32_add();
                                      frame.i32_const(0);
                                      frame.i32_store8(0, 0);
                                      frame.push(local1);
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      local1 = frame.peek();
                                      frame.i32_const(4);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) break block_label_14;
                                    }
                                    frame.push(local2);
                                    frame.i32_eqz();
                                    local9 = frame.pop();
                                    frame.push(local1);
                                    frame.i32_const(4);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) continue loop_label_15;
                                    break block_label_7;
                                    break;
                                  }
                                }
                                block_label_14:
                                {
                                  frame.push(local6);
                                  frame.push(local8);
                                  frame.push(local8);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(
                                        _ZN9icu_locid7subtags6region6Region27try_from_bytes_manual_slice17hfeae80e0e237cebcE(
                                            t0, t1, t2));
                                  }
                                  local1 = frame.peek();
                                  frame.i32_const(1);
                                  frame.i32_and();
                                  if (frame.pop() != 0) break block_label_14;
                                  frame.push(local1);
                                  frame.i32_const(8);
                                  frame.i32_shr_u();
                                  local5 = frame.pop();
                                  frame.push(local1);
                                  frame.i32_const(16);
                                  frame.i32_shr_u();
                                  local11 = frame.pop();
                                  break block_label_11;
                                }
                                frame.push(local0);
                                frame.i32_const(80);
                                frame.i32_add();
                                frame.push(local6);
                                frame.push(local8);
                                frame.push(local8);
                                {
                                  var t3 = frame.pop();
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _ZN9icu_locid7subtags7variant7Variant27try_from_bytes_manual_slice17h931261b14f77cfb1E(
                                      t0, t1, t2, t3);
                                }
                                block_label_14:
                                {
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 80);
                                  if (frame.pop() != 0) break block_label_14;
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 81);
                                  local12 = frame.peek();
                                  frame.i64_store(3, 96);
                                  frame.push(local0);
                                  frame.i32_const(32);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_load(2, 64);
                                  frame.push(local0);
                                  frame.i32_load(2, 72);
                                  frame.push(local0);
                                  frame.i32_const(96);
                                  frame.i32_add();
                                  {
                                    var t3 = frame.pop();
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func056(t0, t1, t2, t3);
                                  }
                                  frame.push(local0);
                                  frame.i32_load(2, 32);
                                  frame.i32_const(1);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) break block_label_11;
                                  frame.push(local0);
                                  frame.i32_load(2, 36);
                                  local1 = frame.pop();
                                  frame.push(local0);
                                  frame.push(local12);
                                  frame.i64_store(3, 104);
                                  frame.push(local0);
                                  frame.i32_const(64);
                                  frame.i32_add();
                                  frame.push(local1);
                                  frame.push(local0);
                                  frame.i32_const(104);
                                  frame.i32_add();
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func057(t0, t1, t2);
                                  }
                                  break block_label_11;
                                }
                                frame.push(arg2);
                                frame.i32_const(255);
                                frame.i32_and();
                                frame.i32_const(2);
                                frame.i32_eq();
                                if (frame.pop() != 0) break block_label_8;
                                frame.push(arg0);
                                frame.i32_const(257);
                                frame.i32_store16(1, 0);
                                break block_label_1;
                              }
                              block_label_13:
                              {
                                frame.push(local6);
                                frame.push(local8);
                                frame.push(local8);
                                {
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  frame.push(
                                      _ZN9icu_locid7subtags6region6Region27try_from_bytes_manual_slice17hfeae80e0e237cebcE(
                                          t0, t1, t2));
                                }
                                local1 = frame.peek();
                                frame.i32_const(1);
                                frame.i32_and();
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(local1);
                                frame.i32_const(8);
                                frame.i32_shr_u();
                                local5 = frame.pop();
                                frame.push(local1);
                                frame.i32_const(16);
                                frame.i32_shr_u();
                                local11 = frame.pop();
                                break block_label_11;
                              }
                              frame.push(local0);
                              frame.i32_const(80);
                              frame.i32_add();
                              frame.push(local6);
                              frame.push(local8);
                              frame.push(local8);
                              {
                                var t3 = frame.pop();
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                _ZN9icu_locid7subtags7variant7Variant27try_from_bytes_manual_slice17h931261b14f77cfb1E(
                                    t0, t1, t2, t3);
                              }
                              block_label_13:
                              {
                                frame.push(local0);
                                frame.i32_load8_u(0, 80);
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(0, 81);
                                local12 = frame.peek();
                                frame.i64_store(3, 96);
                                frame.push(local0);
                                frame.i32_const(40);
                                frame.i32_add();
                                frame.push(local0);
                                frame.i32_load(2, 64);
                                frame.push(local0);
                                frame.i32_load(2, 72);
                                frame.push(local0);
                                frame.i32_const(96);
                                frame.i32_add();
                                {
                                  var t3 = frame.pop();
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func056(t0, t1, t2, t3);
                                }
                                frame.push(local0);
                                frame.i32_load(2, 40);
                                frame.i32_const(1);
                                frame.i32_ne();
                                if (frame.pop() != 0) break block_label_11;
                                frame.push(local0);
                                frame.i32_load(2, 44);
                                local1 = frame.pop();
                                frame.push(local0);
                                frame.push(local12);
                                frame.i64_store(3, 104);
                                frame.push(local0);
                                frame.i32_const(64);
                                frame.i32_add();
                                frame.push(local1);
                                frame.push(local0);
                                frame.i32_const(104);
                                frame.i32_add();
                                {
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func057(t0, t1, t2);
                                }
                                break block_label_11;
                              }
                              frame.push(arg2);
                              frame.i32_const(255);
                              frame.i32_and();
                              frame.i32_const(2);
                              frame.i32_eq();
                              if (frame.pop() != 0) break block_label_8;
                              frame.push(arg0);
                              frame.i32_const(257);
                              frame.i32_store16(1, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.i32_const(80);
                            frame.i32_add();
                            frame.push(local6);
                            frame.push(local8);
                            frame.push(local8);
                            {
                              var t3 = frame.pop();
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              _ZN9icu_locid7subtags7variant7Variant27try_from_bytes_manual_slice17h931261b14f77cfb1E(
                                  t0, t1, t2, t3);
                            }
                            block_label_12:
                            {
                              frame.push(local0);
                              frame.i32_load8_u(0, 80);
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_12;
                              frame.push(arg2);
                              frame.i32_const(255);
                              frame.i32_and();
                              frame.i32_const(2);
                              frame.i32_eq();
                              if (frame.pop() != 0) break block_label_8;
                              frame.push(arg0);
                              frame.i32_const(257);
                              frame.i32_store16(1, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.push(local0);
                            frame.i64_load(0, 81);
                            local12 = frame.peek();
                            frame.i64_store(3, 96);
                            frame.push(local0);
                            frame.i32_const(24);
                            frame.i32_add();
                            frame.push(local0);
                            frame.i32_load(2, 64);
                            frame.push(local0);
                            frame.i32_load(2, 72);
                            frame.push(local0);
                            frame.i32_const(96);
                            frame.i32_add();
                            {
                              var t3 = frame.pop();
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              _func056(t0, t1, t2, t3);
                            }
                            block_label_12:
                            {
                              frame.push(local0);
                              frame.i32_load(2, 24);
                              frame.i32_const(1);
                              frame.i32_eq();
                              if (frame.pop() != 0) break block_label_12;
                              frame.push(arg0);
                              frame.i32_const(257);
                              frame.i32_store16(1, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.i32_load(2, 28);
                            local2 = frame.pop();
                            frame.push(local0);
                            frame.push(local12);
                            frame.i64_store(3, 104);
                            frame.push(local0);
                            frame.i32_const(64);
                            frame.i32_add();
                            frame.push(local2);
                            frame.push(local0);
                            frame.i32_const(104);
                            frame.i32_add();
                            {
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              _func057(t0, t1, t2);
                            }
                            break block_label_10;
                          }
                          frame.i32_const(2);
                          local1 = frame.pop();
                        }
                        frame.push(local0);
                        frame.i32_const(16);
                        frame.i32_add();
                        frame.push(arg1);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func049(t0, t1);
                        }
                        frame.push(local0);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.push(arg1);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _ZN9icu_locid6parser14SubtagIterator4peek17ha422a99f1ee4c3a9E(t0, t1);
                        }
                        frame.push(local0);
                        frame.i32_load(2, 8);
                        local6 = frame.peek();
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_8;
                        frame.push(local0);
                        frame.i32_load(2, 12);
                        local8 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_ne();
                        if (frame.pop() != 0) continue loop_label_9;
                        break;
                      }
                    }
                    frame.push(local0);
                    frame.i32_load(2, 68);
                    local1 = frame.pop();
                    frame.push(local0);
                    frame.i32_load(2, 64);
                    local2 = frame.pop();
                    block_label_8:
                    {
                      frame.push(local0);
                      frame.i32_load(2, 72);
                      local6 = frame.peek();
                      var t0 = frame.pop();
                      switch (t0) {
                        case 0:
                          break block_label_6;
                        case 1:
                          break block_label_8;
                        default:
                          break block_label_5;
                      }
                    }
                    frame.push(local2);
                    frame.i64_load(0, 0);
                    local12 = frame.peek();
                    frame.i64_const(255);
                    frame.i64_and();
                    frame.i64_const(128);
                    frame.i64_eq();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(arg0);
                    frame.i32_const(1);
                    frame.i32_store8(0, 4);
                    frame.push(arg0);
                    frame.i32_const(5);
                    frame.i32_add();
                    frame.push(local12);
                    frame.i64_store(0, 0);
                    frame.push(local1);
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_4;
                    frame.push(local1);
                    frame.i32_const(3);
                    frame.i32_shl();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_4;
                    frame.i32_const(0xf5160);
                    frame.push(local2);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func018(t0, t1);
                    }
                    break block_label_4;
                  }
                  throw Trap('unreachable');
                  throw Trap('unreachable');
                }
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store8(0, 4);
                frame.push(local1);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_4;
                frame.push(local1);
                frame.i32_const(3);
                frame.i32_shl();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_4;
                frame.i32_const(0xf5160);
                frame.push(local2);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func018(t0, t1);
                }
                break block_label_4;
              }
              frame.push(arg0);
              frame.i32_const(2);
              frame.i32_store8(0, 4);
              frame.push(arg0);
              frame.i32_const(16);
              frame.i32_add();
              frame.push(local6);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(12);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local2);
              frame.i32_store(2, 0);
            }
            frame.push(arg0);
            frame.i32_const(0);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.i32_const(26);
            frame.i32_add();
            frame.push(local10);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.i32_const(24);
            frame.i32_add();
            frame.push(local10);
            frame.i32_store16(0, 0);
            frame.push(arg0);
            frame.i32_const(28);
            frame.i32_add();
            frame.push(local11);
            frame.i32_store16(0, 0);
            frame.push(arg0);
            frame.i32_const(27);
            frame.i32_add();
            frame.push(local5);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.i32_const(23);
            frame.i32_add();
            frame.push(local7);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.i32_const(21);
            frame.i32_add();
            frame.push(local3);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store16(0, 0);
            frame.push(arg0);
            frame.i32_const(20);
            frame.i32_add();
            frame.push(local4);
            frame.i32_store8(0, 0);
            break block_label_0;
          }
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_store8(0, 0);
          frame.push(arg0);
          frame.push(local4);
          frame.i32_store8(0, 1);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store16(1, 0);
      }
      frame.push(local0);
      frame.i32_load(2, 68);
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local1);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(local0);
      frame.i32_load(2, 64);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.push(local0);
    frame.i32_const(112);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _ZN9icu_locid7subtags8language8Language27try_from_bytes_manual_slice17h8c2c00b0b683313bE(
      i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_const(2);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.i32_const(0);
            arg0 = frame.pop();
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg0);
          frame.push(arg1);
          frame.push(arg2);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func077(t0, t1, t2, t3);
          }
          frame.i32_const(1);
          arg1 = frame.pop();
          frame.i32_const(0);
          arg0 = frame.pop();
          frame.push(local0);
          frame.i32_load8_u(0, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
        }
        frame.i32_const(0);
        arg2 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(0);
      arg2 = frame.pop();
      frame.push(local0);
      frame.i32_load16_u(0, 1);
      frame.push(local0);
      frame.i32_load8_u(0, 3);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      local1 = frame.peek();
      frame.i32_const(0x7f7f7f7f);
      frame.i32_add();
      frame.i32_const(-0x1f1f1f20);
      frame.push(local1);
      frame.i32_const(0x20202020);
      frame.i32_or();
      local2 = frame.peek();
      frame.i32_sub();
      frame.push(local2);
      frame.i32_const(0x5050505);
      frame.i32_add();
      frame.i32_or();
      frame.i32_and();
      frame.i32_const(-0x7f7f7f80);
      frame.i32_and();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local1);
      frame.i32_const(0x3f3f3f);
      frame.i32_add();
      frame.i32_const(0xdadada);
      frame.push(local1);
      frame.i32_sub();
      frame.i32_and();
      frame.i32_const(2);
      frame.i32_shr_u();
      frame.i32_const(0x202020);
      frame.i32_and();
      frame.push(local1);
      frame.i32_or();
      arg2 = frame.peek();
      frame.i32_const(8);
      frame.i32_shr_u();
      arg0 = frame.pop();
      frame.i32_const(0);
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg2);
    frame.i32_const(8);
    frame.i32_shl();
    frame.i32_const(0xff00);
    frame.i32_and();
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.push(arg1);
    frame.i32_or();
    return frame.pop();
  }

  void _ZN9icu_locid6parser14SubtagIterator4peek17ha422a99f1ee4c3a9E(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 16);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0);
          arg1 = frame.pop();
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local0 = frame.peek();
        frame.push(arg1);
        frame.i32_load(2, 8);
        local1 = frame.peek();
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_gt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.push(local1);
        frame.i32_sub();
        local0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.push(local1);
        frame.i32_add();
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _ZN9icu_locid7subtags6region6Region27try_from_bytes_manual_slice17hfeae80e0e237cebcE(
      i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_const(2);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            arg2 = frame.pop();
            frame.i32_const(0);
            arg1 = frame.pop();
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg0);
          frame.push(arg1);
          frame.push(arg2);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func077(t0, t1, t2, t3);
          }
          frame.i32_const(1);
          arg2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_load8_u(0, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
        }
        frame.i32_const(1);
        arg0 = frame.pop();
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_load16_u(0, 1);
      frame.push(local0);
      frame.i32_load8_u(0, 3);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      local1 = frame.peek();
      frame.i32_const(0x7f7f7f7f);
      frame.i32_add();
      frame.i32_const(-0x7f7f7f80);
      frame.i32_and();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_clz();
        frame.i32_const(56);
        frame.i32_and();
        frame.i32_const(16);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(1);
        arg0 = frame.pop();
        frame.push(local2);
        frame.i32_const(-0x1f1f1f20);
        frame.push(local1);
        frame.i32_const(0x20202020);
        frame.i32_or();
        local3 = frame.peek();
        frame.i32_sub();
        frame.push(local3);
        frame.i32_const(0x5050505);
        frame.i32_add();
        frame.i32_or();
        frame.i32_and();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local1);
        frame.i32_const(0x1f1f1f);
        frame.i32_add();
        frame.i32_const(0xfafafa);
        frame.push(local1);
        frame.i32_sub();
        frame.i32_and();
        frame.i32_const(-1);
        frame.i32_xor();
        frame.i32_const(2);
        frame.i32_shr_u();
        frame.i32_const(0xdfdfdf);
        frame.i32_or();
        frame.push(local1);
        frame.i32_and();
        arg2 = frame.peek();
        frame.i32_const(8);
        frame.i32_shr_u();
        arg1 = frame.pop();
        frame.i32_const(0);
        arg0 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(1);
      arg0 = frame.pop();
      frame.push(local2);
      frame.i32_const(-0x50505051);
      frame.push(local1);
      frame.i32_sub();
      frame.push(local1);
      frame.i32_const(0x46464646);
      frame.i32_add();
      frame.i32_or();
      frame.i32_and();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local1);
      frame.i32_const(8);
      frame.i32_shr_u();
      arg1 = frame.pop();
      frame.i32_const(0);
      arg0 = frame.pop();
      frame.push(local1);
      arg2 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg2);
    frame.i32_const(8);
    frame.i32_shl();
    frame.i32_const(0xff00);
    frame.i32_and();
    frame.push(arg1);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.push(arg0);
    frame.i32_or();
    return frame.pop();
  }

  void _ZN9icu_locid7subtags7variant7Variant27try_from_bytes_manual_slice17h931261b14f77cfb1E(
      i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i64 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg3);
              frame.i32_const(-9);
              frame.i32_add();
              frame.i32_const(-5);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.push(arg1);
              frame.push(arg2);
              frame.push(arg3);
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func050(t0, t1, t2, t3);
              }
              frame.push(local0);
              frame.i32_load8_u(0, 0);
              if (frame.pop() != 0) break block_label_2;
              frame.push(local0);
              frame.i64_load(0, 1);
              local1 = frame.peek();
              frame.i64_const(0x7f7f7f7f7f7f7f7f);
              frame.i64_add();
              frame.i64_const(-0x5050505050505051);
              frame.push(local1);
              frame.i64_sub();
              frame.push(local1);
              frame.i64_const(0x4646464646464646);
              frame.i64_add();
              frame.i64_or();
              frame.i64_and();
              frame.i64_const(-0x1f1f1f1f1f1f1f20);
              frame.push(local1);
              frame.i64_const(0x2020202020202020);
              frame.i64_or();
              local2 = frame.peek();
              frame.i64_sub();
              frame.push(local2);
              frame.i64_const(0x505050505050505);
              frame.i64_add();
              frame.i64_or();
              frame.i64_and();
              frame.i64_const(-0x7f7f7f7f7f7f7f80);
              frame.i64_and();
              frame.i64_eqz();
              if (frame.pop() != 0) break block_label_3;
              break block_label_2;
            }
            frame.push(arg0);
            frame.i32_const(257);
            frame.i32_store16(0, 0);
            break block_label_0;
          }
          block_label_3:
          {
            frame.push(local1);
            frame.i64_clz();
            frame.i64_const(120);
            frame.i64_and();
            frame.i64_const(32);
            frame.i64_ne();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local1);
            frame.i32_wrap_i64();
            frame.i32_const(-48);
            frame.i32_add();
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_const(9);
            frame.i32_gt_u();
            if (frame.pop() != 0) break block_label_2;
          }
          frame.push(arg0);
          frame.push(local1);
          frame.i64_const(0x3f3f3f3f3f3f3f3f);
          frame.i64_add();
          frame.i64_const(-0x2525252525252526);
          frame.push(local1);
          frame.i64_sub();
          frame.i64_and();
          frame.i64_const(2);
          frame.i64_shr_u();
          frame.i64_const(0x2020202020202020);
          frame.i64_and();
          frame.push(local1);
          frame.i64_or();
          frame.i64_store(0, 1);
          frame.i32_const(0);
          arg3 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(1);
        arg3 = frame.pop();
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 1);
      }
      frame.push(arg0);
      frame.push(arg3);
      frame.i32_store8(0, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func088(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load8_u(0, 0);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_4;
                case 1:
                  break block_label_3;
                case 2:
                  break block_label_2;
                case 3:
                  break block_label_1;
                default:
                  break block_label_4;
              }
            }
            frame.push(arg1);
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg0 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 24);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 28);
            frame.push(local0);
            frame.i32_const(0xf4388);
            frame.i32_store(2, 24);
            frame.push(local0);
            frame.i64_const(1);
            frame.i64_store(2, 12);
            frame.push(local0);
            frame.i32_const(0xf4410);
            frame.i32_store(2, 8);
            frame.push(arg1);
            frame.push(arg0);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
            }
            arg1 = frame.pop();
            break block_label_0;
          }
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 24);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 28);
          frame.push(local0);
          frame.i32_const(0xf4388);
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.i64_const(1);
          frame.i64_store(2, 12);
          frame.push(local0);
          frame.i32_const(0xf43e4);
          frame.i32_store(2, 8);
          frame.push(arg1);
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
          }
          arg1 = frame.pop();
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 24);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 28);
        frame.push(local0);
        frame.i32_const(0xf4388);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.i64_const(1);
        frame.i64_store(2, 12);
        frame.push(local0);
        frame.i32_const(0xf43cc);
        frame.i32_store(2, 8);
        frame.push(arg1);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
        }
        arg1 = frame.pop();
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      arg0 = frame.pop();
      frame.push(arg1);
      frame.i32_load(2, 24);
      arg1 = frame.pop();
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 28);
      frame.push(local0);
      frame.i32_const(0xf4388);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.i64_const(1);
      frame.i64_store(2, 12);
      frame.push(local0);
      frame.i32_const(0xf43b0);
      frame.i32_store(2, 8);
      frame.push(arg1);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func089(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    frame.push(arg0);
                                    frame.i32_load8_u(0, 0);
                                    var t0 = frame.pop();
                                    switch (t0) {
                                      case 0:
                                        break block_label_15;
                                      case 1:
                                        break block_label_14;
                                      case 2:
                                        break block_label_13;
                                      case 3:
                                        break block_label_12;
                                      case 4:
                                        break block_label_11;
                                      case 5:
                                        break block_label_10;
                                      case 6:
                                        break block_label_9;
                                      case 7:
                                        break block_label_8;
                                      case 8:
                                        break block_label_7;
                                      case 9:
                                        break block_label_6;
                                      case 10:
                                        break block_label_5;
                                      case 11:
                                        break block_label_4;
                                      case 12:
                                        break block_label_3;
                                      case 13:
                                        break block_label_2;
                                      case 14:
                                        break block_label_1;
                                      default:
                                        break block_label_15;
                                    }
                                  }
                                  frame.push(local0);
                                  frame.i32_const(0xf466c);
                                  frame.i32_store(2, 16);
                                  frame.i32_const(52);
                                  arg0 = frame.pop();
                                  break block_label_0;
                                }
                                frame.push(local0);
                                frame.i32_const(0xf4628);
                                frame.i32_store(2, 16);
                                frame.i32_const(68);
                                arg0 = frame.pop();
                                break block_label_0;
                              }
                              frame.push(local0);
                              frame.i32_const(0xf460c);
                              frame.i32_store(2, 16);
                              frame.i32_const(28);
                              arg0 = frame.pop();
                              break block_label_0;
                            }
                            frame.push(local0);
                            frame.i32_const(0xf45e6);
                            frame.i32_store(2, 16);
                            frame.i32_const(38);
                            arg0 = frame.pop();
                            break block_label_0;
                          }
                          frame.push(local0);
                          frame.i32_const(0xf45bd);
                          frame.i32_store(2, 16);
                          frame.i32_const(41);
                          arg0 = frame.pop();
                          break block_label_0;
                        }
                        frame.push(local0);
                        frame.i32_const(0xf4570);
                        frame.i32_store(2, 16);
                        frame.i32_const(77);
                        arg0 = frame.pop();
                        break block_label_0;
                      }
                      frame.push(local0);
                      frame.i32_const(0xf4551);
                      frame.i32_store(2, 16);
                      frame.i32_const(31);
                      arg0 = frame.pop();
                      break block_label_0;
                    }
                    frame.push(local0);
                    frame.i32_const(0xf4534);
                    frame.i32_store(2, 16);
                    frame.i32_const(29);
                    arg0 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(0xf4518);
                  frame.i32_store(2, 16);
                  frame.i32_const(28);
                  arg0 = frame.pop();
                  break block_label_0;
                }
                frame.push(local0);
                frame.i32_const(0xf44e9);
                frame.i32_store(2, 16);
                frame.i32_const(47);
                arg0 = frame.pop();
                break block_label_0;
              }
              frame.push(local0);
              frame.i32_const(0xf44b3);
              frame.i32_store(2, 16);
              frame.i32_const(54);
              arg0 = frame.pop();
              break block_label_0;
            }
            frame.push(local0);
            frame.i32_const(0xf448d);
            frame.i32_store(2, 16);
            frame.i32_const(38);
            arg0 = frame.pop();
            break block_label_0;
          }
          frame.push(local0);
          frame.i32_const(0xf4474);
          frame.i32_store(2, 16);
          frame.i32_const(25);
          arg0 = frame.pop();
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_const(0xf4459);
        frame.i32_store(2, 16);
        frame.i32_const(27);
        arg0 = frame.pop();
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(0xf4420);
      frame.i32_store(2, 16);
      frame.i32_const(57);
      arg0 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(6);
    frame.i32_store(2, 12);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 20);
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_store(2, 8);
    frame.push(arg1);
    frame.i32_load(2, 24);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i64_const(1);
    frame.i64_store(2, 28);
    frame.push(local0);
    frame.i32_const(0xf4418);
    frame.i32_store(2, 24);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_store(2, 40);
    frame.push(arg1);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  void _func090(i32 arg0) {
    final frame = Frame(this);
  }

  i32 _func091(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(3);
    frame.i32_shl();
    arg0 = frame.peek();
    frame.i32_const(0xf46e4);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_const(0xf46e8);
    frame.i32_add();
    frame.i32_load(2, 0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func092(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(0);
    return frame.pop();
  }

  void _func093(i32 arg0, i32 arg1) {
    final frame = Frame(this);
  }

  void _func094(i32 arg0) {
    final frame = Frame(this);
  }

  void _ZN3log17__private_api_log17h3cab72171f1c849dE(i32 arg0, i32 arg1, i32 arg2, i32 arg3, i32 arg4) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i64 local3 = 0;
    i64 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg3);
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0);
      frame.i32_load(2, 0xf515c);
      arg3 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf5158);
      local1 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf5324);
      local2 = frame.pop();
      frame.push(arg2);
      frame.i64_load(2, 0);
      local3 = frame.pop();
      frame.push(arg2);
      frame.i64_load(2, 8);
      local4 = frame.pop();
      frame.push(arg2);
      frame.i64_load(2, 16);
      local5 = frame.pop();
      frame.push(local0);
      frame.i32_const(72);
      frame.i32_add();
      frame.push(arg2);
      frame.i32_load(2, 24);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(60);
      frame.i32_add();
      frame.push(local5);
      frame.i64_store(2, 0);
      frame.push(local0);
      frame.i32_const(48);
      frame.i32_add();
      frame.push(local4);
      frame.i64_store(3, 0);
      frame.push(local0);
      frame.i32_const(36);
      frame.i32_add();
      frame.push(arg0);
      frame.i64_load(2, 16);
      frame.i64_store(2, 0);
      frame.push(local0);
      frame.i32_const(28);
      frame.i32_add();
      frame.push(arg0);
      frame.i64_load(2, 8);
      frame.i64_store(2, 0);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 68);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.push(local3);
      frame.i64_store(2, 12);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.push(arg0);
      frame.i64_load(2, 0);
      frame.i64_store(2, 20);
      frame.push(local1);
      frame.i32_const(0xf4714);
      frame.push(local2);
      frame.i32_const(2);
      frame.i32_eq();
      arg2 = frame.peek();
      frame.select();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg3);
      frame.i32_const(0xf46ac);
      frame.push(arg2);
      frame.select();
      frame.i32_load(2, 20);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType2) throw Trap('indirect call type mismatch');
        var t1 = frame.pop();
        var t0 = frame.pop();
        func(t0, t1);
      }
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _func096(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_load8_u(0, 0);
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              break block_label_2;
            case 1:
              break block_label_1;
            case 2:
              break block_label_0;
            default:
              break block_label_2;
          }
        }
        frame.push(arg1);
        frame.i32_load(2, 24);
        frame.i32_const(0xf4849);
        frame.i32_const(4);
        frame.push(arg1);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg1);
      frame.i32_load(2, 24);
      frame.i32_const(0xf4841);
      frame.i32_const(8);
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_load(2, 24);
    frame.i32_const(0xf4838);
    frame.i32_const(9);
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()];
      if (func == null) throw Trap('uninitialized element');
      if (func is! FunctionType0) throw Trap('indirect call type mismatch');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func097(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func089(t0, t1));
    }
    return frame.pop();
  }

  void _func098(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(0x1fffffff);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          local0 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          if (frame.pop() != 0) break block_label_2;
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg2);
                if (frame.pop() != 0) break block_label_5;
                frame.push(local0);
                if (frame.pop() != 0) break block_label_4;
                break block_label_1;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(0xf5160);
              frame.push(local0);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func019(t0, t1));
              }
              arg2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(arg2);
              frame.i32_const(-4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.push(arg2);
              frame.i32_const(0);
              frame.push(local0);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memset(t0, t1, t2));
              }
              frame.drop();
              break block_label_0;
            }
            frame.i32_const(0xf5160);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_0;
          }
          frame.push(local0);
          frame.i32_const(1);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
          }
          throw Trap('unreachable');
        }
        throw Trap('unreachable');
        throw Trap('unreachable');
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
  }

  void _func099(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(-1);
    frame.i32_add();
    local0 = frame.peek();
    frame.i32_store(2, 0);
    block_label_0:
    {
      frame.push(local0);
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0xf5160);
        frame.push(arg0);
        frame.i32_load(2, 8);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func018(t0, t1);
        }
      }
      frame.push(arg0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_const(-1);
      frame.i32_add();
      local0 = frame.peek();
      frame.i32_store(2, 4);
      frame.push(local0);
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func100(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i64 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 8);
        local1 = frame.peek();
        frame.i64_extend_i32_u();
        frame.i64_const(20);
        frame.i64_mul();
        local2 = frame.peek();
        frame.i64_const(32);
        frame.i64_shr_u();
        frame.i32_wrap_i64();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local2);
        frame.i32_wrap_i64();
        local3 = frame.peek();
        frame.i32_const(0);
        frame.i32_lt_s();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        frame.i32_load(2, 0);
        local4 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local3);
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(4);
            local5 = frame.pop();
            break block_label_2;
          }
          frame.i32_const(0xf5160);
          frame.push(local3);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func019(t0, t1));
          }
          local5 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(local5);
        frame.i32_store(2, 0);
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(local1);
          local6 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            frame.push(local3);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_add();
            local6 = frame.pop();
            frame.push(local4);
            frame.push(local3);
            frame.i32_add();
            local7 = frame.peek();
            frame.i32_load16_u(1, 0);
            local8 = frame.pop();
            frame.i32_const(0);
            local9 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local7);
                  frame.i32_const(4);
                  frame.i32_add();
                  frame.i32_load8_u(0, 0);
                  var t0 = frame.pop();
                  switch (t0) {
                    case 0:
                      break block_label_4;
                    case 1:
                      break block_label_6;
                    case 2:
                      break block_label_5;
                    default:
                      break block_label_4;
                  }
                }
                frame.push(local7);
                frame.i32_const(5);
                frame.i32_add();
                frame.i32_load16_u(0, 0);
                frame.push(local7);
                frame.i32_const(7);
                frame.i32_add();
                frame.i32_load8_u(0, 0);
                frame.i32_const(16);
                frame.i32_shl();
                frame.i32_or();
                local10 = frame.pop();
                frame.push(local7);
                frame.i32_const(12);
                frame.i32_add();
                frame.i32_load8_u(0, 0);
                local11 = frame.pop();
                frame.push(local7);
                frame.i32_const(8);
                frame.i32_add();
                frame.i32_load(0, 0);
                local12 = frame.pop();
                frame.i32_const(1);
                local9 = frame.pop();
                break block_label_4;
              }
              frame.push(local7);
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_load(2, 0);
              local9 = frame.pop();
              frame.push(local0);
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local7);
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_load(2, 0);
              local13 = frame.peek();
              frame.i32_const(0);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func059(t0, t1, t2);
              }
              frame.push(local0);
              frame.i32_load(2, 12);
              local11 = frame.pop();
              frame.push(local0);
              frame.i32_load(2, 8);
              local12 = frame.peek();
              frame.push(local9);
              frame.push(local13);
              frame.i32_const(3);
              frame.i32_shl();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memcpy(t0, t1, t2));
              }
              frame.drop();
              frame.push(local11);
              frame.i32_const(8);
              frame.i32_shr_u();
              local14 = frame.pop();
              frame.i32_const(2);
              local9 = frame.pop();
            }
            frame.push(arg1);
            frame.push(local8);
            frame.i32_store16(1, 0);
            frame.push(arg1);
            frame.i32_const(7);
            frame.i32_add();
            frame.push(local10);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store8(0, 0);
            frame.push(arg1);
            frame.i32_const(5);
            frame.i32_add();
            frame.push(local10);
            frame.i32_store16(0, 0);
            frame.push(arg1);
            frame.i32_const(16);
            frame.i32_add();
            frame.push(local13);
            frame.i32_store(1, 0);
            frame.push(arg1);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(local14);
            frame.i32_const(8);
            frame.i32_shl();
            frame.push(local11);
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_or();
            frame.i32_store(1, 0);
            frame.push(arg1);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local12);
            frame.i32_store(1, 0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local9);
            frame.i32_store8(0, 0);
            frame.push(local3);
            frame.i32_const(20);
            frame.i32_add();
            local3 = frame.pop();
            frame.push(local6);
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_store(2, 8);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
        return;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(local3);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
    }
    throw Trap('unreachable');
  }

  i32 _ZN9icu_locid10extensions7unicode8keywords8Keywords19for_each_subtag_str17he95246a3021aa400E(
      i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(2);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load(2, 0);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_0;
                case 1:
                  break block_label_4;
                case 2:
                  break block_label_3;
                default:
                  break block_label_0;
              }
            }
            frame.push(arg0);
            frame.i32_const(24);
            frame.i32_add();
            local2 = frame.pop();
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_add();
            local3 = frame.pop();
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg0);
          frame.i32_load(2, 4);
          local3 = frame.peek();
          frame.push(local1);
          frame.i32_const(20);
          frame.i32_mul();
          frame.i32_add();
          local2 = frame.pop();
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        local4 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local3);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func051(t0, t1);
          }
          frame.push(local0);
          frame.i32_load(2, 8);
          local5 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              frame.i32_load8_u(0, 8);
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_load(2, 12);
              local6 = frame.pop();
              frame.i32_const(4);
              frame.push(local5);
              frame.i32_load16_u(0, 0);
              frame.i32_clz();
              frame.i32_const(3);
              frame.i32_shr_u();
              frame.i32_sub();
              local7 = frame.pop();
              frame.push(local4);
              frame.i32_load(2, 0);
              local8 = frame.pop();
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local4);
                    frame.i32_load(2, 4);
                    arg0 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.i32_const(0);
                    local1 = frame.pop();

                    loop_label_8:
                    for (;;) {
                      frame.push(local8);
                      frame.push(local1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_load8_u(0, 0);
                      frame.i32_const(45);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_6;
                      frame.push(arg0);
                      frame.push(local1);
                      frame.i32_const(1);
                      frame.i32_add();
                      local1 = frame.peek();
                      frame.i32_ne();
                      if (frame.pop() != 0) continue loop_label_8;
                      break;
                    }
                  }
                  frame.i32_const(1);
                  local9 = frame.pop();
                  frame.push(local4);
                  frame.i32_const(1);
                  frame.i32_store8(0, 8);
                  frame.push(local8);
                  arg1 = frame.pop();
                  frame.push(arg0);
                  local1 = frame.pop();
                  break block_label_5;
                }
                frame.push(local4);
                frame.push(local1);
                frame.i32_const(-1);
                frame.i32_xor();
                frame.push(arg0);
                frame.i32_add();
                arg0 = frame.peek();
                frame.i32_store(2, 4);
                frame.push(local4);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_add();
                arg1 = frame.peek();
                frame.i32_store(2, 0);
                frame.i32_const(0);
                local9 = frame.pop();
              }
              frame.i32_const(-1);
              frame.push(local5);
              frame.push(local8);
              frame.push(local7);
              frame.push(local1);
              frame.push(local7);
              frame.push(local1);
              frame.i32_lt_u();
              frame.select();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memcmp(t0, t1, t2));
              }
              local8 = frame.peek();
              frame.push(local7);
              frame.push(local1);
              frame.i32_sub();
              frame.push(local8);
              frame.select();
              local1 = frame.peek();
              frame.i32_const(0);
              frame.i32_ne();
              frame.push(local1);
              frame.i32_const(0);
              frame.i32_lt_s();
              frame.select();
              local1 = frame.peek();
              if (frame.pop() != 0) break block_label_0;
              frame.i32_const(0xf4714);
              local7 = frame.pop();
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local6);
                    frame.i32_load8_u(0, 0);
                    local1 = frame.peek();
                    var t0 = frame.pop();
                    switch (t0) {
                      case 0:
                        break block_label_5;
                      case 1:
                        break block_label_7;
                      case 2:
                        break block_label_6;
                      default:
                        break block_label_5;
                    }
                  }
                  frame.i32_const(1);
                  local1 = frame.pop();
                  frame.push(local6);
                  frame.i32_const(1);
                  frame.i32_add();
                  local7 = frame.pop();
                  break block_label_5;
                }
                frame.push(local6);
                frame.i32_const(12);
                frame.i32_add();
                frame.i32_load(2, 0);
                local1 = frame.pop();
                frame.push(local6);
                frame.i32_const(4);
                frame.i32_add();
                frame.i32_load(2, 0);
                local7 = frame.pop();
              }
              frame.push(local3);
              frame.i32_const(20);
              frame.i32_add();
              local3 = frame.pop();
              frame.push(local7);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_shl();
              frame.i32_add();
              local10 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local7);
                frame.push(local10);
                frame.i32_eq();
                if (frame.pop() != 0) break block_label_3;
                frame.push(local9);
                frame.i32_const(255);
                frame.i32_and();
                if (frame.pop() != 0) break block_label_4;
                frame.i32_const(8);
                frame.push(local7);
                frame.i64_load(0, 0);
                frame.i64_clz();
                frame.i32_wrap_i64();
                frame.i32_const(3);
                frame.i32_shr_u();
                frame.i32_sub();
                local5 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(arg0);
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_8;
                      frame.i32_const(0);
                      local1 = frame.pop();

                      loop_label_9:
                      for (;;) {
                        frame.push(arg1);
                        frame.push(local1);
                        frame.i32_add();
                        local8 = frame.peek();
                        frame.i32_load8_u(0, 0);
                        frame.i32_const(45);
                        frame.i32_eq();
                        if (frame.pop() != 0) break block_label_7;
                        frame.push(arg0);
                        frame.push(local1);
                        frame.i32_const(1);
                        frame.i32_add();
                        local1 = frame.peek();
                        frame.i32_ne();
                        if (frame.pop() != 0) continue loop_label_9;
                        break;
                      }
                    }
                    frame.i32_const(1);
                    local9 = frame.pop();
                    frame.push(local4);
                    frame.i32_const(1);
                    frame.i32_store8(0, 8);
                    frame.push(arg1);
                    local6 = frame.pop();
                    frame.push(arg0);
                    local1 = frame.pop();
                    break block_label_6;
                  }
                  frame.push(local4);
                  frame.push(local1);
                  frame.i32_const(-1);
                  frame.i32_xor();
                  frame.push(arg0);
                  frame.i32_add();
                  arg0 = frame.peek();
                  frame.i32_store(2, 4);
                  frame.push(local4);
                  frame.push(local8);
                  frame.i32_const(1);
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_store(2, 0);
                  frame.i32_const(0);
                  local9 = frame.pop();
                }
                frame.push(local7);
                frame.push(arg1);
                frame.push(local5);
                frame.push(local1);
                frame.push(local5);
                frame.push(local1);
                frame.i32_lt_u();
                frame.select();
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_memcmp(t0, t1, t2));
                }
                local8 = frame.pop();
                frame.push(local6);
                arg1 = frame.pop();
                frame.push(local7);
                frame.i32_const(8);
                frame.i32_add();
                local7 = frame.pop();
                frame.i32_const(-1);
                frame.push(local8);
                frame.push(local5);
                frame.push(local1);
                frame.i32_sub();
                frame.push(local8);
                frame.select();
                local1 = frame.peek();
                frame.i32_const(0);
                frame.i32_ne();
                frame.push(local1);
                frame.i32_const(0);
                frame.i32_lt_s();
                frame.select();
                local1 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) continue loop_label_5;
                break block_label_0;
                break;
              }
            }
            frame.i32_const(1);
            local1 = frame.pop();
            break block_label_0;
          }
          frame.push(local3);
          frame.push(local2);
          frame.i32_ne();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      frame.i32_const(2);
      local1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local1);
    return frame.pop();
  }

  i32 _func102(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 24);
    local2 = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i32_const(0xf4714);
    frame.i32_store(2, 40);
    frame.push(local0);
    frame.i64_const(1);
    frame.i64_store(2, 28);
    frame.push(local0);
    frame.i32_const(0xf4724);
    frame.i32_store(2, 24);
    frame.i32_const(1);
    arg1 = frame.pop();
    block_label_0:
    {
      frame.push(local2);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
      }
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 0);
        frame.i32_const(8);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(11);
        frame.i32_store(2, 4);
        frame.push(local0);
        frame.push(arg0);
        frame.i32_store(2, 0);
        frame.i32_const(1);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i64_const(1);
        frame.i64_store(2, 28);
        frame.push(local0);
        frame.i32_const(0xf4778);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.push(local0);
        frame.i32_store(2, 40);
        frame.push(local2);
        frame.push(local1);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
        }
        if (frame.pop() != 0) break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(27);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(2);
        frame.i32_eq();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_add();
        frame.i64_load(2, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.push(arg0);
        frame.i64_load(2, 12);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(12);
        frame.i32_store(2, 20);
        frame.push(local0);
        frame.push(local0);
        frame.i32_store(2, 16);
        frame.i32_const(1);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i64_const(2);
        frame.i64_store(2, 28);
        frame.push(local0);
        frame.i32_const(0xf4788);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_store(2, 40);
        frame.push(local2);
        frame.push(local1);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
        }
        if (frame.pop() != 0) break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 28);
        arg1 = frame.peek();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        arg1 = frame.pop();
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_store(2, 20);
      frame.push(local0);
      frame.i32_const(6);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i64_const(1);
      frame.i64_store(2, 28);
      frame.push(local0);
      frame.i32_const(0xf4778);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_store(2, 40);
      frame.push(local2);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func103(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(arg0);
                          frame.i32_load8_u(0, 0);
                          var t0 = frame.pop();
                          switch (t0) {
                            case 0:
                              break block_label_10;
                            case 1:
                              break block_label_9;
                            case 2:
                              break block_label_8;
                            case 3:
                              break block_label_7;
                            case 4:
                              break block_label_6;
                            case 5:
                              break block_label_5;
                            case 6:
                              break block_label_4;
                            case 7:
                              break block_label_3;
                            case 8:
                              break block_label_2;
                            case 9:
                              break block_label_1;
                            default:
                              break block_label_10;
                          }
                        }
                        frame.push(arg1);
                        frame.i32_const(28);
                        frame.i32_add();
                        frame.i32_load(2, 0);
                        arg0 = frame.pop();
                        frame.push(arg1);
                        frame.i32_load(2, 24);
                        arg1 = frame.pop();
                        frame.push(local0);
                        frame.i32_const(0);
                        frame.i32_store(2, 44);
                        frame.push(local0);
                        frame.i32_const(0xf4714);
                        frame.i32_store(2, 40);
                        frame.push(local0);
                        frame.i64_const(1);
                        frame.i64_store(2, 28);
                        frame.push(local0);
                        frame.i32_const(0xf49fc);
                        frame.i32_store(2, 24);
                        frame.push(arg1);
                        frame.push(arg0);
                        frame.push(local0);
                        frame.i32_const(24);
                        frame.i32_add();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
                        }
                        arg1 = frame.pop();
                        break block_label_0;
                      }
                      frame.push(arg1);
                      frame.i32_const(28);
                      frame.i32_add();
                      frame.i32_load(2, 0);
                      arg0 = frame.pop();
                      frame.push(arg1);
                      frame.i32_load(2, 24);
                      arg1 = frame.pop();
                      frame.push(local0);
                      frame.i32_const(0);
                      frame.i32_store(2, 44);
                      frame.push(local0);
                      frame.i32_const(0xf4714);
                      frame.i32_store(2, 40);
                      frame.push(local0);
                      frame.i64_const(1);
                      frame.i64_store(2, 28);
                      frame.push(local0);
                      frame.i32_const(0xf49e0);
                      frame.i32_store(2, 24);
                      frame.push(arg1);
                      frame.push(arg0);
                      frame.push(local0);
                      frame.i32_const(24);
                      frame.i32_add();
                      {
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
                      }
                      arg1 = frame.pop();
                      break block_label_0;
                    }
                    frame.push(arg1);
                    frame.i32_const(28);
                    frame.i32_add();
                    frame.i32_load(2, 0);
                    arg0 = frame.pop();
                    frame.push(arg1);
                    frame.i32_load(2, 24);
                    arg1 = frame.pop();
                    frame.push(local0);
                    frame.i32_const(0);
                    frame.i32_store(2, 44);
                    frame.push(local0);
                    frame.i32_const(0xf4714);
                    frame.i32_store(2, 40);
                    frame.push(local0);
                    frame.i64_const(1);
                    frame.i64_store(2, 28);
                    frame.push(local0);
                    frame.i32_const(0xf49c0);
                    frame.i32_store(2, 24);
                    frame.push(arg1);
                    frame.push(arg0);
                    frame.push(local0);
                    frame.i32_const(24);
                    frame.i32_add();
                    {
                      var t2 = frame.pop();
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
                    }
                    arg1 = frame.pop();
                    break block_label_0;
                  }
                  frame.push(arg1);
                  frame.i32_const(28);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg0 = frame.pop();
                  frame.push(arg1);
                  frame.i32_load(2, 24);
                  arg1 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(0);
                  frame.i32_store(2, 44);
                  frame.push(local0);
                  frame.i32_const(0xf4714);
                  frame.i32_store(2, 40);
                  frame.push(local0);
                  frame.i64_const(1);
                  frame.i64_store(2, 28);
                  frame.push(local0);
                  frame.i32_const(0xf49a0);
                  frame.i32_store(2, 24);
                  frame.push(arg1);
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_const(24);
                  frame.i32_add();
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
                  }
                  arg1 = frame.pop();
                  break block_label_0;
                }
                frame.push(arg1);
                frame.i32_const(28);
                frame.i32_add();
                frame.i32_load(2, 0);
                arg0 = frame.pop();
                frame.push(arg1);
                frame.i32_load(2, 24);
                arg1 = frame.pop();
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 44);
                frame.push(local0);
                frame.i32_const(0xf4714);
                frame.i32_store(2, 40);
                frame.push(local0);
                frame.i64_const(1);
                frame.i64_store(2, 28);
                frame.push(local0);
                frame.i32_const(0xf4978);
                frame.i32_store(2, 24);
                frame.push(arg1);
                frame.push(arg0);
                frame.push(local0);
                frame.i32_const(24);
                frame.i32_add();
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
                }
                arg1 = frame.pop();
                break block_label_0;
              }
              frame.push(local0);
              frame.push(arg0);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_store(2, 12);
              frame.push(local0);
              frame.i32_const(13);
              frame.i32_store(2, 20);
              frame.push(arg1);
              frame.i32_const(28);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg0 = frame.pop();
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_store(2, 16);
              frame.push(arg1);
              frame.i32_load(2, 24);
              arg1 = frame.pop();
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_store(2, 44);
              frame.push(local0);
              frame.i64_const(2);
              frame.i64_store(2, 28);
              frame.push(local0);
              frame.i32_const(0xf494c);
              frame.i32_store(2, 24);
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_store(2, 40);
              frame.push(arg1);
              frame.push(arg0);
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
              }
              arg1 = frame.pop();
              break block_label_0;
            }
            frame.push(arg1);
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg0 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 24);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 44);
            frame.push(local0);
            frame.i32_const(0xf4714);
            frame.i32_store(2, 40);
            frame.push(local0);
            frame.i64_const(1);
            frame.i64_store(2, 28);
            frame.push(local0);
            frame.i32_const(0xf48fc);
            frame.i32_store(2, 24);
            frame.push(arg1);
            frame.push(arg0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
            }
            arg1 = frame.pop();
            break block_label_0;
          }
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 24);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 44);
          frame.push(local0);
          frame.i32_const(0xf4714);
          frame.i32_store(2, 40);
          frame.push(local0);
          frame.i64_const(1);
          frame.i64_store(2, 28);
          frame.push(local0);
          frame.i32_const(0xf48e4);
          frame.i32_store(2, 24);
          frame.push(arg1);
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
          }
          arg1 = frame.pop();
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 24);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i32_const(0xf4714);
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.i64_const(1);
        frame.i64_store(2, 28);
        frame.push(local0);
        frame.i32_const(0xf48cc);
        frame.i32_store(2, 24);
        frame.push(arg1);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
        }
        arg1 = frame.pop();
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg0);
      frame.i32_const(1);
      frame.i32_add();
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.i32_const(14);
      frame.i32_store(2, 20);
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      arg0 = frame.pop();
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 16);
      frame.push(arg1);
      frame.i32_load(2, 24);
      arg1 = frame.pop();
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i64_const(2);
      frame.i64_store(2, 28);
      frame.push(local0);
      frame.i32_const(0xf48b4);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(arg1);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func104(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 24);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(14);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.i32_const(-15);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()];
      if (func == null) throw Trap('uninitialized element');
      if (func is! FunctionType0) throw Trap('indirect call type mismatch');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  void _ZN12icu_provider5error9DataError8with_req17hc2025be0fd8ef6fdE(
      i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg3);
    frame.i32_store(2, 12);
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_load8_u(0, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0);
      frame.i32_load(2, 0xf5328);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(15);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_const(4);
      frame.i64_store(2, 20);
      frame.push(local0);
      frame.i32_const(0xf47a4);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.push(arg2);
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf47d8);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i64_load(2, 0);
    frame.i64_store(2, 12);
    frame.push(arg0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i64_load(2, 28);
    frame.i64_store(2, 28);
    frame.push(arg0);
    frame.i32_const(20);
    frame.i32_add();
    frame.push(arg2);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func106(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i64 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    frame.i32_const(1);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store8(0, 23);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 28);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(23);
    frame.i32_add();
    frame.i32_store(2, 24);
    block_label_0:
    {
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_ZN9icu_locid6langid18LanguageIdentifier19for_each_subtag_str17h3d2e1910f53abcf4E(t0, t1));
      }
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 28);
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        local1 = frame.pop();
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 24);
      frame.i32_const(0xf4820);
      frame.i32_const(3);
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0);
      local1 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load(2, 28);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_0;
              case 1:
                break block_label_3;
              case 2:
                break block_label_2;
              default:
                break block_label_0;
            }
          }
          frame.push(arg0);
          frame.i32_const(52);
          frame.i32_add();
          local2 = frame.pop();
          frame.push(arg0);
          frame.i32_const(32);
          frame.i32_add();
          local3 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(0);
        local1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_load(2, 0);
        local4 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_load(2, 0);
        local3 = frame.peek();
        frame.push(local4);
        frame.i32_const(20);
        frame.i32_mul();
        frame.i32_add();
        local2 = frame.pop();
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      local5 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local3);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func051(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_load(2, 12);
        local4 = frame.pop();
        frame.push(arg0);
        frame.i32_load16_u(0, 0);
        local6 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local5);
              frame.i32_const(1);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.i32_load(2, 24);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 28);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) break block_label_3;
            }
            frame.push(arg1);
            frame.i32_load(2, 24);
            frame.push(arg0);
            frame.i32_const(4);
            frame.push(local6);
            frame.i32_clz();
            frame.i32_const(3);
            frame.i32_shr_u();
            frame.i32_sub();
            frame.push(arg1);
            frame.i32_load(2, 28);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType0) throw Trap('indirect call type mismatch');
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1, t2));
            }
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0xf4714);
            arg0 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local4);
                  frame.i32_load8_u(0, 0);
                  local5 = frame.peek();
                  var t0 = frame.pop();
                  switch (t0) {
                    case 0:
                      break block_label_4;
                    case 1:
                      break block_label_6;
                    case 2:
                      break block_label_5;
                    default:
                      break block_label_4;
                  }
                }
                frame.i32_const(1);
                local5 = frame.pop();
                frame.push(local4);
                frame.i32_const(1);
                frame.i32_add();
                arg0 = frame.pop();
                break block_label_4;
              }
              frame.push(local4);
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_load(2, 0);
              local5 = frame.pop();
              frame.push(local4);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg0 = frame.pop();
            }
            frame.push(local3);
            frame.i32_const(20);
            frame.i32_add();
            local3 = frame.pop();
            frame.push(local5);
            frame.i32_const(3);
            frame.i32_shl();
            local4 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_2;
              frame.push(arg0);
              frame.i64_load(0, 0);
              local7 = frame.pop();
              frame.push(arg1);
              frame.i32_load(2, 24);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 28);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) break block_label_3;
              frame.push(local4);
              frame.i32_const(-8);
              frame.i32_add();
              local4 = frame.pop();
              frame.push(arg1);
              frame.i32_load(2, 24);
              frame.push(arg0);
              frame.i32_const(8);
              frame.push(local7);
              frame.i64_clz();
              frame.i32_wrap_i64();
              frame.i32_const(3);
              frame.i32_shr_u();
              frame.i32_sub();
              frame.push(arg1);
              frame.i32_load(2, 28);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              local5 = frame.pop();
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              arg0 = frame.pop();
              frame.push(local5);
              frame.i32_eqz();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
          }
          frame.i32_const(1);
          local1 = frame.pop();
          break block_label_0;
        }
        frame.i32_const(1);
        local5 = frame.pop();
        frame.push(local3);
        frame.push(local2);
        frame.i32_ne();
        if (frame.pop() != 0) continue loop_label_1;
        break;
      }
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local1);
    return frame.pop();
  }

  void _func107(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i64 local19 = 0;
    i64 local20 = 0;
    i64 local21 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(25);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load16_u(0, 23);
    local2 = frame.pop();
    frame.push(arg1);
    frame.i32_const(18);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    local3 = frame.pop();
    frame.push(arg1);
    frame.i32_load16_u(1, 16);
    local4 = frame.pop();
    frame.push(arg1);
    frame.i32_load8_u(0, 23);
    local5 = frame.pop();
    frame.push(arg1);
    frame.i32_load(0, 19);
    local6 = frame.pop();
    frame.push(arg1);
    frame.i32_load8_u(0, 19);
    local7 = frame.pop();
    frame.i32_const(0);
    local8 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 0);
          local9 = frame.peek();
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              break block_label_0;
            case 1:
              break block_label_2;
            case 2:
              break block_label_1;
            default:
              break block_label_0;
          }
        }
        frame.push(arg1);
        frame.i32_load16_u(0, 1);
        frame.push(arg1);
        frame.i32_const(3);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        local10 = frame.pop();
        frame.push(arg1);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        local11 = frame.pop();
        frame.push(arg1);
        frame.i32_const(4);
        frame.i32_add();
        frame.i32_load(2, 0);
        local12 = frame.pop();
        frame.i32_const(1);
        local8 = frame.pop();
        frame.i32_const(0);
        local9 = frame.pop();
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_add();
      frame.i32_load(2, 0);
      local10 = frame.pop();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_load(2, 0);
      local13 = frame.peek();
      frame.i32_const(0);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func098(t0, t1, t2);
      }
      frame.push(local0);
      frame.i32_load(2, 12);
      local11 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 8);
      local12 = frame.peek();
      frame.push(local10);
      frame.push(local13);
      frame.i32_const(3);
      frame.i32_shl();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_memcpy(t0, t1, t2));
      }
      frame.drop();
      frame.push(local11);
      frame.i32_const(-256);
      frame.i32_and();
      local9 = frame.pop();
      frame.i32_const(2);
      local8 = frame.pop();
    }
    frame.push(local2);
    frame.push(local1);
    frame.i32_or();
    local1 = frame.pop();
    frame.push(local4);
    frame.push(local3);
    frame.i32_or();
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 28);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_3;
              case 1:
                break block_label_2;
              case 2:
                break block_label_1;
              default:
                break block_label_3;
            }
          }
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 40);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_load16_u(1, 0);
        local14 = frame.pop();
        frame.i32_const(0);
        local15 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(36);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              local16 = frame.peek();
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_2;
                case 1:
                  break block_label_4;
                case 2:
                  break block_label_3;
                default:
                  break block_label_2;
              }
            }
            frame.push(arg1);
            frame.i32_load16_u(0, 37);
            frame.push(arg1);
            frame.i32_const(39);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            frame.i32_const(16);
            frame.i32_shl();
            frame.i32_or();
            local3 = frame.pop();
            frame.push(arg1);
            frame.i32_load8_u(0, 44);
            local17 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 40);
            local18 = frame.pop();
            frame.i32_const(0);
            local16 = frame.pop();
            frame.i32_const(1);
            local15 = frame.pop();
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(40);
          frame.i32_add();
          frame.i32_load(2, 0);
          local3 = frame.pop();
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(48);
          frame.i32_add();
          frame.i32_load(2, 0);
          local4 = frame.peek();
          frame.i32_const(0);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func059(t0, t1, t2);
          }
          frame.push(local0);
          frame.i32_load(2, 4);
          local17 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 0);
          local18 = frame.peek();
          frame.push(local3);
          frame.push(local4);
          frame.i32_const(3);
          frame.i32_shl();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memcpy(t0, t1, t2));
          }
          frame.drop();
          frame.push(local17);
          frame.i32_const(-256);
          frame.i32_and();
          local16 = frame.pop();
          frame.i32_const(2);
          local15 = frame.pop();
        }
        frame.push(local0);
        frame.push(local3);
        frame.i32_store16(0, 49);
        frame.push(local0);
        frame.i32_const(51);
        frame.i32_add();
        frame.push(local3);
        frame.i32_const(16);
        frame.i32_shr_u();
        frame.i32_store8(0, 0);
        frame.push(local0);
        frame.push(local4);
        frame.i32_store(2, 60);
        frame.push(local0);
        frame.push(local18);
        frame.i32_store(2, 52);
        frame.push(local0);
        frame.push(local15);
        frame.i32_store8(0, 48);
        frame.push(local0);
        frame.push(local14);
        frame.i32_store16(1, 44);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.push(local16);
        frame.push(local17);
        frame.i32_const(255);
        frame.i32_and();
        frame.i32_or();
        frame.i32_store(2, 56);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(4);
      frame.i32_or();
      frame.push(arg1);
      frame.i32_const(32);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func100(t0, t1);
      }
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_store(2, 40);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(40);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(3, 0);
    local19 = frame.peek();
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(40);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(3, 0);
    local20 = frame.peek();
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(local0);
    frame.i64_load(3, 40);
    local21 = frame.peek();
    frame.i64_store(3, 16);
    frame.push(arg0);
    frame.i32_const(25);
    frame.i32_add();
    frame.i32_const(0);
    frame.push(local1);
    frame.i32_const(0xffff00);
    frame.i32_and();
    frame.push(local5);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(128);
    frame.i32_eq();
    arg1 = frame.peek();
    frame.select();
    local3 = frame.peek();
    frame.i32_const(16);
    frame.i32_shr_u();
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(18);
    frame.i32_add();
    frame.push(local2);
    frame.i32_const(16);
    frame.i32_shr_u();
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.push(local2);
    frame.i32_store16(1, 16);
    frame.push(arg0);
    frame.i32_const(3);
    frame.i32_add();
    frame.push(local10);
    frame.i32_const(16);
    frame.i32_shr_u();
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.push(local10);
    frame.i32_store16(0, 1);
    frame.push(arg0);
    frame.i32_const(128);
    frame.push(local6);
    frame.push(local7);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(128);
    frame.i32_eq();
    frame.select();
    frame.i32_store(0, 19);
    frame.push(arg0);
    frame.push(local13);
    frame.i32_store(2, 12);
    frame.push(arg0);
    frame.push(local9);
    frame.push(local11);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_or();
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.push(local12);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local8);
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.push(local21);
    frame.i64_store(2, 28);
    frame.push(arg0);
    frame.i32_const(36);
    frame.i32_add();
    frame.push(local20);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(44);
    frame.i32_add();
    frame.push(local19);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.push(local3);
    frame.i32_const(-128);
    frame.push(local1);
    frame.push(arg1);
    frame.select();
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_or();
    frame.i32_store16(0, 23);
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _ZN12icu_provider7request10DataLocale10strict_cmp17hcf8ac8825f9800a4E(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    local1 = frame.pop();
    frame.i32_const(4);
    frame.push(arg0);
    frame.i32_load16_u(1, 16);
    frame.push(arg0);
    frame.i32_const(18);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.i32_clz();
    frame.i32_const(3);
    frame.i32_shr_u();
    frame.i32_sub();
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(1);
        local3 = frame.pop();
        frame.i32_const(0);
        arg2 = frame.pop();
        frame.push(arg1);
        local4 = frame.pop();
        frame.i32_const(0);
        local5 = frame.pop();
        frame.i32_const(0);
        local6 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(0);
      local6 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(arg1);
          frame.push(local6);
          frame.i32_add();
          local4 = frame.peek();
          frame.i32_load8_u(0, 0);
          frame.i32_const(45);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
          frame.i32_const(1);
          local3 = frame.pop();
          frame.push(arg2);
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_add();
          local6 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
        frame.i32_const(0);
        local5 = frame.pop();
        frame.push(arg1);
        local4 = frame.pop();
        frame.push(arg2);
        local6 = frame.pop();
        break block_label_0;
      }
      frame.push(local6);
      frame.i32_const(-1);
      frame.i32_xor();
      frame.push(arg2);
      frame.i32_add();
      arg2 = frame.pop();
      frame.i32_const(1);
      local5 = frame.pop();
      frame.push(local4);
      frame.i32_const(1);
      frame.i32_add();
      local4 = frame.pop();
      frame.i32_const(0);
      local3 = frame.pop();
    }
    block_label_0:
    {
      frame.i32_const(-1);
      frame.push(local1);
      frame.push(arg1);
      frame.push(local2);
      frame.push(local6);
      frame.push(local2);
      frame.push(local6);
      frame.i32_lt_u();
      frame.select();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_memcmp(t0, t1, t2));
      }
      arg1 = frame.peek();
      frame.push(local2);
      frame.push(local6);
      frame.i32_sub();
      frame.push(arg1);
      frame.select();
      local6 = frame.peek();
      frame.i32_const(0);
      frame.i32_ne();
      frame.push(local6);
      frame.i32_const(0);
      frame.i32_lt_s();
      frame.select();
      local6 = frame.peek();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load8_u(0, 19);
          frame.i32_const(128);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local4);
          local2 = frame.pop();
          frame.push(local3);
          arg1 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(local5);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.i32_const(4);
        frame.push(arg0);
        frame.i32_const(19);
        frame.i32_add();
        local5 = frame.peek();
        frame.i32_load(0, 0);
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        local1 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            local3 = frame.pop();
            frame.i32_const(0);
            arg2 = frame.pop();
            frame.push(local4);
            local2 = frame.pop();
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.i32_const(0);
            local6 = frame.pop();
            break block_label_2;
          }
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local4);
              frame.push(local6);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_load8_u(0, 0);
              frame.i32_const(45);
              frame.i32_eq();
              if (frame.pop() != 0) break block_label_3;
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.push(arg2);
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.push(local4);
            local2 = frame.pop();
            frame.push(arg2);
            local6 = frame.pop();
            break block_label_2;
          }
          frame.push(local6);
          frame.i32_const(-1);
          frame.i32_xor();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          local2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.i32_const(-1);
        frame.push(local5);
        frame.push(local4);
        frame.push(local1);
        frame.push(local6);
        frame.push(local1);
        frame.push(local6);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcmp(t0, t1, t2));
        }
        local4 = frame.peek();
        frame.push(local1);
        frame.push(local6);
        frame.i32_sub();
        frame.push(local4);
        frame.select();
        local6 = frame.peek();
        frame.i32_const(0);
        frame.i32_ne();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.peek();
        if (frame.pop() != 0) break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load8_u(0, 23);
          frame.i32_const(128);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local2);
          local7 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(arg1);
        if (frame.pop() != 0) break block_label_0;
        frame.i32_const(4);
        frame.push(arg0);
        frame.i32_const(23);
        frame.i32_add();
        local1 = frame.peek();
        frame.i32_load16_u(0, 0);
        frame.push(local1);
        frame.i32_const(2);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        local4 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            local3 = frame.pop();
            frame.i32_const(0);
            arg2 = frame.pop();
            frame.push(local2);
            local7 = frame.pop();
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.i32_const(0);
            local6 = frame.pop();
            break block_label_2;
          }
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local2);
              frame.push(local6);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_load8_u(0, 0);
              frame.i32_const(45);
              frame.i32_eq();
              if (frame.pop() != 0) break block_label_3;
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.push(arg2);
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.push(local2);
            local7 = frame.pop();
            frame.push(arg2);
            local6 = frame.pop();
            break block_label_2;
          }
          frame.push(local6);
          frame.i32_const(-1);
          frame.i32_xor();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          local7 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.i32_const(-1);
        frame.push(local1);
        frame.push(local2);
        frame.push(local4);
        frame.push(local6);
        frame.push(local4);
        frame.push(local6);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcmp(t0, t1, t2));
        }
        local2 = frame.peek();
        frame.push(local4);
        frame.push(local6);
        frame.i32_sub();
        frame.push(local2);
        frame.select();
        local6 = frame.peek();
        frame.i32_const(0);
        frame.i32_ne();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.peek();
        if (frame.pop() != 0) break block_label_0;
      }
      frame.i32_const(0xf4388);
      local1 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 0);
            local6 = frame.peek();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_1;
              case 1:
                break block_label_3;
              case 2:
                break block_label_2;
              default:
                break block_label_1;
            }
          }
          frame.i32_const(1);
          local6 = frame.pop();
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_add();
          local1 = frame.pop();
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local6 = frame.pop();
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i32_load(2, 0);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.push(local6);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_add();
      local8 = frame.pop();
      frame.push(arg2);
      local2 = frame.pop();
      frame.push(local7);
      local9 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(local9);
          local4 = frame.pop();
          frame.push(local1);
          local5 = frame.peek();
          frame.push(local8);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_1;
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(1);
            local6 = frame.pop();
            break block_label_0;
          }
          frame.i32_const(8);
          frame.push(local5);
          frame.i64_load(0, 0);
          frame.i64_clz();
          frame.i32_wrap_i64();
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_sub();
          local10 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local2);
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0);
              local2 = frame.pop();
              frame.i32_const(1);
              local3 = frame.pop();
              frame.push(local4);
              local9 = frame.pop();
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.i32_const(0);
              local6 = frame.pop();
              break block_label_3;
            }
            frame.i32_const(0);
            local6 = frame.pop();
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local4);
                frame.push(local6);
                frame.i32_add();
                local1 = frame.peek();
                frame.i32_load8_u(0, 0);
                frame.i32_const(45);
                frame.i32_eq();
                if (frame.pop() != 0) break block_label_4;
                frame.i32_const(1);
                arg1 = frame.pop();
                frame.push(local2);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_ne();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
              frame.i32_const(1);
              local3 = frame.pop();
              frame.push(local4);
              local9 = frame.pop();
              frame.push(local2);
              local6 = frame.pop();
              break block_label_3;
            }
            frame.i32_const(0);
            arg1 = frame.pop();
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_xor();
            frame.push(local2);
            frame.i32_add();
            arg2 = frame.peek();
            local2 = frame.pop();
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local7 = frame.peek();
            local9 = frame.pop();
          }
          frame.push(local5);
          frame.i32_const(8);
          frame.i32_add();
          local1 = frame.pop();
          frame.i32_const(-1);
          frame.push(local5);
          frame.push(local4);
          frame.push(local10);
          frame.push(local6);
          frame.push(local10);
          frame.push(local6);
          frame.i32_lt_u();
          frame.select();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memcmp(t0, t1, t2));
          }
          local4 = frame.peek();
          frame.push(local10);
          frame.push(local6);
          frame.i32_sub();
          frame.push(local4);
          frame.select();
          local6 = frame.peek();
          frame.i32_const(0);
          frame.i32_ne();
          frame.push(local6);
          frame.i32_const(0);
          frame.i32_lt_s();
          frame.select();
          local6 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) continue loop_label_2;
          break block_label_0;
          break;
        }
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 28);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(local3);
        frame.i32_const(255);
        frame.i32_and();
        if (frame.pop() != 0) break block_label_0;
        frame.i32_const(0);
        local6 = frame.pop();
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.i32_const(28);
          frame.i32_add();
          local4 = frame.pop();
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local7);
                frame.push(local6);
                frame.i32_add();
                arg1 = frame.peek();
                frame.i32_load8_u(0, 0);
                frame.i32_const(45);
                frame.i32_eq();
                if (frame.pop() != 0) break block_label_4;
                frame.i32_const(1);
                arg1 = frame.pop();
                frame.push(arg2);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_ne();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
              frame.push(local7);
              local2 = frame.pop();
              frame.push(arg2);
              local6 = frame.pop();
              break block_label_3;
            }
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_xor();
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.pop();
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            local2 = frame.pop();
            frame.i32_const(0);
            arg1 = frame.pop();
          }
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(1);
          local6 = frame.pop();
          frame.push(local7);
          frame.i32_load8_u(0, 0);
          frame.i32_const(117);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.push(arg1);
          frame.i32_store8(0, 8);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_store(2, 4);
          frame.push(local0);
          frame.push(local2);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i32_store(2, 12);
          frame.push(local4);
          frame.push(local0);
          frame.i32_const(12);
          frame.i32_add();
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(
                _ZN9icu_locid10extensions7unicode8keywords8Keywords19for_each_subtag_str17he95246a3021aa400E(
                    t0, t1));
          }
          local6 = frame.peek();
          frame.i32_const(255);
          frame.i32_and();
          frame.i32_const(2);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_0;
          frame.push(local0);
          frame.i32_load8_u(0, 8);
          local3 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 4);
          arg2 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 0);
          local7 = frame.pop();
          break block_label_1;
        }
        frame.i32_const(1);
        frame.i32_const(-1);
        frame.i32_const(0);
        frame.push(local7);
        frame.i32_const(0xf4823);
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_ne();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcmp(t0, t1, t2));
        }
        arg2 = frame.peek();
        frame.push(local6);
        frame.i32_const(-1);
        frame.i32_add();
        frame.push(arg2);
        frame.select();
        local6 = frame.peek();
        frame.select();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.pop();
        break block_label_0;
      }
      frame.i32_const(0);
      local6 = frame.pop();
      block_label_1:
      {
        frame.push(local3);
        frame.i32_const(255);
        frame.i32_and();
        if (frame.pop() != 0) break block_label_1;
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0);
          local6 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local7);
            frame.push(local6);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            frame.i32_const(45);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg2);
            frame.push(local6);
            frame.i32_const(1);
            frame.i32_add();
            local6 = frame.peek();
            frame.i32_ne();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.push(local7);
        local6 = frame.pop();
      }
      frame.i32_const(-1);
      frame.i32_const(0);
      frame.push(local6);
      frame.select();
      local6 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local6);
    return frame.pop();
  }

  void _func109(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(96);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store8(0, 15);
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    frame.i32_const(20);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(43);
    frame.i32_add();
    frame.i32_const(2);
    frame.i32_store8(0, 0);
    frame.push(local0);
    frame.i32_const(0xf4824);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_store8(0, 16);
    frame.i32_const(0);
    frame.i32_load(2, 0xf5328);
    arg1 = frame.pop();
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(15);
    frame.i32_add();
    frame.i32_store(2, 52);
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(92);
      frame.i32_add();
      frame.i32_const(17);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_const(2);
      frame.i64_store(2, 60);
      frame.push(local0);
      frame.i32_const(0xf47f4);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 84);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      frame.i32_store(2, 72);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_store(2, 88);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 80);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4804);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_const(36);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_memcpy(t0, t1, t2));
    }
    frame.drop();
    frame.push(local0);
    frame.i32_const(96);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func110(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 12);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 24);
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 40);
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(48);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(44);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func111(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 0);
    local0 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local1 = frame.peek();
    frame.i32_add();
    local2 = frame.pop();
    frame.i32_const(0);
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(-1);
    local5 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              block_label_5:
              {
                frame.push(local0);
                frame.push(local1);
                frame.i32_ne();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(4);
                local3 = frame.pop();
                break block_label_3;
              }
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.i32_load8_s(0, 0);
              local7 = frame.peek();
              frame.i32_const(127);
              frame.i32_and();
              local8 = frame.peek();
              frame.push(local3);
              frame.i32_shl();
              frame.push(local4);
              frame.i32_or();
              local4 = frame.pop();
              block_label_5:
              {
                frame.push(local7);
                frame.i32_const(0);
                frame.i32_lt_s();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(5);
                local3 = frame.pop();
                frame.push(local5);
                frame.push(local8);
                frame.i32_lt_u();
                if (frame.pop() != 0) break block_label_3;
                frame.push(local2);
                frame.push(local4);
                frame.i32_ge_u();
                if (frame.pop() != 0) break block_label_2;
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_store8(0, 1);
                break block_label_1;
              }
              frame.push(local2);
              frame.i32_const(-1);
              frame.i32_add();
              local2 = frame.pop();
              frame.push(local5);
              frame.i32_const(7);
              frame.i32_shr_u();
              local5 = frame.pop();
              frame.push(local6);
              local0 = frame.pop();
              frame.push(local3);
              frame.i32_const(7);
              frame.i32_add();
              local3 = frame.peek();
              frame.i32_const(35);
              frame.i32_ne();
              if (frame.pop() != 0) continue loop_label_4;
              break;
            }
            frame.i32_const(5);
            local3 = frame.pop();
          }
          frame.push(arg0);
          frame.push(local3);
          frame.i32_store8(0, 1);
          break block_label_1;
        }
        frame.i32_const(1);
        local3 = frame.pop();
        frame.push(arg1);
        frame.push(local0);
        frame.push(local4);
        frame.i32_add();
        frame.i32_const(1);
        frame.i32_add();
        frame.i32_store(2, 0);
        block_label_2:
        {
          frame.push(local4);
          frame.i32_const(3);
          frame.i32_and();
          if (frame.pop() != 0) break block_label_2;
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_const(0);
          frame.i32_store(2, 0);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local4);
          frame.i32_const(2);
          frame.i32_shr_u();
          frame.i32_store(2, 0);
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          frame.i32_store(2, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(13);
        frame.i32_store8(0, 1);
        break block_label_0;
      }
      frame.i32_const(1);
      local3 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local3);
    frame.i32_store8(0, 0);
  }

  void
      _ZN17icu_provider_blob18blob_data_provider16BlobDataProvider24try_new_from_static_blob17h676caa901430a6bbE(
          i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(192);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 88);
    frame.push(local0);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    frame.i32_store(2, 92);
    frame.push(local0);
    frame.i32_const(144);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(88);
    frame.i32_add();
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func113(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load8_u(0, 144);
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(4);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(46);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(102);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(144);
        frame.i32_add();
        frame.i32_const(4);
        frame.i32_or();
        frame.i32_const(40);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.i32_const(40);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.i32_const(40);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.i32_const(40);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.drop();
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(44);
        frame.i32_add();
        frame.i32_const(0);
        frame.i32_store(2, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(4);
      frame.i32_add();
      frame.push(local0);
      frame.i32_load8_u(0, 145);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func109(t0, t1);
      }
      frame.i32_const(1);
      arg1 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(192);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func113(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.pop();
    frame.i32_const(-1);
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(local1);
              frame.push(local2);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(4);
              local1 = frame.pop();
              break block_label_1;
            }
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local6 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.i32_load8_s(0, 0);
            local1 = frame.peek();
            frame.i32_const(127);
            frame.i32_and();
            local7 = frame.peek();
            frame.push(local4);
            frame.i32_shl();
            frame.push(local5);
            frame.i32_or();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local1);
              frame.i32_const(0);
              frame.i32_lt_s();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(5);
              local1 = frame.pop();
              frame.push(local3);
              frame.push(local7);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(13);
              local1 = frame.pop();
              frame.push(local5);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_2;
              break block_label_1;
            }
            frame.push(local3);
            frame.i32_const(7);
            frame.i32_shr_u();
            local3 = frame.pop();
            frame.push(local6);
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(7);
            frame.i32_add();
            local4 = frame.peek();
            frame.i32_const(35);
            frame.i32_ne();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.i32_const(5);
          local1 = frame.pop();
          break block_label_1;
        }
        frame.push(local0);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func115(t0, t1);
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load8_u(0, 0);
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(4);
            frame.i32_or();
            frame.i32_const(40);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(0);
            local1 = frame.pop();
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i32_load8_u(0, 1);
          frame.i32_store8(0, 1);
          frame.i32_const(1);
          local1 = frame.pop();
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_store8(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(1);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store8(0, 1);
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func114(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i64 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i64 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i64 local17 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(176);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg2);
    frame.i32_load(2, 12);
    local1 = frame.pop();
    frame.push(arg2);
    frame.i64_load(2, 0);
    local2 = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_load(2, 8);
    local3 = frame.peek();
    frame.i32_store(2, 116);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 4);
              local4 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg1);
              frame.i32_load(2, 0);
              local5 = frame.pop();
              frame.push(local4);
              local6 = frame.pop();
              frame.i32_const(0);
              arg2 = frame.pop();
              frame.push(local4);
              local7 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local0);
                frame.push(local5);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_shr_u();
                frame.push(arg2);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_add();
                frame.i32_load(0, 0);
                frame.i32_store(2, 120);
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.i32_const(-1);
                    frame.push(local0);
                    frame.i32_const(120);
                    frame.i32_add();
                    frame.push(local0);
                    frame.i32_const(116);
                    frame.i32_add();
                    frame.i32_const(4);
                    {
                      var t2 = frame.pop();
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      frame.push(_memcmp(t0, t1, t2));
                    }
                    local8 = frame.peek();
                    frame.i32_const(0);
                    frame.i32_ne();
                    frame.push(local8);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local8 = frame.peek();
                    frame.i32_const(1);
                    frame.i32_ne();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local6);
                    local7 = frame.pop();
                    break block_label_6;
                  }
                  frame.push(local8);
                  frame.i32_const(255);
                  frame.i32_and();
                  frame.i32_const(255);
                  frame.i32_ne();
                  if (frame.pop() != 0) break block_label_3;
                  frame.push(local6);
                  frame.i32_const(1);
                  frame.i32_add();
                  arg2 = frame.pop();
                }
                frame.push(local7);
                frame.push(arg2);
                frame.i32_sub();
                local6 = frame.pop();
                frame.push(local7);
                frame.push(arg2);
                frame.i32_gt_u();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
            }
            frame.push(local4);
            frame.i64_extend_i32_u();
            local9 = frame.pop();
            frame.i32_const(0);
            arg2 = frame.pop();
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          local10 = frame.pop();
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_load(2, 0);
          local5 = frame.pop();
          frame.push(arg1);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 24);
          local11 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 16);
          local8 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 8);
          local7 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local6);
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(0);
                  local12 = frame.pop();
                  break block_label_5;
                }
                frame.push(local6);
                frame.i32_const(-1);
                frame.i32_add();
                local4 = frame.peek();
                frame.push(arg2);
                frame.i32_ge_u();
                if (frame.pop() != 0) break block_label_4;
                frame.push(local7);
                frame.push(local4);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_add();
                frame.i32_load(0, 0);
                local12 = frame.pop();
              }
              frame.push(local6);
              frame.push(arg2);
              frame.i32_ge_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local7);
              frame.push(local6);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.i32_load(0, 0);
              arg2 = frame.pop();
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local5);
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(0);
                  local13 = frame.pop();
                  frame.i32_const(0xf4a04);
                  local14 = frame.pop();
                  frame.i32_const(0xf4a04);
                  local7 = frame.pop();
                  frame.i32_const(0);
                  local6 = frame.pop();
                  frame.i32_const(0);
                  local15 = frame.pop();
                  break block_label_5;
                }
                frame.push(local8);
                frame.i32_const(4);
                frame.i32_add();
                local7 = frame.pop();
                frame.push(local8);
                frame.i32_load(0, 0);
                local13 = frame.peek();
                frame.i32_const(0x3fffffff);
                frame.i32_and();
                local6 = frame.pop();
                frame.push(local5);
                frame.push(local13);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_const(4);
                frame.i32_add();
                local4 = frame.peek();
                frame.i32_sub();
                local15 = frame.pop();
                frame.push(local8);
                frame.push(local4);
                frame.i32_add();
                local14 = frame.pop();
              }
              frame.push(arg2);
              frame.push(local12);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local6);
              frame.push(arg2);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg2);
              frame.push(local12);
              frame.i32_sub();
              local8 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_3;
              frame.push(local7);
              frame.push(local12);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              local16 = frame.pop();
              frame.i32_const(0);
              arg2 = frame.pop();
              frame.push(local8);
              local6 = frame.pop();
              block_label_5:
              {
                loop_label_6:
                for (;;) {
                  frame.push(local0);
                  frame.push(local15);
                  frame.i32_store(2, 120);
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.push(arg3);
                        frame.push(local14);
                        frame.push(local7);
                        frame.push(local16);
                        frame.push(local8);
                        frame.i32_const(1);
                        frame.i32_shr_u();
                        frame.push(arg2);
                        frame.i32_add();
                        local8 = frame.peek();
                        frame.i32_const(2);
                        frame.i32_shl();
                        frame.i32_add();
                        frame.push(local7);
                        frame.i32_sub();
                        local5 = frame.peek();
                        frame.i32_const(-4);
                        frame.i32_and();
                        frame.i32_add();
                        frame.i32_load(0, 0);
                        local4 = frame.peek();
                        frame.i32_add();
                        frame.push(local0);
                        frame.i32_const(120);
                        frame.i32_add();
                        frame.push(local7);
                        frame.push(local5);
                        frame.i32_const(2);
                        frame.i32_shr_u();
                        frame.i32_const(1);
                        frame.i32_add();
                        local5 = frame.peek();
                        frame.i32_const(2);
                        frame.i32_shl();
                        frame.i32_add();
                        frame.push(local5);
                        frame.push(local13);
                        frame.i32_eq();
                        frame.select();
                        frame.i32_load(0, 0);
                        frame.push(local4);
                        frame.i32_sub();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_ZN12icu_provider7request10DataLocale10strict_cmp17hcf8ac8825f9800a4E(
                              t0, t1, t2));
                        }
                        frame.i32_const(255);
                        frame.i32_and();
                        var t0 = frame.pop();
                        switch (t0) {
                          case 0:
                            break block_label_5;
                          case 1:
                            break block_label_8;
                          default:
                            break block_label_9;
                        }
                      }
                      frame.push(local8);
                      local6 = frame.pop();
                      break block_label_7;
                    }
                    frame.push(local8);
                    frame.i32_const(1);
                    frame.i32_add();
                    arg2 = frame.pop();
                  }
                  frame.push(local6);
                  frame.push(arg2);
                  frame.i32_sub();
                  local8 = frame.pop();
                  frame.push(local6);
                  frame.push(arg2);
                  frame.i32_le_u();
                  if (frame.pop() != 0) break block_label_3;
                  continue loop_label_6;
                  break;
                }
              }
              frame.i32_const(1);
              arg2 = frame.pop();
              block_label_5:
              {
                frame.push(local8);
                frame.push(local12);
                frame.i32_add();
                frame.push(local11);
                frame.i32_load8_u(0, 0);
                local7 = frame.peek();
                frame.i32_mul();
                local6 = frame.peek();
                frame.push(local7);
                frame.i32_add();
                local8 = frame.peek();
                frame.push(local6);
                frame.i32_lt_u();
                frame.push(local8);
                frame.push(local10);
                frame.i32_gt_u();
                frame.i32_or();
                local8 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                break block_label_2;
              }
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 120);
              frame.push(local7);
              frame.i32_const(5);
              frame.i32_ge_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(120);
              frame.i32_add();
              frame.i32_const(0);
              frame.push(local11);
              frame.push(local6);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_add();
              frame.push(local8);
              frame.select();
              frame.push(local7);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memcpy(t0, t1, t2));
              }
              frame.drop();
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg1);
                  frame.i32_const(36);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg2 = frame.peek();
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(arg1);
                  frame.i32_load(2, 32);
                  local8 = frame.peek();
                  frame.i32_load(0, 0);
                  local7 = frame.peek();
                  frame.push(local0);
                  frame.i32_load(2, 120);
                  local6 = frame.peek();
                  frame.i32_gt_u();
                  if (frame.pop() != 0) break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(104);
                frame.i32_add();
                frame.i32_const(18);
                frame.i32_store(2, 0);
                frame.push(local0);
                frame.i32_const(99);
                frame.i32_add();
                frame.i32_const(2);
                frame.i32_store8(0, 0);
                frame.push(local0);
                frame.i32_const(0xf4a04);
                frame.i32_store(2, 100);
                frame.push(local0);
                frame.i32_const(8);
                frame.i32_store8(0, 72);
                frame.push(local0);
                frame.push(local1);
                frame.i32_store(2, 132);
                frame.push(local0);
                frame.push(local3);
                frame.i32_store(2, 128);
                frame.push(local0);
                frame.push(local2);
                frame.i64_store(3, 120);
                frame.push(local0);
                frame.i32_const(32);
                frame.i32_add();
                frame.i32_const(4);
                frame.i32_or();
                frame.push(local0);
                frame.i32_const(72);
                frame.i32_add();
                frame.push(local0);
                frame.i32_const(120);
                frame.i32_add();
                frame.push(arg3);
                {
                  var t3 = frame.pop();
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _ZN12icu_provider5error9DataError8with_req17hc2025be0fd8ef6fdE(t0, t1, t2, t3);
                }
                frame.push(local0);
                frame.i32_load(2, 36);
                arg2 = frame.pop();
                break block_label_1;
              }
              frame.push(local0);
              frame.push(arg2);
              frame.push(local7);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_const(4);
              frame.i32_add();
              local4 = frame.peek();
              frame.i32_sub();
              frame.i32_store(2, 72);
              frame.push(local8);
              frame.i32_const(4);
              frame.i32_add();
              arg2 = frame.peek();
              frame.push(local6);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.i32_load(0, 0);
              local5 = frame.pop();
              frame.push(local0);
              frame.i32_const(72);
              frame.i32_add();
              frame.push(arg2);
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.push(local6);
              frame.push(local7);
              frame.i32_eq();
              frame.select();
              frame.i32_load(0, 0);
              local7 = frame.pop();
              block_label_5:
              {
                frame.push(arg1);
                frame.i32_load(2, 40);
                arg2 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(arg2);
                frame.i32_load(2, 0);
                local6 = frame.peek();
                frame.i32_const(1);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_le_u();
                if (frame.pop() != 0) break block_label_4;
                frame.push(arg2);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                frame.i32_store(2, 0);
              }
              frame.push(arg0);
              frame.i32_const(0);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(68);
              frame.i32_add();
              frame.push(arg2);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(64);
              frame.i32_add();
              frame.push(local7);
              frame.push(local5);
              frame.i32_sub();
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(60);
              frame.i32_add();
              frame.push(local8);
              frame.push(local4);
              frame.i32_add();
              frame.push(local5);
              frame.i32_add();
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(56);
              frame.i32_add();
              frame.i32_const(2);
              frame.i32_store8(0, 0);
              frame.push(arg0);
              frame.i32_const(32);
              frame.i32_add();
              frame.i32_const(3);
              frame.i32_store(2, 0);
              break block_label_0;
            }
            throw Trap('unreachable');
            throw Trap('unreachable');
          }
          frame.i32_const(1);
          arg2 = frame.pop();
        }
        frame.push(local0);
        frame.i32_const(147);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_store8(0, 0);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 148);
        frame.push(local0);
        frame.push(local9);
        frame.i64_store(2, 124);
        frame.push(local0);
        frame.push(arg2);
        frame.i32_store(2, 120);
        frame.push(local0);
        frame.push(local1);
        frame.i32_store(2, 172);
        frame.push(local0);
        frame.push(local3);
        frame.i32_store(2, 168);
        frame.push(local0);
        frame.push(local2);
        frame.i64_store(3, 160);
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_const(4);
        frame.i32_or();
        frame.push(local0);
        frame.i32_const(120);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(160);
        frame.i32_add();
        frame.push(arg3);
        {
          var t3 = frame.pop();
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN12icu_provider5error9DataError8with_req17hc2025be0fd8ef6fdE(t0, t1, t2, t3);
        }
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_const(24);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_const(24);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_const(32);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_const(32);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_load(2, 76);
        arg2 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(24);
      frame.i32_add();
      frame.i64_load(3, 0);
      local2 = frame.peek();
      frame.i64_store(3, 0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(32);
      frame.i32_add();
      frame.i64_load(3, 0);
      local9 = frame.peek();
      frame.i64_store(3, 0);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(16);
      frame.i32_add();
      frame.i64_load(3, 0);
      local17 = frame.peek();
      frame.i64_store(3, 8);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(8);
      frame.i32_add();
      frame.i64_load(3, 0);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.push(arg2);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local17);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.i32_const(24);
      frame.i32_add();
      frame.push(local2);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.i32_const(32);
      frame.i32_add();
      frame.push(local9);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.i32_const(1);
      frame.i32_store(2, 0);
    }
    frame.push(local0);
    frame.i32_const(176);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func115(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.peek();
    frame.i32_add();
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    frame.i32_const(-1);
    local6 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.i32_const(4);
                local7 = frame.pop();
                frame.push(local1);
                frame.push(local2);
                frame.i32_eq();
                if (frame.pop() != 0) break block_label_3;
                frame.push(arg1);
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local8 = frame.peek();
                frame.i32_store(2, 0);
                frame.push(local1);
                frame.i32_load8_s(0, 0);
                local7 = frame.peek();
                frame.i32_const(127);
                frame.i32_and();
                local9 = frame.peek();
                frame.push(local4);
                frame.i32_shl();
                frame.push(local5);
                frame.i32_or();
                local5 = frame.pop();
                block_label_6:
                {
                  frame.push(local7);
                  frame.i32_const(0);
                  frame.i32_lt_s();
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(5);
                  local7 = frame.pop();
                  frame.push(local6);
                  frame.push(local9);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) break block_label_3;
                  frame.i32_const(4);
                  local7 = frame.pop();
                  frame.push(local3);
                  frame.push(local5);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) break block_label_3;
                  frame.push(arg1);
                  frame.push(local1);
                  frame.push(local5);
                  frame.i32_add();
                  frame.i32_const(1);
                  frame.i32_add();
                  frame.i32_store(2, 0);
                  frame.i32_const(13);
                  local7 = frame.pop();
                  frame.push(local5);
                  frame.i32_const(3);
                  frame.i32_and();
                  if (frame.pop() != 0) break block_label_3;
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local10 = frame.pop();
                  frame.push(local5);
                  frame.i32_const(-1);
                  frame.i32_xor();
                  frame.i32_const(-4);
                  frame.i32_and();
                  local1 = frame.pop();
                  frame.push(local5);
                  frame.i32_const(3);
                  frame.i32_gt_u();
                  local4 = frame.pop();

                  loop_label_7:
                  for (;;) {
                    frame.push(local1);
                    frame.i32_const(4);
                    frame.i32_add();
                    local1 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_4;
                    frame.push(local4);
                    if (frame.pop() != 0) continue loop_label_7;
                    break block_label_0;
                    break;
                  }
                }
                frame.push(local3);
                frame.i32_const(-1);
                frame.i32_add();
                local3 = frame.pop();
                frame.push(local6);
                frame.i32_const(7);
                frame.i32_shr_u();
                local6 = frame.pop();
                frame.push(local8);
                local1 = frame.pop();
                frame.push(local4);
                frame.i32_const(7);
                frame.i32_add();
                local4 = frame.peek();
                frame.i32_const(35);
                frame.i32_ne();
                if (frame.pop() != 0) continue loop_label_5;
                break;
              }
              frame.i32_const(5);
              local7 = frame.pop();
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(64);
            frame.i32_add();
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func111(t0, t1);
            }
            block_label_4:
            {
              frame.push(local0);
              frame.i32_load8_u(0, 64);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_load8_u(0, 65);
              local7 = frame.pop();
              break block_label_3;
            }
            frame.push(local5);
            frame.i32_const(2);
            frame.i32_shr_u();
            local11 = frame.pop();
            frame.push(local0);
            frame.i32_const(76);
            frame.i32_add();
            frame.i32_load(2, 0);
            local12 = frame.pop();
            frame.push(local0);
            frame.i32_const(72);
            frame.i32_add();
            frame.i32_load(2, 0);
            local13 = frame.pop();
            frame.push(local0);
            frame.i32_load(2, 68);
            local14 = frame.pop();
            frame.i32_const(0);
            local6 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 4);
            local9 = frame.peek();
            frame.push(arg1);
            frame.i32_load(2, 0);
            local15 = frame.peek();
            frame.i32_sub();
            local16 = frame.peek();
            local2 = frame.pop();
            frame.i32_const(0);
            local3 = frame.pop();
            frame.i32_const(-1);
            local8 = frame.pop();
            frame.i32_const(0);
            local1 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                loop_label_6:
                for (;;) {
                  frame.push(local15);
                  frame.push(local1);
                  frame.i32_add();
                  local4 = frame.peek();
                  frame.push(local9);
                  frame.i32_eq();
                  if (frame.pop() != 0) break block_label_5;
                  frame.push(arg1);
                  frame.push(local4);
                  frame.i32_const(1);
                  frame.i32_add();
                  frame.i32_store(2, 0);
                  frame.push(local4);
                  frame.i32_load8_s(0, 0);
                  local7 = frame.peek();
                  frame.i32_const(127);
                  frame.i32_and();
                  local17 = frame.peek();
                  frame.push(local6);
                  frame.i32_shl();
                  frame.push(local3);
                  frame.i32_or();
                  local3 = frame.pop();
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(local7);
                      frame.i32_const(0);
                      frame.i32_lt_s();
                      if (frame.pop() != 0) break block_label_8;
                      frame.i32_const(5);
                      local7 = frame.pop();
                      frame.push(local8);
                      frame.push(local17);
                      frame.i32_lt_u();
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(local1);
                      frame.i32_const(-1);
                      frame.i32_xor();
                      frame.push(local16);
                      frame.i32_add();
                      frame.push(local3);
                      frame.i32_lt_u();
                      if (frame.pop() != 0) break block_label_5;
                      frame.push(local4);
                      frame.i32_const(1);
                      frame.i32_add();
                      local18 = frame.pop();
                      frame.push(arg1);
                      frame.push(local15);
                      frame.push(local1);
                      frame.push(local3);
                      frame.i32_add();
                      frame.i32_add();
                      local17 = frame.peek();
                      frame.i32_const(1);
                      frame.i32_add();
                      frame.i32_store(2, 0);
                      frame.push(local3);
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_7;
                      frame.i32_const(13);
                      local7 = frame.pop();
                      frame.push(local3);
                      frame.i32_const(4);
                      frame.i32_lt_u();
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(local18);
                      frame.i32_load(0, 0);
                      local6 = frame.peek();
                      frame.i32_const(2);
                      frame.i32_shl();
                      frame.i32_const(4);
                      frame.i32_add();
                      local8 = frame.peek();
                      frame.i32_eqz();
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(local3);
                      frame.push(local8);
                      frame.i32_lt_u();
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(local0);
                      frame.push(local3);
                      frame.push(local8);
                      frame.i32_sub();
                      local19 = frame.peek();
                      frame.i32_store(2, 64);
                      frame.push(local6);
                      frame.i32_const(0x3fffffff);
                      frame.i32_gt_u();
                      if (frame.pop() != 0) break block_label_0;
                      block_label_9:
                      {
                        frame.push(local6);
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(local3);
                        frame.push(local8);
                        frame.i32_ne();
                        if (frame.pop() != 0) break block_label_4;
                        break block_label_7;
                      }
                      frame.push(local4);
                      frame.i32_const(5);
                      frame.i32_add();
                      frame.i32_load(0, 0);
                      if (frame.pop() != 0) break block_label_4;
                      frame.push(local4);
                      frame.i32_const(9);
                      frame.i32_add();
                      local4 = frame.pop();
                      frame.i32_const(0);
                      local16 = frame.pop();

                      loop_label_9:
                      for (;;) {
                        frame.push(local6);
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_7;
                        frame.push(local16);
                        frame.push(local0);
                        frame.i32_const(64);
                        frame.i32_add();
                        frame.push(local4);
                        frame.push(local6);
                        frame.i32_const(1);
                        frame.i32_eq();
                        frame.select();
                        frame.i32_load(0, 0);
                        local8 = frame.peek();
                        frame.i32_gt_u();
                        if (frame.pop() != 0) break block_label_4;
                        frame.push(local6);
                        frame.i32_const(-1);
                        frame.i32_add();
                        local6 = frame.pop();
                        frame.push(local4);
                        frame.i32_const(4);
                        frame.i32_add();
                        local4 = frame.pop();
                        frame.push(local8);
                        local16 = frame.pop();
                        frame.push(local8);
                        frame.push(local19);
                        frame.i32_le_u();
                        if (frame.pop() != 0) continue loop_label_9;
                        break block_label_4;
                        break;
                      }
                    }
                    frame.push(local6);
                    frame.i32_const(7);
                    frame.i32_add();
                    local6 = frame.pop();
                    frame.push(local2);
                    frame.i32_const(-1);
                    frame.i32_add();
                    local2 = frame.pop();
                    frame.push(local8);
                    frame.i32_const(7);
                    frame.i32_shr_u();
                    local8 = frame.pop();
                    frame.i32_const(5);
                    local7 = frame.pop();
                    frame.push(local1);
                    frame.i32_const(1);
                    frame.i32_add();
                    local1 = frame.peek();
                    frame.i32_const(5);
                    frame.i32_ne();
                    if (frame.pop() != 0) continue loop_label_6;
                    break block_label_4;
                  }
                  break;
                }
                frame.push(local9);
                frame.push(local15);
                frame.i32_sub();
                frame.push(local3);
                frame.i32_sub();
                frame.push(local1);
                frame.i32_sub();
                frame.i32_const(-3);
                frame.i32_add();
                local20 = frame.pop();
                frame.push(local3);
                local21 = frame.pop();
                frame.i32_const(0);
                local6 = frame.pop();
                frame.i32_const(0);
                local16 = frame.pop();
                frame.i32_const(-1);
                local19 = frame.pop();
                frame.i32_const(0);
                local4 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    loop_label_8:
                    for (;;) {
                      frame.push(local4);
                      frame.i32_const(1);
                      frame.i32_add();
                      local8 = frame.peek();
                      frame.push(local17);
                      frame.i32_add();
                      local7 = frame.peek();
                      frame.push(local9);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_5;
                      frame.push(arg1);
                      frame.push(local17);
                      frame.push(local4);
                      frame.i32_add();
                      local22 = frame.peek();
                      frame.i32_const(2);
                      frame.i32_add();
                      frame.i32_store(2, 0);
                      frame.push(local7);
                      frame.i32_load8_s(0, 0);
                      local7 = frame.peek();
                      frame.i32_const(127);
                      frame.i32_and();
                      local23 = frame.peek();
                      frame.push(local6);
                      frame.i32_shl();
                      frame.push(local16);
                      frame.i32_or();
                      local16 = frame.pop();
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(local7);
                          frame.i32_const(0);
                          frame.i32_lt_s();
                          if (frame.pop() != 0) break block_label_10;
                          frame.i32_const(5);
                          local7 = frame.pop();
                          frame.push(local19);
                          frame.push(local23);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) break block_label_4;
                          frame.i32_const(4);
                          local7 = frame.pop();
                          frame.push(local2);
                          frame.push(local3);
                          frame.i32_sub();
                          frame.push(local4);
                          frame.i32_sub();
                          frame.i32_const(-2);
                          frame.i32_add();
                          frame.push(local16);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) break block_label_4;
                          frame.push(arg1);
                          frame.push(local15);
                          frame.push(local16);
                          frame.push(local21);
                          frame.i32_add();
                          local6 = frame.peek();
                          frame.i32_add();
                          frame.push(local1);
                          frame.i32_add();
                          local8 = frame.peek();
                          frame.i32_const(2);
                          frame.i32_add();
                          frame.i32_store(2, 0);
                          frame.i32_const(13);
                          local7 = frame.pop();
                          frame.push(local16);
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_4;
                          frame.push(local22);
                          frame.i32_const(2);
                          frame.i32_add();
                          local2 = frame.peek();
                          frame.i32_load8_u(0, 0);
                          local4 = frame.peek();
                          frame.i32_const(-5);
                          frame.i32_add();
                          frame.i32_const(255);
                          frame.i32_and();
                          frame.i32_const(252);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) break block_label_4;
                          frame.push(local16);
                          frame.i32_const(-1);
                          frame.i32_add();
                          local17 = frame.peek();
                          frame.push(local17);
                          frame.push(local4);
                          frame.i32_div_u();
                          local19 = frame.peek();
                          frame.push(local4);
                          frame.i32_mul();
                          frame.i32_sub();
                          if (frame.pop() != 0) break block_label_4;
                          frame.push(local11);
                          frame.push(local13);
                          frame.i32_ne();
                          if (frame.pop() != 0) break block_label_6;
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(local3);
                              if (frame.pop() != 0) break block_label_12;
                              frame.i32_const(0);
                              local4 = frame.pop();
                              break block_label_11;
                            }
                            frame.push(local18);
                            frame.i32_load(0, 0);
                            local4 = frame.pop();
                          }
                          frame.push(local4);
                          frame.push(local19);
                          frame.i32_ne();
                          if (frame.pop() != 0) break block_label_6;
                          block_label_11:
                          {
                            frame.push(local5);
                            frame.i32_const(4);
                            frame.i32_lt_u();
                            local19 = frame.peek();
                            if (frame.pop() != 0) break block_label_11;
                            frame.push(local14);
                            frame.i32_eqz();
                            if (frame.pop() != 0) break block_label_11;
                            frame.push(local11);
                            local5 = frame.pop();
                            frame.push(local14);
                            local4 = frame.pop();

                            loop_label_12:
                            for (;;) {
                              frame.push(local5);
                              frame.i32_const(-1);
                              frame.i32_add();
                              local5 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_11;
                              frame.push(local4);
                              frame.i32_const(4);
                              frame.i32_add();
                              local7 = frame.pop();
                              frame.push(local4);
                              frame.i32_load(0, 0);
                              local13 = frame.pop();
                              frame.push(local4);
                              frame.i32_const(4);
                              frame.i32_add();
                              local4 = frame.pop();
                              frame.push(local13);
                              frame.push(local7);
                              frame.i32_load(0, 0);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) break block_label_6;
                              continue loop_label_12;
                              break;
                            }
                          }
                          block_label_11:
                          {
                            frame.push(local19);
                            if (frame.pop() != 0) break block_label_11;
                            frame.push(local11);
                            frame.i32_const(2);
                            frame.i32_shl();
                            frame.push(local14);
                            frame.i32_add();
                            frame.i32_const(-4);
                            frame.i32_add();
                            frame.i32_load(0, 0);
                            local4 = frame.pop();
                            block_label_12:
                            {
                              block_label_13:
                              {
                                frame.push(local3);
                                if (frame.pop() != 0) break block_label_13;
                                frame.i32_const(0);
                                local5 = frame.pop();
                                break block_label_12;
                              }
                              frame.push(local18);
                              frame.i32_load(0, 0);
                              local5 = frame.pop();
                            }
                            frame.push(local5);
                            frame.push(local4);
                            frame.i32_ne();
                            if (frame.pop() != 0) break block_label_6;
                          }
                          frame.push(local0);
                          frame.i32_const(0);
                          frame.i32_store(2, 60);
                          frame.push(local0);
                          frame.push(local17);
                          frame.i32_store(2, 56);
                          frame.push(local0);
                          frame.push(local2);
                          frame.i32_store(2, 52);
                          frame.push(local0);
                          frame.i32_const(1);
                          frame.i32_store(2, 48);
                          frame.push(local0);
                          frame.push(local3);
                          frame.i32_store(2, 40);
                          frame.push(local0);
                          frame.push(local18);
                          frame.i32_store(2, 36);
                          frame.push(local0);
                          frame.i32_const(1);
                          frame.i32_store(2, 32);
                          frame.push(local0);
                          frame.push(local12);
                          frame.i32_store(2, 28);
                          frame.push(local0);
                          frame.push(local11);
                          frame.i32_store(2, 24);
                          frame.push(local0);
                          frame.push(local14);
                          frame.i32_store(2, 20);
                          frame.push(local0);
                          frame.i32_const(0);
                          frame.i32_store(2, 16);
                          frame.push(local0);
                          frame.push(local11);
                          frame.i32_store(2, 12);
                          frame.push(local0);
                          frame.push(local10);
                          frame.i32_store(2, 8);
                          frame.push(local0);
                          frame.i32_const(8);
                          frame.i32_add();
                          {
                            var t0 = frame.pop();
                            _func110(t0);
                          }
                          frame.i32_const(13);
                          local7 = frame.pop();
                          frame.push(local12);
                          if (frame.pop() != 0) break block_label_3;
                          frame.push(local14);
                          frame.i32_eqz();
                          if (frame.pop() != 0) break block_label_3;
                          frame.i32_const(-1);
                          local13 = frame.pop();
                          frame.push(local16);
                          local22 = frame.pop();
                          frame.i32_const(0);
                          local5 = frame.pop();
                          frame.i32_const(0);
                          local12 = frame.pop();
                          frame.i32_const(0);
                          local4 = frame.pop();

                          loop_label_11:
                          for (;;) {
                            frame.i32_const(4);
                            local7 = frame.pop();
                            frame.push(local8);
                            frame.push(local4);
                            frame.i32_add();
                            local19 = frame.peek();
                            frame.i32_const(2);
                            frame.i32_add();
                            local23 = frame.peek();
                            frame.push(local9);
                            frame.i32_eq();
                            if (frame.pop() != 0) break block_label_9;
                            frame.push(arg1);
                            frame.push(local19);
                            frame.i32_const(3);
                            frame.i32_add();
                            frame.i32_store(2, 0);
                            frame.push(local23);
                            frame.i32_load8_s(0, 0);
                            local7 = frame.peek();
                            frame.i32_const(127);
                            frame.i32_and();
                            local19 = frame.peek();
                            frame.push(local5);
                            frame.i32_shl();
                            frame.push(local12);
                            frame.i32_or();
                            local12 = frame.pop();
                            block_label_12:
                            {
                              frame.push(local7);
                              frame.i32_const(0);
                              frame.i32_lt_s();
                              if (frame.pop() != 0) break block_label_12;
                              frame.i32_const(5);
                              local7 = frame.pop();
                              frame.push(local13);
                              frame.push(local19);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) break block_label_9;
                              frame.i32_const(4);
                              local7 = frame.pop();
                              frame.push(local20);
                              frame.push(local16);
                              frame.i32_sub();
                              frame.push(local4);
                              frame.i32_sub();
                              frame.push(local12);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) break block_label_9;
                              frame.push(local15);
                              frame.push(local16);
                              frame.push(local21);
                              frame.i32_add();
                              frame.i32_add();
                              frame.push(local1);
                              frame.i32_add();
                              frame.push(local4);
                              frame.i32_add();
                              local4 = frame.peek();
                              frame.i32_const(3);
                              frame.i32_add();
                              local5 = frame.pop();
                              frame.push(arg1);
                              frame.push(local15);
                              frame.push(local12);
                              frame.push(local6);
                              frame.i32_add();
                              frame.i32_add();
                              frame.push(local1);
                              frame.i32_add();
                              frame.i32_const(3);
                              frame.i32_add();
                              frame.i32_store(2, 0);
                              frame.push(local12);
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_7;
                              frame.i32_const(13);
                              local7 = frame.pop();
                              frame.push(local12);
                              frame.i32_const(4);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) break block_label_9;
                              frame.push(local5);
                              frame.i32_load(0, 0);
                              local1 = frame.peek();
                              frame.i32_const(2);
                              frame.i32_shl();
                              frame.i32_const(4);
                              frame.i32_add();
                              local6 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) break block_label_9;
                              frame.push(local12);
                              frame.push(local6);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) break block_label_9;
                              frame.push(local0);
                              frame.push(local12);
                              frame.push(local6);
                              frame.i32_sub();
                              arg1 = frame.peek();
                              frame.i32_store(2, 8);
                              frame.push(local1);
                              frame.i32_const(0x3fffffff);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) break block_label_0;
                              block_label_13:
                              {
                                frame.push(local1);
                                if (frame.pop() != 0) break block_label_13;
                                frame.push(local12);
                                frame.push(local6);
                                frame.i32_ne();
                                if (frame.pop() != 0) break block_label_9;
                                break block_label_7;
                              }
                              frame.push(local4);
                              frame.i32_const(7);
                              frame.i32_add();
                              frame.i32_load(0, 0);
                              if (frame.pop() != 0) break block_label_9;
                              frame.push(local4);
                              frame.i32_const(11);
                              frame.i32_add();
                              local4 = frame.pop();
                              frame.i32_const(0);
                              local8 = frame.pop();

                              loop_label_13:
                              for (;;) {
                                frame.push(local1);
                                frame.i32_eqz();
                                if (frame.pop() != 0) break block_label_7;
                                frame.push(local8);
                                frame.push(local0);
                                frame.i32_const(8);
                                frame.i32_add();
                                frame.push(local4);
                                frame.push(local1);
                                frame.i32_const(1);
                                frame.i32_eq();
                                frame.select();
                                frame.i32_load(0, 0);
                                local6 = frame.peek();
                                frame.i32_gt_u();
                                if (frame.pop() != 0) break block_label_9;
                                frame.push(local1);
                                frame.i32_const(-1);
                                frame.i32_add();
                                local1 = frame.pop();
                                frame.push(local4);
                                frame.i32_const(4);
                                frame.i32_add();
                                local4 = frame.pop();
                                frame.push(local6);
                                local8 = frame.pop();
                                frame.push(local6);
                                frame.push(arg1);
                                frame.i32_le_u();
                                if (frame.pop() != 0) continue loop_label_13;
                                break block_label_9;
                                break;
                              }
                            }
                            frame.push(local6);
                            frame.i32_const(1);
                            frame.i32_add();
                            local6 = frame.pop();
                            frame.push(local22);
                            frame.i32_const(1);
                            frame.i32_add();
                            local22 = frame.pop();
                            frame.push(local5);
                            frame.i32_const(7);
                            frame.i32_add();
                            local5 = frame.pop();
                            frame.push(local13);
                            frame.i32_const(7);
                            frame.i32_shr_u();
                            local13 = frame.pop();
                            frame.i32_const(5);
                            local7 = frame.pop();
                            frame.push(local4);
                            frame.i32_const(1);
                            frame.i32_add();
                            local4 = frame.peek();
                            frame.i32_const(5);
                            frame.i32_ne();
                            if (frame.pop() != 0) continue loop_label_11;
                            break block_label_9;
                            break;
                          }
                        }
                        frame.push(local21);
                        frame.i32_const(1);
                        frame.i32_add();
                        local21 = frame.pop();
                        frame.push(local6);
                        frame.i32_const(7);
                        frame.i32_add();
                        local6 = frame.pop();
                        frame.push(local20);
                        frame.i32_const(-1);
                        frame.i32_add();
                        local20 = frame.pop();
                        frame.push(local19);
                        frame.i32_const(7);
                        frame.i32_shr_u();
                        local19 = frame.pop();
                        frame.i32_const(5);
                        local7 = frame.pop();
                        frame.push(local8);
                        local4 = frame.pop();
                        frame.push(local8);
                        frame.i32_const(5);
                        frame.i32_ne();
                        if (frame.pop() != 0) continue loop_label_8;
                        break block_label_4;
                      }
                      break;
                    }
                    frame.push(arg0);
                    frame.push(local7);
                    frame.i32_store8(0, 1);
                    break block_label_2;
                  }
                  frame.push(arg0);
                  frame.i32_const(32);
                  frame.i32_add();
                  frame.push(local17);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(28);
                  frame.i32_add();
                  frame.push(local2);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(24);
                  frame.i32_add();
                  frame.push(local3);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(20);
                  frame.i32_add();
                  frame.push(local18);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(16);
                  frame.i32_add();
                  frame.push(local11);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(12);
                  frame.i32_add();
                  frame.push(local14);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(8);
                  frame.i32_add();
                  frame.push(local11);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(40);
                  frame.i32_add();
                  frame.push(local12);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(36);
                  frame.i32_add();
                  frame.push(local5);
                  frame.i32_store(2, 0);
                  frame.push(arg0);
                  frame.i32_const(4);
                  frame.i32_add();
                  frame.push(local10);
                  frame.i32_store(2, 0);
                  frame.i32_const(0);
                  local1 = frame.pop();
                  break block_label_1;
                }
                frame.i32_const(13);
                local7 = frame.pop();
                frame.push(local12);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_3;
                frame.push(local12);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_3;
                frame.i32_const(0xf5160);
                frame.push(local14);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func018(t0, t1);
                }
                break block_label_3;
              }
              frame.i32_const(4);
              local7 = frame.pop();
            }
            frame.push(local12);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local12);
            frame.i32_const(2);
            frame.i32_shl();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.i32_const(0xf5160);
            frame.push(local14);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func018(t0, t1);
            }
          }
          frame.push(arg0);
          frame.push(local7);
          frame.i32_store8(0, 1);
        }
        frame.i32_const(1);
        local1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store8(0, 0);
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func116(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_add();
    frame.i32_const(0);
    frame.i32_const(39);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_memset(t0, t1, t2));
    }
    frame.drop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg1);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(0);
                local2 = frame.pop();
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(55);
              frame.i32_add();
              frame.i32_const(0);
              frame.i32_store(0, 0);
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 52);
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 40);
              break block_label_3;
            }
            block_label_4:
            {
              block_label_5:
              {
                loop_label_6:
                for (;;) {
                  frame.push(local2);
                  frame.i32_const(-0x8000);
                  frame.i32_add();
                  local3 = frame.pop();
                  frame.i32_const(0);
                  local4 = frame.pop();
                  frame.i32_const(0);
                  local5 = frame.pop();
                  frame.push(arg1);
                  local6 = frame.pop();
                  block_label_7:
                  {
                    loop_label_8:
                    for (;;) {
                      frame.push(local6);
                      frame.i32_const(10);
                      frame.i32_div_u();
                      arg1 = frame.pop();
                      frame.push(local3);
                      frame.push(local4);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_5;
                      frame.push(local6);
                      frame.push(arg1);
                      frame.i32_const(10);
                      frame.i32_mul();
                      frame.i32_sub();
                      local7 = frame.pop();
                      block_label_9:
                      {
                        frame.push(local4);
                        if (frame.pop() != 0) break block_label_9;
                        frame.push(local7);
                        frame.i32_const(255);
                        frame.i32_and();
                        frame.i32_eqz();
                        if (frame.pop() != 0) break block_label_7;
                      }
                      frame.push(local4);
                      frame.i32_const(-39);
                      frame.i32_eq();
                      if (frame.pop() != 0) break block_label_5;
                      frame.push(local0);
                      frame.i32_const(1);
                      frame.i32_add();
                      frame.push(local4);
                      frame.i32_add();
                      frame.i32_const(38);
                      frame.i32_add();
                      frame.push(local7);
                      frame.i32_store8(0, 0);
                      frame.push(local4);
                      frame.i32_const(-1);
                      frame.i32_add();
                      local4 = frame.pop();
                      frame.push(local5);
                      frame.i32_const(1);
                      frame.i32_add();
                      local5 = frame.pop();
                      frame.push(local6);
                      frame.i32_const(10);
                      frame.i32_lt_u();
                      local7 = frame.pop();
                      frame.push(arg1);
                      local6 = frame.pop();
                      frame.push(local7);
                      frame.i32_eqz();
                      if (frame.pop() != 0) continue loop_label_8;
                      break;
                    }
                    frame.push(local0);
                    frame.i32_const(58);
                    frame.i32_add();
                    frame.i32_const(0);
                    frame.i32_store8(0, 0);
                    frame.push(local0);
                    frame.i32_const(0);
                    frame.i32_store16(1, 56);
                    frame.push(local0);
                    frame.i32_const(0);
                    frame.i32_store(2, 40);
                    frame.push(local0);
                    frame.push(local4);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    arg1 = frame.peek();
                    frame.push(local1);
                    frame.i32_add();
                    local6 = frame.peek();
                    frame.i32_store16(1, 54);
                    frame.push(local0);
                    frame.push(local6);
                    frame.i32_store16(1, 52);
                    frame.push(arg1);
                    frame.i32_const(39);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) break block_label_4;
                    break block_label_0;
                  }
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local1 = frame.pop();
                  frame.push(local2);
                  frame.push(local4);
                  frame.i32_sub();
                  frame.i32_const(1);
                  frame.i32_add();
                  local2 = frame.pop();
                  frame.push(local6);
                  frame.i32_const(10);
                  frame.i32_ge_u();
                  if (frame.pop() != 0) continue loop_label_6;
                  break;
                }
                frame.push(local0);
                frame.i32_const(55);
                frame.i32_add();
                frame.i32_const(0);
                frame.i32_store(0, 0);
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 52);
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 40);
                break block_label_3;
              }
              frame.push(arg0);
              frame.i32_const(1);
              frame.i32_store16(1, 0);
              break block_label_1;
            }
            frame.i32_const(0);
            local6 = frame.pop();
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(8);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(-1);
              frame.push(arg1);
              frame.i32_clz();
              frame.i32_shr_u();
              frame.i32_const(1);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_0;
              frame.i32_const(0);
              local6 = frame.pop();
              frame.push(arg1);
              frame.i32_const(9);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0xf5160);
              frame.push(arg1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func019(t0, t1));
              }
              local7 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_2;
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 48);
              frame.push(local0);
              frame.push(local7);
              frame.i32_store(2, 44);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_store(2, 40);
              frame.push(arg1);
              local6 = frame.pop();
            }
            frame.push(local7);
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(4);
            frame.i32_or();
            frame.push(local6);
            frame.i32_const(8);
            frame.i32_gt_u();
            local3 = frame.peek();
            frame.select();
            arg1 = frame.peek();
            frame.push(local5);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_const(0);
            frame.push(local6);
            frame.push(local3);
            frame.select();
            local6 = frame.peek();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memmove(t0, t1, t2));
            }
            frame.drop();
            frame.push(arg1);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_add();
            frame.push(local4);
            frame.i32_add();
            frame.i32_const(39);
            frame.i32_add();
            frame.i32_const(0);
            frame.push(local4);
            frame.i32_sub();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(local0);
            frame.i32_load(2, 40);
            frame.i32_const(8);
            frame.i32_gt_u();
            frame.i32_const(3);
            frame.i32_shl();
            frame.i32_add();
            frame.push(local6);
            frame.push(local4);
            frame.i32_sub();
            frame.i32_store(2, 0);
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          frame.push(local0);
          frame.i64_load(3, 40);
          frame.i64_store(2, 0);
          frame.push(arg0);
          frame.i32_const(20);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(56);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_store(2, 0);
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(48);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(2, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_const(1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(64);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      return;
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _ZN13fixed_decimal7decimal12FixedDecimal14multiply_pow1017h07e9e8f2e457c92eE(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.i32_const(-1);
          frame.push(arg1);
          frame.i32_const(0xffff);
          frame.i32_and();
          frame.i32_const(0);
          frame.i32_ne();
          frame.push(arg1);
          frame.i32_const(16);
          frame.i32_shl();
          frame.i32_const(16);
          frame.i32_shr_s();
          local0 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          frame.select();
          frame.i32_const(255);
          frame.i32_and();
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              break block_label_0;
            case 1:
              break block_label_2;
            default:
              break block_label_1;
          }
        }
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load16_s(1, 14);
          frame.push(local0);
          frame.i32_add();
          local0 = frame.peek();
          frame.i32_const(16);
          frame.i32_shl();
          frame.i32_const(16);
          frame.i32_shr_s();
          frame.push(local0);
          frame.i32_eq();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store16(1, 16);
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 12);
          block_label_3:
          {
            frame.push(arg0);
            frame.push(arg0);
            frame.i32_load(2, 0);
            frame.i32_const(8);
            frame.i32_gt_u();
            frame.i32_const(3);
            frame.i32_shl();
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_load(2, 0);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 0);
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store8(0, 18);
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store16(1, 14);
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load16_u(1, 16);
        frame.push(arg1);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(31);
        frame.i32_shr_s();
        frame.push(local0);
        frame.i32_and();
        frame.i32_store16(1, 16);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load16_s(1, 16);
        frame.push(arg1);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        frame.push(local0);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store16(1, 16);
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load16_u(1, 14);
        frame.push(arg1);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        local0 = frame.peek();
        frame.i32_const(0);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_gt_s();
        frame.select();
        frame.i32_store16(1, 14);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store16(1, 16);
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 12);
      block_label_1:
      {
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load(2, 0);
        frame.i32_const(8);
        frame.i32_gt_u();
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 0);
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 18);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.push(arg0);
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_gt_u();
      frame.select();
      if (frame.pop() != 0) break block_label_0;
      return;
    }
    frame.push(arg0);
    frame.push(arg0);
    frame.i32_load16_u(1, 12);
    frame.push(arg1);
    frame.i32_add();
    frame.i32_store16(1, 12);
  }

  void _func118(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(-0x80000000);
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_const(31);
    frame.i32_shr_s();
    local1 = frame.peek();
    frame.i32_xor();
    frame.push(local1);
    frame.i32_sub();
    frame.push(arg1);
    frame.i32_const(-0x80000000);
    frame.i32_eq();
    frame.select();
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func116(t0, t1, t2);
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_load8_u(0, 8);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i64_load(2, 12);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(20);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(31);
    frame.i32_shr_u();
    frame.i32_store8(0, 18);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func119(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func102(t0, t1));
    }
    return frame.pop();
  }

  i32 _func120(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func102(t0, t1));
    }
    return frame.pop();
  }

  i32 _ZN11icu_decimal7grouper5check17h197c298b69fc1d31E(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg3);
      frame.i32_load8_u(0, 0);
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local1);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.i32_gt_s();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(255);
            frame.i32_and();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_3;
              case 1:
                break block_label_0;
              case 2:
                break block_label_3;
              case 3:
                break block_label_2;
              default:
                break block_label_3;
            }
          }
          frame.push(arg3);
          frame.i32_load8_u(0, 2);
          arg2 = frame.peek();
          frame.i32_const(1);
          frame.push(arg2);
          frame.select();
          arg2 = frame.pop();
          break block_label_1;
        }
        frame.push(arg3);
        frame.i32_load8_u(0, 2);
        arg2 = frame.peek();
        frame.i32_const(2);
        frame.push(arg2);
        frame.i32_const(2);
        frame.i32_gt_u();
        frame.select();
        arg2 = frame.pop();
      }
      frame.push(local1);
      frame.push(arg2);
      frame.i32_add();
      frame.i32_const(-1);
      frame.i32_add();
      frame.push(arg0);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.i32_gt_s();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg1);
      frame.push(local1);
      frame.i32_sub();
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.push(arg3);
      frame.i32_load8_u(0, 1);
      arg3 = frame.peek();
      frame.push(local1);
      frame.push(arg3);
      frame.select();
      frame.i32_rem_s();
      frame.i32_eqz();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func122(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_store(2, 12);
    frame.push(local0);
    frame.i32_const(18);
    frame.i32_store(2, 20);
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(12);
    frame.i32_add();
    frame.i32_store(2, 16);
    frame.push(arg1);
    frame.i32_load(2, 24);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i64_const(1);
    frame.i64_store(2, 28);
    frame.push(local0);
    frame.i32_const(0xf4a2c);
    frame.i32_store(2, 24);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_store(2, 40);
    frame.push(arg1);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt5write17h10ba687f51516bbeE(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func123(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_const(0xf4258);
    frame.i32_const(45);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E(t0, t1, t2));
    }
    return frame.pop();
  }

  void _diplomat_init() {
    final frame = Frame(this);
  }

  void _diplomat_simple_writeable(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_const(19);
    frame.i32_store(2, 20);
    frame.push(arg0);
    frame.i32_const(20);
    frame.i32_store(2, 16);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_const(-1);
    frame.i32_add();
    frame.i32_store(2, 12);
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 0);
  }

  i32 _ZN16diplomat_runtime9writeable25diplomat_simple_writeable4grow17hf52d473702a686d2E(
      i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(0);
    return frame.pop();
  }

  void _ZN16diplomat_runtime9writeable25diplomat_simple_writeable5flush17h58ab59bfd4609facE(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.push(arg0);
    frame.i32_load(2, 8);
    frame.i32_add();
    frame.i32_const(0);
    frame.i32_store8(0, 0);
  }

  i32 _diplomat_buffer_writeable_create(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func031(t0, t1, t2);
    }
    frame.push(local0);
    frame.i32_load(2, 8);
    local1 = frame.pop();
    block_label_0:
    {
      frame.i32_const(0xf5160);
      frame.i32_const(24);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func019(t0, t1));
      }
      local2 = frame.peek();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(24);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(local2);
    frame.i32_const(21);
    frame.i32_store(2, 20);
    frame.push(local2);
    frame.i32_const(22);
    frame.i32_store(2, 16);
    frame.push(local2);
    frame.push(arg0);
    frame.i32_store(2, 12);
    frame.push(local2);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(local2);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(local2);
    frame.i32_const(0);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local2);
    return frame.pop();
  }

  i32 _ZN16diplomat_runtime9writeable32diplomat_buffer_writeable_create4grow17h86ff4bf8898d3cdaE(
      i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 12);
      local1 = frame.peek();
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      local2 = frame.peek();
      frame.i32_store(2, 0);
      block_label_1:
      {
        frame.push(local1);
        frame.push(arg1);
        frame.i32_ge_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(0);
        frame.push(arg1);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func033(t0, t1, t2);
        }
        frame.push(local0);
        frame.i32_load(2, 0);
        local2 = frame.pop();
        frame.push(local0);
        frame.i32_load(2, 4);
        local1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local2);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      frame.i32_const(1);
      return frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
    return frame.pop();
  }

  void _ZN16diplomat_runtime9writeable32diplomat_buffer_writeable_create5flush17h2d9b513df42e3e0cE(i32 arg0) {
    final frame = Frame(this);
  }

  i32 _diplomat_buffer_writeable_get_bytes(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 4);
    return frame.pop();
  }

  i32 _diplomat_buffer_writeable_len(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 8);
    return frame.pop();
  }

  void _diplomat_buffer_writeable_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 12);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  i32 _diplomat_alloc(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_popcnt();
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        frame.push(arg1);
        frame.i32_sub();
        frame.push(arg0);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg1);
        if (frame.pop() != 0) break block_label_0;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(__rust_alloc(t0, t1));
    }
    return frame.pop();
  }

  void _diplomat_free(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_popcnt();
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;
        frame.i32_const(0);
        frame.push(arg2);
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(arg2);
        if (frame.pop() != 0) break block_label_0;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  void _func136(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load8_u(0, 24);
        if (frame.pop() != 0) break block_label_1;
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 28);
          local1 = frame.peek();
          frame.i32_const(2);
          frame.i32_ne();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg0);
          frame.i32_const(0xd01);
          frame.i32_store16(1, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_load(2, 0);
        local2 = frame.pop();
        frame.push(local0);
        frame.i32_const(36);
        frame.i32_add();
        frame.i32_load(2, 0);
        local3 = frame.pop();
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_load(2, 0);
        local4 = frame.pop();
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E(t0, t1);
        }
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local0);
              frame.i32_load8_u(0, 24);
              if (frame.pop() != 0) break block_label_4;
              frame.push(local0);
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              arg1 = frame.peek();
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_load(2, 0);
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              frame.i64_load(3, 0);
              frame.i64_store(3, 8);
              frame.push(local0);
              frame.i32_load(2, 28);
              local5 = frame.peek();
              frame.i32_const(2);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_2;
              frame.push(arg0);
              frame.i32_const(0xd01);
              frame.i32_store16(1, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_load8_u(0, 25);
            arg1 = frame.pop();
            frame.push(arg0);
            frame.i32_const(1);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_store8(0, 1);
          }
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(local3);
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.i32_const(0xf5160);
          frame.push(local4);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func018(t0, t1);
          }
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(24);
        frame.i32_add();
        frame.push(local0);
        frame.i64_load(3, 8);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(32);
        frame.i32_add();
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_add();
        frame.push(local5);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local2);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.push(local3);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local4);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.push(local1);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(0);
        frame.i32_store8(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_load8_u(0, 25);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.i32_const(1);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store8(0, 1);
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.peek();
    frame.i32_add();
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    frame.i32_const(-1);
    local6 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            frame.i32_const(4);
            local7 = frame.pop();
            frame.push(local1);
            frame.push(local2);
            frame.i32_eq();
            if (frame.pop() != 0) break block_label_2;
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local8 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.i32_load8_s(0, 0);
            local7 = frame.peek();
            frame.i32_const(127);
            frame.i32_and();
            local9 = frame.peek();
            frame.push(local4);
            frame.i32_shl();
            frame.push(local5);
            frame.i32_or();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local7);
              frame.i32_const(0);
              frame.i32_lt_s();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(5);
              local7 = frame.pop();
              frame.push(local6);
              frame.push(local9);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_2;
              frame.i32_const(4);
              local7 = frame.pop();
              frame.push(local3);
              frame.push(local5);
              frame.i32_lt_u();
              if (frame.pop() != 0) break block_label_2;
              frame.push(arg1);
              frame.push(local1);
              frame.push(local5);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_add();
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.push(local1);
              frame.i32_const(1);
              frame.i32_add();
              frame.push(local5);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _ZN4core3str8converts9from_utf817h989570921179a6cfE(t0, t1, t2);
              }
              frame.push(local0);
              frame.i32_load(2, 0);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.i32_const(8);
              local7 = frame.pop();
              break block_label_2;
            }
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.pop();
            frame.push(local6);
            frame.i32_const(7);
            frame.i32_shr_u();
            local6 = frame.pop();
            frame.push(local8);
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(7);
            frame.i32_add();
            local4 = frame.peek();
            frame.i32_const(35);
            frame.i32_ne();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
          frame.i32_const(5);
          local7 = frame.pop();
        }
        frame.push(arg0);
        frame.push(local7);
        frame.i32_store8(0, 1);
        frame.i32_const(1);
        local1 = frame.pop();
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local0);
      frame.i64_load(2, 4);
      frame.i64_store(2, 0);
      frame.i32_const(0);
      local1 = frame.pop();
      frame.push(arg0);
      frame.i32_const(4);
      frame.i32_add();
      frame.i32_const(0);
      frame.i32_store(2, 0);
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store8(0, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func138(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func088(t0, t1));
    }
    return frame.pop();
  }

  void _func139(i32 arg0) {
    final frame = Frame(this);
  }

  void _func140(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load8_u(0, 0);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func141(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load(2, 0);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                break block_label_0;
              case 1:
                break block_label_2;
              default:
                break block_label_3;
            }
          }
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          local0 = frame.peek();
          {
            var t0 = frame.pop();
            _func054(t0);
          }
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_0;
          frame.push(arg0);
          frame.i64_extend_i32_u();
          frame.i64_const(20);
          frame.i64_mul();
          frame.i32_wrap_i64();
          if (frame.pop() != 0) break block_label_1;
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_load(2, 0);
        local0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(local0);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        local0 = frame.pop();
      }
      frame.i32_const(0xf5160);
      frame.push(local0);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
  }

  void _func142(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 40);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(40);
      frame.i32_add();
      {
        var t0 = frame.pop();
        _func099(t0);
      }
    }
  }

  void _func143(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 28);
      frame.i32_const(3);
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      {
        var t0 = frame.pop();
        _func140(t0);
      }
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      {
        var t0 = frame.pop();
        _func141(t0);
      }
    }
  }

  i32 _func144(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load8_u(0, 0);
    local1 = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.push(local1);
    frame.i32_const(2);
    frame.i32_shl();
    frame.i32_const(0xf5120);
    frame.i32_add();
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.i32_store(2, 4);
    block_label_0:
    {
      frame.i32_const(0);
      frame.i32_load(2, 0xf5328);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(23);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(44);
      frame.i32_add();
      frame.i32_const(6);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_const(3);
      frame.i64_store(2, 12);
      frame.push(local0);
      frame.i32_const(0xf4b58);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_store(2, 36);
      frame.push(local0);
      frame.i32_const(30);
      frame.i32_store(2, 60);
      frame.push(local0);
      frame.i32_const(0xf4aff);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4bc8);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
      }
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    return frame.pop();
  }

  i32 _func145(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  block_label_39:
                                                                                  {
                                                                                    block_label_40:
                                                                                    {
                                                                                      block_label_41:
                                                                                      {
                                                                                        block_label_42:
                                                                                        {
                                                                                          block_label_43:
                                                                                          {
                                                                                            block_label_44:
                                                                                            {
                                                                                              block_label_45:
                                                                                              {
                                                                                                block_label_46:
                                                                                                {
                                                                                                  block_label_47:
                                                                                                  {
                                                                                                    block_label_48:
                                                                                                    {
                                                                                                      block_label_49:
                                                                                                      {
                                                                                                        block_label_50:
                                                                                                        {
                                                                                                          block_label_51:
                                                                                                          {
                                                                                                            block_label_52:
                                                                                                            {
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_load(2, 0);
                                                                                                                arg0 = frame.peek();
                                                                                                                frame.i32_const(0x6ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) break block_label_53;
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(511);
                                                                                                                  frame.i32_gt_s();
                                                                                                                  if (frame.pop() != 0) break block_label_54;
                                                                                                                  block_label_55:
                                                                                                                  {
                                                                                                                    frame.push(arg0);
                                                                                                                    frame.i32_const(-256);
                                                                                                                    frame.i32_add();
                                                                                                                    var t0 = frame.pop();
                                                                                                                    switch (t0) {
                                                                                                                      case 0:
                                                                                                                        break block_label_49;
                                                                                                                      case 1:
                                                                                                                        break block_label_48;
                                                                                                                      case 2:
                                                                                                                        break block_label_47;
                                                                                                                      case 3:
                                                                                                                        break block_label_46;
                                                                                                                      case 4:
                                                                                                                        break block_label_45;
                                                                                                                      case 5:
                                                                                                                        break block_label_44;
                                                                                                                      case 6:
                                                                                                                        break block_label_43;
                                                                                                                      case 7:
                                                                                                                        break block_label_42;
                                                                                                                      case 8:
                                                                                                                        break block_label_41;
                                                                                                                      case 9:
                                                                                                                        break block_label_40;
                                                                                                                      case 10:
                                                                                                                        break block_label_39;
                                                                                                                      case 11:
                                                                                                                        break block_label_38;
                                                                                                                      case 12:
                                                                                                                        break block_label_37;
                                                                                                                      case 13:
                                                                                                                        break block_label_36;
                                                                                                                      default:
                                                                                                                        break block_label_55;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  frame.push(arg0);
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      break block_label_52;
                                                                                                                    case 1:
                                                                                                                      break block_label_51;
                                                                                                                    case 2:
                                                                                                                      break block_label_50;
                                                                                                                    default:
                                                                                                                      break block_label_52;
                                                                                                                  }
                                                                                                                }
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(0x3ff);
                                                                                                                  frame.i32_gt_s();
                                                                                                                  if (frame.pop() != 0) break block_label_54;
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(-512);
                                                                                                                  frame.i32_add();
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      break block_label_35;
                                                                                                                    case 1:
                                                                                                                      break block_label_34;
                                                                                                                    case 2:
                                                                                                                      break block_label_33;
                                                                                                                    case 3:
                                                                                                                      break block_label_32;
                                                                                                                    default:
                                                                                                                      break block_label_31;
                                                                                                                  }
                                                                                                                }
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(-0x400);
                                                                                                                  frame.i32_add();
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      break block_label_30;
                                                                                                                    case 1:
                                                                                                                      break block_label_29;
                                                                                                                    default:
                                                                                                                      break block_label_54;
                                                                                                                  }
                                                                                                                }
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x500);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    break block_label_28;
                                                                                                                  case 1:
                                                                                                                    break block_label_27;
                                                                                                                  default:
                                                                                                                    break block_label_26;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(0x7ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) break block_label_53;
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x700);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    break block_label_25;
                                                                                                                  case 1:
                                                                                                                    break block_label_24;
                                                                                                                  case 2:
                                                                                                                    break block_label_23;
                                                                                                                  case 3:
                                                                                                                    break block_label_22;
                                                                                                                  case 4:
                                                                                                                    break block_label_21;
                                                                                                                  case 5:
                                                                                                                    break block_label_20;
                                                                                                                  case 6:
                                                                                                                    break block_label_19;
                                                                                                                  case 7:
                                                                                                                    break block_label_18;
                                                                                                                  case 8:
                                                                                                                    break block_label_17;
                                                                                                                  default:
                                                                                                                    break block_label_25;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(0x8ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) break block_label_53;
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x800);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    break block_label_16;
                                                                                                                  case 1:
                                                                                                                    break block_label_15;
                                                                                                                  case 2:
                                                                                                                    break block_label_14;
                                                                                                                  case 3:
                                                                                                                    break block_label_13;
                                                                                                                  case 4:
                                                                                                                    break block_label_12;
                                                                                                                  case 5:
                                                                                                                    break block_label_11;
                                                                                                                  case 6:
                                                                                                                    break block_label_10;
                                                                                                                  case 7:
                                                                                                                    break block_label_9;
                                                                                                                  case 8:
                                                                                                                    break block_label_8;
                                                                                                                  default:
                                                                                                                    break block_label_16;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x900);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    break block_label_7;
                                                                                                                  case 1:
                                                                                                                    break block_label_6;
                                                                                                                  case 2:
                                                                                                                    break block_label_5;
                                                                                                                  default:
                                                                                                                    break block_label_53;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0xa00);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    break block_label_4;
                                                                                                                  case 1:
                                                                                                                    break block_label_3;
                                                                                                                  case 2:
                                                                                                                    break block_label_2;
                                                                                                                  default:
                                                                                                                    break block_label_53;
                                                                                                                }
                                                                                                              }
                                                                                                              frame.push(arg0);
                                                                                                              frame.i32_const(-0xb00);
                                                                                                              frame.i32_add();
                                                                                                              var t0 = frame.pop();
                                                                                                              switch (t0) {
                                                                                                                case 0:
                                                                                                                  break block_label_1;
                                                                                                                case 1:
                                                                                                                  break block_label_0;
                                                                                                                default:
                                                                                                                  break block_label_1;
                                                                                                              }
                                                                                                            }
                                                                                                            frame.push(arg1);
                                                                                                            frame.i32_load(2, 24);
                                                                                                            frame.i32_const(0xf5114);
                                                                                                            frame.i32_const(12);
                                                                                                            frame.push(arg1);
                                                                                                            frame.i32_const(28);
                                                                                                            frame.i32_add();
                                                                                                            frame.i32_load(2, 0);
                                                                                                            frame.i32_load(2, 12);
                                                                                                            {
                                                                                                              var func = table0[frame.pop()];
                                                                                                              if (func == null) throw Trap('uninitialized element');
                                                                                                              if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                                                                                              var t2 = frame.pop();
                                                                                                              var t1 = frame.pop();
                                                                                                              var t0 = frame.pop();
                                                                                                              frame.push(func(t0, t1, t2));
                                                                                                            }
                                                                                                            return frame.pop();
                                                                                                          }
                                                                                                          frame.push(arg1);
                                                                                                          frame.i32_load(2,
                                                                                                              24);
                                                                                                          frame.i32_const(0xf5106);
                                                                                                          frame.i32_const(14);
                                                                                                          frame.push(arg1);
                                                                                                          frame.i32_const(28);
                                                                                                          frame.i32_add();
                                                                                                          frame.i32_load(2,
                                                                                                              0);
                                                                                                          frame.i32_load(2,
                                                                                                              12);
                                                                                                          {
                                                                                                            var func = table0[frame.pop()];
                                                                                                            if (func == null)
                                                                                                              throw Trap('uninitialized element');
                                                                                                            if (func is! FunctionType0)
                                                                                                              throw Trap('indirect call type mismatch');
                                                                                                            var t2 = frame.pop();
                                                                                                            var t1 = frame.pop();
                                                                                                            var t0 = frame.pop();
                                                                                                            frame.push(func(t0, t1, t2));
                                                                                                          }
                                                                                                          return frame.pop();
                                                                                                        }
                                                                                                        frame.push(
                                                                                                            arg1);
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            24);
                                                                                                        frame.i32_const(
                                                                                                            0xf50f6);
                                                                                                        frame.i32_const(
                                                                                                            16);
                                                                                                        frame.push(
                                                                                                            arg1);
                                                                                                        frame.i32_const(
                                                                                                            28);
                                                                                                        frame
                                                                                                            .i32_add();
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            0);
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            12);
                                                                                                        {
                                                                                                          var func =
                                                                                                              table0[frame.pop()];
                                                                                                          if (func ==
                                                                                                              null)
                                                                                                            throw Trap('uninitialized element');
                                                                                                          if (func
                                                                                                              is! FunctionType0)
                                                                                                            throw Trap('indirect call type mismatch');
                                                                                                          var t2 =
                                                                                                              frame.pop();
                                                                                                          var t1 =
                                                                                                              frame.pop();
                                                                                                          var t0 =
                                                                                                              frame.pop();
                                                                                                          frame.push(func(
                                                                                                              t0,
                                                                                                              t1,
                                                                                                              t2));
                                                                                                        }
                                                                                                        return frame
                                                                                                            .pop();
                                                                                                      }
                                                                                                      frame.push(
                                                                                                          arg1);
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          24);
                                                                                                      frame.i32_const(
                                                                                                          0xf50df);
                                                                                                      frame.i32_const(
                                                                                                          23);
                                                                                                      frame.push(
                                                                                                          arg1);
                                                                                                      frame.i32_const(
                                                                                                          28);
                                                                                                      frame
                                                                                                          .i32_add();
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          0);
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          12);
                                                                                                      {
                                                                                                        var func =
                                                                                                            table0[frame.pop()];
                                                                                                        if (func ==
                                                                                                            null)
                                                                                                          throw Trap('uninitialized element');
                                                                                                        if (func
                                                                                                            is! FunctionType0)
                                                                                                          throw Trap('indirect call type mismatch');
                                                                                                        var t2 =
                                                                                                            frame.pop();
                                                                                                        var t1 =
                                                                                                            frame.pop();
                                                                                                        var t0 =
                                                                                                            frame.pop();
                                                                                                        frame.push(func(
                                                                                                            t0,
                                                                                                            t1,
                                                                                                            t2));
                                                                                                      }
                                                                                                      return frame
                                                                                                          .pop();
                                                                                                    }
                                                                                                    frame.push(
                                                                                                        arg1);
                                                                                                    frame.i32_load(
                                                                                                        2,
                                                                                                        24);
                                                                                                    frame.i32_const(
                                                                                                        0xf50c8);
                                                                                                    frame.i32_const(
                                                                                                        23);
                                                                                                    frame.push(
                                                                                                        arg1);
                                                                                                    frame.i32_const(
                                                                                                        28);
                                                                                                    frame
                                                                                                        .i32_add();
                                                                                                    frame.i32_load(
                                                                                                        2, 0);
                                                                                                    frame.i32_load(
                                                                                                        2,
                                                                                                        12);
                                                                                                    {
                                                                                                      var func =
                                                                                                          table0[frame.pop()];
                                                                                                      if (func ==
                                                                                                          null)
                                                                                                        throw Trap(
                                                                                                            'uninitialized element');
                                                                                                      if (func
                                                                                                          is! FunctionType0)
                                                                                                        throw Trap(
                                                                                                            'indirect call type mismatch');
                                                                                                      var t2 =
                                                                                                          frame.pop();
                                                                                                      var t1 =
                                                                                                          frame.pop();
                                                                                                      var t0 =
                                                                                                          frame.pop();
                                                                                                      frame.push(func(
                                                                                                          t0,
                                                                                                          t1,
                                                                                                          t2));
                                                                                                    }
                                                                                                    return frame
                                                                                                        .pop();
                                                                                                  }
                                                                                                  frame.push(
                                                                                                      arg1);
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          24);
                                                                                                  frame.i32_const(
                                                                                                      0xf50b2);
                                                                                                  frame
                                                                                                      .i32_const(
                                                                                                          22);
                                                                                                  frame.push(
                                                                                                      arg1);
                                                                                                  frame
                                                                                                      .i32_const(
                                                                                                          28);
                                                                                                  frame
                                                                                                      .i32_add();
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          0);
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          12);
                                                                                                  {
                                                                                                    var func =
                                                                                                        table0[
                                                                                                            frame.pop()];
                                                                                                    if (func ==
                                                                                                        null)
                                                                                                      throw Trap(
                                                                                                          'uninitialized element');
                                                                                                    if (func
                                                                                                        is! FunctionType0)
                                                                                                      throw Trap(
                                                                                                          'indirect call type mismatch');
                                                                                                    var t2 = frame
                                                                                                        .pop();
                                                                                                    var t1 = frame
                                                                                                        .pop();
                                                                                                    var t0 = frame
                                                                                                        .pop();
                                                                                                    frame.push(func(
                                                                                                        t0,
                                                                                                        t1,
                                                                                                        t2));
                                                                                                  }
                                                                                                  return frame
                                                                                                      .pop();
                                                                                                }
                                                                                                frame.push(
                                                                                                    arg1);
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2,
                                                                                                        24);
                                                                                                frame.i32_const(
                                                                                                    0xf509d);
                                                                                                frame
                                                                                                    .i32_const(
                                                                                                        21);
                                                                                                frame.push(
                                                                                                    arg1);
                                                                                                frame
                                                                                                    .i32_const(
                                                                                                        28);
                                                                                                frame
                                                                                                    .i32_add();
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2, 0);
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2,
                                                                                                        12);
                                                                                                {
                                                                                                  var func =
                                                                                                      table0[frame
                                                                                                          .pop()];
                                                                                                  if (func ==
                                                                                                      null)
                                                                                                    throw Trap(
                                                                                                        'uninitialized element');
                                                                                                  if (func
                                                                                                      is! FunctionType0)
                                                                                                    throw Trap(
                                                                                                        'indirect call type mismatch');
                                                                                                  var t2 = frame
                                                                                                      .pop();
                                                                                                  var t1 = frame
                                                                                                      .pop();
                                                                                                  var t0 = frame
                                                                                                      .pop();
                                                                                                  frame.push(
                                                                                                      func(
                                                                                                          t0,
                                                                                                          t1,
                                                                                                          t2));
                                                                                                }
                                                                                                return frame
                                                                                                    .pop();
                                                                                              }
                                                                                              frame
                                                                                                  .push(arg1);
                                                                                              frame.i32_load(
                                                                                                  2, 24);
                                                                                              frame.i32_const(
                                                                                                  0xf5089);
                                                                                              frame.i32_const(
                                                                                                  20);
                                                                                              frame
                                                                                                  .push(arg1);
                                                                                              frame.i32_const(
                                                                                                  28);
                                                                                              frame.i32_add();
                                                                                              frame.i32_load(
                                                                                                  2, 0);
                                                                                              frame.i32_load(
                                                                                                  2, 12);
                                                                                              {
                                                                                                var func =
                                                                                                    table0[frame
                                                                                                        .pop()];
                                                                                                if (func ==
                                                                                                    null)
                                                                                                  throw Trap(
                                                                                                      'uninitialized element');
                                                                                                if (func
                                                                                                    is! FunctionType0)
                                                                                                  throw Trap(
                                                                                                      'indirect call type mismatch');
                                                                                                var t2 = frame
                                                                                                    .pop();
                                                                                                var t1 = frame
                                                                                                    .pop();
                                                                                                var t0 = frame
                                                                                                    .pop();
                                                                                                frame.push(
                                                                                                    func(
                                                                                                        t0,
                                                                                                        t1,
                                                                                                        t2));
                                                                                              }
                                                                                              return frame
                                                                                                  .pop();
                                                                                            }
                                                                                            frame.push(arg1);
                                                                                            frame.i32_load(
                                                                                                2, 24);
                                                                                            frame.i32_const(
                                                                                                0xf5070);
                                                                                            frame.i32_const(
                                                                                                25);
                                                                                            frame.push(arg1);
                                                                                            frame.i32_const(
                                                                                                28);
                                                                                            frame.i32_add();
                                                                                            frame.i32_load(
                                                                                                2, 0);
                                                                                            frame.i32_load(
                                                                                                2, 12);
                                                                                            {
                                                                                              var func =
                                                                                                  table0[frame
                                                                                                      .pop()];
                                                                                              if (func ==
                                                                                                  null)
                                                                                                throw Trap(
                                                                                                    'uninitialized element');
                                                                                              if (func
                                                                                                  is! FunctionType0)
                                                                                                throw Trap(
                                                                                                    'indirect call type mismatch');
                                                                                              var t2 =
                                                                                                  frame.pop();
                                                                                              var t1 =
                                                                                                  frame.pop();
                                                                                              var t0 =
                                                                                                  frame.pop();
                                                                                              frame.push(func(
                                                                                                  t0,
                                                                                                  t1,
                                                                                                  t2));
                                                                                            }
                                                                                            return frame
                                                                                                .pop();
                                                                                          }
                                                                                          frame.push(arg1);
                                                                                          frame.i32_load(
                                                                                              2, 24);
                                                                                          frame.i32_const(
                                                                                              0xf5057);
                                                                                          frame.i32_const(25);
                                                                                          frame.push(arg1);
                                                                                          frame.i32_const(28);
                                                                                          frame.i32_add();
                                                                                          frame.i32_load(
                                                                                              2, 0);
                                                                                          frame.i32_load(
                                                                                              2, 12);
                                                                                          {
                                                                                            var func = table0[
                                                                                                frame.pop()];
                                                                                            if (func == null)
                                                                                              throw Trap(
                                                                                                  'uninitialized element');
                                                                                            if (func
                                                                                                is! FunctionType0)
                                                                                              throw Trap(
                                                                                                  'indirect call type mismatch');
                                                                                            var t2 =
                                                                                                frame.pop();
                                                                                            var t1 =
                                                                                                frame.pop();
                                                                                            var t0 =
                                                                                                frame.pop();
                                                                                            frame.push(func(
                                                                                                t0, t1, t2));
                                                                                          }
                                                                                          return frame.pop();
                                                                                        }
                                                                                        frame.push(arg1);
                                                                                        frame.i32_load(2, 24);
                                                                                        frame.i32_const(
                                                                                            0xf5040);
                                                                                        frame.i32_const(23);
                                                                                        frame.push(arg1);
                                                                                        frame.i32_const(28);
                                                                                        frame.i32_add();
                                                                                        frame.i32_load(2, 0);
                                                                                        frame.i32_load(2, 12);
                                                                                        {
                                                                                          var func = table0[
                                                                                              frame.pop()];
                                                                                          if (func == null)
                                                                                            throw Trap(
                                                                                                'uninitialized element');
                                                                                          if (func
                                                                                              is! FunctionType0)
                                                                                            throw Trap(
                                                                                                'indirect call type mismatch');
                                                                                          var t2 =
                                                                                              frame.pop();
                                                                                          var t1 =
                                                                                              frame.pop();
                                                                                          var t0 =
                                                                                              frame.pop();
                                                                                          frame.push(func(
                                                                                              t0, t1, t2));
                                                                                        }
                                                                                        return frame.pop();
                                                                                      }
                                                                                      frame.push(arg1);
                                                                                      frame.i32_load(2, 24);
                                                                                      frame
                                                                                          .i32_const(0xf5029);
                                                                                      frame.i32_const(23);
                                                                                      frame.push(arg1);
                                                                                      frame.i32_const(28);
                                                                                      frame.i32_add();
                                                                                      frame.i32_load(2, 0);
                                                                                      frame.i32_load(2, 12);
                                                                                      {
                                                                                        var func = table0[
                                                                                            frame.pop()];
                                                                                        if (func == null)
                                                                                          throw Trap(
                                                                                              'uninitialized element');
                                                                                        if (func
                                                                                            is! FunctionType0)
                                                                                          throw Trap(
                                                                                              'indirect call type mismatch');
                                                                                        var t2 = frame.pop();
                                                                                        var t1 = frame.pop();
                                                                                        var t0 = frame.pop();
                                                                                        frame.push(
                                                                                            func(t0, t1, t2));
                                                                                      }
                                                                                      return frame.pop();
                                                                                    }
                                                                                    frame.push(arg1);
                                                                                    frame.i32_load(2, 24);
                                                                                    frame.i32_const(0xf5014);
                                                                                    frame.i32_const(21);
                                                                                    frame.push(arg1);
                                                                                    frame.i32_const(28);
                                                                                    frame.i32_add();
                                                                                    frame.i32_load(2, 0);
                                                                                    frame.i32_load(2, 12);
                                                                                    {
                                                                                      var func =
                                                                                          table0[frame.pop()];
                                                                                      if (func == null)
                                                                                        throw Trap(
                                                                                            'uninitialized element');
                                                                                      if (func
                                                                                          is! FunctionType0)
                                                                                        throw Trap(
                                                                                            'indirect call type mismatch');
                                                                                      var t2 = frame.pop();
                                                                                      var t1 = frame.pop();
                                                                                      var t0 = frame.pop();
                                                                                      frame.push(
                                                                                          func(t0, t1, t2));
                                                                                    }
                                                                                    return frame.pop();
                                                                                  }
                                                                                  frame.push(arg1);
                                                                                  frame.i32_load(2, 24);
                                                                                  frame.i32_const(0xf5005);
                                                                                  frame.i32_const(15);
                                                                                  frame.push(arg1);
                                                                                  frame.i32_const(28);
                                                                                  frame.i32_add();
                                                                                  frame.i32_load(2, 0);
                                                                                  frame.i32_load(2, 12);
                                                                                  {
                                                                                    var func =
                                                                                        table0[frame.pop()];
                                                                                    if (func == null)
                                                                                      throw Trap(
                                                                                          'uninitialized element');
                                                                                    if (func
                                                                                        is! FunctionType0)
                                                                                      throw Trap(
                                                                                          'indirect call type mismatch');
                                                                                    var t2 = frame.pop();
                                                                                    var t1 = frame.pop();
                                                                                    var t0 = frame.pop();
                                                                                    frame.push(
                                                                                        func(t0, t1, t2));
                                                                                  }
                                                                                  return frame.pop();
                                                                                }
                                                                                frame.push(arg1);
                                                                                frame.i32_load(2, 24);
                                                                                frame.i32_const(0xf4ffa);
                                                                                frame.i32_const(11);
                                                                                frame.push(arg1);
                                                                                frame.i32_const(28);
                                                                                frame.i32_add();
                                                                                frame.i32_load(2, 0);
                                                                                frame.i32_load(2, 12);
                                                                                {
                                                                                  var func =
                                                                                      table0[frame.pop()];
                                                                                  if (func == null)
                                                                                    throw Trap(
                                                                                        'uninitialized element');
                                                                                  if (func is! FunctionType0)
                                                                                    throw Trap(
                                                                                        'indirect call type mismatch');
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame
                                                                                      .push(func(t0, t1, t2));
                                                                                }
                                                                                return frame.pop();
                                                                              }
                                                                              frame.push(arg1);
                                                                              frame.i32_load(2, 24);
                                                                              frame.i32_const(0xf4fda);
                                                                              frame.i32_const(32);
                                                                              frame.push(arg1);
                                                                              frame.i32_const(28);
                                                                              frame.i32_add();
                                                                              frame.i32_load(2, 0);
                                                                              frame.i32_load(2, 12);
                                                                              {
                                                                                var func =
                                                                                    table0[frame.pop()];
                                                                                if (func == null)
                                                                                  throw Trap(
                                                                                      'uninitialized element');
                                                                                if (func is! FunctionType0)
                                                                                  throw Trap(
                                                                                      'indirect call type mismatch');
                                                                                var t2 = frame.pop();
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                frame.push(func(t0, t1, t2));
                                                                              }
                                                                              return frame.pop();
                                                                            }
                                                                            frame.push(arg1);
                                                                            frame.i32_load(2, 24);
                                                                            frame.i32_const(0xf4fbe);
                                                                            frame.i32_const(28);
                                                                            frame.push(arg1);
                                                                            frame.i32_const(28);
                                                                            frame.i32_add();
                                                                            frame.i32_load(2, 0);
                                                                            frame.i32_load(2, 12);
                                                                            {
                                                                              var func = table0[frame.pop()];
                                                                              if (func == null)
                                                                                throw Trap(
                                                                                    'uninitialized element');
                                                                              if (func is! FunctionType0)
                                                                                throw Trap(
                                                                                    'indirect call type mismatch');
                                                                              var t2 = frame.pop();
                                                                              var t1 = frame.pop();
                                                                              var t0 = frame.pop();
                                                                              frame.push(func(t0, t1, t2));
                                                                            }
                                                                            return frame.pop();
                                                                          }
                                                                          frame.push(arg1);
                                                                          frame.i32_load(2, 24);
                                                                          frame.i32_const(0xf4fa4);
                                                                          frame.i32_const(26);
                                                                          frame.push(arg1);
                                                                          frame.i32_const(28);
                                                                          frame.i32_add();
                                                                          frame.i32_load(2, 0);
                                                                          frame.i32_load(2, 12);
                                                                          {
                                                                            var func = table0[frame.pop()];
                                                                            if (func == null)
                                                                              throw Trap(
                                                                                  'uninitialized element');
                                                                            if (func is! FunctionType0)
                                                                              throw Trap(
                                                                                  'indirect call type mismatch');
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(func(t0, t1, t2));
                                                                          }
                                                                          return frame.pop();
                                                                        }
                                                                        frame.push(arg1);
                                                                        frame.i32_load(2, 24);
                                                                        frame.i32_const(0xf4f8b);
                                                                        frame.i32_const(25);
                                                                        frame.push(arg1);
                                                                        frame.i32_const(28);
                                                                        frame.i32_add();
                                                                        frame.i32_load(2, 0);
                                                                        frame.i32_load(2, 12);
                                                                        {
                                                                          var func = table0[frame.pop()];
                                                                          if (func == null)
                                                                            throw Trap(
                                                                                'uninitialized element');
                                                                          if (func is! FunctionType0)
                                                                            throw Trap(
                                                                                'indirect call type mismatch');
                                                                          var t2 = frame.pop();
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          frame.push(func(t0, t1, t2));
                                                                        }
                                                                        return frame.pop();
                                                                      }
                                                                      frame.push(arg1);
                                                                      frame.i32_load(2, 24);
                                                                      frame.i32_const(0xf4f74);
                                                                      frame.i32_const(23);
                                                                      frame.push(arg1);
                                                                      frame.i32_const(28);
                                                                      frame.i32_add();
                                                                      frame.i32_load(2, 0);
                                                                      frame.i32_load(2, 12);
                                                                      {
                                                                        var func = table0[frame.pop()];
                                                                        if (func == null)
                                                                          throw Trap('uninitialized element');
                                                                        if (func is! FunctionType0)
                                                                          throw Trap(
                                                                              'indirect call type mismatch');
                                                                        var t2 = frame.pop();
                                                                        var t1 = frame.pop();
                                                                        var t0 = frame.pop();
                                                                        frame.push(func(t0, t1, t2));
                                                                      }
                                                                      return frame.pop();
                                                                    }
                                                                    frame.push(arg1);
                                                                    frame.i32_load(2, 24);
                                                                    frame.i32_const(0xf4f5a);
                                                                    frame.i32_const(26);
                                                                    frame.push(arg1);
                                                                    frame.i32_const(28);
                                                                    frame.i32_add();
                                                                    frame.i32_load(2, 0);
                                                                    frame.i32_load(2, 12);
                                                                    {
                                                                      var func = table0[frame.pop()];
                                                                      if (func == null)
                                                                        throw Trap('uninitialized element');
                                                                      if (func is! FunctionType0)
                                                                        throw Trap(
                                                                            'indirect call type mismatch');
                                                                      var t2 = frame.pop();
                                                                      var t1 = frame.pop();
                                                                      var t0 = frame.pop();
                                                                      frame.push(func(t0, t1, t2));
                                                                    }
                                                                    return frame.pop();
                                                                  }
                                                                  frame.push(arg1);
                                                                  frame.i32_load(2, 24);
                                                                  frame.i32_const(0xf4f43);
                                                                  frame.i32_const(23);
                                                                  frame.push(arg1);
                                                                  frame.i32_const(28);
                                                                  frame.i32_add();
                                                                  frame.i32_load(2, 0);
                                                                  frame.i32_load(2, 12);
                                                                  {
                                                                    var func = table0[frame.pop()];
                                                                    if (func == null)
                                                                      throw Trap('uninitialized element');
                                                                    if (func is! FunctionType0)
                                                                      throw Trap(
                                                                          'indirect call type mismatch');
                                                                    var t2 = frame.pop();
                                                                    var t1 = frame.pop();
                                                                    var t0 = frame.pop();
                                                                    frame.push(func(t0, t1, t2));
                                                                  }
                                                                  return frame.pop();
                                                                }
                                                                frame.push(arg1);
                                                                frame.i32_load(2, 24);
                                                                frame.i32_const(0xf4f27);
                                                                frame.i32_const(28);
                                                                frame.push(arg1);
                                                                frame.i32_const(28);
                                                                frame.i32_add();
                                                                frame.i32_load(2, 0);
                                                                frame.i32_load(2, 12);
                                                                {
                                                                  var func = table0[frame.pop()];
                                                                  if (func == null)
                                                                    throw Trap('uninitialized element');
                                                                  if (func is! FunctionType0)
                                                                    throw Trap('indirect call type mismatch');
                                                                  var t2 = frame.pop();
                                                                  var t1 = frame.pop();
                                                                  var t0 = frame.pop();
                                                                  frame.push(func(t0, t1, t2));
                                                                }
                                                                return frame.pop();
                                                              }
                                                              frame.push(arg1);
                                                              frame.i32_load(2, 24);
                                                              frame.i32_const(0xf4eff);
                                                              frame.i32_const(40);
                                                              frame.push(arg1);
                                                              frame.i32_const(28);
                                                              frame.i32_add();
                                                              frame.i32_load(2, 0);
                                                              frame.i32_load(2, 12);
                                                              {
                                                                var func = table0[frame.pop()];
                                                                if (func == null)
                                                                  throw Trap('uninitialized element');
                                                                if (func is! FunctionType0)
                                                                  throw Trap('indirect call type mismatch');
                                                                var t2 = frame.pop();
                                                                var t1 = frame.pop();
                                                                var t0 = frame.pop();
                                                                frame.push(func(t0, t1, t2));
                                                              }
                                                              return frame.pop();
                                                            }
                                                            frame.push(arg1);
                                                            frame.i32_load(2, 24);
                                                            frame.i32_const(0xf4ee9);
                                                            frame.i32_const(22);
                                                            frame.push(arg1);
                                                            frame.i32_const(28);
                                                            frame.i32_add();
                                                            frame.i32_load(2, 0);
                                                            frame.i32_load(2, 12);
                                                            {
                                                              var func = table0[frame.pop()];
                                                              if (func == null)
                                                                throw Trap('uninitialized element');
                                                              if (func is! FunctionType0)
                                                                throw Trap('indirect call type mismatch');
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              frame.push(func(t0, t1, t2));
                                                            }
                                                            return frame.pop();
                                                          }
                                                          frame.push(arg1);
                                                          frame.i32_load(2, 24);
                                                          frame.i32_const(0xf4ed2);
                                                          frame.i32_const(23);
                                                          frame.push(arg1);
                                                          frame.i32_const(28);
                                                          frame.i32_add();
                                                          frame.i32_load(2, 0);
                                                          frame.i32_load(2, 12);
                                                          {
                                                            var func = table0[frame.pop()];
                                                            if (func == null)
                                                              throw Trap('uninitialized element');
                                                            if (func is! FunctionType0)
                                                              throw Trap('indirect call type mismatch');
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            frame.push(func(t0, t1, t2));
                                                          }
                                                          return frame.pop();
                                                        }
                                                        frame.push(arg1);
                                                        frame.i32_load(2, 24);
                                                        frame.i32_const(0xf4ec0);
                                                        frame.i32_const(18);
                                                        frame.push(arg1);
                                                        frame.i32_const(28);
                                                        frame.i32_add();
                                                        frame.i32_load(2, 0);
                                                        frame.i32_load(2, 12);
                                                        {
                                                          var func = table0[frame.pop()];
                                                          if (func == null)
                                                            throw Trap('uninitialized element');
                                                          if (func is! FunctionType0)
                                                            throw Trap('indirect call type mismatch');
                                                          var t2 = frame.pop();
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          frame.push(func(t0, t1, t2));
                                                        }
                                                        return frame.pop();
                                                      }
                                                      frame.push(arg1);
                                                      frame.i32_load(2, 24);
                                                      frame.i32_const(0xf4eae);
                                                      frame.i32_const(18);
                                                      frame.push(arg1);
                                                      frame.i32_const(28);
                                                      frame.i32_add();
                                                      frame.i32_load(2, 0);
                                                      frame.i32_load(2, 12);
                                                      {
                                                        var func = table0[frame.pop()];
                                                        if (func == null) throw Trap('uninitialized element');
                                                        if (func is! FunctionType0)
                                                          throw Trap('indirect call type mismatch');
                                                        var t2 = frame.pop();
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        frame.push(func(t0, t1, t2));
                                                      }
                                                      return frame.pop();
                                                    }
                                                    frame.push(arg1);
                                                    frame.i32_load(2, 24);
                                                    frame.i32_const(0xf4e99);
                                                    frame.i32_const(21);
                                                    frame.push(arg1);
                                                    frame.i32_const(28);
                                                    frame.i32_add();
                                                    frame.i32_load(2, 0);
                                                    frame.i32_load(2, 12);
                                                    {
                                                      var func = table0[frame.pop()];
                                                      if (func == null) throw Trap('uninitialized element');
                                                      if (func is! FunctionType0)
                                                        throw Trap('indirect call type mismatch');
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      frame.push(func(t0, t1, t2));
                                                    }
                                                    return frame.pop();
                                                  }
                                                  frame.push(arg1);
                                                  frame.i32_load(2, 24);
                                                  frame.i32_const(0xf4e83);
                                                  frame.i32_const(22);
                                                  frame.push(arg1);
                                                  frame.i32_const(28);
                                                  frame.i32_add();
                                                  frame.i32_load(2, 0);
                                                  frame.i32_load(2, 12);
                                                  {
                                                    var func = table0[frame.pop()];
                                                    if (func == null) throw Trap('uninitialized element');
                                                    if (func is! FunctionType0)
                                                      throw Trap('indirect call type mismatch');
                                                    var t2 = frame.pop();
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    frame.push(func(t0, t1, t2));
                                                  }
                                                  return frame.pop();
                                                }
                                                frame.push(arg1);
                                                frame.i32_load(2, 24);
                                                frame.i32_const(0xf4e6c);
                                                frame.i32_const(23);
                                                frame.push(arg1);
                                                frame.i32_const(28);
                                                frame.i32_add();
                                                frame.i32_load(2, 0);
                                                frame.i32_load(2, 12);
                                                {
                                                  var func = table0[frame.pop()];
                                                  if (func == null) throw Trap('uninitialized element');
                                                  if (func is! FunctionType0)
                                                    throw Trap('indirect call type mismatch');
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  frame.push(func(t0, t1, t2));
                                                }
                                                return frame.pop();
                                              }
                                              frame.push(arg1);
                                              frame.i32_load(2, 24);
                                              frame.i32_const(0xf4e55);
                                              frame.i32_const(23);
                                              frame.push(arg1);
                                              frame.i32_const(28);
                                              frame.i32_add();
                                              frame.i32_load(2, 0);
                                              frame.i32_load(2, 12);
                                              {
                                                var func = table0[frame.pop()];
                                                if (func == null) throw Trap('uninitialized element');
                                                if (func is! FunctionType0)
                                                  throw Trap('indirect call type mismatch');
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                frame.push(func(t0, t1, t2));
                                              }
                                              return frame.pop();
                                            }
                                            frame.push(arg1);
                                            frame.i32_load(2, 24);
                                            frame.i32_const(0xf4e38);
                                            frame.i32_const(29);
                                            frame.push(arg1);
                                            frame.i32_const(28);
                                            frame.i32_add();
                                            frame.i32_load(2, 0);
                                            frame.i32_load(2, 12);
                                            {
                                              var func = table0[frame.pop()];
                                              if (func == null) throw Trap('uninitialized element');
                                              if (func is! FunctionType0)
                                                throw Trap('indirect call type mismatch');
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              frame.push(func(t0, t1, t2));
                                            }
                                            return frame.pop();
                                          }
                                          frame.push(arg1);
                                          frame.i32_load(2, 24);
                                          frame.i32_const(0xf4e1f);
                                          frame.i32_const(25);
                                          frame.push(arg1);
                                          frame.i32_const(28);
                                          frame.i32_add();
                                          frame.i32_load(2, 0);
                                          frame.i32_load(2, 12);
                                          {
                                            var func = table0[frame.pop()];
                                            if (func == null) throw Trap('uninitialized element');
                                            if (func is! FunctionType0)
                                              throw Trap('indirect call type mismatch');
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            frame.push(func(t0, t1, t2));
                                          }
                                          return frame.pop();
                                        }
                                        frame.push(arg1);
                                        frame.i32_load(2, 24);
                                        frame.i32_const(0xf4e07);
                                        frame.i32_const(24);
                                        frame.push(arg1);
                                        frame.i32_const(28);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        frame.i32_load(2, 12);
                                        {
                                          var func = table0[frame.pop()];
                                          if (func == null) throw Trap('uninitialized element');
                                          if (func is! FunctionType0)
                                            throw Trap('indirect call type mismatch');
                                          var t2 = frame.pop();
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          frame.push(func(t0, t1, t2));
                                        }
                                        return frame.pop();
                                      }
                                      frame.push(arg1);
                                      frame.i32_load(2, 24);
                                      frame.i32_const(0xf4df3);
                                      frame.i32_const(20);
                                      frame.push(arg1);
                                      frame.i32_const(28);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      frame.i32_load(2, 12);
                                      {
                                        var func = table0[frame.pop()];
                                        if (func == null) throw Trap('uninitialized element');
                                        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                        var t2 = frame.pop();
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        frame.push(func(t0, t1, t2));
                                      }
                                      return frame.pop();
                                    }
                                    frame.push(arg1);
                                    frame.i32_load(2, 24);
                                    frame.i32_const(0xf4ddf);
                                    frame.i32_const(20);
                                    frame.push(arg1);
                                    frame.i32_const(28);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    frame.i32_load(2, 12);
                                    {
                                      var func = table0[frame.pop()];
                                      if (func == null) throw Trap('uninitialized element');
                                      if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(func(t0, t1, t2));
                                    }
                                    return frame.pop();
                                  }
                                  frame.push(arg1);
                                  frame.i32_load(2, 24);
                                  frame.i32_const(0xf4dc1);
                                  frame.i32_const(30);
                                  frame.push(arg1);
                                  frame.i32_const(28);
                                  frame.i32_add();
                                  frame.i32_load(2, 0);
                                  frame.i32_load(2, 12);
                                  {
                                    var func = table0[frame.pop()];
                                    if (func == null) throw Trap('uninitialized element');
                                    if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(func(t0, t1, t2));
                                  }
                                  return frame.pop();
                                }
                                frame.push(arg1);
                                frame.i32_load(2, 24);
                                frame.i32_const(0xf4dac);
                                frame.i32_const(21);
                                frame.push(arg1);
                                frame.i32_const(28);
                                frame.i32_add();
                                frame.i32_load(2, 0);
                                frame.i32_load(2, 12);
                                {
                                  var func = table0[frame.pop()];
                                  if (func == null) throw Trap('uninitialized element');
                                  if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  frame.push(func(t0, t1, t2));
                                }
                                return frame.pop();
                              }
                              frame.push(arg1);
                              frame.i32_load(2, 24);
                              frame.i32_const(0xf4d8f);
                              frame.i32_const(29);
                              frame.push(arg1);
                              frame.i32_const(28);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              frame.i32_load(2, 12);
                              {
                                var func = table0[frame.pop()];
                                if (func == null) throw Trap('uninitialized element');
                                if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                frame.push(func(t0, t1, t2));
                              }
                              return frame.pop();
                            }
                            frame.push(arg1);
                            frame.i32_load(2, 24);
                            frame.i32_const(0xf4d70);
                            frame.i32_const(31);
                            frame.push(arg1);
                            frame.i32_const(28);
                            frame.i32_add();
                            frame.i32_load(2, 0);
                            frame.i32_load(2, 12);
                            {
                              var func = table0[frame.pop()];
                              if (func == null) throw Trap('uninitialized element');
                              if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              frame.push(func(t0, t1, t2));
                            }
                            return frame.pop();
                          }
                          frame.push(arg1);
                          frame.i32_load(2, 24);
                          frame.i32_const(0xf4d4f);
                          frame.i32_const(33);
                          frame.push(arg1);
                          frame.i32_const(28);
                          frame.i32_add();
                          frame.i32_load(2, 0);
                          frame.i32_load(2, 12);
                          {
                            var func = table0[frame.pop()];
                            if (func == null) throw Trap('uninitialized element');
                            if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                            var t2 = frame.pop();
                            var t1 = frame.pop();
                            var t0 = frame.pop();
                            frame.push(func(t0, t1, t2));
                          }
                          return frame.pop();
                        }
                        frame.push(arg1);
                        frame.i32_load(2, 24);
                        frame.i32_const(0xf4d30);
                        frame.i32_const(31);
                        frame.push(arg1);
                        frame.i32_const(28);
                        frame.i32_add();
                        frame.i32_load(2, 0);
                        frame.i32_load(2, 12);
                        {
                          var func = table0[frame.pop()];
                          if (func == null) throw Trap('uninitialized element');
                          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(func(t0, t1, t2));
                        }
                        return frame.pop();
                      }
                      frame.push(arg1);
                      frame.i32_load(2, 24);
                      frame.i32_const(0xf4d17);
                      frame.i32_const(25);
                      frame.push(arg1);
                      frame.i32_const(28);
                      frame.i32_add();
                      frame.i32_load(2, 0);
                      frame.i32_load(2, 12);
                      {
                        var func = table0[frame.pop()];
                        if (func == null) throw Trap('uninitialized element');
                        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        frame.push(func(t0, t1, t2));
                      }
                      return frame.pop();
                    }
                    frame.push(arg1);
                    frame.i32_load(2, 24);
                    frame.i32_const(0xf4cf8);
                    frame.i32_const(31);
                    frame.push(arg1);
                    frame.i32_const(28);
                    frame.i32_add();
                    frame.i32_load(2, 0);
                    frame.i32_load(2, 12);
                    {
                      var func = table0[frame.pop()];
                      if (func == null) throw Trap('uninitialized element');
                      if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                      var t2 = frame.pop();
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      frame.push(func(t0, t1, t2));
                    }
                    return frame.pop();
                  }
                  frame.push(arg1);
                  frame.i32_load(2, 24);
                  frame.i32_const(0xf4ce4);
                  frame.i32_const(20);
                  frame.push(arg1);
                  frame.i32_const(28);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  frame.i32_load(2, 12);
                  {
                    var func = table0[frame.pop()];
                    if (func == null) throw Trap('uninitialized element');
                    if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    frame.push(func(t0, t1, t2));
                  }
                  return frame.pop();
                }
                frame.push(arg1);
                frame.i32_load(2, 24);
                frame.i32_const(0xf4ccc);
                frame.i32_const(24);
                frame.push(arg1);
                frame.i32_const(28);
                frame.i32_add();
                frame.i32_load(2, 0);
                frame.i32_load(2, 12);
                {
                  var func = table0[frame.pop()];
                  if (func == null) throw Trap('uninitialized element');
                  if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1, t2));
                }
                return frame.pop();
              }
              frame.push(arg1);
              frame.i32_load(2, 24);
              frame.i32_const(0xf4cb8);
              frame.i32_const(20);
              frame.push(arg1);
              frame.i32_const(28);
              frame.i32_add();
              frame.i32_load(2, 0);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType0) throw Trap('indirect call type mismatch');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              return frame.pop();
            }
            frame.push(arg1);
            frame.i32_load(2, 24);
            frame.i32_const(0xf4c9a);
            frame.i32_const(30);
            frame.push(arg1);
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType0) throw Trap('indirect call type mismatch');
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1, t2));
            }
            return frame.pop();
          }
          frame.push(arg1);
          frame.i32_load(2, 24);
          frame.i32_const(0xf4c80);
          frame.i32_const(26);
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType0) throw Trap('indirect call type mismatch');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          return frame.pop();
        }
        frame.push(arg1);
        frame.i32_load(2, 24);
        frame.i32_const(0xf4c67);
        frame.i32_const(25);
        frame.push(arg1);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()];
          if (func == null) throw Trap('uninitialized element');
          if (func is! FunctionType0) throw Trap('indirect call type mismatch');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg1);
      frame.i32_load(2, 24);
      frame.i32_const(0xf4c49);
      frame.i32_const(30);
      frame.push(arg1);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType0) throw Trap('indirect call type mismatch');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_load(2, 24);
    frame.i32_const(0xf4c30);
    frame.i32_const(25);
    frame.push(arg1);
    frame.i32_const(28);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()];
      if (func == null) throw Trap('uninitialized element');
      if (func is! FunctionType0) throw Trap('indirect call type mismatch');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func146(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(1);
    return frame.pop();
  }

  void _func147(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.i32_const(3);
        frame.i32_lt_u();
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(36);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_const(25);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.push(local1);
        frame.i32_store(2, 56);
        frame.push(local0);
        frame.i64_const(2);
        frame.i64_store(2, 20);
        frame.push(local0);
        frame.i32_const(0xf4bf8);
        frame.i32_store(2, 16);
        frame.push(local0);
        frame.i32_const(26);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_store(2, 60);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_store(2, 32);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(60);
        frame.i32_add();
        frame.i32_store(2, 48);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(56);
        frame.i32_add();
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN5alloc3fmt6format17h02f2f8599a399bc1E(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 0);
        arg1 = frame.peek();
        frame.push(local0);
        frame.i32_load(2, 8);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          envImports.log_js(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.i32_eqz();
        if (frame.pop() != 0) break block_label_0;
        frame.i32_const(0xf5160);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func018(t0, t1);
        }
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(36);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(25);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.push(local1);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i64_const(2);
      frame.i64_store(2, 20);
      frame.push(local0);
      frame.i32_const(0xf4bf8);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(26);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 60);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(60);
      frame.i32_add();
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc3fmt6format17h02f2f8599a399bc1E(t0, t1);
      }
      frame.push(local0);
      frame.i32_load(2, 0);
      arg1 = frame.peek();
      frame.push(local0);
      frame.i32_load(2, 8);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        envImports.warn_js(t0, t1);
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func148(i32 arg0) {
    final frame = Frame(this);
  }

  void _icu4x_init() {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    frame.i32_const(0);
    frame.i32_load(2, 0xf5324);
    local0 = frame.peek();
    frame.i32_const(1);
    frame.push(local0);
    frame.select();
    frame.i32_store(2, 0xf5324);
    block_label_0:
    {
      frame.push(local0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      block_label_1:
      {
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) break block_label_1;

        loop_label_2:
        for (;;) {
          frame.i32_const(0);
          frame.i32_load(2, 0xf5324);
          frame.i32_const(1);
          frame.i32_eq();
          if (frame.pop() != 0) continue loop_label_2;
          break;
        }
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(0);
    frame.i32_const(0xf4c14);
    frame.i32_store(2, 0xf515c);
    frame.i32_const(0);
    frame.i32_const(0xf4c08);
    frame.i32_store(2, 0xf5158);
    frame.i32_const(0);
    frame.i32_const(2);
    frame.i32_store(2, 0xf5324);
    frame.i32_const(0);
    frame.i32_const(4);
    frame.i32_store(2, 0xf5328);
  }

  void _ICU4XFixedDecimalFormatter_create_with_grouping_strategy(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;
    i32 local24 = 0;
    i32 local25 = 0;
    i32 local26 = 0;
    i32 local27 = 0;
    i32 local28 = 0;
    i32 local29 = 0;
    i32 local30 = 0;
    i32 local31 = 0;
    i32 local32 = 0;
    i32 local33 = 0;
    i32 local34 = 0;
    i32 local35 = 0;
    i32 local36 = 0;
    i32 local37 = 0;
    i32 local38 = 0;
    i32 local39 = 0;
    i32 local40 = 0;
    i32 local41 = 0;
    i32 local42 = 0;
    i32 local43 = 0;
    i32 local44 = 0;
    i32 local45 = 0;
    i32 local46 = 0;
    i32 local47 = 0;
    i32 local48 = 0;
    i32 local49 = 0;
    i32 local50 = 0;
    i32 local51 = 0;
    i32 local52 = 0;
    i32 local53 = 0;
    i32 local54 = 0;
    i32 local55 = 0;
    i32 local56 = 0;
    i32 local57 = 0;
    i32 local58 = 0;
    i32 local59 = 0;
    i32 local60 = 0;
    i32 local61 = 0;
    i32 local62 = 0;
    i32 local63 = 0;
    i32 local64 = 0;
    i32 local65 = 0;
    i32 local66 = 0;
    i32 local67 = 0;
    i32 local68 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(0x730);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func107(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 0);
            arg2 = frame.peek();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(0x68b);
            frame.i32_add();
            frame.i32_const(2);
            frame.i32_store8(0, 0);
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 0x68c);
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store8(0, 0x670);
            frame.push(local0);
            frame.i32_const(0x5f0);
            frame.i32_add();
            frame.i32_const(0);
            frame.i64_load(2, 0xf4a5c);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(0);
            frame.i64_load(2, 0xf4a54);
            frame.i64_store(3, 0x5e8);
            frame.push(local0);
            frame.i32_const(424);
            frame.i32_add();
            frame.i32_const(4);
            frame.i32_or();
            frame.push(local0);
            frame.i32_const(0x670);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x5e8);
            frame.i32_add();
            frame.push(local0);
            {
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _ZN12icu_provider5error9DataError8with_req17hc2025be0fd8ef6fdE(t0, t1, t2, t3);
            }
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0x558);
          frame.i32_add();
          frame.i32_const(0);
          frame.i64_load(2, 0xf4a5c);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(0);
          frame.i64_load(2, 0xf4a54);
          frame.i64_store(3, 0x550);
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.push(arg2);
          frame.push(local0);
          frame.i32_const(0x550);
          frame.i32_add();
          frame.push(local0);
          frame.push(arg1);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType3) throw Trap('indirect call type mismatch');
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            func(t0, t1, t2, t3);
          }
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_or();
          arg1 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load(2, 0x670);
                                          if (frame.pop() != 0) break block_label_18;
                                          frame.push(local0);
                                          frame.i32_const(0x5e8);
                                          frame.i32_add();
                                          frame.push(arg1);
                                          frame.i32_const(68);
                                          {
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            frame.push(_memcpy(t0, t1, t2));
                                          }
                                          frame.drop();
                                          frame.push(local0);
                                          frame.i32_const(632);
                                          frame.i32_add();
                                          frame.push(local0);
                                          frame.i32_const(0x5e8);
                                          frame.i32_add();
                                          frame.i32_const(68);
                                          {
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            frame.push(_memcpy(t0, t1, t2));
                                          }
                                          frame.drop();
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 684);
                                          arg1 = frame.peek();
                                          frame.i32_const(3);
                                          frame.i32_eq();
                                          if (frame.pop() != 0) break block_label_15;
                                          frame.push(local0);
                                          frame.i32_const(760);
                                          frame.i32_add();
                                          frame.push(local0);
                                          frame.i32_const(632);
                                          frame.i32_add();
                                          frame.i32_const(56);
                                          {
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            frame.push(_memcpy(t0, t1, t2));
                                          }
                                          frame.drop();
                                          frame.push(local0);
                                          frame.i32_load(2, 688);
                                          arg2 = frame.peek();
                                          if (frame.pop() != 0) break block_label_17;
                                          frame.i32_const(2);
                                          arg2 = frame.pop();
                                          break block_label_16;
                                        }
                                        frame.push(local0);
                                        frame.i32_const(0x5e8);
                                        frame.i32_add();
                                        frame.push(arg1);
                                        frame.i32_const(36);
                                        {
                                          var t2 = frame.pop();
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          frame.push(_memcpy(t0, t1, t2));
                                        }
                                        frame.drop();
                                        frame.push(local0);
                                        frame.i32_const(424);
                                        frame.i32_add();
                                        frame.i32_const(4);
                                        frame.i32_or();
                                        frame.push(local0);
                                        frame.i32_const(0x5e8);
                                        frame.i32_add();
                                        frame.i32_const(36);
                                        {
                                          var t2 = frame.pop();
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          frame.push(_memcpy(t0, t1, t2));
                                        }
                                        frame.drop();
                                        frame.push(local0);
                                        frame.i32_const(1);
                                        frame.i32_store(2, 424);
                                        break block_label_2;
                                      }
                                      frame.push(local0);
                                      frame.push(local0);
                                      frame.i32_const(692);
                                      frame.i32_add();
                                      frame.i64_load(2, 0);
                                      local1 = frame.peek();
                                      frame.i64_store(2, 0x5dc);
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.i32_store(2, 0x5d8);
                                      frame.push(local1);
                                      frame.i64_const(32);
                                      frame.i64_shr_u();
                                      frame.i32_wrap_i64();
                                      local2 = frame.pop();
                                      frame.push(arg1);
                                      frame.i32_const(2);
                                      frame.i32_ne();
                                      if (frame.pop() != 0) break block_label_13;
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.i32_store(2, 0x700);
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.push(local1);
                                      frame.i32_wrap_i64();
                                      frame.i32_add();
                                      frame.i32_store(2, 0x704);
                                      frame.push(local0);
                                      frame.i32_const(0x708);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x700);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func136(t0, t1);
                                      }
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x708);
                                      if (frame.pop() != 0) break block_label_14;
                                      frame.i32_const(13);
                                      arg1 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x70c);
                                      arg2 = frame.peek();
                                      frame.i32_const(2);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) break block_label_4;
                                      frame.push(local0);
                                      frame.i32_const(0x728);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local3 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x724);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local4 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x720);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local5 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x71c);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local6 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x718);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local7 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x714);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local8 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x710);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local9 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x708);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x700);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func136(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x708);
                                        if (frame.pop() != 0) break block_label_17;
                                        frame.i32_const(13);
                                        arg1 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_load(2, 0x70c);
                                        local10 = frame.peek();
                                        frame.i32_const(2);
                                        frame.i32_eq();
                                        if (frame.pop() != 0) break block_label_5;
                                        frame.push(local0);
                                        frame.i32_const(0x728);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local11 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x724);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local12 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x720);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local13 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x71c);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local14 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x718);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local15 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x714);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local16 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x710);
                                        frame.i32_add();
                                        frame.i32_load(2, 0);
                                        local17 = frame.pop();
                                        frame.push(local0);
                                        frame.i32_const(0x708);
                                        frame.i32_add();
                                        frame.push(local0);
                                        frame.i32_const(0x700);
                                        frame.i32_add();
                                        {
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E(t0, t1);
                                        }
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 0x708);
                                          if (frame.pop() != 0) break block_label_18;
                                          frame.i32_const(13);
                                          arg1 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_load(2, 0x70c);
                                          local18 = frame.peek();
                                          frame.i32_const(2);
                                          frame.i32_eq();
                                          if (frame.pop() != 0) break block_label_6;
                                          frame.push(local0);
                                          frame.i32_const(0x718);
                                          frame.i32_add();
                                          frame.i32_load(2, 0);
                                          local19 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_const(0x714);
                                          frame.i32_add();
                                          frame.i32_load(2, 0);
                                          local20 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_const(0x710);
                                          frame.i32_add();
                                          frame.i32_load(2, 0);
                                          local21 = frame.pop();
                                          frame.push(local0);
                                          frame.i32_const(0x708);
                                          frame.i32_add();
                                          frame.push(local0);
                                          frame.i32_const(0x700);
                                          frame.i32_add();
                                          {
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E(
                                                t0, t1);
                                          }
                                          block_label_19:
                                          {
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 0x708);
                                            if (frame.pop() != 0) break block_label_19;
                                            frame.i32_const(13);
                                            arg1 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_load(2, 0x70c);
                                            local22 = frame.peek();
                                            frame.i32_const(2);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) break block_label_7;
                                            frame.push(local0);
                                            frame.i32_const(0x714);
                                            frame.i32_add();
                                            local23 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_const(0x710);
                                            frame.i32_add();
                                            local24 = frame.pop();
                                            frame.i32_const(0x400);
                                            local25 = frame.pop();
                                            frame.i32_const(0);
                                            local26 = frame.pop();
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                frame.push(local0);
                                                frame.i32_load(2, 0x700);
                                                arg1 = frame.peek();
                                                frame.push(local0);
                                                frame.i32_load(2, 0x704);
                                                local27 = frame.peek();
                                                frame.i32_ne();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(arg1);
                                                local28 = frame.pop();
                                                frame.i32_const(1);
                                                local29 = frame.pop();
                                                break block_label_20;
                                              }
                                              frame.i32_const(1);
                                              local29 = frame.pop();
                                              block_label_21:
                                              {
                                                frame.push(arg1);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                frame.push(local27);
                                                frame.i32_ne();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local27);
                                                local28 = frame.pop();
                                                break block_label_20;
                                              }
                                              frame.push(local27);
                                              local28 = frame.pop();
                                              frame.push(arg1);
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.push(local27);
                                              frame.i32_eq();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(arg1);
                                              frame.i32_load8_u(0, 2);
                                              frame.i32_const(24);
                                              frame.i32_shl();
                                              frame.push(arg1);
                                              frame.i32_load8_u(0, 1);
                                              frame.i32_const(16);
                                              frame.i32_shl();
                                              frame.i32_or();
                                              local26 = frame.pop();
                                              frame.push(arg1);
                                              frame.i32_load8_u(0, 0);
                                              frame.i32_const(8);
                                              frame.i32_shl();
                                              local25 = frame.pop();
                                              frame.push(arg1);
                                              frame.i32_const(3);
                                              frame.i32_add();
                                              local28 = frame.pop();
                                              frame.i32_const(0);
                                              local29 = frame.pop();
                                            }
                                            frame.push(local23);
                                            frame.i32_load(2, 0);
                                            local30 = frame.pop();
                                            frame.push(local24);
                                            frame.i32_load(2, 0);
                                            local31 = frame.pop();
                                            frame.push(local25);
                                            frame.push(local26);
                                            frame.i32_or();
                                            arg1 = frame.peek();
                                            frame.i32_const(8);
                                            frame.i32_shr_u();
                                            local32 = frame.pop();
                                            block_label_20:
                                            {
                                              frame.push(local29);
                                              frame.push(local26);
                                              frame.i32_const(1);
                                              frame.i32_and();
                                              frame.i32_or();
                                              frame.i32_eqz();
                                              if (frame.pop() != 0) break block_label_20;
                                              frame.push(local32);
                                              arg1 = frame.pop();
                                              break block_label_8;
                                            }
                                            frame.push(local28);
                                            frame.push(local27);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) break block_label_10;
                                            frame.push(local0);
                                            frame.i32_const(0x718);
                                            frame.i32_add();
                                            frame.i32_load(2, 0);
                                            local33 = frame.pop();
                                            frame.push(arg1);
                                            frame.i32_const(16);
                                            frame.i32_shr_u();
                                            local34 = frame.pop();
                                            frame.push(local28);
                                            frame.i32_const(5);
                                            frame.i32_add();
                                            local35 = frame.pop();
                                            frame.i32_const(0);
                                            arg1 = frame.pop();
                                            frame.i32_const(0);
                                            local26 = frame.pop();
                                            frame.push(local27);
                                            frame.push(local28);
                                            frame.i32_sub();
                                            local36 = frame.peek();
                                            local24 = frame.pop();
                                            frame.i32_const(-1);
                                            local23 = frame.pop();
                                            frame.i32_const(0);
                                            local25 = frame.pop();
                                            block_label_20:
                                            {
                                              loop_label_21:
                                              for (;;) {
                                                frame.push(local28);
                                                frame.push(local26);
                                                frame.i32_add();
                                                local37 = frame.peek();
                                                frame.i32_load8_s(0, 0);
                                                local29 = frame.peek();
                                                frame.i32_const(127);
                                                frame.i32_and();
                                                local38 = frame.peek();
                                                frame.push(arg1);
                                                frame.i32_shl();
                                                frame.push(local25);
                                                frame.i32_or();
                                                local25 = frame.pop();
                                                block_label_22:
                                                {
                                                  frame.push(local29);
                                                  frame.i32_const(0);
                                                  frame.i32_lt_s();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(local23);
                                                  frame.push(local38);
                                                  frame.i32_ge_u();
                                                  if (frame.pop() != 0) break block_label_20;
                                                  break block_label_11;
                                                }
                                                block_label_22:
                                                {
                                                  frame.push(local26);
                                                  frame.i32_const(4);
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) break block_label_22;
                                                  frame.push(arg1);
                                                  frame.i32_const(7);
                                                  frame.i32_add();
                                                  arg1 = frame.pop();
                                                  frame.push(local24);
                                                  frame.i32_const(-1);
                                                  frame.i32_add();
                                                  local24 = frame.pop();
                                                  frame.push(local23);
                                                  frame.i32_const(7);
                                                  frame.i32_shr_u();
                                                  local23 = frame.pop();
                                                  frame.push(local28);
                                                  frame.push(local26);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local26 = frame.peek();
                                                  frame.i32_add();
                                                  frame.push(local27);
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) break block_label_10;
                                                  continue loop_label_21;
                                                }
                                                break;
                                              }
                                              frame.i32_const(5);
                                              arg1 = frame.pop();
                                              frame.push(local35);
                                              local27 = frame.pop();
                                              break block_label_9;
                                            }
                                            frame.i32_const(4);
                                            arg1 = frame.pop();
                                            frame.push(local25);
                                            frame.i32_const(4);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) break block_label_12;
                                            frame.push(local26);
                                            frame.i32_const(-1);
                                            frame.i32_xor();
                                            frame.push(local36);
                                            frame.i32_add();
                                            frame.push(local25);
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) break block_label_8;
                                            frame.push(local0);
                                            frame.push(local28);
                                            frame.push(local26);
                                            frame.push(local25);
                                            frame.i32_add();
                                            frame.i32_add();
                                            local39 = frame.peek();
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            local29 = frame.peek();
                                            frame.i32_store(2, 0x700);
                                            frame.push(local0);
                                            frame.i32_const(0x708);
                                            frame.i32_add();
                                            frame.push(local37);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            frame.push(local25);
                                            {
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              _ZN4core3str8converts9from_utf817h989570921179a6cfE(t0, t1, t2);
                                            }
                                            frame.push(local0);
                                            frame.i32_load(2, 0x708);
                                            if (frame.pop() != 0) break block_label_12;
                                            frame.push(local0);
                                            frame.i32_const(0x710);
                                            frame.i32_add();
                                            frame.i32_load(2, 0);
                                            frame.i32_eqz();
                                            if (frame.pop() != 0) break block_label_12;
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                frame.push(local0);
                                                frame.i32_load(2, 0x70c);
                                                local23 = frame.peek();
                                                frame.i32_load8_s(0, 0);
                                                arg1 = frame.peek();
                                                frame.i32_const(-1);
                                                frame.i32_le_s();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(arg1);
                                                frame.i32_const(255);
                                                frame.i32_and();
                                                local40 = frame.pop();
                                                break block_label_20;
                                              }
                                              frame.push(local23);
                                              frame.i32_load8_u(0, 1);
                                              frame.i32_const(63);
                                              frame.i32_and();
                                              local38 = frame.pop();
                                              frame.push(arg1);
                                              frame.i32_const(31);
                                              frame.i32_and();
                                              local37 = frame.pop();
                                              block_label_21:
                                              {
                                                frame.push(arg1);
                                                frame.i32_const(-33);
                                                frame.i32_gt_u();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local37);
                                                frame.i32_const(6);
                                                frame.i32_shl();
                                                frame.push(local38);
                                                frame.i32_or();
                                                local40 = frame.pop();
                                                break block_label_20;
                                              }
                                              frame.push(local38);
                                              frame.i32_const(6);
                                              frame.i32_shl();
                                              frame.push(local23);
                                              frame.i32_load8_u(0, 2);
                                              frame.i32_const(63);
                                              frame.i32_and();
                                              frame.i32_or();
                                              local38 = frame.pop();
                                              block_label_21:
                                              {
                                                frame.push(arg1);
                                                frame.i32_const(-16);
                                                frame.i32_ge_u();
                                                if (frame.pop() != 0) break block_label_21;
                                                frame.push(local38);
                                                frame.push(local37);
                                                frame.i32_const(12);
                                                frame.i32_shl();
                                                frame.i32_or();
                                                local40 = frame.pop();
                                                break block_label_20;
                                              }
                                              frame.i32_const(7);
                                              arg1 = frame.pop();
                                              frame.push(local38);
                                              frame.i32_const(6);
                                              frame.i32_shl();
                                              frame.push(local23);
                                              frame.i32_load8_u(0, 3);
                                              frame.i32_const(63);
                                              frame.i32_and();
                                              frame.i32_or();
                                              frame.push(local37);
                                              frame.i32_const(18);
                                              frame.i32_shl();
                                              frame.i32_const(0x1c0000);
                                              frame.i32_and();
                                              frame.i32_or();
                                              local40 = frame.peek();
                                              frame.i32_const(0x110000);
                                              frame.i32_eq();
                                              if (frame.pop() != 0) break block_label_8;
                                            }
                                            frame.push(local29);
                                            frame.push(local27);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) break block_label_10;
                                            frame.i32_const(0);
                                            frame.push(local25);
                                            frame.i32_sub();
                                            local41 = frame.pop();
                                            frame.push(local36);
                                            frame.push(local25);
                                            frame.i32_sub();
                                            frame.push(local26);
                                            frame.i32_sub();
                                            arg1 = frame.peek();
                                            frame.i32_const(-3);
                                            frame.i32_add();
                                            local42 = frame.pop();
                                            frame.push(local39);
                                            frame.i32_const(6);
                                            frame.i32_add();
                                            local43 = frame.pop();
                                            frame.push(arg1);
                                            frame.push(local29);
                                            frame.i32_add();
                                            frame.i32_const(-1);
                                            frame.i32_add();
                                            local44 = frame.pop();
                                            frame.push(local25);
                                            local35 = frame.pop();
                                            frame.i32_const(0);
                                            arg1 = frame.pop();
                                            frame.i32_const(0);
                                            local29 = frame.pop();
                                            frame.i32_const(-1);
                                            local37 = frame.pop();
                                            frame.i32_const(0);
                                            local23 = frame.pop();

                                            loop_label_20:
                                            for (;;) {
                                              frame.push(local39);
                                              frame.push(local29);
                                              frame.i32_add();
                                              local45 = frame.peek();
                                              frame.i32_const(1);
                                              frame.i32_add();
                                              frame.i32_load8_s(0, 0);
                                              local38 = frame.peek();
                                              frame.i32_const(127);
                                              frame.i32_and();
                                              local46 = frame.peek();
                                              frame.push(arg1);
                                              frame.i32_shl();
                                              frame.push(local23);
                                              frame.i32_or();
                                              local23 = frame.pop();
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      frame.push(local38);
                                                      frame.i32_const(0);
                                                      frame.i32_lt_s();
                                                      if (frame.pop() != 0) break block_label_24;
                                                      frame.push(local37);
                                                      frame.push(local46);
                                                      frame.i32_lt_u();
                                                      if (frame.pop() != 0) break block_label_11;
                                                      frame.i32_const(4);
                                                      arg1 = frame.pop();
                                                      frame.push(local23);
                                                      frame.i32_const(4);
                                                      frame.i32_gt_u();
                                                      if (frame.pop() != 0) break block_label_12;
                                                      frame.push(local24);
                                                      frame.push(local25);
                                                      frame.i32_sub();
                                                      frame.push(local29);
                                                      frame.i32_sub();
                                                      frame.i32_const(-2);
                                                      frame.i32_add();
                                                      frame.push(local23);
                                                      frame.i32_lt_u();
                                                      if (frame.pop() != 0) break block_label_8;
                                                      frame.push(local0);
                                                      frame.push(local28);
                                                      frame.push(local23);
                                                      frame.push(local35);
                                                      frame.i32_add();
                                                      local29 = frame.peek();
                                                      frame.i32_add();
                                                      frame.push(local26);
                                                      frame.i32_add();
                                                      local44 = frame.peek();
                                                      frame.i32_const(2);
                                                      frame.i32_add();
                                                      local25 = frame.peek();
                                                      frame.i32_store(2, 0x700);
                                                      frame.push(local0);
                                                      frame.i32_const(0x708);
                                                      frame.i32_add();
                                                      frame.push(local45);
                                                      frame.i32_const(2);
                                                      frame.i32_add();
                                                      frame.push(local23);
                                                      {
                                                        var t2 = frame.pop();
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                            t0, t1, t2);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 0x708);
                                                      if (frame.pop() != 0) break block_label_12;
                                                      frame.push(local0);
                                                      frame.i32_const(0x710);
                                                      frame.i32_add();
                                                      frame.i32_load(2, 0);
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) break block_label_12;
                                                      frame.push(local0);
                                                      frame.i32_load(2, 0x70c);
                                                      local24 = frame.peek();
                                                      frame.i32_load8_s(0, 0);
                                                      arg1 = frame.peek();
                                                      frame.i32_const(-1);
                                                      frame.i32_le_s();
                                                      if (frame.pop() != 0) break block_label_23;
                                                      frame.push(arg1);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      local47 = frame.pop();
                                                      break block_label_22;
                                                    }
                                                    frame.push(local29);
                                                    frame.i32_const(4);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) break block_label_21;
                                                    frame.i32_const(5);
                                                    arg1 = frame.pop();
                                                    frame.push(local43);
                                                    local27 = frame.pop();
                                                    break block_label_9;
                                                  }
                                                  frame.push(local24);
                                                  frame.i32_load8_u(0, 1);
                                                  frame.i32_const(63);
                                                  frame.i32_and();
                                                  local38 = frame.pop();
                                                  frame.push(arg1);
                                                  frame.i32_const(31);
                                                  frame.i32_and();
                                                  local37 = frame.pop();
                                                  block_label_23:
                                                  {
                                                    frame.push(arg1);
                                                    frame.i32_const(-33);
                                                    frame.i32_gt_u();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local37);
                                                    frame.i32_const(6);
                                                    frame.i32_shl();
                                                    frame.push(local38);
                                                    frame.i32_or();
                                                    local47 = frame.pop();
                                                    break block_label_22;
                                                  }
                                                  frame.push(local38);
                                                  frame.i32_const(6);
                                                  frame.i32_shl();
                                                  frame.push(local24);
                                                  frame.i32_load8_u(0, 2);
                                                  frame.i32_const(63);
                                                  frame.i32_and();
                                                  frame.i32_or();
                                                  local38 = frame.pop();
                                                  block_label_23:
                                                  {
                                                    frame.push(arg1);
                                                    frame.i32_const(-16);
                                                    frame.i32_ge_u();
                                                    if (frame.pop() != 0) break block_label_23;
                                                    frame.push(local38);
                                                    frame.push(local37);
                                                    frame.i32_const(12);
                                                    frame.i32_shl();
                                                    frame.i32_or();
                                                    local47 = frame.pop();
                                                    break block_label_22;
                                                  }
                                                  frame.i32_const(7);
                                                  arg1 = frame.pop();
                                                  frame.push(local38);
                                                  frame.i32_const(6);
                                                  frame.i32_shl();
                                                  frame.push(local24);
                                                  frame.i32_load8_u(0, 3);
                                                  frame.i32_const(63);
                                                  frame.i32_and();
                                                  frame.i32_or();
                                                  frame.push(local37);
                                                  frame.i32_const(18);
                                                  frame.i32_shl();
                                                  frame.i32_const(0x1c0000);
                                                  frame.i32_and();
                                                  frame.i32_or();
                                                  local47 = frame.peek();
                                                  frame.i32_const(0x110000);
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) break block_label_8;
                                                }
                                                frame.push(local25);
                                                frame.push(local27);
                                                frame.i32_eq();
                                                if (frame.pop() != 0) break block_label_10;
                                                frame.i32_const(0);
                                                frame.push(local23);
                                                frame.i32_sub();
                                                local45 = frame.pop();
                                                frame.push(local41);
                                                frame.push(local23);
                                                frame.i32_sub();
                                                local41 = frame.peek();
                                                frame.push(local36);
                                                frame.i32_add();
                                                frame.push(local26);
                                                frame.i32_sub();
                                                arg1 = frame.peek();
                                                frame.i32_const(-4);
                                                frame.i32_add();
                                                local46 = frame.pop();
                                                frame.push(local44);
                                                frame.i32_const(7);
                                                frame.i32_add();
                                                local48 = frame.pop();
                                                frame.push(arg1);
                                                frame.push(local25);
                                                frame.i32_add();
                                                frame.i32_const(-2);
                                                frame.i32_add();
                                                local49 = frame.pop();
                                                frame.push(local23);
                                                local39 = frame.pop();
                                                frame.i32_const(0);
                                                arg1 = frame.pop();
                                                frame.i32_const(0);
                                                local25 = frame.pop();
                                                frame.i32_const(-1);
                                                local37 = frame.pop();
                                                frame.i32_const(0);
                                                local24 = frame.pop();

                                                loop_label_22:
                                                for (;;) {
                                                  frame.push(local44);
                                                  frame.push(local25);
                                                  frame.i32_add();
                                                  local43 = frame.peek();
                                                  frame.i32_const(2);
                                                  frame.i32_add();
                                                  frame.i32_load8_s(0, 0);
                                                  local38 = frame.peek();
                                                  frame.i32_const(127);
                                                  frame.i32_and();
                                                  local50 = frame.peek();
                                                  frame.push(arg1);
                                                  frame.i32_shl();
                                                  frame.push(local24);
                                                  frame.i32_or();
                                                  local24 = frame.pop();
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          frame.push(local38);
                                                          frame.i32_const(0);
                                                          frame.i32_lt_s();
                                                          if (frame.pop() != 0) break block_label_26;
                                                          frame.push(local37);
                                                          frame.push(local50);
                                                          frame.i32_lt_u();
                                                          if (frame.pop() != 0) break block_label_11;
                                                          frame.i32_const(4);
                                                          arg1 = frame.pop();
                                                          frame.push(local24);
                                                          frame.i32_const(4);
                                                          frame.i32_gt_u();
                                                          if (frame.pop() != 0) break block_label_12;
                                                          frame.push(local42);
                                                          frame.push(local23);
                                                          frame.i32_sub();
                                                          frame.push(local25);
                                                          frame.i32_sub();
                                                          frame.push(local24);
                                                          frame.i32_lt_u();
                                                          if (frame.pop() != 0) break block_label_8;
                                                          frame.push(local0);
                                                          frame.push(local28);
                                                          frame.push(local24);
                                                          frame.push(local29);
                                                          frame.i32_add();
                                                          local38 = frame.peek();
                                                          frame.i32_add();
                                                          frame.push(local26);
                                                          frame.i32_add();
                                                          local48 = frame.peek();
                                                          frame.i32_const(3);
                                                          frame.i32_add();
                                                          local37 = frame.peek();
                                                          frame.i32_store(2, 0x700);
                                                          frame.push(local0);
                                                          frame.i32_const(0x708);
                                                          frame.i32_add();
                                                          frame.push(local28);
                                                          frame.push(local23);
                                                          frame.push(local35);
                                                          frame.i32_add();
                                                          frame.i32_add();
                                                          frame.push(local26);
                                                          frame.i32_add();
                                                          frame.push(local25);
                                                          frame.i32_add();
                                                          frame.i32_const(3);
                                                          frame.i32_add();
                                                          frame.push(local24);
                                                          {
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                t0, t1, t2);
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 0x708);
                                                          if (frame.pop() != 0) break block_label_12;
                                                          frame.push(local0);
                                                          frame.i32_const(0x710);
                                                          frame.i32_add();
                                                          frame.i32_load(2, 0);
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) break block_label_12;
                                                          frame.push(local0);
                                                          frame.i32_load(2, 0x70c);
                                                          local25 = frame.peek();
                                                          frame.i32_load8_s(0, 0);
                                                          arg1 = frame.peek();
                                                          frame.i32_const(-1);
                                                          frame.i32_le_s();
                                                          if (frame.pop() != 0) break block_label_25;
                                                          frame.push(arg1);
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          local51 = frame.pop();
                                                          break block_label_24;
                                                        }
                                                        frame.push(local25);
                                                        frame.i32_const(4);
                                                        frame.i32_ne();
                                                        if (frame.pop() != 0) break block_label_23;
                                                        frame.i32_const(5);
                                                        arg1 = frame.pop();
                                                        frame.push(local48);
                                                        local27 = frame.pop();
                                                        break block_label_9;
                                                      }
                                                      frame.push(local25);
                                                      frame.i32_load8_u(0, 1);
                                                      frame.i32_const(63);
                                                      frame.i32_and();
                                                      local23 = frame.pop();
                                                      frame.push(arg1);
                                                      frame.i32_const(31);
                                                      frame.i32_and();
                                                      local35 = frame.pop();
                                                      block_label_25:
                                                      {
                                                        frame.push(arg1);
                                                        frame.i32_const(-33);
                                                        frame.i32_gt_u();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.push(local35);
                                                        frame.i32_const(6);
                                                        frame.i32_shl();
                                                        frame.push(local23);
                                                        frame.i32_or();
                                                        local51 = frame.pop();
                                                        break block_label_24;
                                                      }
                                                      frame.push(local23);
                                                      frame.i32_const(6);
                                                      frame.i32_shl();
                                                      frame.push(local25);
                                                      frame.i32_load8_u(0, 2);
                                                      frame.i32_const(63);
                                                      frame.i32_and();
                                                      frame.i32_or();
                                                      local23 = frame.pop();
                                                      block_label_25:
                                                      {
                                                        frame.push(arg1);
                                                        frame.i32_const(-16);
                                                        frame.i32_ge_u();
                                                        if (frame.pop() != 0) break block_label_25;
                                                        frame.push(local23);
                                                        frame.push(local35);
                                                        frame.i32_const(12);
                                                        frame.i32_shl();
                                                        frame.i32_or();
                                                        local51 = frame.pop();
                                                        break block_label_24;
                                                      }
                                                      frame.i32_const(7);
                                                      arg1 = frame.pop();
                                                      frame.push(local23);
                                                      frame.i32_const(6);
                                                      frame.i32_shl();
                                                      frame.push(local25);
                                                      frame.i32_load8_u(0, 3);
                                                      frame.i32_const(63);
                                                      frame.i32_and();
                                                      frame.i32_or();
                                                      frame.push(local35);
                                                      frame.i32_const(18);
                                                      frame.i32_shl();
                                                      frame.i32_const(0x1c0000);
                                                      frame.i32_and();
                                                      frame.i32_or();
                                                      local51 = frame.peek();
                                                      frame.i32_const(0x110000);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) break block_label_8;
                                                    }
                                                    frame.push(local37);
                                                    frame.push(local27);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) break block_label_10;
                                                    frame.push(local24);
                                                    frame.push(local39);
                                                    frame.i32_add();
                                                    local42 = frame.pop();
                                                    frame.push(local45);
                                                    frame.push(local24);
                                                    frame.i32_sub();
                                                    local45 = frame.pop();
                                                    frame.i32_const(0);
                                                    frame.push(local24);
                                                    frame.i32_sub();
                                                    local39 = frame.pop();
                                                    frame.push(local41);
                                                    frame.push(local24);
                                                    frame.i32_sub();
                                                    local41 = frame.peek();
                                                    frame.push(local36);
                                                    frame.i32_add();
                                                    frame.push(local26);
                                                    frame.i32_sub();
                                                    arg1 = frame.peek();
                                                    frame.i32_const(-5);
                                                    frame.i32_add();
                                                    local44 = frame.pop();
                                                    frame.push(local48);
                                                    frame.i32_const(8);
                                                    frame.i32_add();
                                                    local52 = frame.pop();
                                                    frame.push(arg1);
                                                    frame.push(local37);
                                                    frame.i32_add();
                                                    frame.i32_const(-3);
                                                    frame.i32_add();
                                                    local53 = frame.pop();
                                                    frame.push(local24);
                                                    local43 = frame.pop();
                                                    frame.i32_const(0);
                                                    local23 = frame.pop();
                                                    frame.i32_const(0);
                                                    local25 = frame.pop();
                                                    frame.i32_const(-1);
                                                    local35 = frame.pop();
                                                    frame.i32_const(0);
                                                    local37 = frame.pop();

                                                    loop_label_24:
                                                    for (;;) {
                                                      frame.push(local48);
                                                      frame.push(local25);
                                                      frame.i32_add();
                                                      local50 = frame.peek();
                                                      frame.i32_const(3);
                                                      frame.i32_add();
                                                      frame.i32_load8_s(0, 0);
                                                      arg1 = frame.peek();
                                                      frame.i32_const(127);
                                                      frame.i32_and();
                                                      local49 = frame.peek();
                                                      frame.push(local23);
                                                      frame.i32_shl();
                                                      frame.push(local37);
                                                      frame.i32_or();
                                                      local37 = frame.pop();
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              frame.push(arg1);
                                                              frame.i32_const(0);
                                                              frame.i32_lt_s();
                                                              if (frame.pop() != 0) break block_label_28;
                                                              frame.i32_const(5);
                                                              arg1 = frame.pop();
                                                              frame.push(local35);
                                                              frame.push(local49);
                                                              frame.i32_lt_u();
                                                              if (frame.pop() != 0) break block_label_8;
                                                              frame.push(local37);
                                                              frame.i32_const(4);
                                                              frame.i32_gt_u();
                                                              if (frame.pop() != 0) break block_label_12;
                                                              frame.i32_const(4);
                                                              arg1 = frame.pop();
                                                              frame.push(local46);
                                                              frame.push(local24);
                                                              frame.i32_sub();
                                                              frame.push(local25);
                                                              frame.i32_sub();
                                                              frame.push(local37);
                                                              frame.i32_lt_u();
                                                              if (frame.pop() != 0) break block_label_8;
                                                              frame.push(local0);
                                                              frame.push(local28);
                                                              frame.push(local37);
                                                              frame.push(local38);
                                                              frame.i32_add();
                                                              local23 = frame.peek();
                                                              frame.i32_add();
                                                              frame.push(local26);
                                                              frame.i32_add();
                                                              local52 = frame.peek();
                                                              frame.i32_const(4);
                                                              frame.i32_add();
                                                              local35 = frame.peek();
                                                              frame.i32_store(2, 0x700);
                                                              frame.push(local0);
                                                              frame.i32_const(0x708);
                                                              frame.i32_add();
                                                              frame.push(local28);
                                                              frame.push(local24);
                                                              frame.push(local29);
                                                              frame.i32_add();
                                                              frame.i32_add();
                                                              frame.push(local26);
                                                              frame.i32_add();
                                                              frame.push(local25);
                                                              frame.i32_add();
                                                              frame.i32_const(4);
                                                              frame.i32_add();
                                                              frame.push(local37);
                                                              {
                                                                var t2 = frame.pop();
                                                                var t1 = frame.pop();
                                                                var t0 = frame.pop();
                                                                _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                    t0, t1, t2);
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_load(2, 0x708);
                                                              if (frame.pop() != 0) break block_label_12;
                                                              frame.push(local0);
                                                              frame.i32_const(0x710);
                                                              frame.i32_add();
                                                              frame.i32_load(2, 0);
                                                              frame.i32_eqz();
                                                              if (frame.pop() != 0) break block_label_12;
                                                              frame.push(local0);
                                                              frame.i32_load(2, 0x70c);
                                                              local25 = frame.peek();
                                                              frame.i32_load8_s(0, 0);
                                                              arg1 = frame.peek();
                                                              frame.i32_const(-1);
                                                              frame.i32_le_s();
                                                              if (frame.pop() != 0) break block_label_27;
                                                              frame.push(arg1);
                                                              frame.i32_const(255);
                                                              frame.i32_and();
                                                              local54 = frame.pop();
                                                              break block_label_26;
                                                            }
                                                            frame.push(local25);
                                                            frame.i32_const(4);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) break block_label_25;
                                                            frame.i32_const(5);
                                                            arg1 = frame.pop();
                                                            frame.push(local52);
                                                            local27 = frame.pop();
                                                            break block_label_9;
                                                          }
                                                          frame.push(local25);
                                                          frame.i32_load8_u(0, 1);
                                                          frame.i32_const(63);
                                                          frame.i32_and();
                                                          local24 = frame.pop();
                                                          frame.push(arg1);
                                                          frame.i32_const(31);
                                                          frame.i32_and();
                                                          local29 = frame.pop();
                                                          block_label_27:
                                                          {
                                                            frame.push(arg1);
                                                            frame.i32_const(-33);
                                                            frame.i32_gt_u();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local29);
                                                            frame.i32_const(6);
                                                            frame.i32_shl();
                                                            frame.push(local24);
                                                            frame.i32_or();
                                                            local54 = frame.pop();
                                                            break block_label_26;
                                                          }
                                                          frame.push(local24);
                                                          frame.i32_const(6);
                                                          frame.i32_shl();
                                                          frame.push(local25);
                                                          frame.i32_load8_u(0, 2);
                                                          frame.i32_const(63);
                                                          frame.i32_and();
                                                          frame.i32_or();
                                                          local24 = frame.pop();
                                                          block_label_27:
                                                          {
                                                            frame.push(arg1);
                                                            frame.i32_const(-16);
                                                            frame.i32_ge_u();
                                                            if (frame.pop() != 0) break block_label_27;
                                                            frame.push(local24);
                                                            frame.push(local29);
                                                            frame.i32_const(12);
                                                            frame.i32_shl();
                                                            frame.i32_or();
                                                            local54 = frame.pop();
                                                            break block_label_26;
                                                          }
                                                          frame.i32_const(7);
                                                          arg1 = frame.pop();
                                                          frame.push(local24);
                                                          frame.i32_const(6);
                                                          frame.i32_shl();
                                                          frame.push(local25);
                                                          frame.i32_load8_u(0, 3);
                                                          frame.i32_const(63);
                                                          frame.i32_and();
                                                          frame.i32_or();
                                                          frame.push(local29);
                                                          frame.i32_const(18);
                                                          frame.i32_shl();
                                                          frame.i32_const(0x1c0000);
                                                          frame.i32_and();
                                                          frame.i32_or();
                                                          local54 = frame.peek();
                                                          frame.i32_const(0x110000);
                                                          frame.i32_eq();
                                                          if (frame.pop() != 0) break block_label_8;
                                                        }
                                                        frame.push(local35);
                                                        frame.push(local27);
                                                        frame.i32_eq();
                                                        if (frame.pop() != 0) break block_label_10;
                                                        frame.push(local37);
                                                        frame.push(local42);
                                                        frame.i32_add();
                                                        local42 = frame.pop();
                                                        frame.push(local45);
                                                        frame.push(local37);
                                                        frame.i32_sub();
                                                        local45 = frame.pop();
                                                        frame.push(local37);
                                                        frame.push(local43);
                                                        frame.i32_add();
                                                        local46 = frame.pop();
                                                        frame.push(local39);
                                                        frame.push(local37);
                                                        frame.i32_sub();
                                                        local39 = frame.pop();
                                                        frame.i32_const(0);
                                                        frame.push(local37);
                                                        frame.i32_sub();
                                                        local43 = frame.pop();
                                                        frame.push(local41);
                                                        frame.push(local37);
                                                        frame.i32_sub();
                                                        local41 = frame.peek();
                                                        frame.push(local36);
                                                        frame.i32_add();
                                                        frame.push(local26);
                                                        frame.i32_sub();
                                                        arg1 = frame.peek();
                                                        frame.i32_const(-6);
                                                        frame.i32_add();
                                                        local48 = frame.pop();
                                                        frame.push(local52);
                                                        frame.i32_const(9);
                                                        frame.i32_add();
                                                        local55 = frame.pop();
                                                        frame.push(arg1);
                                                        frame.push(local35);
                                                        frame.i32_add();
                                                        frame.i32_const(-4);
                                                        frame.i32_add();
                                                        local56 = frame.pop();
                                                        frame.push(local37);
                                                        local50 = frame.pop();
                                                        frame.i32_const(0);
                                                        arg1 = frame.pop();
                                                        frame.i32_const(0);
                                                        local25 = frame.pop();
                                                        frame.i32_const(-1);
                                                        local35 = frame.pop();
                                                        frame.i32_const(0);
                                                        local29 = frame.pop();

                                                        loop_label_26:
                                                        for (;;) {
                                                          frame.push(local52);
                                                          frame.push(local25);
                                                          frame.i32_add();
                                                          local49 = frame.peek();
                                                          frame.i32_const(4);
                                                          frame.i32_add();
                                                          frame.i32_load8_s(0, 0);
                                                          local24 = frame.peek();
                                                          frame.i32_const(127);
                                                          frame.i32_and();
                                                          local53 = frame.peek();
                                                          frame.push(arg1);
                                                          frame.i32_shl();
                                                          frame.push(local29);
                                                          frame.i32_or();
                                                          local29 = frame.pop();
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  frame.push(local24);
                                                                  frame.i32_const(0);
                                                                  frame.i32_lt_s();
                                                                  if (frame.pop() != 0) break block_label_30;
                                                                  frame.push(local35);
                                                                  frame.push(local53);
                                                                  frame.i32_lt_u();
                                                                  if (frame.pop() != 0) break block_label_11;
                                                                  frame.i32_const(4);
                                                                  arg1 = frame.pop();
                                                                  frame.push(local29);
                                                                  frame.i32_const(4);
                                                                  frame.i32_gt_u();
                                                                  if (frame.pop() != 0) break block_label_12;
                                                                  frame.push(local44);
                                                                  frame.push(local37);
                                                                  frame.i32_sub();
                                                                  frame.push(local25);
                                                                  frame.i32_sub();
                                                                  frame.push(local29);
                                                                  frame.i32_lt_u();
                                                                  if (frame.pop() != 0) break block_label_8;
                                                                  frame.push(local0);
                                                                  frame.push(local28);
                                                                  frame.push(local29);
                                                                  frame.push(local23);
                                                                  frame.i32_add();
                                                                  local24 = frame.peek();
                                                                  frame.i32_add();
                                                                  frame.push(local26);
                                                                  frame.i32_add();
                                                                  local55 = frame.peek();
                                                                  frame.i32_const(5);
                                                                  frame.i32_add();
                                                                  local35 = frame.peek();
                                                                  frame.i32_store(2, 0x700);
                                                                  frame.push(local0);
                                                                  frame.i32_const(0x708);
                                                                  frame.i32_add();
                                                                  frame.push(local28);
                                                                  frame.push(local37);
                                                                  frame.push(local38);
                                                                  frame.i32_add();
                                                                  frame.i32_add();
                                                                  frame.push(local26);
                                                                  frame.i32_add();
                                                                  frame.push(local25);
                                                                  frame.i32_add();
                                                                  frame.i32_const(5);
                                                                  frame.i32_add();
                                                                  frame.push(local29);
                                                                  {
                                                                    var t2 = frame.pop();
                                                                    var t1 = frame.pop();
                                                                    var t0 = frame.pop();
                                                                    _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                        t0, t1, t2);
                                                                  }
                                                                  frame.push(local0);
                                                                  frame.i32_load(2, 0x708);
                                                                  if (frame.pop() != 0) break block_label_12;
                                                                  frame.push(local0);
                                                                  frame.i32_const(0x710);
                                                                  frame.i32_add();
                                                                  frame.i32_load(2, 0);
                                                                  frame.i32_eqz();
                                                                  if (frame.pop() != 0) break block_label_12;
                                                                  frame.push(local0);
                                                                  frame.i32_load(2, 0x70c);
                                                                  local25 = frame.peek();
                                                                  frame.i32_load8_s(0, 0);
                                                                  arg1 = frame.peek();
                                                                  frame.i32_const(-1);
                                                                  frame.i32_le_s();
                                                                  if (frame.pop() != 0) break block_label_29;
                                                                  frame.push(arg1);
                                                                  frame.i32_const(255);
                                                                  frame.i32_and();
                                                                  local57 = frame.pop();
                                                                  break block_label_28;
                                                                }
                                                                frame.push(local25);
                                                                frame.i32_const(4);
                                                                frame.i32_ne();
                                                                if (frame.pop() != 0) break block_label_27;
                                                                frame.i32_const(5);
                                                                arg1 = frame.pop();
                                                                frame.push(local55);
                                                                local27 = frame.pop();
                                                                break block_label_9;
                                                              }
                                                              frame.push(local25);
                                                              frame.i32_load8_u(0, 1);
                                                              frame.i32_const(63);
                                                              frame.i32_and();
                                                              local37 = frame.pop();
                                                              frame.push(arg1);
                                                              frame.i32_const(31);
                                                              frame.i32_and();
                                                              local38 = frame.pop();
                                                              block_label_29:
                                                              {
                                                                frame.push(arg1);
                                                                frame.i32_const(-33);
                                                                frame.i32_gt_u();
                                                                if (frame.pop() != 0) break block_label_29;
                                                                frame.push(local38);
                                                                frame.i32_const(6);
                                                                frame.i32_shl();
                                                                frame.push(local37);
                                                                frame.i32_or();
                                                                local57 = frame.pop();
                                                                break block_label_28;
                                                              }
                                                              frame.push(local37);
                                                              frame.i32_const(6);
                                                              frame.i32_shl();
                                                              frame.push(local25);
                                                              frame.i32_load8_u(0, 2);
                                                              frame.i32_const(63);
                                                              frame.i32_and();
                                                              frame.i32_or();
                                                              local37 = frame.pop();
                                                              block_label_29:
                                                              {
                                                                frame.push(arg1);
                                                                frame.i32_const(-16);
                                                                frame.i32_ge_u();
                                                                if (frame.pop() != 0) break block_label_29;
                                                                frame.push(local37);
                                                                frame.push(local38);
                                                                frame.i32_const(12);
                                                                frame.i32_shl();
                                                                frame.i32_or();
                                                                local57 = frame.pop();
                                                                break block_label_28;
                                                              }
                                                              frame.i32_const(7);
                                                              arg1 = frame.pop();
                                                              frame.push(local37);
                                                              frame.i32_const(6);
                                                              frame.i32_shl();
                                                              frame.push(local25);
                                                              frame.i32_load8_u(0, 3);
                                                              frame.i32_const(63);
                                                              frame.i32_and();
                                                              frame.i32_or();
                                                              frame.push(local38);
                                                              frame.i32_const(18);
                                                              frame.i32_shl();
                                                              frame.i32_const(0x1c0000);
                                                              frame.i32_and();
                                                              frame.i32_or();
                                                              local57 = frame.peek();
                                                              frame.i32_const(0x110000);
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) break block_label_8;
                                                            }
                                                            frame.push(local35);
                                                            frame.push(local27);
                                                            frame.i32_eq();
                                                            if (frame.pop() != 0) break block_label_10;
                                                            frame.push(local29);
                                                            frame.push(local42);
                                                            frame.i32_add();
                                                            local42 = frame.pop();
                                                            frame.push(local45);
                                                            frame.push(local29);
                                                            frame.i32_sub();
                                                            local45 = frame.pop();
                                                            frame.push(local29);
                                                            frame.push(local46);
                                                            frame.i32_add();
                                                            local46 = frame.pop();
                                                            frame.push(local39);
                                                            frame.push(local29);
                                                            frame.i32_sub();
                                                            local39 = frame.pop();
                                                            frame.push(local29);
                                                            frame.push(local50);
                                                            frame.i32_add();
                                                            local44 = frame.pop();
                                                            frame.push(local43);
                                                            frame.push(local29);
                                                            frame.i32_sub();
                                                            local43 = frame.pop();
                                                            frame.i32_const(0);
                                                            frame.push(local29);
                                                            frame.i32_sub();
                                                            local50 = frame.pop();
                                                            frame.push(local41);
                                                            frame.push(local29);
                                                            frame.i32_sub();
                                                            local41 = frame.peek();
                                                            frame.push(local36);
                                                            frame.i32_add();
                                                            frame.push(local26);
                                                            frame.i32_sub();
                                                            arg1 = frame.peek();
                                                            frame.i32_const(-7);
                                                            frame.i32_add();
                                                            local52 = frame.pop();
                                                            frame.push(local55);
                                                            frame.i32_const(10);
                                                            frame.i32_add();
                                                            local58 = frame.pop();
                                                            frame.push(arg1);
                                                            frame.push(local35);
                                                            frame.i32_add();
                                                            frame.i32_const(-5);
                                                            frame.i32_add();
                                                            local59 = frame.pop();
                                                            frame.push(local29);
                                                            local49 = frame.pop();
                                                            frame.i32_const(0);
                                                            arg1 = frame.pop();
                                                            frame.i32_const(0);
                                                            local25 = frame.pop();
                                                            frame.i32_const(-1);
                                                            local35 = frame.pop();
                                                            frame.i32_const(0);
                                                            local38 = frame.pop();

                                                            loop_label_28:
                                                            for (;;) {
                                                              frame.push(local55);
                                                              frame.push(local25);
                                                              frame.i32_add();
                                                              local53 = frame.peek();
                                                              frame.i32_const(5);
                                                              frame.i32_add();
                                                              frame.i32_load8_s(0, 0);
                                                              local37 = frame.peek();
                                                              frame.i32_const(127);
                                                              frame.i32_and();
                                                              local56 = frame.peek();
                                                              frame.push(arg1);
                                                              frame.i32_shl();
                                                              frame.push(local38);
                                                              frame.i32_or();
                                                              local38 = frame.pop();
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      frame.push(local37);
                                                                      frame.i32_const(0);
                                                                      frame.i32_lt_s();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_32;
                                                                      frame.push(local35);
                                                                      frame.push(local56);
                                                                      frame.i32_lt_u();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_11;
                                                                      frame.i32_const(4);
                                                                      arg1 = frame.pop();
                                                                      frame.push(local38);
                                                                      frame.i32_const(4);
                                                                      frame.i32_gt_u();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_12;
                                                                      frame.push(local48);
                                                                      frame.push(local29);
                                                                      frame.i32_sub();
                                                                      frame.push(local25);
                                                                      frame.i32_sub();
                                                                      frame.push(local38);
                                                                      frame.i32_lt_u();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_8;
                                                                      frame.push(local0);
                                                                      frame.push(local28);
                                                                      frame.push(local38);
                                                                      frame.push(local24);
                                                                      frame.i32_add();
                                                                      local37 = frame.peek();
                                                                      frame.i32_add();
                                                                      frame.push(local26);
                                                                      frame.i32_add();
                                                                      local58 = frame.peek();
                                                                      frame.i32_const(6);
                                                                      frame.i32_add();
                                                                      local35 = frame.peek();
                                                                      frame.i32_store(2, 0x700);
                                                                      frame.push(local0);
                                                                      frame.i32_const(0x708);
                                                                      frame.i32_add();
                                                                      frame.push(local28);
                                                                      frame.push(local29);
                                                                      frame.push(local23);
                                                                      frame.i32_add();
                                                                      frame.i32_add();
                                                                      frame.push(local26);
                                                                      frame.i32_add();
                                                                      frame.push(local25);
                                                                      frame.i32_add();
                                                                      frame.i32_const(6);
                                                                      frame.i32_add();
                                                                      frame.push(local38);
                                                                      {
                                                                        var t2 = frame.pop();
                                                                        var t1 = frame.pop();
                                                                        var t0 = frame.pop();
                                                                        _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                            t0, t1, t2);
                                                                      }
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 0x708);
                                                                      if (frame.pop() != 0)
                                                                        break block_label_12;
                                                                      frame.push(local0);
                                                                      frame.i32_const(0x710);
                                                                      frame.i32_add();
                                                                      frame.i32_load(2, 0);
                                                                      frame.i32_eqz();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_12;
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 0x70c);
                                                                      local25 = frame.peek();
                                                                      frame.i32_load8_s(0, 0);
                                                                      arg1 = frame.peek();
                                                                      frame.i32_const(-1);
                                                                      frame.i32_le_s();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_31;
                                                                      frame.push(arg1);
                                                                      frame.i32_const(255);
                                                                      frame.i32_and();
                                                                      local60 = frame.pop();
                                                                      break block_label_30;
                                                                    }
                                                                    frame.push(local25);
                                                                    frame.i32_const(4);
                                                                    frame.i32_ne();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_29;
                                                                    frame.i32_const(5);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local58);
                                                                    local27 = frame.pop();
                                                                    break block_label_9;
                                                                  }
                                                                  frame.push(local25);
                                                                  frame.i32_load8_u(0, 1);
                                                                  frame.i32_const(63);
                                                                  frame.i32_and();
                                                                  local23 = frame.pop();
                                                                  frame.push(arg1);
                                                                  frame.i32_const(31);
                                                                  frame.i32_and();
                                                                  local29 = frame.pop();
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(arg1);
                                                                    frame.i32_const(-33);
                                                                    frame.i32_gt_u();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(local29);
                                                                    frame.i32_const(6);
                                                                    frame.i32_shl();
                                                                    frame.push(local23);
                                                                    frame.i32_or();
                                                                    local60 = frame.pop();
                                                                    break block_label_30;
                                                                  }
                                                                  frame.push(local23);
                                                                  frame.i32_const(6);
                                                                  frame.i32_shl();
                                                                  frame.push(local25);
                                                                  frame.i32_load8_u(0, 2);
                                                                  frame.i32_const(63);
                                                                  frame.i32_and();
                                                                  frame.i32_or();
                                                                  local23 = frame.pop();
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(arg1);
                                                                    frame.i32_const(-16);
                                                                    frame.i32_ge_u();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_31;
                                                                    frame.push(local23);
                                                                    frame.push(local29);
                                                                    frame.i32_const(12);
                                                                    frame.i32_shl();
                                                                    frame.i32_or();
                                                                    local60 = frame.pop();
                                                                    break block_label_30;
                                                                  }
                                                                  frame.i32_const(7);
                                                                  arg1 = frame.pop();
                                                                  frame.push(local23);
                                                                  frame.i32_const(6);
                                                                  frame.i32_shl();
                                                                  frame.push(local25);
                                                                  frame.i32_load8_u(0, 3);
                                                                  frame.i32_const(63);
                                                                  frame.i32_and();
                                                                  frame.i32_or();
                                                                  frame.push(local29);
                                                                  frame.i32_const(18);
                                                                  frame.i32_shl();
                                                                  frame.i32_const(0x1c0000);
                                                                  frame.i32_and();
                                                                  frame.i32_or();
                                                                  local60 = frame.peek();
                                                                  frame.i32_const(0x110000);
                                                                  frame.i32_eq();
                                                                  if (frame.pop() != 0) break block_label_8;
                                                                }
                                                                frame.push(local35);
                                                                frame.push(local27);
                                                                frame.i32_eq();
                                                                if (frame.pop() != 0) break block_label_10;
                                                                frame.push(local38);
                                                                frame.push(local42);
                                                                frame.i32_add();
                                                                local42 = frame.pop();
                                                                frame.push(local45);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local45 = frame.pop();
                                                                frame.push(local38);
                                                                frame.push(local46);
                                                                frame.i32_add();
                                                                local46 = frame.pop();
                                                                frame.push(local39);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local39 = frame.pop();
                                                                frame.push(local38);
                                                                frame.push(local44);
                                                                frame.i32_add();
                                                                local44 = frame.pop();
                                                                frame.push(local43);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local43 = frame.pop();
                                                                frame.push(local38);
                                                                frame.push(local49);
                                                                frame.i32_add();
                                                                local48 = frame.pop();
                                                                frame.push(local50);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local50 = frame.pop();
                                                                frame.i32_const(0);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local49 = frame.pop();
                                                                frame.push(local41);
                                                                frame.push(local38);
                                                                frame.i32_sub();
                                                                local41 = frame.peek();
                                                                frame.push(local36);
                                                                frame.i32_add();
                                                                frame.push(local26);
                                                                frame.i32_sub();
                                                                arg1 = frame.peek();
                                                                frame.i32_const(-8);
                                                                frame.i32_add();
                                                                local53 = frame.pop();
                                                                frame.push(local58);
                                                                frame.i32_const(11);
                                                                frame.i32_add();
                                                                local61 = frame.pop();
                                                                frame.push(arg1);
                                                                frame.push(local35);
                                                                frame.i32_add();
                                                                frame.i32_const(-6);
                                                                frame.i32_add();
                                                                local62 = frame.pop();
                                                                frame.push(local38);
                                                                local55 = frame.pop();
                                                                frame.i32_const(0);
                                                                arg1 = frame.pop();
                                                                frame.i32_const(0);
                                                                local25 = frame.pop();
                                                                frame.i32_const(-1);
                                                                local23 = frame.pop();
                                                                frame.i32_const(0);
                                                                local29 = frame.pop();

                                                                loop_label_30:
                                                                for (;;) {
                                                                  frame.push(local58);
                                                                  frame.push(local25);
                                                                  frame.i32_add();
                                                                  local56 = frame.peek();
                                                                  frame.i32_const(6);
                                                                  frame.i32_add();
                                                                  frame.i32_load8_s(0, 0);
                                                                  local35 = frame.peek();
                                                                  frame.i32_const(127);
                                                                  frame.i32_and();
                                                                  local59 = frame.peek();
                                                                  frame.push(arg1);
                                                                  frame.i32_shl();
                                                                  frame.push(local29);
                                                                  frame.i32_or();
                                                                  local29 = frame.pop();
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          frame.push(local35);
                                                                          frame.i32_const(0);
                                                                          frame.i32_lt_s();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_34;
                                                                          frame.push(local23);
                                                                          frame.push(local59);
                                                                          frame.i32_lt_u();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_11;
                                                                          frame.i32_const(4);
                                                                          arg1 = frame.pop();
                                                                          frame.push(local29);
                                                                          frame.i32_const(4);
                                                                          frame.i32_gt_u();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_12;
                                                                          frame.push(local52);
                                                                          frame.push(local38);
                                                                          frame.i32_sub();
                                                                          frame.push(local25);
                                                                          frame.i32_sub();
                                                                          frame.push(local29);
                                                                          frame.i32_lt_u();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_8;
                                                                          frame.i32_const(7);
                                                                          arg1 = frame.pop();
                                                                          frame.push(local0);
                                                                          frame.push(local28);
                                                                          frame.push(local29);
                                                                          frame.push(local37);
                                                                          frame.i32_add();
                                                                          local35 = frame.peek();
                                                                          frame.i32_add();
                                                                          frame.push(local26);
                                                                          frame.i32_add();
                                                                          local61 = frame.peek();
                                                                          frame.i32_const(7);
                                                                          frame.i32_add();
                                                                          local56 = frame.peek();
                                                                          frame.i32_store(2, 0x700);
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x708);
                                                                          frame.i32_add();
                                                                          frame.push(local28);
                                                                          frame.push(local38);
                                                                          frame.push(local24);
                                                                          frame.i32_add();
                                                                          frame.i32_add();
                                                                          frame.push(local26);
                                                                          frame.i32_add();
                                                                          frame.push(local25);
                                                                          frame.i32_add();
                                                                          frame.i32_const(7);
                                                                          frame.i32_add();
                                                                          frame.push(local29);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                                t0, t1, t2);
                                                                          }
                                                                          frame.push(local0);
                                                                          frame.i32_load(2, 0x708);
                                                                          if (frame.pop() != 0)
                                                                            break block_label_8;
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x710);
                                                                          frame.i32_add();
                                                                          frame.i32_load(2, 0);
                                                                          frame.i32_eqz();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_8;
                                                                          frame.push(local0);
                                                                          frame.i32_load(2, 0x70c);
                                                                          local23 = frame.peek();
                                                                          frame.i32_load8_s(0, 0);
                                                                          local25 = frame.peek();
                                                                          frame.i32_const(-1);
                                                                          frame.i32_le_s();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_33;
                                                                          frame.push(local25);
                                                                          frame.i32_const(255);
                                                                          frame.i32_and();
                                                                          local63 = frame.pop();
                                                                          break block_label_32;
                                                                        }
                                                                        frame.push(local25);
                                                                        frame.i32_const(4);
                                                                        frame.i32_ne();
                                                                        if (frame.pop() != 0)
                                                                          break block_label_31;
                                                                        frame.i32_const(5);
                                                                        arg1 = frame.pop();
                                                                        frame.push(local61);
                                                                        local27 = frame.pop();
                                                                        break block_label_9;
                                                                      }
                                                                      frame.push(local23);
                                                                      frame.i32_load8_u(0, 1);
                                                                      frame.i32_const(63);
                                                                      frame.i32_and();
                                                                      local38 = frame.pop();
                                                                      frame.push(local25);
                                                                      frame.i32_const(31);
                                                                      frame.i32_and();
                                                                      local24 = frame.pop();
                                                                      block_label_33:
                                                                      {
                                                                        frame.push(local25);
                                                                        frame.i32_const(-33);
                                                                        frame.i32_gt_u();
                                                                        if (frame.pop() != 0)
                                                                          break block_label_33;
                                                                        frame.push(local24);
                                                                        frame.i32_const(6);
                                                                        frame.i32_shl();
                                                                        frame.push(local38);
                                                                        frame.i32_or();
                                                                        local63 = frame.pop();
                                                                        break block_label_32;
                                                                      }
                                                                      frame.push(local38);
                                                                      frame.i32_const(6);
                                                                      frame.i32_shl();
                                                                      frame.push(local23);
                                                                      frame.i32_load8_u(0, 2);
                                                                      frame.i32_const(63);
                                                                      frame.i32_and();
                                                                      frame.i32_or();
                                                                      local38 = frame.pop();
                                                                      block_label_33:
                                                                      {
                                                                        frame.push(local25);
                                                                        frame.i32_const(-16);
                                                                        frame.i32_ge_u();
                                                                        if (frame.pop() != 0)
                                                                          break block_label_33;
                                                                        frame.push(local38);
                                                                        frame.push(local24);
                                                                        frame.i32_const(12);
                                                                        frame.i32_shl();
                                                                        frame.i32_or();
                                                                        local63 = frame.pop();
                                                                        break block_label_32;
                                                                      }
                                                                      frame.push(local38);
                                                                      frame.i32_const(6);
                                                                      frame.i32_shl();
                                                                      frame.push(local23);
                                                                      frame.i32_load8_u(0, 3);
                                                                      frame.i32_const(63);
                                                                      frame.i32_and();
                                                                      frame.i32_or();
                                                                      frame.push(local24);
                                                                      frame.i32_const(18);
                                                                      frame.i32_shl();
                                                                      frame.i32_const(0x1c0000);
                                                                      frame.i32_and();
                                                                      frame.i32_or();
                                                                      local63 = frame.peek();
                                                                      frame.i32_const(0x110000);
                                                                      frame.i32_eq();
                                                                      if (frame.pop() != 0)
                                                                        break block_label_8;
                                                                    }
                                                                    frame.push(local56);
                                                                    frame.push(local27);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0)
                                                                      break block_label_10;
                                                                    frame.push(local29);
                                                                    frame.push(local42);
                                                                    frame.i32_add();
                                                                    local24 = frame.pop();
                                                                    frame.push(local45);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local38 = frame.pop();
                                                                    frame.push(local39);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local42 = frame.pop();
                                                                    frame.push(local29);
                                                                    frame.push(local46);
                                                                    frame.i32_add();
                                                                    local45 = frame.pop();
                                                                    frame.push(local43);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local39 = frame.pop();
                                                                    frame.push(local29);
                                                                    frame.push(local44);
                                                                    frame.i32_add();
                                                                    local46 = frame.pop();
                                                                    frame.push(local50);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local43 = frame.pop();
                                                                    frame.push(local29);
                                                                    frame.push(local48);
                                                                    frame.i32_add();
                                                                    local44 = frame.pop();
                                                                    frame.push(local49);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local50 = frame.pop();
                                                                    frame.push(local29);
                                                                    frame.push(local55);
                                                                    frame.i32_add();
                                                                    local48 = frame.pop();
                                                                    frame.i32_const(0);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local49 = frame.pop();
                                                                    frame.push(local41);
                                                                    frame.push(local29);
                                                                    frame.i32_sub();
                                                                    local41 = frame.peek();
                                                                    frame.push(local36);
                                                                    frame.i32_add();
                                                                    frame.push(local26);
                                                                    frame.i32_sub();
                                                                    arg1 = frame.peek();
                                                                    frame.i32_const(-9);
                                                                    frame.i32_add();
                                                                    local52 = frame.pop();
                                                                    frame.push(local61);
                                                                    frame.i32_const(12);
                                                                    frame.i32_add();
                                                                    local64 = frame.pop();
                                                                    frame.push(arg1);
                                                                    frame.push(local56);
                                                                    frame.i32_add();
                                                                    frame.i32_const(-7);
                                                                    frame.i32_add();
                                                                    local65 = frame.pop();
                                                                    frame.push(local29);
                                                                    local55 = frame.pop();
                                                                    frame.i32_const(0);
                                                                    arg1 = frame.pop();
                                                                    frame.i32_const(0);
                                                                    local25 = frame.pop();
                                                                    frame.i32_const(-1);
                                                                    local56 = frame.pop();
                                                                    frame.i32_const(0);
                                                                    local23 = frame.pop();

                                                                    loop_label_32:
                                                                    for (;;) {
                                                                      frame.push(local61);
                                                                      frame.push(local25);
                                                                      frame.i32_add();
                                                                      local59 = frame.peek();
                                                                      frame.i32_const(7);
                                                                      frame.i32_add();
                                                                      frame.i32_load8_s(0, 0);
                                                                      local58 = frame.peek();
                                                                      frame.i32_const(127);
                                                                      frame.i32_and();
                                                                      local62 = frame.peek();
                                                                      frame.push(arg1);
                                                                      frame.i32_shl();
                                                                      frame.push(local23);
                                                                      frame.i32_or();
                                                                      local23 = frame.pop();
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(local58);
                                                                              frame.i32_const(0);
                                                                              frame.i32_lt_s();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_36;
                                                                              frame.push(local56);
                                                                              frame.push(local62);
                                                                              frame.i32_lt_u();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_11;
                                                                              frame.i32_const(4);
                                                                              arg1 = frame.pop();
                                                                              frame.push(local23);
                                                                              frame.i32_const(4);
                                                                              frame.i32_gt_u();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_12;
                                                                              frame.push(local53);
                                                                              frame.push(local29);
                                                                              frame.i32_sub();
                                                                              frame.push(local25);
                                                                              frame.i32_sub();
                                                                              frame.push(local23);
                                                                              frame.i32_lt_u();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_8;
                                                                              frame.push(local0);
                                                                              frame.push(local28);
                                                                              frame.push(local23);
                                                                              frame.push(local35);
                                                                              frame.i32_add();
                                                                              local53 = frame.peek();
                                                                              frame.i32_add();
                                                                              frame.push(local26);
                                                                              frame.i32_add();
                                                                              local64 = frame.peek();
                                                                              frame.i32_const(8);
                                                                              frame.i32_add();
                                                                              local61 = frame.peek();
                                                                              frame.i32_store(2, 0x700);
                                                                              frame.push(local0);
                                                                              frame.i32_const(0x708);
                                                                              frame.i32_add();
                                                                              frame.push(local28);
                                                                              frame.push(local29);
                                                                              frame.push(local37);
                                                                              frame.i32_add();
                                                                              frame.i32_add();
                                                                              frame.push(local26);
                                                                              frame.i32_add();
                                                                              frame.push(local25);
                                                                              frame.i32_add();
                                                                              frame.i32_const(8);
                                                                              frame.i32_add();
                                                                              frame.push(local23);
                                                                              {
                                                                                var t2 = frame.pop();
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                                    t0, t1, t2);
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 0x708);
                                                                              if (frame.pop() != 0)
                                                                                break block_label_12;
                                                                              frame.push(local0);
                                                                              frame.i32_const(0x708);
                                                                              frame.i32_add();
                                                                              frame.i32_const(8);
                                                                              frame.i32_add();
                                                                              frame.i32_load(2, 0);
                                                                              frame.i32_eqz();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_12;
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 0x70c);
                                                                              local25 = frame.peek();
                                                                              frame.i32_load8_s(0, 0);
                                                                              arg1 = frame.peek();
                                                                              frame.i32_const(-1);
                                                                              frame.i32_le_s();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_35;
                                                                              frame.push(arg1);
                                                                              frame.i32_const(255);
                                                                              frame.i32_and();
                                                                              local66 = frame.pop();
                                                                              break block_label_34;
                                                                            }
                                                                            frame.push(local25);
                                                                            frame.i32_const(4);
                                                                            frame.i32_ne();
                                                                            if (frame.pop() != 0)
                                                                              break block_label_33;
                                                                            frame.i32_const(5);
                                                                            arg1 = frame.pop();
                                                                            frame.push(local64);
                                                                            local27 = frame.pop();
                                                                            break block_label_9;
                                                                          }
                                                                          frame.push(local25);
                                                                          frame.i32_load8_u(0, 1);
                                                                          frame.i32_const(63);
                                                                          frame.i32_and();
                                                                          local37 = frame.pop();
                                                                          frame.push(arg1);
                                                                          frame.i32_const(31);
                                                                          frame.i32_and();
                                                                          local29 = frame.pop();
                                                                          block_label_35:
                                                                          {
                                                                            frame.push(arg1);
                                                                            frame.i32_const(-33);
                                                                            frame.i32_gt_u();
                                                                            if (frame.pop() != 0)
                                                                              break block_label_35;
                                                                            frame.push(local29);
                                                                            frame.i32_const(6);
                                                                            frame.i32_shl();
                                                                            frame.push(local37);
                                                                            frame.i32_or();
                                                                            local66 = frame.pop();
                                                                            break block_label_34;
                                                                          }
                                                                          frame.push(local37);
                                                                          frame.i32_const(6);
                                                                          frame.i32_shl();
                                                                          frame.push(local25);
                                                                          frame.i32_load8_u(0, 2);
                                                                          frame.i32_const(63);
                                                                          frame.i32_and();
                                                                          frame.i32_or();
                                                                          local37 = frame.pop();
                                                                          block_label_35:
                                                                          {
                                                                            frame.push(arg1);
                                                                            frame.i32_const(-16);
                                                                            frame.i32_ge_u();
                                                                            if (frame.pop() != 0)
                                                                              break block_label_35;
                                                                            frame.push(local37);
                                                                            frame.push(local29);
                                                                            frame.i32_const(12);
                                                                            frame.i32_shl();
                                                                            frame.i32_or();
                                                                            local66 = frame.pop();
                                                                            break block_label_34;
                                                                          }
                                                                          frame.i32_const(7);
                                                                          arg1 = frame.pop();
                                                                          frame.push(local37);
                                                                          frame.i32_const(6);
                                                                          frame.i32_shl();
                                                                          frame.push(local25);
                                                                          frame.i32_load8_u(0, 3);
                                                                          frame.i32_const(63);
                                                                          frame.i32_and();
                                                                          frame.i32_or();
                                                                          frame.push(local29);
                                                                          frame.i32_const(18);
                                                                          frame.i32_shl();
                                                                          frame.i32_const(0x1c0000);
                                                                          frame.i32_and();
                                                                          frame.i32_or();
                                                                          local66 = frame.peek();
                                                                          frame.i32_const(0x110000);
                                                                          frame.i32_eq();
                                                                          if (frame.pop() != 0)
                                                                            break block_label_8;
                                                                        }
                                                                        frame.push(local61);
                                                                        frame.push(local27);
                                                                        frame.i32_eq();
                                                                        if (frame.pop() != 0)
                                                                          break block_label_10;
                                                                        frame.push(local23);
                                                                        frame.push(local24);
                                                                        frame.i32_add();
                                                                        local56 = frame.pop();
                                                                        frame.push(local38);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local58 = frame.pop();
                                                                        frame.push(local42);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local42 = frame.pop();
                                                                        frame.push(local23);
                                                                        frame.push(local45);
                                                                        frame.i32_add();
                                                                        local45 = frame.pop();
                                                                        frame.push(local39);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local39 = frame.pop();
                                                                        frame.push(local23);
                                                                        frame.push(local46);
                                                                        frame.i32_add();
                                                                        local46 = frame.pop();
                                                                        frame.push(local43);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local43 = frame.pop();
                                                                        frame.push(local23);
                                                                        frame.push(local44);
                                                                        frame.i32_add();
                                                                        local44 = frame.pop();
                                                                        frame.push(local50);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local50 = frame.pop();
                                                                        frame.push(local23);
                                                                        frame.push(local48);
                                                                        frame.i32_add();
                                                                        local48 = frame.pop();
                                                                        frame.push(local49);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local49 = frame.pop();
                                                                        frame.push(local23);
                                                                        frame.push(local55);
                                                                        frame.i32_add();
                                                                        local55 = frame.pop();
                                                                        frame.i32_const(0);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local59 = frame.pop();
                                                                        frame.push(local41);
                                                                        frame.push(local23);
                                                                        frame.i32_sub();
                                                                        local24 = frame.peek();
                                                                        frame.push(local36);
                                                                        frame.i32_add();
                                                                        frame.push(local26);
                                                                        frame.i32_sub();
                                                                        arg1 = frame.peek();
                                                                        frame.i32_const(-10);
                                                                        frame.i32_add();
                                                                        local38 = frame.pop();
                                                                        frame.push(local64);
                                                                        frame.i32_const(13);
                                                                        frame.i32_add();
                                                                        local67 = frame.pop();
                                                                        frame.push(arg1);
                                                                        frame.push(local61);
                                                                        frame.i32_add();
                                                                        frame.i32_const(-8);
                                                                        frame.i32_add();
                                                                        local68 = frame.pop();
                                                                        frame.push(local23);
                                                                        local61 = frame.pop();
                                                                        frame.i32_const(0);
                                                                        arg1 = frame.pop();
                                                                        frame.i32_const(0);
                                                                        local25 = frame.pop();
                                                                        frame.i32_const(-1);
                                                                        local37 = frame.pop();
                                                                        frame.i32_const(0);
                                                                        local29 = frame.pop();

                                                                        loop_label_34:
                                                                        for (;;) {
                                                                          frame.push(local64);
                                                                          frame.push(local25);
                                                                          frame.i32_add();
                                                                          local62 = frame.peek();
                                                                          frame.i32_const(8);
                                                                          frame.i32_add();
                                                                          frame.i32_load8_s(0, 0);
                                                                          local41 = frame.peek();
                                                                          frame.i32_const(127);
                                                                          frame.i32_and();
                                                                          local65 = frame.peek();
                                                                          frame.push(arg1);
                                                                          frame.i32_shl();
                                                                          frame.push(local29);
                                                                          frame.i32_or();
                                                                          local29 = frame.pop();
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  frame.push(local41);
                                                                                  frame.i32_const(0);
                                                                                  frame.i32_lt_s();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_38;
                                                                                  frame.push(local37);
                                                                                  frame.push(local65);
                                                                                  frame.i32_lt_u();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_11;
                                                                                  frame.i32_const(4);
                                                                                  arg1 = frame.pop();
                                                                                  frame.push(local29);
                                                                                  frame.i32_const(4);
                                                                                  frame.i32_gt_u();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_12;
                                                                                  frame.push(local52);
                                                                                  frame.push(local23);
                                                                                  frame.i32_sub();
                                                                                  frame.push(local25);
                                                                                  frame.i32_sub();
                                                                                  frame.push(local29);
                                                                                  frame.i32_lt_u();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_8;
                                                                                  frame.push(local0);
                                                                                  frame.push(local28);
                                                                                  frame.push(local29);
                                                                                  frame.push(local53);
                                                                                  frame.i32_add();
                                                                                  frame.i32_add();
                                                                                  frame.push(local26);
                                                                                  frame.i32_add();
                                                                                  local37 = frame.peek();
                                                                                  frame.i32_const(9);
                                                                                  frame.i32_add();
                                                                                  local42 = frame.peek();
                                                                                  frame.i32_store(2, 0x700);
                                                                                  frame.push(local0);
                                                                                  frame.i32_const(0x708);
                                                                                  frame.i32_add();
                                                                                  frame.push(local28);
                                                                                  frame.push(local23);
                                                                                  frame.push(local35);
                                                                                  frame.i32_add();
                                                                                  frame.i32_add();
                                                                                  frame.push(local26);
                                                                                  frame.i32_add();
                                                                                  frame.push(local25);
                                                                                  frame.i32_add();
                                                                                  frame.i32_const(9);
                                                                                  frame.i32_add();
                                                                                  frame.push(local29);
                                                                                  {
                                                                                    var t2 = frame.pop();
                                                                                    var t1 = frame.pop();
                                                                                    var t0 = frame.pop();
                                                                                    _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                                        t0, t1, t2);
                                                                                  }
                                                                                  frame.push(local0);
                                                                                  frame.i32_load(2, 0x708);
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_12;
                                                                                  frame.push(local0);
                                                                                  frame.i32_const(0x710);
                                                                                  frame.i32_add();
                                                                                  frame.i32_load(2, 0);
                                                                                  frame.i32_eqz();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_12;
                                                                                  frame.push(local0);
                                                                                  frame.i32_load(2, 0x70c);
                                                                                  local28 = frame.peek();
                                                                                  frame.i32_load8_s(0, 0);
                                                                                  arg1 = frame.peek();
                                                                                  frame.i32_const(-1);
                                                                                  frame.i32_le_s();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_37;
                                                                                  frame.push(arg1);
                                                                                  frame.i32_const(255);
                                                                                  frame.i32_and();
                                                                                  local41 = frame.pop();
                                                                                  break block_label_36;
                                                                                }
                                                                                frame.push(local25);
                                                                                frame.i32_const(4);
                                                                                frame.i32_ne();
                                                                                if (frame.pop() != 0)
                                                                                  break block_label_35;
                                                                                frame.i32_const(5);
                                                                                arg1 = frame.pop();
                                                                                frame.push(local67);
                                                                                local27 = frame.pop();
                                                                                break block_label_9;
                                                                              }
                                                                              frame.push(local28);
                                                                              frame.i32_load8_u(0, 1);
                                                                              frame.i32_const(63);
                                                                              frame.i32_and();
                                                                              local23 = frame.pop();
                                                                              frame.push(arg1);
                                                                              frame.i32_const(31);
                                                                              frame.i32_and();
                                                                              local25 = frame.pop();
                                                                              block_label_37:
                                                                              {
                                                                                frame.push(arg1);
                                                                                frame.i32_const(-33);
                                                                                frame.i32_gt_u();
                                                                                if (frame.pop() != 0)
                                                                                  break block_label_37;
                                                                                frame.push(local25);
                                                                                frame.i32_const(6);
                                                                                frame.i32_shl();
                                                                                frame.push(local23);
                                                                                frame.i32_or();
                                                                                local41 = frame.pop();
                                                                                break block_label_36;
                                                                              }
                                                                              frame.push(local23);
                                                                              frame.i32_const(6);
                                                                              frame.i32_shl();
                                                                              frame.push(local28);
                                                                              frame.i32_load8_u(0, 2);
                                                                              frame.i32_const(63);
                                                                              frame.i32_and();
                                                                              frame.i32_or();
                                                                              local23 = frame.pop();
                                                                              block_label_37:
                                                                              {
                                                                                frame.push(arg1);
                                                                                frame.i32_const(-16);
                                                                                frame.i32_ge_u();
                                                                                if (frame.pop() != 0)
                                                                                  break block_label_37;
                                                                                frame.push(local23);
                                                                                frame.push(local25);
                                                                                frame.i32_const(12);
                                                                                frame.i32_shl();
                                                                                frame.i32_or();
                                                                                local41 = frame.pop();
                                                                                break block_label_36;
                                                                              }
                                                                              frame.i32_const(7);
                                                                              arg1 = frame.pop();
                                                                              frame.push(local23);
                                                                              frame.i32_const(6);
                                                                              frame.i32_shl();
                                                                              frame.push(local28);
                                                                              frame.i32_load8_u(0, 3);
                                                                              frame.i32_const(63);
                                                                              frame.i32_and();
                                                                              frame.i32_or();
                                                                              frame.push(local25);
                                                                              frame.i32_const(18);
                                                                              frame.i32_shl();
                                                                              frame.i32_const(0x1c0000);
                                                                              frame.i32_and();
                                                                              frame.i32_or();
                                                                              local41 = frame.peek();
                                                                              frame.i32_const(0x110000);
                                                                              frame.i32_eq();
                                                                              if (frame.pop() != 0)
                                                                                break block_label_8;
                                                                            }
                                                                            frame.push(local42);
                                                                            frame.push(local27);
                                                                            frame.i32_eq();
                                                                            if (frame.pop() != 0)
                                                                              break block_label_10;
                                                                            frame.push(local37);
                                                                            frame.i32_const(14);
                                                                            frame.i32_add();
                                                                            local45 = frame.pop();
                                                                            frame.push(local24);
                                                                            frame.push(local29);
                                                                            frame.i32_sub();
                                                                            frame.push(local36);
                                                                            frame.i32_add();
                                                                            frame.push(local26);
                                                                            frame.i32_sub();
                                                                            frame.push(local42);
                                                                            frame.i32_add();
                                                                            frame.i32_const(-9);
                                                                            frame.i32_add();
                                                                            local36 = frame.pop();
                                                                            frame.i32_const(-1);
                                                                            local25 = frame.pop();
                                                                            frame.i32_const(0);
                                                                            local26 = frame.pop();
                                                                            frame.i32_const(0);
                                                                            arg1 = frame.pop();
                                                                            frame.i32_const(0);
                                                                            local28 = frame.pop();

                                                                            loop_label_36:
                                                                            for (;;) {
                                                                              frame.push(local37);
                                                                              frame.push(local26);
                                                                              frame.i32_add();
                                                                              local23 = frame.peek();
                                                                              frame.i32_const(9);
                                                                              frame.i32_add();
                                                                              frame.i32_load8_s(0, 0);
                                                                              local24 = frame.peek();
                                                                              frame.i32_const(127);
                                                                              frame.i32_and();
                                                                              local35 = frame.peek();
                                                                              frame.push(arg1);
                                                                              frame.i32_shl();
                                                                              frame.push(local28);
                                                                              frame.i32_or();
                                                                              local28 = frame.pop();
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  block_label_39:
                                                                                  {
                                                                                    frame.push(local24);
                                                                                    frame.i32_const(0);
                                                                                    frame.i32_lt_s();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_39;
                                                                                    frame.i32_const(5);
                                                                                    arg1 = frame.pop();
                                                                                    frame.push(local25);
                                                                                    frame.push(local35);
                                                                                    frame.i32_lt_u();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_8;
                                                                                    frame.i32_const(4);
                                                                                    arg1 = frame.pop();
                                                                                    frame.push(local28);
                                                                                    frame.i32_const(4);
                                                                                    frame.i32_gt_u();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_12;
                                                                                    frame.push(local38);
                                                                                    frame.push(local29);
                                                                                    frame.i32_sub();
                                                                                    frame.push(local26);
                                                                                    frame.i32_sub();
                                                                                    frame.push(local28);
                                                                                    frame.i32_lt_u();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_8;
                                                                                    frame.push(local0);
                                                                                    frame.i32_const(0x708);
                                                                                    frame.i32_add();
                                                                                    frame.push(local23);
                                                                                    frame.i32_const(10);
                                                                                    frame.i32_add();
                                                                                    frame.push(local28);
                                                                                    {
                                                                                      var t2 = frame.pop();
                                                                                      var t1 = frame.pop();
                                                                                      var t0 = frame.pop();
                                                                                      _ZN4core3str8converts9from_utf817h989570921179a6cfE(
                                                                                          t0, t1, t2);
                                                                                    }
                                                                                    frame.push(local0);
                                                                                    frame.i32_load(2, 0x708);
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_12;
                                                                                    frame.push(local0);
                                                                                    frame.i32_const(0x710);
                                                                                    frame.i32_add();
                                                                                    frame.i32_load(2, 0);
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_38;
                                                                                    break block_label_12;
                                                                                  }
                                                                                  frame.push(local26);
                                                                                  frame.i32_const(4);
                                                                                  frame.i32_ne();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_37;
                                                                                  frame.i32_const(5);
                                                                                  arg1 = frame.pop();
                                                                                  frame.push(local45);
                                                                                  local27 = frame.pop();
                                                                                  break block_label_9;
                                                                                }
                                                                                block_label_38:
                                                                                {
                                                                                  block_label_39:
                                                                                  {
                                                                                    frame.push(local0);
                                                                                    frame.i32_load(2, 0x70c);
                                                                                    local26 = frame.peek();
                                                                                    frame.i32_load8_s(0, 0);
                                                                                    arg1 = frame.peek();
                                                                                    frame.i32_const(-1);
                                                                                    frame.i32_le_s();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_39;
                                                                                    frame.push(arg1);
                                                                                    frame.i32_const(255);
                                                                                    frame.i32_and();
                                                                                    local26 = frame.pop();
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.push(local26);
                                                                                  frame.i32_load8_u(0, 1);
                                                                                  frame.i32_const(63);
                                                                                  frame.i32_and();
                                                                                  local27 = frame.pop();
                                                                                  frame.push(arg1);
                                                                                  frame.i32_const(31);
                                                                                  frame.i32_and();
                                                                                  local28 = frame.pop();
                                                                                  block_label_39:
                                                                                  {
                                                                                    frame.push(arg1);
                                                                                    frame.i32_const(-33);
                                                                                    frame.i32_gt_u();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_39;
                                                                                    frame.push(local28);
                                                                                    frame.i32_const(6);
                                                                                    frame.i32_shl();
                                                                                    frame.push(local27);
                                                                                    frame.i32_or();
                                                                                    local26 = frame.pop();
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.push(local27);
                                                                                  frame.i32_const(6);
                                                                                  frame.i32_shl();
                                                                                  frame.push(local26);
                                                                                  frame.i32_load8_u(0, 2);
                                                                                  frame.i32_const(63);
                                                                                  frame.i32_and();
                                                                                  frame.i32_or();
                                                                                  local27 = frame.pop();
                                                                                  block_label_39:
                                                                                  {
                                                                                    frame.push(arg1);
                                                                                    frame.i32_const(-16);
                                                                                    frame.i32_ge_u();
                                                                                    if (frame.pop() != 0)
                                                                                      break block_label_39;
                                                                                    frame.push(local27);
                                                                                    frame.push(local28);
                                                                                    frame.i32_const(12);
                                                                                    frame.i32_shl();
                                                                                    frame.i32_or();
                                                                                    local26 = frame.pop();
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.i32_const(7);
                                                                                  arg1 = frame.pop();
                                                                                  frame.push(local27);
                                                                                  frame.i32_const(6);
                                                                                  frame.i32_shl();
                                                                                  frame.push(local26);
                                                                                  frame.i32_load8_u(0, 3);
                                                                                  frame.i32_const(63);
                                                                                  frame.i32_and();
                                                                                  frame.i32_or();
                                                                                  frame.push(local28);
                                                                                  frame.i32_const(18);
                                                                                  frame.i32_shl();
                                                                                  frame.i32_const(0x1c0000);
                                                                                  frame.i32_and();
                                                                                  frame.i32_or();
                                                                                  local26 = frame.peek();
                                                                                  frame.i32_const(0x110000);
                                                                                  frame.i32_eq();
                                                                                  if (frame.pop() != 0)
                                                                                    break block_label_8;
                                                                                }
                                                                                frame.i32_const(13);
                                                                                arg1 = frame.pop();
                                                                                frame.push(local40);
                                                                                frame.i32_const(0x110000);
                                                                                frame.i32_eq();
                                                                                if (frame.pop() != 0)
                                                                                  break block_label_8;
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6fc);
                                                                                frame.i32_add();
                                                                                frame.push(local32);
                                                                                frame.i32_store8(0, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x670);
                                                                                frame.i32_add();
                                                                                frame.i32_const(136);
                                                                                frame.i32_add();
                                                                                frame.push(local26);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6f4);
                                                                                frame.i32_add();
                                                                                frame.push(local41);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6f0);
                                                                                frame.i32_add();
                                                                                frame.push(local66);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6ec);
                                                                                frame.i32_add();
                                                                                frame.push(local63);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6e8);
                                                                                frame.i32_add();
                                                                                frame.push(local60);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6e4);
                                                                                frame.i32_add();
                                                                                frame.push(local57);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6e0);
                                                                                frame.i32_add();
                                                                                frame.push(local54);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6dc);
                                                                                frame.i32_add();
                                                                                frame.push(local51);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6d8);
                                                                                frame.i32_add();
                                                                                frame.push(local47);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6d4);
                                                                                frame.i32_add();
                                                                                frame.push(local40);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6d0);
                                                                                frame.i32_add();
                                                                                frame.push(local33);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6cc);
                                                                                frame.i32_add();
                                                                                frame.push(local30);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6c8);
                                                                                frame.i32_add();
                                                                                frame.push(local31);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6c4);
                                                                                frame.i32_add();
                                                                                frame.push(local22);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6c0);
                                                                                frame.i32_add();
                                                                                frame.push(local19);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6bc);
                                                                                frame.i32_add();
                                                                                frame.push(local20);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6b8);
                                                                                frame.i32_add();
                                                                                frame.push(local21);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6b4);
                                                                                frame.i32_add();
                                                                                frame.push(local18);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6b0);
                                                                                frame.i32_add();
                                                                                frame.push(local11);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6ac);
                                                                                frame.i32_add();
                                                                                frame.push(local12);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6a8);
                                                                                frame.i32_add();
                                                                                frame.push(local13);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6a4);
                                                                                frame.i32_add();
                                                                                frame.push(local14);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x6a0);
                                                                                frame.i32_add();
                                                                                frame.push(local15);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x69c);
                                                                                frame.i32_add();
                                                                                frame.push(local16);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x698);
                                                                                frame.i32_add();
                                                                                frame.push(local17);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x694);
                                                                                frame.i32_add();
                                                                                frame.push(local10);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x690);
                                                                                frame.i32_add();
                                                                                frame.push(local3);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x68c);
                                                                                frame.i32_add();
                                                                                frame.push(local4);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x688);
                                                                                frame.i32_add();
                                                                                frame.push(local5);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x684);
                                                                                frame.i32_add();
                                                                                frame.push(local6);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x680);
                                                                                frame.i32_add();
                                                                                frame.push(local7);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x67c);
                                                                                frame.i32_add();
                                                                                frame.push(local8);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x678);
                                                                                frame.i32_add();
                                                                                arg1 = frame.peek();
                                                                                frame.push(local9);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.push(local34);
                                                                                frame.i32_store16(0, 0x6fd);
                                                                                frame.push(local0);
                                                                                frame.push(arg2);
                                                                                frame.i32_store(2, 0x674);
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x5e8);
                                                                                frame.i32_add();
                                                                                frame.push(arg1);
                                                                                frame.i32_const(136);
                                                                                {
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame.push(
                                                                                      _memcpy(t0, t1, t2));
                                                                                }
                                                                                frame.drop();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x550);
                                                                                frame.i32_add();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x5e8);
                                                                                frame.i32_add();
                                                                                frame.i32_const(136);
                                                                                {
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame.push(
                                                                                      _memcpy(t0, t1, t2));
                                                                                }
                                                                                frame.drop();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x4c8);
                                                                                frame.i32_add();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x550);
                                                                                frame.i32_add();
                                                                                frame.i32_const(136);
                                                                                {
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame.push(
                                                                                      _memcpy(t0, t1, t2));
                                                                                }
                                                                                frame.drop();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x440);
                                                                                frame.i32_add();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x4c8);
                                                                                frame.i32_add();
                                                                                frame.i32_const(136);
                                                                                {
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame.push(
                                                                                      _memcpy(t0, t1, t2));
                                                                                }
                                                                                frame.drop();
                                                                                frame.push(local0);
                                                                                frame.i32_const(952);
                                                                                frame.i32_add();
                                                                                frame.push(local0);
                                                                                frame.i32_const(0x440);
                                                                                frame.i32_add();
                                                                                frame.i32_const(136);
                                                                                {
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame.push(
                                                                                      _memcpy(t0, t1, t2));
                                                                                }
                                                                                frame.drop();
                                                                                break block_label_16;
                                                                              }
                                                                              frame.push(local26);
                                                                              frame.i32_const(1);
                                                                              frame.i32_add();
                                                                              local26 = frame.pop();
                                                                              frame.push(arg1);
                                                                              frame.i32_const(7);
                                                                              frame.i32_add();
                                                                              arg1 = frame.pop();
                                                                              frame.push(local25);
                                                                              frame.i32_const(7);
                                                                              frame.i32_shr_u();
                                                                              local25 = frame.pop();
                                                                              frame.push(local23);
                                                                              frame.i32_const(10);
                                                                              frame.i32_add();
                                                                              frame.push(local27);
                                                                              frame.i32_ne();
                                                                              if (frame.pop() != 0)
                                                                                continue loop_label_36;
                                                                              break;
                                                                            }
                                                                            frame.i32_const(4);
                                                                            arg1 = frame.pop();
                                                                            frame.push(local36);
                                                                            local27 = frame.pop();
                                                                            break block_label_9;
                                                                          }
                                                                          frame.push(local53);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local53 = frame.pop();
                                                                          frame.push(local24);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local24 = frame.pop();
                                                                          frame.push(local56);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local56 = frame.pop();
                                                                          frame.push(local58);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local58 = frame.pop();
                                                                          frame.push(local42);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local42 = frame.pop();
                                                                          frame.push(local45);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local45 = frame.pop();
                                                                          frame.push(local39);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local39 = frame.pop();
                                                                          frame.push(local46);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local46 = frame.pop();
                                                                          frame.push(local43);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local43 = frame.pop();
                                                                          frame.push(local44);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local44 = frame.pop();
                                                                          frame.push(local50);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local50 = frame.pop();
                                                                          frame.push(local48);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local48 = frame.pop();
                                                                          frame.push(local55);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local55 = frame.pop();
                                                                          frame.push(local49);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local49 = frame.pop();
                                                                          frame.push(local61);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local61 = frame.pop();
                                                                          frame.push(local59);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local59 = frame.pop();
                                                                          frame.push(arg1);
                                                                          frame.i32_const(7);
                                                                          frame.i32_add();
                                                                          arg1 = frame.pop();
                                                                          frame.push(local25);
                                                                          frame.i32_const(1);
                                                                          frame.i32_add();
                                                                          local25 = frame.pop();
                                                                          frame.push(local38);
                                                                          frame.i32_const(-1);
                                                                          frame.i32_add();
                                                                          local38 = frame.pop();
                                                                          frame.push(local37);
                                                                          frame.i32_const(7);
                                                                          frame.i32_shr_u();
                                                                          local37 = frame.pop();
                                                                          frame.push(local62);
                                                                          frame.i32_const(9);
                                                                          frame.i32_add();
                                                                          frame.push(local27);
                                                                          frame.i32_ne();
                                                                          if (frame.pop() != 0)
                                                                            continue loop_label_34;
                                                                          break;
                                                                        }
                                                                        frame.i32_const(4);
                                                                        arg1 = frame.pop();
                                                                        frame.push(local68);
                                                                        local27 = frame.pop();
                                                                        break block_label_9;
                                                                      }
                                                                      frame.push(local35);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local35 = frame.pop();
                                                                      frame.push(local41);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local41 = frame.pop();
                                                                      frame.push(local24);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local24 = frame.pop();
                                                                      frame.push(local38);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local38 = frame.pop();
                                                                      frame.push(local42);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local42 = frame.pop();
                                                                      frame.push(local45);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local45 = frame.pop();
                                                                      frame.push(local39);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local39 = frame.pop();
                                                                      frame.push(local46);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local46 = frame.pop();
                                                                      frame.push(local43);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local43 = frame.pop();
                                                                      frame.push(local44);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local44 = frame.pop();
                                                                      frame.push(local50);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local50 = frame.pop();
                                                                      frame.push(local48);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local48 = frame.pop();
                                                                      frame.push(local55);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local55 = frame.pop();
                                                                      frame.push(local49);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local49 = frame.pop();
                                                                      frame.push(arg1);
                                                                      frame.i32_const(7);
                                                                      frame.i32_add();
                                                                      arg1 = frame.pop();
                                                                      frame.push(local25);
                                                                      frame.i32_const(1);
                                                                      frame.i32_add();
                                                                      local25 = frame.pop();
                                                                      frame.push(local52);
                                                                      frame.i32_const(-1);
                                                                      frame.i32_add();
                                                                      local52 = frame.pop();
                                                                      frame.push(local56);
                                                                      frame.i32_const(7);
                                                                      frame.i32_shr_u();
                                                                      local56 = frame.pop();
                                                                      frame.push(local59);
                                                                      frame.i32_const(8);
                                                                      frame.i32_add();
                                                                      frame.push(local27);
                                                                      frame.i32_ne();
                                                                      if (frame.pop() != 0)
                                                                        continue loop_label_32;
                                                                      break;
                                                                    }
                                                                    frame.i32_const(4);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local65);
                                                                    local27 = frame.pop();
                                                                    break block_label_9;
                                                                  }
                                                                  frame.push(local37);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local37 = frame.pop();
                                                                  frame.push(local41);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local41 = frame.pop();
                                                                  frame.push(local42);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local42 = frame.pop();
                                                                  frame.push(local45);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local45 = frame.pop();
                                                                  frame.push(local46);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local46 = frame.pop();
                                                                  frame.push(local39);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local39 = frame.pop();
                                                                  frame.push(local44);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local44 = frame.pop();
                                                                  frame.push(local43);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local43 = frame.pop();
                                                                  frame.push(local48);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local48 = frame.pop();
                                                                  frame.push(local50);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local50 = frame.pop();
                                                                  frame.push(local55);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local55 = frame.pop();
                                                                  frame.push(local49);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local49 = frame.pop();
                                                                  frame.push(arg1);
                                                                  frame.i32_const(7);
                                                                  frame.i32_add();
                                                                  arg1 = frame.pop();
                                                                  frame.push(local25);
                                                                  frame.i32_const(1);
                                                                  frame.i32_add();
                                                                  local25 = frame.pop();
                                                                  frame.push(local53);
                                                                  frame.i32_const(-1);
                                                                  frame.i32_add();
                                                                  local53 = frame.pop();
                                                                  frame.push(local23);
                                                                  frame.i32_const(7);
                                                                  frame.i32_shr_u();
                                                                  local23 = frame.pop();
                                                                  frame.push(local56);
                                                                  frame.i32_const(7);
                                                                  frame.i32_add();
                                                                  frame.push(local27);
                                                                  frame.i32_ne();
                                                                  if (frame.pop() != 0)
                                                                    continue loop_label_30;
                                                                  break;
                                                                }
                                                                frame.i32_const(4);
                                                                arg1 = frame.pop();
                                                                frame.push(local62);
                                                                local27 = frame.pop();
                                                                break block_label_9;
                                                              }
                                                              frame.push(local24);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local24 = frame.pop();
                                                              frame.push(local41);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local41 = frame.pop();
                                                              frame.push(local42);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local42 = frame.pop();
                                                              frame.push(local45);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local45 = frame.pop();
                                                              frame.push(local46);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local46 = frame.pop();
                                                              frame.push(local39);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local39 = frame.pop();
                                                              frame.push(local44);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local44 = frame.pop();
                                                              frame.push(local43);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local43 = frame.pop();
                                                              frame.push(local49);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local49 = frame.pop();
                                                              frame.push(local50);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local50 = frame.pop();
                                                              frame.push(arg1);
                                                              frame.i32_const(7);
                                                              frame.i32_add();
                                                              arg1 = frame.pop();
                                                              frame.push(local25);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local25 = frame.pop();
                                                              frame.push(local52);
                                                              frame.i32_const(-1);
                                                              frame.i32_add();
                                                              local52 = frame.pop();
                                                              frame.push(local35);
                                                              frame.i32_const(7);
                                                              frame.i32_shr_u();
                                                              local35 = frame.pop();
                                                              frame.push(local53);
                                                              frame.i32_const(6);
                                                              frame.i32_add();
                                                              frame.push(local27);
                                                              frame.i32_ne();
                                                              if (frame.pop() != 0) continue loop_label_28;
                                                              break;
                                                            }
                                                            frame.i32_const(4);
                                                            arg1 = frame.pop();
                                                            frame.push(local59);
                                                            local27 = frame.pop();
                                                            break block_label_9;
                                                          }
                                                          frame.push(local23);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local23 = frame.pop();
                                                          frame.push(local41);
                                                          frame.i32_const(-1);
                                                          frame.i32_add();
                                                          local41 = frame.pop();
                                                          frame.push(local42);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local42 = frame.pop();
                                                          frame.push(local45);
                                                          frame.i32_const(-1);
                                                          frame.i32_add();
                                                          local45 = frame.pop();
                                                          frame.push(local46);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local46 = frame.pop();
                                                          frame.push(local39);
                                                          frame.i32_const(-1);
                                                          frame.i32_add();
                                                          local39 = frame.pop();
                                                          frame.push(local50);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local50 = frame.pop();
                                                          frame.push(local43);
                                                          frame.i32_const(-1);
                                                          frame.i32_add();
                                                          local43 = frame.pop();
                                                          frame.push(arg1);
                                                          frame.i32_const(7);
                                                          frame.i32_add();
                                                          arg1 = frame.pop();
                                                          frame.push(local25);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local25 = frame.pop();
                                                          frame.push(local48);
                                                          frame.i32_const(-1);
                                                          frame.i32_add();
                                                          local48 = frame.pop();
                                                          frame.push(local35);
                                                          frame.i32_const(7);
                                                          frame.i32_shr_u();
                                                          local35 = frame.pop();
                                                          frame.push(local49);
                                                          frame.i32_const(5);
                                                          frame.i32_add();
                                                          frame.push(local27);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) continue loop_label_26;
                                                          break;
                                                        }
                                                        frame.i32_const(4);
                                                        arg1 = frame.pop();
                                                        frame.push(local56);
                                                        local27 = frame.pop();
                                                        break block_label_9;
                                                      }
                                                      frame.push(local38);
                                                      frame.i32_const(1);
                                                      frame.i32_add();
                                                      local38 = frame.pop();
                                                      frame.push(local41);
                                                      frame.i32_const(-1);
                                                      frame.i32_add();
                                                      local41 = frame.pop();
                                                      frame.push(local42);
                                                      frame.i32_const(1);
                                                      frame.i32_add();
                                                      local42 = frame.pop();
                                                      frame.push(local45);
                                                      frame.i32_const(-1);
                                                      frame.i32_add();
                                                      local45 = frame.pop();
                                                      frame.push(local43);
                                                      frame.i32_const(1);
                                                      frame.i32_add();
                                                      local43 = frame.pop();
                                                      frame.push(local39);
                                                      frame.i32_const(-1);
                                                      frame.i32_add();
                                                      local39 = frame.pop();
                                                      frame.push(local23);
                                                      frame.i32_const(7);
                                                      frame.i32_add();
                                                      local23 = frame.pop();
                                                      frame.push(local25);
                                                      frame.i32_const(1);
                                                      frame.i32_add();
                                                      local25 = frame.pop();
                                                      frame.push(local44);
                                                      frame.i32_const(-1);
                                                      frame.i32_add();
                                                      local44 = frame.pop();
                                                      frame.push(local35);
                                                      frame.i32_const(7);
                                                      frame.i32_shr_u();
                                                      local35 = frame.pop();
                                                      frame.i32_const(4);
                                                      arg1 = frame.pop();
                                                      frame.push(local50);
                                                      frame.i32_const(4);
                                                      frame.i32_add();
                                                      frame.push(local27);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) continue loop_label_24;
                                                      break;
                                                    }
                                                    frame.push(local53);
                                                    local27 = frame.pop();
                                                    break block_label_9;
                                                  }
                                                  frame.push(local29);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local29 = frame.pop();
                                                  frame.push(local41);
                                                  frame.i32_const(-1);
                                                  frame.i32_add();
                                                  local41 = frame.pop();
                                                  frame.push(local39);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local39 = frame.pop();
                                                  frame.push(local45);
                                                  frame.i32_const(-1);
                                                  frame.i32_add();
                                                  local45 = frame.pop();
                                                  frame.push(arg1);
                                                  frame.i32_const(7);
                                                  frame.i32_add();
                                                  arg1 = frame.pop();
                                                  frame.push(local25);
                                                  frame.i32_const(1);
                                                  frame.i32_add();
                                                  local25 = frame.pop();
                                                  frame.push(local46);
                                                  frame.i32_const(-1);
                                                  frame.i32_add();
                                                  local46 = frame.pop();
                                                  frame.push(local37);
                                                  frame.i32_const(7);
                                                  frame.i32_shr_u();
                                                  local37 = frame.pop();
                                                  frame.push(local43);
                                                  frame.i32_const(3);
                                                  frame.i32_add();
                                                  frame.push(local27);
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) continue loop_label_22;
                                                  break;
                                                }
                                                frame.i32_const(4);
                                                arg1 = frame.pop();
                                                frame.push(local49);
                                                local27 = frame.pop();
                                                break block_label_9;
                                              }
                                              frame.push(local35);
                                              frame.i32_const(1);
                                              frame.i32_add();
                                              local35 = frame.pop();
                                              frame.push(local41);
                                              frame.i32_const(-1);
                                              frame.i32_add();
                                              local41 = frame.pop();
                                              frame.push(arg1);
                                              frame.i32_const(7);
                                              frame.i32_add();
                                              arg1 = frame.pop();
                                              frame.push(local29);
                                              frame.i32_const(1);
                                              frame.i32_add();
                                              local29 = frame.pop();
                                              frame.push(local42);
                                              frame.i32_const(-1);
                                              frame.i32_add();
                                              local42 = frame.pop();
                                              frame.push(local37);
                                              frame.i32_const(7);
                                              frame.i32_shr_u();
                                              local37 = frame.pop();
                                              frame.push(local45);
                                              frame.i32_const(2);
                                              frame.i32_add();
                                              frame.push(local27);
                                              frame.i32_ne();
                                              if (frame.pop() != 0) continue loop_label_20;
                                              break;
                                            }
                                            frame.i32_const(4);
                                            arg1 = frame.pop();
                                            frame.push(local44);
                                            local27 = frame.pop();
                                            break block_label_9;
                                          }
                                          frame.push(local0);
                                          frame.i32_load8_u(0, 0x709);
                                          arg1 = frame.pop();
                                          break block_label_7;
                                        }
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x709);
                                        arg1 = frame.pop();
                                        break block_label_6;
                                      }
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x709);
                                      arg1 = frame.pop();
                                      break block_label_5;
                                    }
                                    frame.push(local0);
                                    frame.i32_const(816);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(952);
                                    frame.i32_add();
                                    frame.i32_const(136);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(488);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(816);
                                    frame.i32_add();
                                    frame.i32_const(136);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    arg1 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_const(624);
                                    frame.i32_add();
                                    frame.push(local2);
                                    frame.i32_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(704);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(760);
                                    frame.i32_add();
                                    frame.i32_const(56);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(4);
                                    frame.i32_or();
                                    frame.push(local0);
                                    frame.i32_const(704);
                                    frame.i32_add();
                                    frame.i32_const(56);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(484);
                                    frame.i32_add();
                                    frame.push(arg2);
                                    frame.i32_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(400);
                                    frame.i32_add();
                                    frame.i32_const(8);
                                    frame.i32_add();
                                    local2 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(16);
                                    frame.i32_add();
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 0);
                                    frame.push(local0);
                                    frame.i32_const(400);
                                    frame.i32_add();
                                    frame.i32_const(15);
                                    frame.i32_add();
                                    local6 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(447);
                                    frame.i32_add();
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.i32_const(0);
                                    frame.i32_store(2, 424);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(8);
                                    frame.i32_add();
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 400);
                                    frame.push(local0);
                                    frame.i32_const(512);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    local13 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_const(516);
                                    frame.i32_add();
                                    local15 = frame.peek();
                                    frame.i32_load(2, 0);
                                    local17 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_const(456);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    local4 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_const(460);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    local8 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load8_u(0, 511);
                                    local11 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load8_u(0, 455);
                                    local5 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load8_u(0, 428);
                                    local9 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load16_u(0, 429);
                                    local3 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load8_u(0, 431);
                                    local7 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_const(376);
                                    frame.i32_add();
                                    frame.i32_const(16);
                                    frame.i32_add();
                                    local10 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(56);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    frame.i32_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(376);
                                    frame.i32_add();
                                    frame.i32_const(8);
                                    frame.i32_add();
                                    local14 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(472);
                                    frame.i32_add();
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 0);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i32_const(464);
                                    frame.i32_add();
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 376);
                                    frame.push(local0);
                                    frame.i32_const(352);
                                    frame.i32_add();
                                    frame.i32_const(15);
                                    frame.i32_add();
                                    local12 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(503);
                                    frame.i32_add();
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.i32_const(352);
                                    frame.i32_add();
                                    frame.i32_const(8);
                                    frame.i32_add();
                                    local16 = frame.peek();
                                    frame.push(local0);
                                    frame.i32_const(496);
                                    frame.i32_add();
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 0);
                                    frame.push(local0);
                                    frame.push(arg1);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 352);
                                    frame.push(local0);
                                    frame.i32_const(244);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(520);
                                    frame.i32_add();
                                    frame.i32_const(108);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(0x670);
                                    frame.i32_add();
                                    frame.i32_const(12);
                                    frame.i32_add();
                                    frame.push(local2);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(0x670);
                                    frame.i32_add();
                                    frame.i32_const(19);
                                    frame.i32_add();
                                    frame.push(local6);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.i32_const(0x670);
                                    frame.i32_add();
                                    frame.i32_const(44);
                                    frame.i32_add();
                                    frame.push(local14);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(0x670);
                                    frame.i32_add();
                                    frame.i32_const(52);
                                    frame.i32_add();
                                    frame.push(local10);
                                    frame.i32_load(2, 0);
                                    frame.i32_store(2, 0);
                                    frame.push(local0);
                                    frame.push(local7);
                                    frame.i32_store8(0, 0x673);
                                    frame.push(local0);
                                    frame.push(local3);
                                    frame.i32_store16(0, 0x671);
                                    frame.push(local0);
                                    frame.push(local9);
                                    frame.i32_store8(0, 0x670);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 400);
                                    frame.i64_store(2, 0x674);
                                    frame.push(local0);
                                    frame.push(local8);
                                    frame.i32_store(2, 0x690);
                                    frame.push(local0);
                                    frame.push(local4);
                                    frame.i32_store(2, 0x68c);
                                    frame.push(local0);
                                    frame.push(local5);
                                    frame.i32_store8(0, 0x68b);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 376);
                                    frame.i64_store(2, 0x694);
                                    frame.push(arg2);
                                    frame.i32_const(8);
                                    frame.i32_shr_u();
                                    arg1 = frame.pop();
                                    block_label_16:
                                    {
                                      frame.push(arg2);
                                      frame.i32_const(2);
                                      frame.i32_ne();
                                      if (frame.pop() != 0) break block_label_16;
                                      frame.push(local0);
                                      frame.i32_const(0x670);
                                      frame.i32_add();
                                      {
                                        var t0 = frame.pop();
                                        _func143(t0);
                                      }
                                      frame.push(local0);
                                      frame.i32_const(192);
                                      frame.i32_add();
                                      frame.i32_const(8);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(220);
                                      frame.i32_add();
                                      frame.i32_const(8);
                                      frame.i32_add();
                                      frame.i64_load(2, 0);
                                      frame.i64_store(3, 0);
                                      frame.push(local0);
                                      frame.i32_const(192);
                                      frame.i32_add();
                                      frame.i32_const(15);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(220);
                                      frame.i32_add();
                                      frame.i32_const(15);
                                      frame.i32_add();
                                      frame.i64_load(0, 0);
                                      frame.i64_store(0, 0);
                                      frame.push(local0);
                                      frame.push(local0);
                                      frame.i64_load(2, 220);
                                      frame.i64_store(3, 192);
                                      frame.i32_const(2);
                                      local6 = frame.pop();
                                      frame.i32_const(0xf4ad2);
                                      arg2 = frame.pop();
                                      frame.i32_const(45);
                                      arg3 = frame.pop();
                                      frame.i32_const(6);
                                      local2 = frame.pop();
                                      break block_label_1;
                                    }
                                    frame.push(local0);
                                    frame.i32_const(499);
                                    frame.i32_add();
                                    frame.push(local12);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.i32_const(492);
                                    frame.i32_add();
                                    frame.push(local16);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(2, 0);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 352);
                                    frame.i64_store(2, 484);
                                    frame.push(local15);
                                    frame.push(local0);
                                    frame.i32_const(244);
                                    frame.i32_add();
                                    frame.i32_const(108);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(44);
                                    frame.i32_add();
                                    frame.push(local14);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(52);
                                    frame.i32_add();
                                    frame.push(local10);
                                    frame.i32_load(2, 0);
                                    frame.i32_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(12);
                                    frame.i32_add();
                                    frame.push(local2);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(2, 0);
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    frame.i32_const(19);
                                    frame.i32_add();
                                    frame.push(local6);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.push(arg1);
                                    frame.i32_store16(0, 481);
                                    frame.push(local0);
                                    frame.i32_const(483);
                                    frame.i32_add();
                                    frame.push(arg1);
                                    frame.i32_const(16);
                                    frame.i32_shr_u();
                                    frame.i32_store8(0, 0);
                                    frame.push(local0);
                                    frame.push(local9);
                                    frame.i32_store8(0, 424);
                                    frame.push(local0);
                                    frame.push(local17);
                                    frame.i32_store(2, 512);
                                    frame.push(local0);
                                    frame.push(local13);
                                    frame.i32_store(2, 508);
                                    frame.push(local0);
                                    frame.push(local11);
                                    frame.i32_store8(0, 507);
                                    frame.push(local0);
                                    frame.push(arg2);
                                    frame.i32_store8(0, 480);
                                    frame.push(local0);
                                    frame.push(local8);
                                    frame.i32_store(2, 456);
                                    frame.push(local0);
                                    frame.push(local4);
                                    frame.i32_store(2, 452);
                                    frame.push(local0);
                                    frame.push(local5);
                                    frame.i32_store8(0, 451);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 376);
                                    frame.i64_store(2, 460);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 400);
                                    frame.i64_store(2, 428);
                                    frame.push(local0);
                                    frame.push(local3);
                                    frame.push(local7);
                                    frame.i32_const(16);
                                    frame.i32_shl();
                                    frame.i32_or();
                                    arg1 = frame.peek();
                                    frame.i32_store16(0, 425);
                                    frame.push(local0);
                                    frame.push(arg1);
                                    frame.i32_const(16);
                                    frame.i32_shr_u();
                                    frame.i32_store8(0, 427);
                                    frame.push(local0);
                                    frame.i32_const(84);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(244);
                                    frame.i32_add();
                                    frame.i32_const(108);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_memcpy(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(local0);
                                    frame.i32_const(424);
                                    frame.i32_add();
                                    {
                                      var t0 = frame.pop();
                                      _func143(t0);
                                    }
                                    frame.push(local0);
                                    frame.i32_const(192);
                                    frame.i32_add();
                                    frame.i32_const(8);
                                    frame.i32_add();
                                    frame.push(local16);
                                    frame.i64_load(3, 0);
                                    frame.i64_store(3, 0);
                                    frame.push(local0);
                                    frame.i32_const(192);
                                    frame.i32_add();
                                    frame.i32_const(15);
                                    frame.i32_add();
                                    frame.push(local12);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 0);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 352);
                                    frame.i64_store(3, 192);
                                    block_label_16:
                                    {
                                      frame.i32_const(0xf5160);
                                      frame.i32_const(148);
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        frame.push(_func019(t0, t1));
                                      }
                                      arg1 = frame.peek();
                                      frame.i32_eqz();
                                      if (frame.pop() != 0) break block_label_16;
                                      frame.push(arg1);
                                      frame.push(arg2);
                                      frame.i32_store(2, 0);
                                      frame.push(arg1);
                                      frame.push(local0);
                                      frame.i64_load(3, 192);
                                      frame.i64_store(2, 4);
                                      frame.push(arg1);
                                      frame.push(local17);
                                      frame.i32_store(2, 32);
                                      frame.push(arg1);
                                      frame.push(local13);
                                      frame.i32_store(2, 28);
                                      frame.push(arg1);
                                      frame.push(local11);
                                      frame.i32_store8(0, 27);
                                      frame.push(arg1);
                                      frame.i32_const(12);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(200);
                                      frame.i32_add();
                                      frame.i64_load(3, 0);
                                      frame.i64_store(2, 0);
                                      frame.push(arg1);
                                      frame.i32_const(19);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(207);
                                      frame.i32_add();
                                      frame.i64_load(0, 0);
                                      frame.i64_store(0, 0);
                                      frame.push(arg1);
                                      frame.i32_const(36);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(84);
                                      frame.i32_add();
                                      frame.i32_const(108);
                                      {
                                        var t2 = frame.pop();
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        frame.push(_memcpy(t0, t1, t2));
                                      }
                                      frame.drop();
                                      frame.push(arg1);
                                      frame.push(arg3);
                                      frame.i32_store8(0, 144);
                                      frame.push(arg1);
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 81);
                                      frame.i32_store16(0, 145);
                                      frame.push(arg1);
                                      frame.i32_const(147);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(83);
                                      frame.i32_add();
                                      frame.i32_load8_u(0, 0);
                                      frame.i32_store8(0, 0);
                                      frame.i32_const(1);
                                      arg2 = frame.pop();
                                      break block_label_0;
                                    }
                                    frame.i32_const(148);
                                    frame.i32_const(4);
                                    {
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
                                    }
                                    throw Trap('unreachable');
                                  }
                                  frame.push(local0);
                                  frame.i32_const(460);
                                  frame.i32_add();
                                  frame.i32_const(38);
                                  frame.i32_store(2, 0);
                                  frame.push(local0);
                                  frame.i32_const(456);
                                  frame.i32_add();
                                  frame.i32_const(0xf4a66);
                                  frame.i32_store(2, 0);
                                  frame.push(local0);
                                  frame.i32_const(2);
                                  frame.i32_store8(0, 455);
                                  frame.push(local0);
                                  frame.i32_const(8);
                                  frame.i32_store8(0, 428);
                                  frame.push(local0);
                                  frame.i32_const(1);
                                  frame.i32_store(2, 424);
                                  frame.push(local0);
                                  frame.i32_const(632);
                                  frame.i32_add();
                                  {
                                    var t0 = frame.pop();
                                    _func143(t0);
                                  }
                                  frame.push(local0);
                                  frame.i32_load(2, 688);
                                  frame.i32_eqz();
                                  if (frame.pop() != 0) break block_label_2;
                                  frame.push(local0);
                                  frame.i32_const(696);
                                  frame.i32_add();
                                  arg1 = frame.peek();
                                  frame.i32_load(2, 0);
                                  frame.i32_eqz();
                                  if (frame.pop() != 0) break block_label_2;
                                  frame.push(arg1);
                                  {
                                    var t0 = frame.pop();
                                    _func099(t0);
                                  }
                                  break block_label_2;
                                }
                                frame.push(local0);
                                frame.i32_load8_u(0, 0x709);
                                arg1 = frame.pop();
                                break block_label_4;
                              }
                              frame.push(local0);
                              frame.i32_const(0x690);
                              frame.i32_add();
                              frame.i32_const(0);
                              frame.i32_store(2, 0);
                              frame.push(local0);
                              frame.i32_const(2);
                              frame.i32_store8(0, 0x68f);
                              frame.push(local0);
                              frame.push(arg1);
                              frame.i32_store8(0, 0x675);
                              frame.push(local0);
                              frame.i32_const(9);
                              frame.i32_store8(0, 0x674);
                              break block_label_3;
                            }
                            frame.i32_const(7);
                            arg1 = frame.pop();
                            break block_label_8;
                          }
                          frame.i32_const(5);
                          arg1 = frame.pop();
                          break block_label_8;
                        }
                        frame.i32_const(4);
                        arg1 = frame.pop();
                      }
                      frame.push(local0);
                      frame.push(local27);
                      frame.i32_store(2, 0x700);
                    }
                    frame.push(local22);
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local30);
                    frame.i32_eqz();
                    if (frame.pop() != 0) break block_label_7;
                    frame.i32_const(0xf5160);
                    frame.push(local31);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func018(t0, t1);
                    }
                  }
                  frame.push(local18);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(local20);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(0xf5160);
                  frame.push(local21);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func018(t0, t1);
                  }
                }
                block_label_6:
                {
                  frame.push(local10);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.push(local16);
                  frame.i32_eqz();
                  if (frame.pop() != 0) break block_label_6;
                  frame.i32_const(0xf5160);
                  frame.push(local17);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func018(t0, t1);
                  }
                }
                frame.push(local14);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local12);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(0xf5160);
                frame.push(local13);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func018(t0, t1);
                }
              }
              block_label_5:
              {
                frame.push(arg2);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.push(local8);
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_5;
                frame.i32_const(0xf5160);
                frame.push(local9);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func018(t0, t1);
                }
              }
              frame.push(local6);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.i32_const(0xf5160);
              frame.push(local5);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func018(t0, t1);
              }
            }
            frame.push(local0);
            frame.i32_const(0x670);
            frame.i32_add();
            frame.i32_const(4);
            frame.i32_or();
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func109(t0, t1);
            }
          }
          frame.push(local0);
          frame.i32_const(0x550);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          arg1 = frame.peek();
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(0x550);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          arg2 = frame.peek();
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.i32_const(24);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(0x550);
          frame.i32_add();
          frame.i32_const(24);
          frame.i32_add();
          arg3 = frame.peek();
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.i32_const(32);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(0x670);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0x550);
          frame.push(local0);
          frame.i32_load(2, 0x674);
          local6 = frame.pop();
          block_label_3:
          {
            frame.push(local2);
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_const(0x5d8);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            {
              var t0 = frame.pop();
              _func099(t0);
            }
          }
          frame.push(local0);
          frame.i32_const(0x440);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.push(arg1);
          frame.i64_load(3, 0);
          local1 = frame.peek();
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(952);
          frame.i32_add();
          frame.i32_const(24);
          frame.i32_add();
          arg1 = frame.peek();
          frame.push(arg3);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(952);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          arg3 = frame.peek();
          frame.push(arg2);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(952);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          arg2 = frame.peek();
          frame.push(local1);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 0x550);
          local1 = frame.peek();
          frame.i64_store(3, 0x440);
          frame.push(local0);
          frame.push(local1);
          frame.i64_store(3, 952);
          frame.push(local0);
          frame.i32_const(816);
          frame.i32_add();
          frame.i32_const(24);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(arg1);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(816);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          arg1 = frame.peek();
          frame.push(arg3);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(816);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          arg3 = frame.peek();
          frame.push(arg2);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 952);
          frame.i64_store(3, 816);
          frame.push(local0);
          frame.i32_const(424);
          frame.i32_add();
          frame.i32_const(32);
          frame.i32_add();
          frame.push(local2);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(424);
          frame.i32_add();
          frame.i32_const(24);
          frame.i32_add();
          frame.push(arg1);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(424);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.push(arg3);
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(424);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i64_load(3, 816);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.push(local6);
          frame.i32_store(2, 428);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_store(2, 424);
          frame.push(local0);
          frame.i32_const(760);
          frame.i32_add();
          {
            var t0 = frame.pop();
            _func143(t0);
          }
        }
        frame.push(local0);
        frame.i32_const(400);
        frame.i32_add();
        frame.i32_const(15);
        frame.i32_add();
        arg1 = frame.peek();
        frame.push(local0);
        frame.i32_const(447);
        frame.i32_add();
        frame.i64_load(0, 0);
        frame.i64_store(0, 0);
        frame.push(local0);
        frame.i32_const(400);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        arg2 = frame.peek();
        frame.push(local0);
        frame.i32_const(424);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(192);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.push(arg2);
        frame.i64_load(3, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(192);
        frame.i32_add();
        frame.i32_const(15);
        frame.i32_add();
        frame.push(arg1);
        frame.i64_load(0, 0);
        frame.i64_store(0, 0);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(424);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        local1 = frame.peek();
        frame.i64_store(3, 400);
        frame.push(local0);
        frame.push(local1);
        frame.i64_store(3, 192);
        frame.push(local0);
        frame.i32_load16_u(0, 429);
        frame.push(local0);
        frame.i32_load8_u(0, 431);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(456);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg2 = frame.pop();
        frame.push(local0);
        frame.i32_const(460);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg3 = frame.pop();
        frame.push(local0);
        frame.i32_load8_u(0, 428);
        local2 = frame.pop();
        frame.push(local0);
        frame.i32_load8_u(0, 455);
        local6 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(15);
      frame.i32_add();
      local4 = frame.peek();
      frame.push(local0);
      frame.i32_const(192);
      frame.i32_add();
      frame.i32_const(15);
      frame.i32_add();
      frame.i64_load(0, 0);
      frame.i64_store(0, 0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(8);
      frame.i32_add();
      local8 = frame.peek();
      frame.push(local0);
      frame.i32_const(192);
      frame.i32_add();
      frame.i32_const(8);
      frame.i32_add();
      frame.i64_load(3, 0);
      frame.i64_store(3, 0);
      frame.push(local0);
      frame.push(local0);
      frame.i64_load(3, 192);
      local1 = frame.peek();
      frame.i64_store(3, 56);
      frame.push(local0);
      frame.i32_const(0x670);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.push(local8);
      frame.i64_load(3, 0);
      frame.i64_store(2, 0);
      frame.push(local0);
      frame.i32_const(0x683);
      frame.i32_add();
      frame.push(local4);
      frame.i64_load(0, 0);
      frame.i64_store(0, 0);
      frame.push(local0);
      frame.i32_const(0x670);
      frame.i32_add();
      frame.i32_const(32);
      frame.i32_add();
      frame.push(arg3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0x68b);
      frame.i32_add();
      frame.push(local6);
      frame.i32_store8(0, 0);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_shl();
      frame.push(local2);
      frame.i32_or();
      frame.i32_store(2, 0x670);
      frame.push(local0);
      frame.push(local1);
      frame.i64_store(2, 0x674);
      frame.push(local0);
      frame.push(arg2);
      frame.i32_store(2, 0x68c);
      frame.push(local0);
      frame.i32_const(424);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(0x670);
      frame.i32_add();
      frame.i32_const(36);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_memcpy(t0, t1, t2));
      }
      frame.drop();
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(424);
      frame.i32_add();
      {
        var t0 = frame.pop();
        frame.push(_func144(t0));
      }
      arg1 = frame.peek();
      frame.i32_store(2, 0x4c8);
      frame.i32_const(0);
      arg2 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf5328);
      arg3 = frame.pop();
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(0x670);
      frame.i32_add();
      frame.i32_store(2, 0x440);
      frame.push(arg3);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(424);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(27);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(424);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(6);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0x5e8);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_const(3);
      frame.i64_store(2, 0x5ec);
      frame.push(local0);
      frame.i32_const(0xf4b58);
      frame.i32_store(2, 0x5e8);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_store(2, 428);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_store(2, 0x554);
      frame.push(local0);
      frame.i32_const(0xf4ab2);
      frame.i32_store(2, 0x550);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(424);
      frame.i32_add();
      frame.i32_store(2, 0x5f8);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(0x440);
      frame.i32_add();
      frame.i32_store(2, 440);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(0x550);
      frame.i32_add();
      frame.i32_store(2, 432);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(0x4c8);
      frame.i32_add();
      frame.i32_store(2, 424);
      frame.push(local0);
      frame.i32_const(0x5e8);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4bc8);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
      }
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_load8_u(0, 0);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      arg3 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg3);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(local0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.push(local0);
    frame.i32_const(28);
    frame.i32_add();
    {
      var t0 = frame.pop();
      _func141(t0);
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store8(0, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(0x730);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _ICU4XFixedDecimalFormatter_format(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    frame.i32_const(1);
    local2 = frame.pop();
    frame.push(arg1);
    local3 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_load8_u(0, 18);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  break block_label_2;
                case 1:
                  break block_label_3;
                case 2:
                  break block_label_4;
                default:
                  break block_label_2;
              }
            }
            frame.push(arg1);
            frame.i32_const(32);
            frame.i32_add();
            local3 = frame.pop();
          }
          frame.push(local3);
          frame.i32_load(2, 4);
          local4 = frame.pop();
          block_label_3:
          {
            frame.push(arg3);
            frame.i32_load(2, 8);
            local5 = frame.peek();
            frame.push(local3);
            frame.i32_const(4);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_const(4);
            frame.push(local3);
            frame.i32_load(2, 0);
            frame.select();
            frame.i32_add();
            frame.i32_load(2, 0);
            local6 = frame.peek();
            frame.i32_add();
            local7 = frame.peek();
            frame.push(arg3);
            frame.i32_load(2, 12);
            frame.i32_le_u();
            if (frame.pop() != 0) break block_label_3;
            frame.push(arg3);
            frame.push(local7);
            frame.push(arg3);
            frame.i32_load(2, 20);
            {
              var func = table0[frame.pop()];
              if (func == null) throw Trap('uninitialized element');
              if (func is! FunctionType1) throw Trap('indirect call type mismatch');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_1;
            frame.push(arg3);
            frame.i32_load(2, 8);
            local5 = frame.pop();
          }
          frame.push(arg3);
          frame.i32_load(2, 4);
          frame.push(local5);
          frame.i32_add();
          frame.push(local4);
          frame.push(local6);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memcpy(t0, t1, t2));
          }
          frame.drop();
          frame.push(arg3);
          frame.push(local7);
          frame.i32_store(2, 8);
          frame.i32_const(0);
          local2 = frame.pop();
          frame.push(local3);
          local1 = frame.pop();
        }
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_load16_s(1, 16);
          local5 = frame.peek();
          frame.push(arg2);
          frame.i32_load16_s(1, 14);
          local8 = frame.peek();
          frame.i32_gt_s();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg1);
          frame.i32_const(84);
          frame.i32_add();
          local3 = frame.peek();
          frame.i32_const(8);
          frame.i32_const(4);
          frame.push(arg1);
          frame.i32_load(2, 80);
          frame.select();
          frame.i32_add();
          frame.i32_load(2, 0);
          local9 = frame.pop();
          frame.push(arg1);
          frame.i32_const(68);
          frame.i32_add();
          local7 = frame.peek();
          frame.i32_const(8);
          frame.i32_const(4);
          frame.push(arg1);
          frame.i32_load(2, 64);
          frame.select();
          frame.i32_add();
          frame.i32_load(2, 0);
          local10 = frame.pop();
          frame.push(arg1);
          frame.i32_const(136);
          frame.i32_add();
          local11 = frame.pop();
          frame.push(arg2);
          frame.i32_const(4);
          frame.i32_add();
          local12 = frame.pop();
          frame.push(local3);
          frame.i32_load(2, 0);
          local13 = frame.pop();
          frame.push(local7);
          frame.i32_load(2, 0);
          local14 = frame.pop();
          frame.push(arg1);
          frame.i32_load8_u(0, 144);
          local15 = frame.pop();
          frame.push(local8);
          local3 = frame.pop();

          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(local3);
              frame.i32_const(0xffff);
              frame.i32_and();
              frame.i32_const(0xffff);
              frame.i32_ne();
              if (frame.pop() != 0) break block_label_4;
              block_label_5:
              {
                frame.push(arg3);
                frame.i32_load(2, 8);
                local4 = frame.peek();
                frame.push(local10);
                frame.i32_add();
                local7 = frame.peek();
                frame.push(arg3);
                frame.i32_load(2, 12);
                frame.i32_le_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(arg3);
                frame.push(local7);
                frame.push(arg3);
                frame.i32_load(2, 20);
                {
                  var func = table0[frame.pop()];
                  if (func == null) throw Trap('uninitialized element');
                  if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1));
                }
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_1;
                frame.push(arg3);
                frame.i32_load(2, 8);
                local4 = frame.pop();
              }
              frame.push(arg3);
              frame.i32_load(2, 4);
              frame.push(local4);
              frame.i32_add();
              frame.push(local14);
              frame.push(local10);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memcpy(t0, t1, t2));
              }
              frame.drop();
              frame.push(arg3);
              frame.push(local7);
              frame.i32_store(2, 8);
            }
            frame.i32_const(0);
            local7 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_load16_s(1, 12);
              local4 = frame.peek();
              frame.push(local3);
              frame.i32_const(16);
              frame.i32_shl();
              frame.i32_const(16);
              frame.i32_shr_s();
              local6 = frame.peek();
              frame.i32_lt_s();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg2);
              frame.i32_load(2, 8);
              frame.push(arg2);
              frame.i32_load(2, 0);
              local16 = frame.peek();
              frame.push(local16);
              frame.i32_const(8);
              frame.i32_gt_u();
              local16 = frame.peek();
              frame.select();
              frame.push(local4);
              frame.push(local3);
              frame.i32_sub();
              frame.i32_const(0xffff);
              frame.i32_and();
              local4 = frame.peek();
              frame.i32_le_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg2);
              frame.i32_load(2, 4);
              frame.push(local12);
              frame.push(local16);
              frame.select();
              local16 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              frame.push(local16);
              frame.push(local4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              local7 = frame.peek();
              frame.i32_const(9);
              frame.i32_le_u();
              if (frame.pop() != 0) break block_label_4;
              throw Trap('unreachable');
              throw Trap('unreachable');
            }
            frame.push(arg1);
            frame.push(local7);
            frame.i32_const(2);
            frame.i32_shl();
            frame.i32_add();
            frame.i32_const(96);
            frame.i32_add();
            frame.i32_load(2, 0);
            local7 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 40);
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local7);
                    frame.i32_const(128);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) break block_label_7;
                    frame.push(local7);
                    frame.i32_const(0x800);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) break block_label_6;
                    frame.push(local7);
                    frame.i32_const(0x10000);
                    frame.i32_ge_u();
                    if (frame.pop() != 0) break block_label_5;
                    frame.push(local0);
                    frame.push(local7);
                    frame.i32_const(63);
                    frame.i32_and();
                    frame.i32_const(128);
                    frame.i32_or();
                    frame.i32_store8(0, 42);
                    frame.push(local0);
                    frame.push(local7);
                    frame.i32_const(12);
                    frame.i32_shr_u();
                    frame.i32_const(224);
                    frame.i32_or();
                    frame.i32_store8(0, 40);
                    frame.push(local0);
                    frame.push(local7);
                    frame.i32_const(6);
                    frame.i32_shr_u();
                    frame.i32_const(63);
                    frame.i32_and();
                    frame.i32_const(128);
                    frame.i32_or();
                    frame.i32_store8(0, 41);
                    frame.i32_const(3);
                    local4 = frame.pop();
                    break block_label_4;
                  }
                  frame.push(local0);
                  frame.push(local7);
                  frame.i32_store8(0, 40);
                  frame.i32_const(1);
                  local4 = frame.pop();
                  break block_label_4;
                }
                frame.push(local0);
                frame.push(local7);
                frame.i32_const(63);
                frame.i32_and();
                frame.i32_const(128);
                frame.i32_or();
                frame.i32_store8(0, 41);
                frame.push(local0);
                frame.push(local7);
                frame.i32_const(6);
                frame.i32_shr_u();
                frame.i32_const(192);
                frame.i32_or();
                frame.i32_store8(0, 40);
                frame.i32_const(2);
                local4 = frame.pop();
                break block_label_4;
              }
              frame.push(local0);
              frame.push(local7);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 43);
              frame.push(local0);
              frame.push(local7);
              frame.i32_const(18);
              frame.i32_shr_u();
              frame.i32_const(240);
              frame.i32_or();
              frame.i32_store8(0, 40);
              frame.push(local0);
              frame.push(local7);
              frame.i32_const(6);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 42);
              frame.push(local0);
              frame.push(local7);
              frame.i32_const(12);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 41);
              frame.i32_const(4);
              local4 = frame.pop();
            }
            block_label_4:
            {
              frame.push(arg3);
              frame.i32_load(2, 8);
              local16 = frame.peek();
              frame.push(local4);
              frame.i32_add();
              local7 = frame.peek();
              frame.push(arg3);
              frame.i32_load(2, 12);
              frame.i32_le_u();
              if (frame.pop() != 0) break block_label_4;
              frame.push(arg3);
              frame.push(local7);
              frame.push(arg3);
              frame.i32_load(2, 20);
              {
                var func = table0[frame.pop()];
                if (func == null) throw Trap('uninitialized element');
                if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_1;
              frame.push(arg3);
              frame.i32_load(2, 8);
              local16 = frame.pop();
            }
            frame.push(arg3);
            frame.i32_load(2, 4);
            frame.push(local16);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(local4);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.push(arg3);
            frame.push(local7);
            frame.i32_store(2, 8);
            block_label_4:
            {
              frame.push(local8);
              frame.push(local3);
              frame.push(local15);
              frame.push(local11);
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_ZN11icu_decimal7grouper5check17h197c298b69fc1d31E(t0, t1, t2, t3));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) break block_label_4;
              block_label_5:
              {
                frame.push(local7);
                frame.push(local9);
                frame.i32_add();
                local4 = frame.peek();
                frame.push(arg3);
                frame.i32_load(2, 12);
                frame.i32_le_u();
                if (frame.pop() != 0) break block_label_5;
                frame.push(arg3);
                frame.push(local4);
                frame.push(arg3);
                frame.i32_load(2, 20);
                {
                  var func = table0[frame.pop()];
                  if (func == null) throw Trap('uninitialized element');
                  if (func is! FunctionType1) throw Trap('indirect call type mismatch');
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1));
                }
                frame.i32_eqz();
                if (frame.pop() != 0) break block_label_1;
                frame.push(arg3);
                frame.i32_load(2, 8);
                local7 = frame.pop();
              }
              frame.push(arg3);
              frame.i32_load(2, 4);
              frame.push(local7);
              frame.i32_add();
              frame.push(local13);
              frame.push(local9);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_memcpy(t0, t1, t2));
              }
              frame.drop();
              frame.push(arg3);
              frame.push(local4);
              frame.i32_store(2, 8);
            }
            frame.push(local5);
            frame.push(local6);
            frame.i32_ge_s();
            frame.push(local5);
            frame.push(local3);
            frame.push(local5);
            frame.push(local6);
            frame.i32_lt_s();
            frame.i32_sub();
            frame.i32_const(16);
            frame.i32_shl();
            frame.i32_const(16);
            frame.i32_shr_s();
            local3 = frame.peek();
            frame.i32_gt_s();
            frame.i32_or();
            frame.i32_eqz();
            if (frame.pop() != 0) continue loop_label_3;
            break;
          }
        }
        frame.i32_const(1);
        local3 = frame.pop();
        frame.push(local2);
        if (frame.pop() != 0) break block_label_0;
        frame.push(local1);
        frame.i32_load(2, 20);
        local4 = frame.pop();
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_load(2, 8);
          local5 = frame.peek();
          frame.push(local1);
          frame.i32_const(28);
          frame.i32_const(24);
          frame.push(local1);
          frame.i32_load(2, 16);
          frame.select();
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.peek();
          frame.i32_add();
          local7 = frame.peek();
          frame.push(arg3);
          frame.i32_load(2, 12);
          frame.i32_le_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(arg3);
          frame.push(local7);
          frame.push(arg3);
          frame.i32_load(2, 20);
          {
            var func = table0[frame.pop()];
            if (func == null) throw Trap('uninitialized element');
            if (func is! FunctionType1) throw Trap('indirect call type mismatch');
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1));
          }
          frame.i32_eqz();
          if (frame.pop() != 0) break block_label_1;
          frame.push(arg3);
          frame.i32_load(2, 8);
          local5 = frame.pop();
        }
        frame.push(arg3);
        frame.i32_load(2, 4);
        frame.push(local5);
        frame.i32_add();
        frame.push(local4);
        frame.push(arg2);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_memcpy(t0, t1, t2));
        }
        frame.drop();
        frame.push(arg3);
        frame.push(local7);
        frame.i32_store(2, 8);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 12);
      frame.i32_const(0);
      local3 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf5328);
      local7 = frame.pop();
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(72);
      frame.i32_add();
      frame.i32_store(2, 8);
      frame.push(local7);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(28);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_const(6);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_const(3);
      frame.i64_store(2, 20);
      frame.push(local0);
      frame.i32_const(0xf4b58);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 68);
      frame.push(local0);
      frame.i32_const(0xf4b1d);
      frame.i32_store(2, 64);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(64);
      frame.i32_add();
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4bc8);
      frame.i32_const(0);
      frame.push(arg3);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg3);
    frame.push(arg3);
    frame.i32_load(2, 16);
    {
      var func = table0[frame.pop()];
      if (func == null) throw Trap('uninitialized element');
      if (func is! FunctionType4) throw Trap('indirect call type mismatch');
      var t0 = frame.pop();
      func(t0);
    }
    frame.push(arg0);
    frame.push(local3);
    frame.i32_store8(0, 4);
    frame.push(arg0);
    frame.i32_const(1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(80);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _ICU4XFixedDecimalFormatter_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 16);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(24);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 32);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(36);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(48);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 64);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(72);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(68);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 80);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(88);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_const(84);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 140);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(arg0);
      frame.i32_const(140);
      frame.i32_add();
      {
        var t0 = frame.pop();
        _func099(t0);
      }
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  i32 _ICU4XFixedDecimal_create_from_i32(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func118(t0, t1);
    }
    block_label_0:
    {
      frame.i32_const(0xf5160);
      frame.i32_const(20);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func019(t0, t1));
      }
      arg0 = frame.peek();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(20);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i64_load(3, 8);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(3, 0);
    frame.i64_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    return frame.pop();
  }

  void _ICU4XFixedDecimal_multiply_pow10(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN13fixed_decimal7decimal12FixedDecimal14multiply_pow1017h07e9e8f2e457c92eE(t0, t1);
    }
  }

  void _ICU4XFixedDecimal_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_const(9);
      frame.i32_lt_u();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  void _ICU4XLocale_create_from_string(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(336);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(136);
    frame.i32_add();
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN4core3str8converts9from_utf817h989570921179a6cfE(t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 136);
        if (frame.pop() != 0) break block_label_1;
        frame.push(local0);
        frame.i32_const(136);
        frame.i32_add();
        frame.push(local0);
        frame.i32_load(2, 140);
        frame.push(local0);
        frame.i32_const(144);
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_load(2, 0);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _ZN9icu_locid6locale6Locale14try_from_bytes17h4e25ec3255dee6b0E(t0, t1, t2);
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load8_u(0, 136);
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_load(2, 140);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_const(124);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(0xf5160);
            frame.i32_const(128);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_0;
            frame.push(arg2);
            frame.push(arg1);
            frame.i32_store(2, 0);
            frame.push(arg2);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(12);
            frame.i32_add();
            frame.i32_const(124);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(1);
            arg1 = frame.pop();
            break block_label_2;
          }
          frame.push(local0);
          frame.push(local0);
          frame.i32_load8_u(0, 137);
          arg2 = frame.peek();
          frame.i32_store8(0, 271);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(2);
          frame.i32_xor();
          frame.i32_const(255);
          frame.i32_and();
          frame.i32_const(2);
          frame.i32_shl();
          frame.i32_const(0xf5148);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.peek();
          frame.i32_store(2, 276);
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.i32_const(0);
          frame.i32_load(2, 0xf5328);
          local1 = frame.pop();
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(271);
          frame.i32_add();
          frame.i32_store(2, 272);
          frame.push(local1);
          frame.i32_const(2);
          frame.i32_lt_u();
          if (frame.pop() != 0) break block_label_2;
          frame.push(local0);
          frame.i32_const(304);
          frame.i32_add();
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_const(29);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(316);
          frame.i32_add();
          frame.i32_const(6);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(280);
          frame.i32_add();
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_const(3);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i64_const(3);
          frame.i64_store(2, 284);
          frame.push(local0);
          frame.i32_const(0xf4b58);
          frame.i32_store(2, 280);
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_store(2, 308);
          frame.push(local0);
          frame.i32_const(38);
          frame.i32_store(2, 332);
          frame.push(local0);
          frame.i32_const(0xf4a8c);
          frame.i32_store(2, 328);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(304);
          frame.i32_add();
          frame.i32_store(2, 296);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(272);
          frame.i32_add();
          frame.i32_store(2, 320);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(328);
          frame.i32_add();
          frame.i32_store(2, 312);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(276);
          frame.i32_add();
          frame.i32_store(2, 304);
          frame.push(local0);
          frame.i32_const(280);
          frame.i32_add();
          frame.i32_const(2);
          frame.i32_const(0xf4bc8);
          frame.i32_const(0);
          frame.push(local0);
          {
            var t4 = frame.pop();
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _ZN3log17__private_api_log17h3cab72171f1c849dE(t0, t1, t2, t3, t4);
          }
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(336);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
        return;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(128);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _ICU4XLocale_destroy(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    {
      var t0 = frame.pop();
      _func140(t0);
    }
    frame.push(arg0);
    frame.i32_const(28);
    frame.i32_add();
    {
      var t0 = frame.pop();
      _func141(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 52);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(64);
      frame.i32_add();
      local0 = frame.peek();
      frame.i32_load8_u(0, 0);
      frame.i32_const(3);
      frame.i32_eq();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      {
        var t0 = frame.pop();
        _func140(t0);
      }
    }
    frame.push(arg0);
    frame.i32_const(92);
    frame.i32_add();
    local1 = frame.peek();
    {
      var t0 = frame.pop();
      _func073(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(96);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(local1);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(108);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(arg0);
      frame.i32_load(2, 104);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.push(arg0);
    frame.i32_const(116);
    frame.i32_add();
    local1 = frame.peek();
    {
      var t0 = frame.pop();
      _func072(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(120);
      frame.i32_add();
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(local1);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  void _ICU4XDataProvider_create_from_byte_slice(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(128);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(40);
    frame.i32_add();
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN17icu_provider_blob18blob_data_provider16BlobDataProvider24try_new_from_static_blob17h676caa901430a6bbE(
          t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load(2, 40);
            if (frame.pop() != 0) break block_label_3;
            frame.push(local0);
            frame.i32_load(2, 44);
            arg2 = frame.pop();
            frame.push(local0);
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(40);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            local1 = frame.pop();
            frame.i32_const(0xf5160);
            frame.i32_const(44);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg1 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_1;
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local1);
            frame.i32_const(40);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_memcpy(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(0xf5160);
            frame.i32_const(8);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func019(t0, t1));
            }
            arg2 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) break block_label_0;
            frame.push(arg2);
            frame.i32_const(0xf4be4);
            frame.i32_store(2, 4);
            frame.push(arg2);
            frame.push(arg1);
            frame.i32_store(2, 0);
            frame.i32_const(1);
            arg1 = frame.pop();
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(88);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(40);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_or();
          frame.i32_const(36);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_memcpy(t0, t1, t2));
          }
          frame.drop();
          frame.push(local0);
          frame.i32_const(88);
          frame.i32_add();
          {
            var t0 = frame.pop();
            frame.push(_func144(t0));
          }
          arg2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(128);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
        return;
      }
      frame.i32_const(44);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.i32_const(8);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _ICU4XDataProvider_destroy(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_load(2, 0);
      {
        var func = table0[frame.pop()];
        if (func == null) throw Trap('uninitialized element');
        if (func is! FunctionType4) throw Trap('indirect call type mismatch');
        var t0 = frame.pop();
        func(t0);
      }
      frame.push(local1);
      frame.i32_load(2, 4);
      frame.i32_eqz();
      if (frame.pop() != 0) break block_label_0;
      frame.i32_const(0xf5160);
      frame.push(local0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func018(t0, t1);
      }
    }
    frame.i32_const(0xf5160);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func018(t0, t1);
    }
  }

  List<Function> _initFunctionTable() {
    return [
      envImports.warn_js,
      envImports.log_js,
      _memset,
      _ZN17compiler_builtins3mem6memcpy17hfb2ed0fb8d3a86f1E,
      _memcpy,
      _ZN17compiler_builtins3mem7memmove17hcbf0c909b02c427eE,
      _memmove,
      _ZN17compiler_builtins3mem6memset17h6d0d38d1f76c7d8bE,
      _ZN17compiler_builtins3mem6memcmp17h67e272c2b8c197dfE,
      _memcmp,
      __rust_alloc,
      __rust_realloc,
      __rust_alloc_error_handler,
      _func011,
      _func012,
      _func013,
      _func014,
      _func015,
      _func016,
      _func017,
      _func018,
      _func019,
      _func020,
      _rust_oom,
      _ZN4core10intrinsics17const_eval_select17hb4bcbe4c479453feE,
      _func023,
      _ZN5alloc5alloc18handle_alloc_error8rt_error17h40f589d8a9cac34fE,
      _func025,
      _func026,
      _func027,
      _func028,
      _func029,
      _func030,
      _func031,
      _ZN5alloc5alloc18handle_alloc_error17h45f2f73811daedefE,
      _func033,
      _func034,
      _ZN5alloc7raw_vec11finish_grow17h5ef3c8eed2364b22E,
      __rg_oom,
      _ZN5alloc3fmt6format17h02f2f8599a399bc1E,
      _func038,
      _ZN4core3ops8function6FnOnce9call_once17h8f8bb05231076c8eE,
      _ZN4core3fmt5write17h10ba687f51516bbeE,
      _ZN4core3fmt8getcount17hc5486a81bc9369b0E,
      _ZN4core3fmt9Formatter3pad17hc66e9cd1b5049ad1E,
      _ZN4core3str5count14do_count_chars17he783edca7ad4614fE,
      _ZN4core3str8converts9from_utf817h989570921179a6cfE,
      _func045,
      _func046,
      _func047,
      _func048,
      _func049,
      _func050,
      _func051,
      _func052,
      _func053,
      _func054,
      _func055,
      _func056,
      _func057,
      _func058,
      _func059,
      _func060,
      _func061,
      _func062,
      _func063,
      _func064,
      _func065,
      _func066,
      _func067,
      _func068,
      _func069,
      _func070,
      _func071,
      _func072,
      _func073,
      _func074,
      _func075,
      _func076,
      _func077,
      _func078,
      _func079,
      _ZN9icu_locid6langid18LanguageIdentifier19for_each_subtag_str17h3d2e1910f53abcf4E,
      _ZN9icu_locid6locale6Locale14try_from_bytes17h4e25ec3255dee6b0E,
      _ZN9icu_locid6parser18get_current_subtag17h7a2bec06e6132e7cE,
      _ZN9icu_locid6parser6langid35parse_language_identifier_from_iter17hec27c1d439ee1af1E,
      _ZN9icu_locid7subtags8language8Language27try_from_bytes_manual_slice17h8c2c00b0b683313bE,
      _ZN9icu_locid6parser14SubtagIterator4peek17ha422a99f1ee4c3a9E,
      _ZN9icu_locid7subtags6region6Region27try_from_bytes_manual_slice17hfeae80e0e237cebcE,
      _ZN9icu_locid7subtags7variant7Variant27try_from_bytes_manual_slice17h931261b14f77cfb1E,
      _func088,
      _func089,
      _func090,
      _func091,
      _func092,
      _func093,
      _func094,
      _ZN3log17__private_api_log17h3cab72171f1c849dE,
      _func096,
      _func097,
      _func098,
      _func099,
      _func100,
      _ZN9icu_locid10extensions7unicode8keywords8Keywords19for_each_subtag_str17he95246a3021aa400E,
      _func102,
      _func103,
      _func104,
      _ZN12icu_provider5error9DataError8with_req17hc2025be0fd8ef6fdE,
      _func106,
      _func107,
      _ZN12icu_provider7request10DataLocale10strict_cmp17hcf8ac8825f9800a4E,
      _func109,
      _func110,
      _func111,
      _ZN17icu_provider_blob18blob_data_provider16BlobDataProvider24try_new_from_static_blob17h676caa901430a6bbE,
      _func113,
      _func114,
      _func115,
      _func116,
      _ZN13fixed_decimal7decimal12FixedDecimal14multiply_pow1017h07e9e8f2e457c92eE,
      _func118,
      _func119,
      _func120,
      _ZN11icu_decimal7grouper5check17h197c298b69fc1d31E,
      _func122,
      _func123,
      _diplomat_init,
      _diplomat_simple_writeable,
      _ZN16diplomat_runtime9writeable25diplomat_simple_writeable4grow17hf52d473702a686d2E,
      _ZN16diplomat_runtime9writeable25diplomat_simple_writeable5flush17h58ab59bfd4609facE,
      _diplomat_buffer_writeable_create,
      _ZN16diplomat_runtime9writeable32diplomat_buffer_writeable_create4grow17h86ff4bf8898d3cdaE,
      _ZN16diplomat_runtime9writeable32diplomat_buffer_writeable_create5flush17h2d9b513df42e3e0cE,
      _diplomat_buffer_writeable_get_bytes,
      _diplomat_buffer_writeable_len,
      _diplomat_buffer_writeable_destroy,
      _diplomat_alloc,
      _diplomat_free,
      _func136,
      _ZN5serde9__private2de14borrow_cow_str17h59827474c02dc1f1E,
      _func138,
      _func139,
      _func140,
      _func141,
      _func142,
      _func143,
      _func144,
      _func145,
      _func146,
      _func147,
      _func148,
      _icu4x_init,
      _ICU4XFixedDecimalFormatter_create_with_grouping_strategy,
      _ICU4XFixedDecimalFormatter_format,
      _ICU4XFixedDecimalFormatter_destroy,
      _ICU4XFixedDecimal_create_from_i32,
      _ICU4XFixedDecimal_multiply_pow10,
      _ICU4XFixedDecimal_destroy,
      _ICU4XLocale_create_from_string,
      _ICU4XLocale_destroy,
      _ICU4XDataProvider_create_from_byte_slice,
      _ICU4XDataProvider_destroy
    ];
  }
}

typedef FunctionType0 = i32 Function(i32, i32, i32);
typedef FunctionType1 = i32 Function(i32, i32);
typedef FunctionType2 = void Function(i32, i32);
typedef FunctionType3 = void Function(i32, i32, i32, i32);
typedef FunctionType4 = void Function(i32);
typedef FunctionType5 = i32 Function(i32, i32, i32, i32);
typedef FunctionType6 = void Function(i32, i32, i32);
typedef FunctionType7 = void Function(i32, i32, i32, i32, i32);
typedef FunctionType8 = void Function();
typedef FunctionType9 = i32 Function(i32);

class Globals {
  i32 __stack_pointer = 0xf4240;

  final i32 global1 = 0xf532c;

  final i32 global2 = 0xf5330;
}

class DataSegments {
  final Uint8List _rodata = decodeDataLiteral(_hex0);

  final Uint8List _data = decodeDataLiteral(_hex1);

  static const String _hex0 =
      '\x01\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x61\x6E'
      '\x20\x65\x72\x72\x6F\x72\x20\x6F\x63\x63\x75\x72\x72\x65\x64\x20\x77\x68\x65\x6E\x20\x66\x6F\x72\x6D\x61'
      '\x74\x74\x69\x6E\x67\x20\x61\x6E\x20\x61\x72\x67\x75\x6D\x65\x6E\x74\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02'
      '\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04'
      '\x04\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x74\x72\x75\x65\x00\x00\x00\x00\x44\x75\x70\x6C\x69\x63\x61\x74\x65\x64\x20\x65\x78\x74\x65\x6E'
      '\x73\x69\x6F\x6E\x9C\x43\x0F\x00\x14\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x65\x78\x74\x65\x6E\x73'
      '\x69\x6F\x6E\x00\x00\x00\xB8\x43\x0F\x00\x11\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x75\x62\x74'
      '\x61\x67\x00\x00\xD4\x43\x0F\x00\x0E\x00\x00\x00\x54\x68\x65\x20\x67\x69\x76\x65\x6E\x20\x6C\x61\x6E\x67'
      '\x75\x61\x67\x65\x20\x73\x75\x62\x74\x61\x67\x20\x69\x73\x20\x69\x6E\x76\x61\x6C\x69\x64\xEC\x43\x0F\x00'
      '\x24\x00\x00\x00\x18\x44\x0F\x00\x00\x00\x00\x00\x45\x72\x72\x6F\x72\x20\x77\x68\x69\x6C\x65\x20\x70\x72'
      '\x6F\x63\x65\x73\x73\x69\x6E\x67\x20\x60\x63\x6F\x6C\x6C\x65\x63\x74\x5F\x73\x74\x72\x60\x20\x64\x75\x72'
      '\x69\x6E\x67\x20\x73\x65\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x53\x65\x72\x64\x65\x20\x44\x65\x73'
      '\x65\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x20\x45\x72\x72\x6F\x72\x53\x65\x72\x64\x65\x20\x53\x65'
      '\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x20\x45\x72\x72\x6F\x72\x54\x68\x65\x20\x6F\x72\x69\x67\x69'
      '\x6E\x61\x6C\x20\x64\x61\x74\x61\x20\x77\x61\x73\x20\x6E\x6F\x74\x20\x77\x65\x6C\x6C\x20\x65\x6E\x63\x6F'
      '\x64\x65\x64\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20\x65\x6E\x75\x6D\x20\x64\x69\x73\x63\x72\x69\x6D\x69\x6E'
      '\x61\x6E\x74\x20\x74\x68\x61\x74\x20\x77\x61\x73\x20\x3E\x20\x75\x33\x32\x3A\x3A\x6D\x61\x78\x5F\x76\x61'
      '\x6C\x75\x65\x28\x29\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20\x4F\x70\x74\x69\x6F\x6E\x20\x64\x69\x73\x63\x72'
      '\x69\x6D\x69\x6E\x61\x6E\x74\x20\x74\x68\x61\x74\x20\x77\x61\x73\x6E\x27\x74\x20\x30\x20\x6F\x72\x20\x31'
      '\x54\x72\x69\x65\x64\x20\x74\x6F\x20\x70\x61\x72\x73\x65\x20\x69\x6E\x76\x61\x6C\x69\x64\x20\x75\x74\x66'
      '\x2D\x38\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20\x69\x6E\x76\x61\x6C\x69\x64\x20\x75\x6E\x69\x63\x6F\x64\x65'
      '\x20\x63\x68\x61\x72\x46\x6F\x75\x6E\x64\x20\x61\x20\x62\x6F\x6F\x6C\x20\x74\x68\x61\x74\x20\x77\x61\x73'
      '\x6E\x27\x74\x20\x30\x20\x6F\x72\x20\x31\x46\x6F\x75\x6E\x64\x20\x61\x20\x76\x61\x72\x69\x6E\x74\x20\x74'
      '\x68\x61\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x74\x65\x72\x6D\x69\x6E\x61\x74\x65\x2E\x20\x49\x73\x20\x74'
      '\x68\x65\x20\x75\x73\x69\x7A\x65\x20\x74\x6F\x6F\x20\x62\x69\x67\x20\x66\x6F\x72\x20\x74\x68\x69\x73\x20'
      '\x70\x6C\x61\x74\x66\x6F\x72\x6D\x3F\x48\x69\x74\x20\x74\x68\x65\x20\x65\x6E\x64\x20\x6F\x66\x20\x62\x75'
      '\x66\x66\x65\x72\x2C\x20\x65\x78\x70\x65\x63\x74\x65\x64\x20\x6D\x6F\x72\x65\x20\x64\x61\x74\x61\x54\x68'
      '\x65\x20\x6C\x65\x6E\x67\x74\x68\x20\x6F\x66\x20\x61\x20\x73\x65\x71\x75\x65\x6E\x63\x65\x20\x6D\x75\x73'
      '\x74\x20\x62\x65\x20\x6B\x6E\x6F\x77\x6E\x54\x68\x65\x20\x73\x65\x72\x69\x61\x6C\x69\x7A\x65\x20\x62\x75'
      '\x66\x66\x65\x72\x20\x69\x73\x20\x66\x75\x6C\x6C\x54\x68\x69\x73\x20\x69\x73\x20\x61\x20\x66\x65\x61\x74'
      '\x75\x72\x65\x20\x74\x68\x61\x74\x20\x50\x6F\x73\x74\x63\x61\x72\x64\x20\x69\x6E\x74\x65\x6E\x64\x73\x20'
      '\x74\x6F\x20\x73\x75\x70\x70\x6F\x72\x74\x2C\x20\x62\x75\x74\x20\x64\x6F\x65\x73\x20\x6E\x6F\x74\x20\x79'
      '\x65\x74\x54\x68\x69\x73\x20\x69\x73\x20\x61\x20\x66\x65\x61\x74\x75\x72\x65\x20\x74\x68\x61\x74\x20\x50'
      '\x6F\x73\x74\x43\x61\x72\x64\x20\x77\x69\x6C\x6C\x20\x6E\x65\x76\x65\x72\x20\x69\x6D\x70\x6C\x65\x6D\x65'
      '\x6E\x74\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
      '\xA0\x46\x0F\x00\x08\x00\x00\x00\x09\x00\x00\x00\x0A\x00\x00\x00\x4F\x46\x46\x45\x52\x52\x4F\x52\x57\x41'
      '\x52\x4E\x49\x4E\x46\x4F\x44\x45\x42\x55\x47\x54\x52\x41\x43\x45\x00\x00\xC8\x46\x0F\x00\x03\x00\x00\x00'
      '\xCB\x46\x0F\x00\x05\x00\x00\x00\xD0\x46\x0F\x00\x04\x00\x00\x00\xD4\x46\x0F\x00\x04\x00\x00\x00\xD8\x46'
      '\x0F\x00\x05\x00\x00\x00\xDD\x46\x0F\x00\x05\x00\x00\x00\x49\x43\x55\x34\x58\x20\x64\x61\x74\x61\x20\x65'
      '\x72\x72\x6F\x72\x14\x47\x0F\x00\x10\x00\x00\x00\x2F\x55\x73\x65\x72\x73\x2F\x64\x65\x76\x6F\x6E\x63\x61'
      '\x72\x65\x77\x2F\x70\x72\x6F\x6A\x65\x63\x74\x73\x2F\x75\x6E\x69\x63\x6F\x64\x65\x2D\x6F\x72\x67\x2F\x69'
      '\x63\x75\x34\x78\x2F\x70\x72\x6F\x76\x69\x64\x65\x72\x2F\x63\x6F\x72\x65\x2F\x73\x72\x63\x2F\x65\x72\x72'
      '\x6F\x72\x2E\x72\x73\x3A\x20\x00\x00\x00\x73\x47\x0F\x00\x02\x00\x00\x00\x20\x28\x6B\x65\x79\x3A\x20\x29'
      '\x80\x47\x0F\x00\x07\x00\x00\x00\x87\x47\x0F\x00\x01\x00\x00\x00\x2C\x20\x72\x65\x71\x75\x65\x73\x74\x3A'
      '\x20\x00\x14\x47\x0F\x00\x00\x00\x00\x00\x80\x47\x0F\x00\x07\x00\x00\x00\x98\x47\x0F\x00\x0B\x00\x00\x00'
      '\x87\x47\x0F\x00\x01\x00\x00\x00\x69\x63\x75\x5F\x70\x72\x6F\x76\x69\x64\x65\x72\x3A\x3A\x65\x72\x72\x6F'
      '\x72\x00\xC4\x47\x0F\x00\x13\x00\x00\x00\xC4\x47\x0F\x00\x13\x00\x00\x00\x2C\x47\x0F\x00\x47\x00\x00\x00'
      '\xCE\x00\x00\x00\x14\x47\x0F\x00\x00\x00\x00\x00\x73\x47\x0F\x00\x02\x00\x00\x00\xC4\x47\x0F\x00\x13\x00'
      '\x00\x00\xC4\x47\x0F\x00\x13\x00\x00\x00\x2C\x47\x0F\x00\x47\x00\x00\x00\xE7\x00\x00\x00\x2D\x75\x2D\x75'
      '\x50\x6F\x73\x74\x63\x61\x72\x64\x20\x64\x65\x73\x65\x72\x69\x61\x6C\x69\x7A\x65\x50\x6F\x73\x74\x63\x61'
      '\x72\x64\x31\x42\x69\x6E\x63\x6F\x64\x65\x31\x4A\x73\x6F\x6E\x55\x6E\x61\x76\x61\x69\x6C\x61\x62\x6C\x65'
      '\x20\x62\x75\x66\x66\x65\x72\x20\x66\x6F\x72\x6D\x61\x74\x3A\x20\x20\x28\x64\x6F\x65\x73\x20\x69\x63\x75'
      '\x5F\x70\x72\x6F\x76\x69\x64\x65\x72\x20\x6E\x65\x65\x64\x20\x74\x6F\x20\x62\x65\x20\x63\x6F\x6D\x70\x69'
      '\x6C\x65\x64\x20\x77\x69\x74\x68\x20\x61\x6E\x20\x61\x64\x64\x69\x74\x69\x6F\x6E\x61\x6C\x20\x43\x61\x72'
      '\x67\x6F\x20\x66\x65\x61\x74\x75\x72\x65\x3F\x29\x00\x00\x4D\x48\x0F\x00\x1B\x00\x00\x00\x68\x48\x0F\x00'
      '\x4A\x00\x00\x00\x43\x75\x73\x74\x6F\x6D\x00\x00\xC4\x48\x0F\x00\x06\x00\x00\x00\x49\x6E\x76\x61\x6C\x69'
      '\x64\x20\x73\x74\x61\x74\x65\x00\x00\x00\xD4\x48\x0F\x00\x0D\x00\x00\x00\x4D\x69\x73\x73\x69\x6E\x67\x20'
      '\x70\x61\x79\x6C\x6F\x61\x64\x00\xEC\x48\x0F\x00\x0F\x00\x00\x00\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64'
      '\x20\x74\x79\x70\x65\x73\x3A\x20\x74\x72\x69\x65\x64\x20\x74\x6F\x20\x64\x6F\x77\x6E\x63\x61\x73\x74\x20'
      '\x77\x69\x74\x68\x20\x2C\x20\x62\x75\x74\x20\x61\x63\x74\x75\x61\x6C\x20\x74\x79\x70\x65\x20\x69\x73\x20'
      '\x64\x69\x66\x66\x65\x72\x65\x6E\x74\x00\x04\x49\x0F\x00\x29\x00\x00\x00\x2D\x49\x0F\x00\x1E\x00\x00\x00'
      '\x52\x65\x73\x6F\x75\x72\x63\x65\x20\x62\x6C\x6F\x63\x6B\x65\x64\x20\x62\x79\x20\x66\x69\x6C\x74\x65\x72'
      '\x00\x00\x5C\x49\x0F\x00\x1A\x00\x00\x00\x52\x65\x71\x75\x65\x73\x74\x20\x68\x61\x73\x20\x61\x6E\x20\x65'
      '\x78\x74\x72\x61\x6E\x65\x6F\x75\x73\x20\x6C\x6F\x63\x61\x6C\x65\x80\x49\x0F\x00\x20\x00\x00\x00\x52\x65'
      '\x71\x75\x65\x73\x74\x20\x6E\x65\x65\x64\x73\x20\x61\x20\x6C\x6F\x63\x61\x6C\x65\x00\x00\xA8\x49\x0F\x00'
      '\x16\x00\x00\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x64\x61\x74\x61\x20\x66\x6F\x72\x20\x6C\x6F\x63\x61\x6C'
      '\x65\x00\xC8\x49\x0F\x00\x17\x00\x00\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x64\x61\x74\x61\x20\x66\x6F\x72'
      '\x20\x6B\x65\x79\xE8\x49\x0F\x00\x14\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x62\x6C\x6F\x62\x20\x62'
      '\x79\x74\x65\x73\x65\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x64\x61\x74\x61\x3A\x20\x00\x00'
      '\x16\x4A\x0F\x00\x14\x00\x00\x00\x0A\x69\x63\x75\x34\x78\x5F\x6B\x65\x79\x5F\x74\x61\x67\x64\x65\x63\x69'
      '\x6D\x61\x6C\x2F\x73\x79\x6D\x62\x6F\x6C\x73\x40\x31\x0A\x34\x4A\x0F\x00\x20\x00\x00\x00\x96\x79\xE2\x20'
      '\x00\x6E\x75\x00\x3A\x20\x42\x75\x66\x66\x65\x72\x50\x72\x6F\x76\x69\x64\x65\x72\x20\x64\x69\x64\x6E\x27'
      '\x74\x20\x73\x65\x74\x20\x42\x75\x66\x66\x65\x72\x46\x6F\x72\x6D\x61\x74\x69\x63\x75\x5F\x6C\x6F\x63\x69'
      '\x64\x3A\x3A\x70\x61\x72\x73\x65\x72\x3A\x3A\x65\x72\x72\x6F\x72\x73\x3A\x3A\x50\x61\x72\x73\x65\x72\x45'
      '\x72\x72\x6F\x72\x69\x63\x75\x5F\x64\x65\x63\x69\x6D\x61\x6C\x3A\x3A\x65\x72\x72\x6F\x72\x3A\x3A\x44\x65'
      '\x63\x69\x6D\x61\x6C\x45\x72\x72\x6F\x72\x69\x63\x75\x5F\x64\x65\x63\x69\x6D\x61\x6C\x3A\x3A\x70\x72\x6F'
      '\x76\x69\x64\x65\x72\x3A\x3A\x44\x65\x63\x69\x6D\x61\x6C\x53\x79\x6D\x62\x6F\x6C\x73\x56\x31\x4D\x61\x72'
      '\x6B\x65\x72\x69\x63\x75\x5F\x70\x72\x6F\x76\x69\x64\x65\x72\x3A\x3A\x65\x72\x72\x6F\x72\x3A\x3A\x44\x61'
      '\x74\x61\x45\x72\x72\x6F\x72\x63\x6F\x72\x65\x3A\x3A\x66\x6D\x74\x3A\x3A\x45\x72\x72\x6F\x72\x52\x65\x74'
      '\x75\x72\x6E\x69\x6E\x67\x20\x49\x43\x55\x34\x58\x45\x72\x72\x6F\x72\x3A\x3A\x20\x62\x61\x73\x65\x64\x20'
      '\x6F\x6E\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x00\x00\x2D\x4B\x0F\x00\x16\x00\x00\x00\x43\x4B\x0F\x00'
      '\x13\x00\x00\x00\x64\x4A\x0F\x00\x02\x00\x00\x00\x69\x63\x75\x5F\x63\x61\x70\x69\x3A\x3A\x65\x72\x72\x6F'
      '\x72\x73\x2F\x55\x73\x65\x72\x73\x2F\x64\x65\x76\x6F\x6E\x63\x61\x72\x65\x77\x2F\x70\x72\x6F\x6A\x65\x63'
      '\x74\x73\x2F\x75\x6E\x69\x63\x6F\x64\x65\x2D\x6F\x72\x67\x2F\x69\x63\x75\x34\x78\x2F\x66\x66\x69\x2F\x64'
      '\x69\x70\x6C\x6F\x6D\x61\x74\x2F\x73\x72\x63\x2F\x65\x72\x72\x6F\x72\x73\x2E\x72\x73\x00\x70\x4B\x0F\x00'
      '\x10\x00\x00\x00\x70\x4B\x0F\x00\x10\x00\x00\x00\x80\x4B\x0F\x00\x47\x00\x00\x00\x8D\x00\x00\x00\x1E\x00'
      '\x00\x00\x2C\x00\x00\x00\x04\x00\x00\x00\x1F\x00\x00\x00\x5B\x5D\x20\x00\xF4\x4B\x0F\x00\x01\x00\x00\x00'
      '\xF5\x4B\x0F\x00\x02\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x20\x00\x00\x00\x00\x00'
      '\x00\x00\x01\x00\x00\x00\x08\x4C\x0F\x00\x21\x00\x00\x00\x22\x00\x00\x00\x23\x00\x00\x00\x4E\x6F\x72\x6D'
      '\x61\x6C\x69\x7A\x65\x72\x56\x61\x6C\x69\x64\x61\x74\x69\x6F\x6E\x45\x72\x72\x6F\x72\x4E\x6F\x72\x6D\x61'
      '\x6C\x69\x7A\x65\x72\x46\x75\x74\x75\x72\x65\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x45\x72\x72\x6F\x72\x54'
      '\x69\x6D\x65\x5A\x6F\x6E\x65\x4D\x69\x73\x73\x69\x6E\x67\x49\x6E\x70\x75\x74\x45\x72\x72\x6F\x72\x54\x69'
      '\x6D\x65\x5A\x6F\x6E\x65\x49\x6E\x76\x61\x6C\x69\x64\x4F\x66\x66\x73\x65\x74\x45\x72\x72\x6F\x72\x54\x69'
      '\x6D\x65\x5A\x6F\x6E\x65\x4F\x66\x66\x73\x65\x74\x4F\x75\x74\x4F\x66\x42\x6F\x75\x6E\x64\x73\x45\x72\x72'
      '\x6F\x72\x54\x69\x6E\x79\x53\x74\x72\x4E\x6F\x6E\x41\x73\x63\x69\x69\x45\x72\x72\x6F\x72\x54\x69\x6E\x79'
      '\x53\x74\x72\x43\x6F\x6E\x74\x61\x69\x6E\x73\x4E\x75\x6C\x6C\x45\x72\x72\x6F\x72\x54\x69\x6E\x79\x53\x74'
      '\x72\x54\x6F\x6F\x4C\x61\x72\x67\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x4D\x69\x73\x6D'
      '\x61\x74\x63\x68\x65\x64\x43\x61\x6C\x65\x6E\x64\x61\x72\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D'
      '\x65\x46\x69\x78\x65\x64\x44\x65\x63\x69\x6D\x61\x6C\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65'
      '\x4D\x69\x73\x73\x69\x6E\x67\x4D\x6F\x6E\x74\x68\x53\x79\x6D\x62\x6F\x6C\x45\x72\x72\x6F\x72\x44\x61\x74'
      '\x65\x54\x69\x6D\x65\x4D\x69\x73\x73\x69\x6E\x67\x57\x65\x65\x6B\x64\x61\x79\x53\x79\x6D\x62\x6F\x6C\x45'
      '\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x55\x6E\x73\x75\x70\x70\x6F\x72\x74\x65\x64\x4F\x70\x74'
      '\x69\x6F\x6E\x73\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x55\x6E\x73\x75\x70\x70\x6F\x72\x74'
      '\x65\x64\x46\x69\x65\x6C\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x53\x6B\x65\x6C\x65\x74'
      '\x6F\x6E\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x4D\x69\x73\x73\x69\x6E\x67\x49\x6E\x70\x75'
      '\x74\x46\x69\x65\x6C\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x50\x61\x74\x74\x65\x72\x6E'
      '\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x4D\x69\x73\x73\x69\x6E\x67\x45\x72\x72\x6F\x72\x43'
      '\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x4B\x69\x6E\x64\x45\x72\x72\x6F\x72\x43\x61\x6C'
      '\x65\x6E\x64\x61\x72\x4D\x69\x73\x73\x69\x6E\x67\x49\x6E\x70\x75\x74\x45\x72\x72\x6F\x72\x43\x61\x6C\x65'
      '\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x4D\x6F\x6E\x74\x68\x43\x6F\x64\x65\x45\x72\x72\x6F\x72\x43'
      '\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x45\x72\x61\x45\x72\x72\x6F\x72\x43\x61\x6C\x65'
      '\x6E\x64\x61\x72\x4F\x75\x74\x4F\x66\x52\x61\x6E\x67\x65\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61'
      '\x72\x55\x6E\x64\x65\x72\x66\x6C\x6F\x77\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x4F\x76\x65'
      '\x72\x66\x6C\x6F\x77\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x50\x61\x72\x73\x65\x45\x72\x72'
      '\x6F\x72\x50\x6C\x75\x72\x61\x6C\x73\x50\x61\x72\x73\x65\x72\x45\x72\x72\x6F\x72\x46\x69\x78\x65\x64\x44'
      '\x65\x63\x69\x6D\x61\x6C\x53\x79\x6E\x74\x61\x78\x45\x72\x72\x6F\x72\x46\x69\x78\x65\x64\x44\x65\x63\x69'
      '\x6D\x61\x6C\x4C\x69\x6D\x69\x74\x45\x72\x72\x6F\x72\x50\x72\x6F\x70\x65\x72\x74\x79\x55\x6E\x6B\x6E\x6F'
      '\x77\x6E\x47\x65\x6E\x65\x72\x61\x6C\x43\x61\x74\x65\x67\x6F\x72\x79\x47\x72\x6F\x75\x70\x45\x72\x72\x6F'
      '\x72\x50\x72\x6F\x70\x65\x72\x74\x79\x55\x6E\x6B\x6E\x6F\x77\x6E\x53\x63\x72\x69\x70\x74\x49\x64\x45\x72'
      '\x72\x6F\x72\x44\x61\x74\x61\x53\x74\x72\x75\x63\x74\x56\x61\x6C\x69\x64\x69\x74\x79\x45\x72\x72\x6F\x72'
      '\x4C\x6F\x63\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x45\x72\x72\x6F\x72'
      '\x4C\x6F\x63\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x53\x75\x62\x74\x61\x67\x45\x72\x72\x6F\x72\x4C\x6F\x63'
      '\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x4C\x61\x6E\x67\x75\x61\x67\x65\x45\x72\x72\x6F\x72\x4C\x6F\x63\x61'
      '\x6C\x65\x55\x6E\x64\x65\x66\x69\x6E\x65\x64\x53\x75\x62\x74\x61\x67\x45\x72\x72\x6F\x72\x44\x61\x74\x61'
      '\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x41\x6E\x79\x42\x75\x66\x66\x65\x72\x45\x72\x72\x6F\x72\x44\x61'
      '\x74\x61\x55\x6E\x61\x76\x61\x69\x6C\x61\x62\x6C\x65\x42\x75\x66\x66\x65\x72\x46\x6F\x72\x6D\x61\x74\x45'
      '\x72\x72\x6F\x72\x44\x61\x74\x61\x49\x6F\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x43\x75\x73\x74\x6F\x6D\x45'
      '\x72\x72\x6F\x72\x44\x61\x74\x61\x49\x6E\x76\x61\x6C\x69\x64\x53\x74\x61\x74\x65\x45\x72\x72\x6F\x72\x44'
      '\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x50\x61\x79\x6C\x6F\x61\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x61'
      '\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x54\x79\x70\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x46\x69\x6C'
      '\x74\x65\x72\x65\x64\x52\x65\x73\x6F\x75\x72\x63\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x45\x78\x74\x72'
      '\x61\x6E\x65\x6F\x75\x73\x4C\x6F\x63\x61\x6C\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4E\x65\x65\x64\x73'
      '\x4C\x6F\x63\x61\x6C\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4E\x65\x65\x64\x73\x56\x61\x72\x69\x61\x6E'
      '\x74\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x4C\x6F\x63\x61\x6C\x65\x45\x72\x72'
      '\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x56\x61\x72\x69\x61\x6E\x74\x45\x72\x72\x6F\x72\x44'
      '\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x44\x61\x74\x61\x4B\x65\x79\x45\x72\x72\x6F\x72\x4F\x75\x74\x4F'
      '\x66\x42\x6F\x75\x6E\x64\x73\x45\x72\x72\x6F\x72\x57\x72\x69\x74\x65\x61\x62\x6C\x65\x45\x72\x72\x6F\x72'
      '\x55\x6E\x6B\x6E\x6F\x77\x6E\x45\x72\x72\x6F\x72\x00\x01\x00\x00\x02\x01\x00\x00\x04\x01\x00\x00\x05\x01'
      '\x00\x00\x06\x01\x00\x00\x07\x01\x00\x00\x08\x01\x00\x00\x09\x01\x00\x00\x0A\x01\x00\x00\x0C\x01\x00\x00'
      '\x03\x02\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x02\x02\x00\x00';

  static const String _hex1 = '\x14\x47\x0F\x00\xAC\x46\x0F\x00';

  void init(Memory memory) {
    memory.copyFrom(_rodata, 0, 1000000, _rodata.length);
    memory.copyFrom(_data, 0, 1003864, _data.length);
  }
}

class ElementSegments extends AbstractElementSegments {
  ElementSegments(this.module);

  final IcuCapiModule module;

  @override
  List<Function> get functionTable => module.functionTable;

  void init() {
    copyTo(module.table0, 0, 1, 35, [
      27,
      32,
      28,
      31,
      41,
      49,
      92,
      94,
      95,
      96,
      105,
      106,
      48,
      98,
      108,
      104,
      99,
      122,
      128,
      129,
      131,
      132,
      121,
      147,
      47,
      93,
      124,
      125,
      140,
      144,
      116,
      141,
      148,
      149,
      150
    ]); /* segment0 */
  }
}
