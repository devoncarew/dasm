// Generated from samples/icu_capi.wasm.

// ignore_for_file: curly_braces_in_flow_control_structures, dead_code
// ignore_for_file: non_constant_identifier_names, unused_element, unused_label
// ignore_for_file: unused_local_variable

import 'dart:typed_data';

import 'package:wasmd/runtime.dart';

/// A class representing the symbols imported from the 'env' module.
abstract class EnvImports {
  void warn_js(i32 arg0, i32 arg1);
  void log_js(i32 arg0, i32 arg1);
}

class IcuCapiModule implements Module {
  IcuCapiModule({required this.envImports}) {
    _data.init(memory);
    segments.init();
  }

  final EnvImports envImports;

  @override
  final Memory memory = Memory(16);

  final Globals globals = Globals();

  final DataSegments _data = DataSegments();

  final Table table0 = Table(
    36,
    36,
  );

  @override
  late final List<Table> tables = [table0];

  late final ElementSegments segments = ElementSegments(this);

  late final List<Function> functionTable = _initFunctionTable();

  i32 get $__data_end => globals.global1;
  i32 get $__heap_base => globals.global2;

  void ICU4XDataProvider_create_from_byte_slice(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(128);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(40);
    frame.i32_add();
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func111(t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load(2, 40);
            arg2 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(3, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_load(2, 44);
            local1 = frame.pop();
            frame.push(local0);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(0xf5144);
            frame.i32_const(44);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func020(t0, t1));
            }
            arg1 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(3, 0);
              break block_label_1;
            }
            frame.push(arg1);
            frame.push(local1);
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(4);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.i32_const(0xf5144);
            frame.i32_const(8);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func020(t0, t1));
            }
            arg2 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(3, 0);
              break block_label_0;
            }
            frame.push(arg2);
            frame.i32_const(0xf50f4);
            frame.i32_store(2, 4);
            frame.push(arg2);
            frame.push(arg1);
            frame.i32_store(2, 0);
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(88);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(40);
          frame.i32_add();
          frame.i32_const(4);
          frame.i32_or();
          frame.i32_const(36);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func002(t0, t1, t2));
          }
          frame.drop();
          frame.push(local0);
          frame.i32_const(88);
          frame.i32_add();
          {
            var t0 = frame.pop();
            frame.push(_func145(t0));
          }
          arg2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(128);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
      }
      frame.i32_const(44);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.i32_const(8);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func030(t0, t1);
    }
    throw Trap('unreachable');
  }

  void ICU4XDataProvider_destroy(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_load(2, 0);
      {
        var func = table0[frame.pop()] as FunctionType4?;
        if (func == null) throw Trap('uninitialized element');
        var t0 = frame.pop();
        func(t0);
      }
      frame.push(local1);
      frame.i32_load(2, 4);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(local0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  void ICU4XFixedDecimalFormatter_create_with_grouping_strategy(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;
    i32 local24 = 0;
    i32 local25 = 0;
    i32 local26 = 0;
    i32 local27 = 0;
    i32 local28 = 0;
    i32 local29 = 0;
    i32 local30 = 0;
    i32 local31 = 0;
    i32 local32 = 0;
    i32 local33 = 0;
    i32 local34 = 0;
    i32 local35 = 0;
    i32 local36 = 0;
    i32 local37 = 0;
    i32 local38 = 0;
    i32 local39 = 0;
    i32 local40 = 0;
    i32 local41 = 0;
    i32 local42 = 0;
    i32 local43 = 0;
    i32 local44 = 0;
    i32 local45 = 0;
    i32 local46 = 0;
    i32 local47 = 0;
    i32 local48 = 0;
    i32 local49 = 0;
    i32 local50 = 0;
    i32 local51 = 0;
    i32 local52 = 0;
    i32 local53 = 0;
    i32 local54 = 0;
    i32 local55 = 0;
    i32 local56 = 0;
    i32 local57 = 0;
    i32 local58 = 0;
    i32 local59 = 0;
    i32 local60 = 0;
    i32 local61 = 0;
    i32 local62 = 0;
    i32 local63 = 0;
    i32 local64 = 0;
    i32 local65 = 0;
    i32 local66 = 0;
    i32 local67 = 0;
    i32 local68 = 0;
    i32 local69 = 0;
    i32 local70 = 0;
    i32 local71 = 0;
    i32 local72 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(0x5c0);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func106(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 0);
              arg2 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 0x518);
              frame.push(local0);
              frame.i32_const(2);
              frame.i32_store8(0, 0x517);
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store8(0, 0x520);
              frame.push(local0);
              frame.i32_const(992);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_const(0);
              frame.i64_load(2, 0xf4a4c);
              frame.i64_store(3, 0);
              frame.push(local0);
              frame.i32_const(0);
              frame.i64_load(2, 0xf4a44);
              frame.i64_store(3, 992);
              frame.push(local0);
              frame.i32_const(640);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local0);
              frame.i32_const(0x508);
              frame.i32_add();
              frame.push(local0);
              frame.i32_const(992);
              frame.i32_add();
              frame.push(local0);
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func104(t0, t1, t2, t3);
              }
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_load(2, 4);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(904);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(0);
            frame.i64_load(2, 0xf4a4c);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(0);
            frame.i64_load(2, 0xf4a44);
            frame.i64_store(3, 904);
            frame.push(local0);
            frame.i32_const(0x508);
            frame.i32_add();
            frame.push(arg2);
            frame.push(local0);
            frame.i32_const(904);
            frame.i32_add();
            frame.push(local0);
            frame.push(arg1);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()] as FunctionType3?;
              if (func == null) throw Trap('uninitialized element');
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              func(t0, t1, t2, t3);
            }
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local0);
                frame.i32_load(2, 0x508);
                if (frame.pop() != 0) {
                  frame.unwindTo(7, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(992);
                frame.i32_add();
                frame.push(local0);
                frame.i32_const(0x508);
                frame.i32_add();
                frame.i32_const(4);
                frame.i32_or();
                frame.i32_const(64);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func002(t0, t1, t2));
                }
                frame.drop();
                frame.push(local0);
                frame.i32_const(840);
                frame.i32_add();
                frame.push(local0);
                frame.i32_const(992);
                frame.i32_add();
                frame.i32_const(64);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func002(t0, t1, t2));
                }
                frame.drop();
                frame.push(local0);
                frame.i32_const(900);
                frame.i32_add();
                frame.i32_load8_u(0, 0);
                arg1 = frame.peek();
                frame.i32_const(3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(7, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.i32_const(672);
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_store8(0, 0);
                frame.push(local0);
                frame.i32_const(668);
                frame.i32_add();
                frame.i32_const(38);
                frame.i32_store(2, 0);
                frame.push(local0);
                frame.i32_const(664);
                frame.i32_add();
                frame.i32_const(0xf4a56);
                frame.i32_store(2, 0);
                frame.push(local0);
                frame.i32_const(663);
                frame.i32_add();
                frame.i32_const(2);
                frame.i32_store8(0, 0);
                frame.push(local0);
                frame.i32_const(3);
                frame.i32_store8(0, 648);
                frame.push(local0);
                frame.i32_const(3);
                frame.i32_store(2, 644);
                frame.push(local0);
                frame.i32_const(852);
                frame.i32_add();
                {
                  var t0 = frame.pop();
                  _func144(t0);
                }
                frame.push(local0);
                frame.i32_load(2, 840);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_3;
                }
                frame.push(local0);
                frame.i32_load(2, 848);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_3;
                }
                frame.push(local0);
                frame.i32_const(840);
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_add();
                {
                  var t0 = frame.pop();
                  _func098(t0);
                }
                frame.unwindTo(2, 0);
                break block_label_3;
              }
              frame.push(local0);
              frame.i32_const(992);
              frame.i32_add();
              frame.push(local0);
              frame.i32_const(0x508);
              frame.i32_add();
              frame.i32_const(4);
              frame.i32_or();
              frame.i32_const(36);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.drop();
              frame.push(local0);
              frame.i32_const(640);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local0);
              frame.i32_const(992);
              frame.i32_add();
              frame.i32_const(36);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.drop();
              frame.push(local0);
              frame.i32_const(3);
              frame.i32_store(2, 644);
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(904);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(852);
            frame.i32_add();
            frame.i32_const(52);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      frame.push(local0);
                                      frame.i32_load(2, 840);
                                      arg2 = frame.peek();
                                      frame.i32_eqz();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_16;
                                      }
                                      frame.push(local0);
                                      frame.push(local0);
                                      frame.i64_load(2, 844);
                                      local1 = frame.peek();
                                      frame.i64_store(2, 0x4dc);
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.i32_store(2, 0x4d8);
                                      frame.push(local1);
                                      frame.i64_const(32);
                                      frame.i64_shr_u();
                                      frame.i32_wrap_i64();
                                      local2 = frame.pop();
                                      frame.push(arg1);
                                      frame.i32_const(2);
                                      frame.i32_ne();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_14;
                                      }
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.i32_store(2, 0x598);
                                      frame.push(local0);
                                      frame.push(arg2);
                                      frame.push(local1);
                                      frame.i32_wrap_i64();
                                      frame.i32_add();
                                      frame.i32_store(2, 0x59c);
                                      frame.push(local0);
                                      frame.i32_const(0x5a0);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x598);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func138(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load(2, 0x5a0);
                                        local3 = frame.peek();
                                        frame.i32_const(2);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(13, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x5a4);
                                        arg1 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_5;
                                      }
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 0x5a5);
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a7);
                                      frame.i32_const(16);
                                      frame.i32_shl();
                                      frame.i32_or();
                                      local4 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5bc);
                                      local5 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b8);
                                      local6 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b4);
                                      local7 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b0);
                                      arg2 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5ac);
                                      local8 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5a8);
                                      local9 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a4);
                                      local10 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x5a0);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x598);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func138(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load(2, 0x5a0);
                                        local11 = frame.peek();
                                        frame.i32_const(2);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(15, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x5a4);
                                        arg1 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_6;
                                      }
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 0x5a5);
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a7);
                                      frame.i32_const(16);
                                      frame.i32_shl();
                                      frame.i32_or();
                                      local12 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5bc);
                                      local13 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b8);
                                      local14 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b4);
                                      local15 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5b0);
                                      local16 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5ac);
                                      local17 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5a8);
                                      local18 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a4);
                                      local19 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x5a0);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x598);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func139(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load(2, 0x5a0);
                                        local20 = frame.peek();
                                        frame.i32_const(2);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(17, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x5a4);
                                        arg1 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_7;
                                      }
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 0x5a5);
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a7);
                                      frame.i32_const(16);
                                      frame.i32_shl();
                                      frame.i32_or();
                                      local21 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5ac);
                                      local22 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5a8);
                                      local23 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a4);
                                      local24 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(0x5a0);
                                      frame.i32_add();
                                      frame.push(local0);
                                      frame.i32_const(0x598);
                                      frame.i32_add();
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func139(t0, t1);
                                      }
                                      block_label_17:
                                      {
                                        frame.push(local0);
                                        frame.i32_load(2, 0x5a0);
                                        local25 = frame.peek();
                                        frame.i32_const(2);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(19, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local0);
                                        frame.i32_load8_u(0, 0x5a4);
                                        arg1 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_8;
                                      }
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a7);
                                      frame.i32_const(16);
                                      frame.i32_shl();
                                      local26 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load16_u(0, 0x5a5);
                                      local27 = frame.pop();
                                      frame.i32_const(0x400);
                                      local28 = frame.pop();
                                      frame.i32_const(0);
                                      local29 = frame.pop();
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load(2, 0x598);
                                          arg1 = frame.peek();
                                          frame.push(local0);
                                          frame.i32_load(2, 0x59c);
                                          local30 = frame.peek();
                                          frame.i32_ne();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(19, 0);
                                            break block_label_18;
                                          }
                                          frame.push(arg1);
                                          local31 = frame.pop();
                                          frame.i32_const(1);
                                          local32 = frame.pop();
                                          frame.unwindTo(19, 0);
                                          break block_label_17;
                                        }
                                        frame.i32_const(1);
                                        local32 = frame.pop();
                                        block_label_18:
                                        {
                                          frame.push(arg1);
                                          frame.i32_const(1);
                                          frame.i32_add();
                                          frame.push(local30);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(19, 0);
                                            break block_label_18;
                                          }
                                          frame.push(local30);
                                          local31 = frame.pop();
                                          frame.unwindTo(19, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local30);
                                        local31 = frame.pop();
                                        frame.push(arg1);
                                        frame.i32_const(2);
                                        frame.i32_add();
                                        frame.push(local30);
                                        frame.i32_eq();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(19, 0);
                                          break block_label_17;
                                        }
                                        frame.push(arg1);
                                        frame.i32_load8_u(0, 2);
                                        frame.i32_const(24);
                                        frame.i32_shl();
                                        frame.push(arg1);
                                        frame.i32_load8_u(0, 1);
                                        frame.i32_const(16);
                                        frame.i32_shl();
                                        frame.i32_or();
                                        local29 = frame.pop();
                                        frame.push(arg1);
                                        frame.i32_load8_u(0, 0);
                                        frame.i32_const(8);
                                        frame.i32_shl();
                                        local28 = frame.pop();
                                        frame.push(arg1);
                                        frame.i32_const(3);
                                        frame.i32_add();
                                        local31 = frame.pop();
                                        frame.i32_const(0);
                                        local32 = frame.pop();
                                      }
                                      frame.push(local27);
                                      frame.push(local26);
                                      frame.i32_or();
                                      local33 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5a8);
                                      local34 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_load8_u(0, 0x5a4);
                                      local35 = frame.pop();
                                      frame.push(local28);
                                      frame.push(local29);
                                      frame.i32_or();
                                      arg1 = frame.peek();
                                      frame.i32_const(0xff00);
                                      frame.i32_and();
                                      frame.i32_const(2);
                                      frame.i32_or();
                                      frame.push(arg1);
                                      frame.i32_const(-256);
                                      frame.i32_and();
                                      frame.i32_const(1);
                                      frame.i32_or();
                                      frame.push(local32);
                                      frame.push(local29);
                                      frame.i32_const(1);
                                      frame.i32_and();
                                      frame.i32_or();
                                      frame.select();
                                      local29 = frame.peek();
                                      frame.i32_const(8);
                                      frame.i32_shr_u();
                                      local36 = frame.pop();
                                      block_label_17:
                                      {
                                        frame.push(local29);
                                        frame.i32_const(3);
                                        frame.i32_and();
                                        frame.i32_const(2);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(19, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local36);
                                        arg1 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_9;
                                      }
                                      frame.i32_const(13);
                                      arg1 = frame.pop();
                                      frame.push(local29);
                                      frame.i32_const(1);
                                      frame.i32_and();
                                      frame.i32_eqz();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_9;
                                      }
                                      frame.push(local31);
                                      frame.push(local30);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_11;
                                      }
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5ac);
                                      local37 = frame.pop();
                                      frame.push(local29);
                                      frame.i32_const(16);
                                      frame.i32_shr_u();
                                      local38 = frame.pop();
                                      frame.push(local31);
                                      frame.i32_const(5);
                                      frame.i32_add();
                                      local39 = frame.pop();
                                      frame.i32_const(0);
                                      arg1 = frame.pop();
                                      frame.i32_const(0);
                                      local29 = frame.pop();
                                      frame.push(local30);
                                      frame.push(local31);
                                      frame.i32_sub();
                                      local40 = frame.peek();
                                      local27 = frame.pop();
                                      frame.i32_const(-1);
                                      local26 = frame.pop();
                                      frame.i32_const(0);
                                      local28 = frame.pop();
                                      block_label_17:
                                      {
                                        loop_label_18:
                                        for (;;) {
                                          frame.push(local31);
                                          frame.push(local29);
                                          frame.i32_add();
                                          local41 = frame.peek();
                                          frame.i32_load8_s(0, 0);
                                          local32 = frame.peek();
                                          frame.i32_const(127);
                                          frame.i32_and();
                                          local42 = frame.peek();
                                          frame.push(arg1);
                                          frame.i32_shl();
                                          frame.push(local28);
                                          frame.i32_or();
                                          local28 = frame.pop();
                                          block_label_19:
                                          {
                                            frame.push(local32);
                                            frame.i32_const(0);
                                            frame.i32_lt_s();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(21, 0);
                                              break block_label_19;
                                            }
                                            frame.push(local26);
                                            frame.push(local42);
                                            frame.i32_ge_u();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(21, 0);
                                              break block_label_17;
                                            }
                                            frame.unwindTo(9, 0);
                                            break block_label_12;
                                          }
                                          block_label_19:
                                          {
                                            frame.push(local29);
                                            frame.i32_const(4);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(21, 0);
                                              break block_label_19;
                                            }
                                            frame.push(arg1);
                                            frame.i32_const(7);
                                            frame.i32_add();
                                            arg1 = frame.pop();
                                            frame.push(local27);
                                            frame.i32_const(-1);
                                            frame.i32_add();
                                            local27 = frame.pop();
                                            frame.push(local26);
                                            frame.i32_const(7);
                                            frame.i32_shr_u();
                                            local26 = frame.pop();
                                            frame.push(local31);
                                            frame.push(local29);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            local29 = frame.peek();
                                            frame.i32_add();
                                            frame.push(local30);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(9, 0);
                                              break block_label_11;
                                            }
                                            continue loop_label_18;
                                          }
                                          break;
                                        }
                                        frame.i32_const(5);
                                        arg1 = frame.pop();
                                        frame.push(local39);
                                        local30 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_10;
                                      }
                                      frame.i32_const(4);
                                      arg1 = frame.pop();
                                      frame.push(local28);
                                      frame.i32_const(4);
                                      frame.i32_gt_u();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_13;
                                      }
                                      frame.push(local29);
                                      frame.i32_const(-1);
                                      frame.i32_xor();
                                      frame.push(local40);
                                      frame.i32_add();
                                      frame.push(local28);
                                      frame.i32_lt_u();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_9;
                                      }
                                      frame.push(local0);
                                      frame.push(local31);
                                      frame.push(local29);
                                      frame.push(local28);
                                      frame.i32_add();
                                      frame.i32_add();
                                      local43 = frame.peek();
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      local32 = frame.peek();
                                      frame.i32_store(2, 0x598);
                                      frame.push(local0);
                                      frame.i32_const(0x5a0);
                                      frame.i32_add();
                                      frame.push(local41);
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      frame.push(local28);
                                      {
                                        var t2 = frame.pop();
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func042(t0, t1, t2);
                                      }
                                      frame.push(local0);
                                      frame.i32_load(2, 0x5a0);
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_13;
                                      }
                                      frame.push(local0);
                                      frame.i32_const(0x5a8);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      frame.i32_eqz();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_13;
                                      }
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          frame.push(local0);
                                          frame.i32_load(2, 0x5a4);
                                          local26 = frame.peek();
                                          frame.i32_load8_s(0, 0);
                                          arg1 = frame.peek();
                                          frame.i32_const(-1);
                                          frame.i32_le_s();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(28, 0);
                                            break block_label_18;
                                          }
                                          frame.push(arg1);
                                          frame.i32_const(255);
                                          frame.i32_and();
                                          local44 = frame.pop();
                                          frame.unwindTo(28, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local26);
                                        frame.i32_load8_u(0, 1);
                                        frame.i32_const(63);
                                        frame.i32_and();
                                        local42 = frame.pop();
                                        frame.push(arg1);
                                        frame.i32_const(31);
                                        frame.i32_and();
                                        local41 = frame.pop();
                                        block_label_18:
                                        {
                                          frame.push(arg1);
                                          frame.i32_const(-33);
                                          frame.i32_gt_u();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(28, 0);
                                            break block_label_18;
                                          }
                                          frame.push(local41);
                                          frame.i32_const(6);
                                          frame.i32_shl();
                                          frame.push(local42);
                                          frame.i32_or();
                                          local44 = frame.pop();
                                          frame.unwindTo(28, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local42);
                                        frame.i32_const(6);
                                        frame.i32_shl();
                                        frame.push(local26);
                                        frame.i32_load8_u(0, 2);
                                        frame.i32_const(63);
                                        frame.i32_and();
                                        frame.i32_or();
                                        local42 = frame.pop();
                                        block_label_18:
                                        {
                                          frame.push(arg1);
                                          frame.i32_const(-16);
                                          frame.i32_ge_u();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(28, 0);
                                            break block_label_18;
                                          }
                                          frame.push(local42);
                                          frame.push(local41);
                                          frame.i32_const(12);
                                          frame.i32_shl();
                                          frame.i32_or();
                                          local44 = frame.pop();
                                          frame.unwindTo(28, 0);
                                          break block_label_17;
                                        }
                                        frame.i32_const(7);
                                        arg1 = frame.pop();
                                        frame.push(local42);
                                        frame.i32_const(6);
                                        frame.i32_shl();
                                        frame.push(local26);
                                        frame.i32_load8_u(0, 3);
                                        frame.i32_const(63);
                                        frame.i32_and();
                                        frame.i32_or();
                                        frame.push(local41);
                                        frame.i32_const(18);
                                        frame.i32_shl();
                                        frame.i32_const(0x1c0000);
                                        frame.i32_and();
                                        frame.i32_or();
                                        local44 = frame.peek();
                                        frame.i32_const(0x110000);
                                        frame.i32_eq();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(9, 0);
                                          break block_label_9;
                                        }
                                      }
                                      frame.push(local32);
                                      frame.push(local30);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_11;
                                      }
                                      frame.i32_const(0);
                                      frame.push(local28);
                                      frame.i32_sub();
                                      local45 = frame.pop();
                                      frame.push(local40);
                                      frame.push(local28);
                                      frame.i32_sub();
                                      frame.push(local29);
                                      frame.i32_sub();
                                      arg1 = frame.peek();
                                      frame.i32_const(-3);
                                      frame.i32_add();
                                      local46 = frame.pop();
                                      frame.push(local43);
                                      frame.i32_const(6);
                                      frame.i32_add();
                                      local47 = frame.pop();
                                      frame.push(arg1);
                                      frame.push(local32);
                                      frame.i32_add();
                                      frame.i32_const(-1);
                                      frame.i32_add();
                                      local48 = frame.pop();
                                      frame.push(local28);
                                      local39 = frame.pop();
                                      frame.i32_const(0);
                                      arg1 = frame.pop();
                                      frame.i32_const(0);
                                      local32 = frame.pop();
                                      frame.i32_const(-1);
                                      local41 = frame.pop();
                                      frame.i32_const(0);
                                      local26 = frame.pop();

                                      loop_label_17:
                                      for (;;) {
                                        frame.push(local43);
                                        frame.push(local32);
                                        frame.i32_add();
                                        local49 = frame.peek();
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        frame.i32_load8_s(0, 0);
                                        local42 = frame.peek();
                                        frame.i32_const(127);
                                        frame.i32_and();
                                        local50 = frame.peek();
                                        frame.push(arg1);
                                        frame.i32_shl();
                                        frame.push(local26);
                                        frame.i32_or();
                                        local26 = frame.pop();
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                frame.push(local42);
                                                frame.i32_const(0);
                                                frame.i32_lt_s();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(29, 0);
                                                  break block_label_21;
                                                }
                                                frame.push(local41);
                                                frame.push(local50);
                                                frame.i32_lt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_12;
                                                }
                                                frame.i32_const(4);
                                                arg1 = frame.pop();
                                                frame.push(local26);
                                                frame.i32_const(4);
                                                frame.i32_gt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_13;
                                                }
                                                frame.push(local27);
                                                frame.push(local28);
                                                frame.i32_sub();
                                                frame.push(local32);
                                                frame.i32_sub();
                                                frame.i32_const(-2);
                                                frame.i32_add();
                                                frame.push(local26);
                                                frame.i32_lt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_9;
                                                }
                                                frame.push(local0);
                                                frame.push(local31);
                                                frame.push(local26);
                                                frame.push(local39);
                                                frame.i32_add();
                                                local32 = frame.peek();
                                                frame.i32_add();
                                                frame.push(local29);
                                                frame.i32_add();
                                                local48 = frame.peek();
                                                frame.i32_const(2);
                                                frame.i32_add();
                                                local28 = frame.peek();
                                                frame.i32_store(2, 0x598);
                                                frame.push(local0);
                                                frame.i32_const(0x5a0);
                                                frame.i32_add();
                                                frame.push(local49);
                                                frame.i32_const(2);
                                                frame.i32_add();
                                                frame.push(local26);
                                                {
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func042(t0, t1, t2);
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 0x5a0);
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_13;
                                                }
                                                frame.push(local0);
                                                frame.i32_const(0x5a8);
                                                frame.i32_add();
                                                frame.i32_load(2, 0);
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_13;
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 0x5a4);
                                                local27 = frame.peek();
                                                frame.i32_load8_s(0, 0);
                                                arg1 = frame.peek();
                                                frame.i32_const(-1);
                                                frame.i32_le_s();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(29, 0);
                                                  break block_label_20;
                                                }
                                                frame.push(arg1);
                                                frame.i32_const(255);
                                                frame.i32_and();
                                                local51 = frame.pop();
                                                frame.unwindTo(29, 0);
                                                break block_label_19;
                                              }
                                              frame.push(local32);
                                              frame.i32_const(4);
                                              frame.i32_ne();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(29, 0);
                                                break block_label_18;
                                              }
                                              frame.i32_const(5);
                                              arg1 = frame.pop();
                                              frame.push(local47);
                                              local30 = frame.pop();
                                              frame.unwindTo(9, 0);
                                              break block_label_10;
                                            }
                                            frame.push(local27);
                                            frame.i32_load8_u(0, 1);
                                            frame.i32_const(63);
                                            frame.i32_and();
                                            local42 = frame.pop();
                                            frame.push(arg1);
                                            frame.i32_const(31);
                                            frame.i32_and();
                                            local41 = frame.pop();
                                            block_label_20:
                                            {
                                              frame.push(arg1);
                                              frame.i32_const(-33);
                                              frame.i32_gt_u();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(29, 0);
                                                break block_label_20;
                                              }
                                              frame.push(local41);
                                              frame.i32_const(6);
                                              frame.i32_shl();
                                              frame.push(local42);
                                              frame.i32_or();
                                              local51 = frame.pop();
                                              frame.unwindTo(29, 0);
                                              break block_label_19;
                                            }
                                            frame.push(local42);
                                            frame.i32_const(6);
                                            frame.i32_shl();
                                            frame.push(local27);
                                            frame.i32_load8_u(0, 2);
                                            frame.i32_const(63);
                                            frame.i32_and();
                                            frame.i32_or();
                                            local42 = frame.pop();
                                            block_label_20:
                                            {
                                              frame.push(arg1);
                                              frame.i32_const(-16);
                                              frame.i32_ge_u();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(29, 0);
                                                break block_label_20;
                                              }
                                              frame.push(local42);
                                              frame.push(local41);
                                              frame.i32_const(12);
                                              frame.i32_shl();
                                              frame.i32_or();
                                              local51 = frame.pop();
                                              frame.unwindTo(29, 0);
                                              break block_label_19;
                                            }
                                            frame.i32_const(7);
                                            arg1 = frame.pop();
                                            frame.push(local42);
                                            frame.i32_const(6);
                                            frame.i32_shl();
                                            frame.push(local27);
                                            frame.i32_load8_u(0, 3);
                                            frame.i32_const(63);
                                            frame.i32_and();
                                            frame.i32_or();
                                            frame.push(local41);
                                            frame.i32_const(18);
                                            frame.i32_shl();
                                            frame.i32_const(0x1c0000);
                                            frame.i32_and();
                                            frame.i32_or();
                                            local51 = frame.peek();
                                            frame.i32_const(0x110000);
                                            frame.i32_eq();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(9, 0);
                                              break block_label_9;
                                            }
                                          }
                                          frame.push(local28);
                                          frame.push(local30);
                                          frame.i32_eq();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(9, 0);
                                            break block_label_11;
                                          }
                                          frame.i32_const(0);
                                          frame.push(local26);
                                          frame.i32_sub();
                                          local49 = frame.pop();
                                          frame.push(local45);
                                          frame.push(local26);
                                          frame.i32_sub();
                                          local45 = frame.peek();
                                          frame.push(local40);
                                          frame.i32_add();
                                          frame.push(local29);
                                          frame.i32_sub();
                                          arg1 = frame.peek();
                                          frame.i32_const(-4);
                                          frame.i32_add();
                                          local50 = frame.pop();
                                          frame.push(local48);
                                          frame.i32_const(7);
                                          frame.i32_add();
                                          local52 = frame.pop();
                                          frame.push(arg1);
                                          frame.push(local28);
                                          frame.i32_add();
                                          frame.i32_const(-2);
                                          frame.i32_add();
                                          local53 = frame.pop();
                                          frame.push(local26);
                                          local43 = frame.pop();
                                          frame.i32_const(0);
                                          arg1 = frame.pop();
                                          frame.i32_const(0);
                                          local28 = frame.pop();
                                          frame.i32_const(-1);
                                          local41 = frame.pop();
                                          frame.i32_const(0);
                                          local27 = frame.pop();

                                          loop_label_19:
                                          for (;;) {
                                            frame.push(local48);
                                            frame.push(local28);
                                            frame.i32_add();
                                            local47 = frame.peek();
                                            frame.i32_const(2);
                                            frame.i32_add();
                                            frame.i32_load8_s(0, 0);
                                            local42 = frame.peek();
                                            frame.i32_const(127);
                                            frame.i32_and();
                                            local54 = frame.peek();
                                            frame.push(arg1);
                                            frame.i32_shl();
                                            frame.push(local27);
                                            frame.i32_or();
                                            local27 = frame.pop();
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    frame.push(local42);
                                                    frame.i32_const(0);
                                                    frame.i32_lt_s();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(30, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.push(local41);
                                                    frame.push(local54);
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_12;
                                                    }
                                                    frame.i32_const(4);
                                                    arg1 = frame.pop();
                                                    frame.push(local27);
                                                    frame.i32_const(4);
                                                    frame.i32_gt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_13;
                                                    }
                                                    frame.push(local46);
                                                    frame.push(local26);
                                                    frame.i32_sub();
                                                    frame.push(local28);
                                                    frame.i32_sub();
                                                    frame.push(local27);
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_9;
                                                    }
                                                    frame.push(local0);
                                                    frame.push(local31);
                                                    frame.push(local27);
                                                    frame.push(local32);
                                                    frame.i32_add();
                                                    local42 = frame.peek();
                                                    frame.i32_add();
                                                    frame.push(local29);
                                                    frame.i32_add();
                                                    local52 = frame.peek();
                                                    frame.i32_const(3);
                                                    frame.i32_add();
                                                    local41 = frame.peek();
                                                    frame.i32_store(2, 0x598);
                                                    frame.push(local0);
                                                    frame.i32_const(0x5a0);
                                                    frame.i32_add();
                                                    frame.push(local31);
                                                    frame.push(local26);
                                                    frame.push(local39);
                                                    frame.i32_add();
                                                    frame.i32_add();
                                                    frame.push(local29);
                                                    frame.i32_add();
                                                    frame.push(local28);
                                                    frame.i32_add();
                                                    frame.i32_const(3);
                                                    frame.i32_add();
                                                    frame.push(local27);
                                                    {
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func042(t0, t1, t2);
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 0x5a0);
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_13;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_const(0x5a8);
                                                    frame.i32_add();
                                                    frame.i32_load(2, 0);
                                                    frame.i32_eqz();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_13;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 0x5a4);
                                                    local28 = frame.peek();
                                                    frame.i32_load8_s(0, 0);
                                                    arg1 = frame.peek();
                                                    frame.i32_const(-1);
                                                    frame.i32_le_s();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(30, 0);
                                                      break block_label_22;
                                                    }
                                                    frame.push(arg1);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    local55 = frame.pop();
                                                    frame.unwindTo(30, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local28);
                                                  frame.i32_const(4);
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(30, 0);
                                                    break block_label_20;
                                                  }
                                                  frame.i32_const(5);
                                                  arg1 = frame.pop();
                                                  frame.push(local52);
                                                  local30 = frame.pop();
                                                  frame.unwindTo(9, 0);
                                                  break block_label_10;
                                                }
                                                frame.push(local28);
                                                frame.i32_load8_u(0, 1);
                                                frame.i32_const(63);
                                                frame.i32_and();
                                                local26 = frame.pop();
                                                frame.push(arg1);
                                                frame.i32_const(31);
                                                frame.i32_and();
                                                local39 = frame.pop();
                                                block_label_22:
                                                {
                                                  frame.push(arg1);
                                                  frame.i32_const(-33);
                                                  frame.i32_gt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(30, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local39);
                                                  frame.i32_const(6);
                                                  frame.i32_shl();
                                                  frame.push(local26);
                                                  frame.i32_or();
                                                  local55 = frame.pop();
                                                  frame.unwindTo(30, 0);
                                                  break block_label_21;
                                                }
                                                frame.push(local26);
                                                frame.i32_const(6);
                                                frame.i32_shl();
                                                frame.push(local28);
                                                frame.i32_load8_u(0, 2);
                                                frame.i32_const(63);
                                                frame.i32_and();
                                                frame.i32_or();
                                                local26 = frame.pop();
                                                block_label_22:
                                                {
                                                  frame.push(arg1);
                                                  frame.i32_const(-16);
                                                  frame.i32_ge_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(30, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local26);
                                                  frame.push(local39);
                                                  frame.i32_const(12);
                                                  frame.i32_shl();
                                                  frame.i32_or();
                                                  local55 = frame.pop();
                                                  frame.unwindTo(30, 0);
                                                  break block_label_21;
                                                }
                                                frame.i32_const(7);
                                                arg1 = frame.pop();
                                                frame.push(local26);
                                                frame.i32_const(6);
                                                frame.i32_shl();
                                                frame.push(local28);
                                                frame.i32_load8_u(0, 3);
                                                frame.i32_const(63);
                                                frame.i32_and();
                                                frame.i32_or();
                                                frame.push(local39);
                                                frame.i32_const(18);
                                                frame.i32_shl();
                                                frame.i32_const(0x1c0000);
                                                frame.i32_and();
                                                frame.i32_or();
                                                local55 = frame.peek();
                                                frame.i32_const(0x110000);
                                                frame.i32_eq();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(9, 0);
                                                  break block_label_9;
                                                }
                                              }
                                              frame.push(local41);
                                              frame.push(local30);
                                              frame.i32_eq();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(9, 0);
                                                break block_label_11;
                                              }
                                              frame.push(local27);
                                              frame.push(local43);
                                              frame.i32_add();
                                              local46 = frame.pop();
                                              frame.push(local49);
                                              frame.push(local27);
                                              frame.i32_sub();
                                              local49 = frame.pop();
                                              frame.i32_const(0);
                                              frame.push(local27);
                                              frame.i32_sub();
                                              local43 = frame.pop();
                                              frame.push(local45);
                                              frame.push(local27);
                                              frame.i32_sub();
                                              local45 = frame.peek();
                                              frame.push(local40);
                                              frame.i32_add();
                                              frame.push(local29);
                                              frame.i32_sub();
                                              arg1 = frame.peek();
                                              frame.i32_const(-5);
                                              frame.i32_add();
                                              local48 = frame.pop();
                                              frame.push(local52);
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              local56 = frame.pop();
                                              frame.push(arg1);
                                              frame.push(local41);
                                              frame.i32_add();
                                              frame.i32_const(-3);
                                              frame.i32_add();
                                              local57 = frame.pop();
                                              frame.push(local27);
                                              local47 = frame.pop();
                                              frame.i32_const(0);
                                              local26 = frame.pop();
                                              frame.i32_const(0);
                                              local28 = frame.pop();
                                              frame.i32_const(-1);
                                              local39 = frame.pop();
                                              frame.i32_const(0);
                                              local41 = frame.pop();

                                              loop_label_21:
                                              for (;;) {
                                                frame.push(local52);
                                                frame.push(local28);
                                                frame.i32_add();
                                                local54 = frame.peek();
                                                frame.i32_const(3);
                                                frame.i32_add();
                                                frame.i32_load8_s(0, 0);
                                                arg1 = frame.peek();
                                                frame.i32_const(127);
                                                frame.i32_and();
                                                local53 = frame.peek();
                                                frame.push(local26);
                                                frame.i32_shl();
                                                frame.push(local41);
                                                frame.i32_or();
                                                local41 = frame.pop();
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        frame.push(arg1);
                                                        frame.i32_const(0);
                                                        frame.i32_lt_s();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(31, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.i32_const(5);
                                                        arg1 = frame.pop();
                                                        frame.push(local39);
                                                        frame.push(local53);
                                                        frame.i32_lt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_9;
                                                        }
                                                        frame.push(local41);
                                                        frame.i32_const(4);
                                                        frame.i32_gt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_13;
                                                        }
                                                        frame.i32_const(4);
                                                        arg1 = frame.pop();
                                                        frame.push(local50);
                                                        frame.push(local27);
                                                        frame.i32_sub();
                                                        frame.push(local28);
                                                        frame.i32_sub();
                                                        frame.push(local41);
                                                        frame.i32_lt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_9;
                                                        }
                                                        frame.push(local0);
                                                        frame.push(local31);
                                                        frame.push(local41);
                                                        frame.push(local42);
                                                        frame.i32_add();
                                                        local26 = frame.peek();
                                                        frame.i32_add();
                                                        frame.push(local29);
                                                        frame.i32_add();
                                                        local56 = frame.peek();
                                                        frame.i32_const(4);
                                                        frame.i32_add();
                                                        local39 = frame.peek();
                                                        frame.i32_store(2, 0x598);
                                                        frame.push(local0);
                                                        frame.i32_const(0x5a0);
                                                        frame.i32_add();
                                                        frame.push(local31);
                                                        frame.push(local27);
                                                        frame.push(local32);
                                                        frame.i32_add();
                                                        frame.i32_add();
                                                        frame.push(local29);
                                                        frame.i32_add();
                                                        frame.push(local28);
                                                        frame.i32_add();
                                                        frame.i32_const(4);
                                                        frame.i32_add();
                                                        frame.push(local41);
                                                        {
                                                          var t2 = frame.pop();
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func042(t0, t1, t2);
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_load(2, 0x5a0);
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_13;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(0x5a8);
                                                        frame.i32_add();
                                                        frame.i32_load(2, 0);
                                                        frame.i32_eqz();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_13;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_load(2, 0x5a4);
                                                        local28 = frame.peek();
                                                        frame.i32_load8_s(0, 0);
                                                        arg1 = frame.peek();
                                                        frame.i32_const(-1);
                                                        frame.i32_le_s();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(31, 0);
                                                          break block_label_24;
                                                        }
                                                        frame.push(arg1);
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        local58 = frame.pop();
                                                        frame.unwindTo(31, 0);
                                                        break block_label_23;
                                                      }
                                                      frame.push(local28);
                                                      frame.i32_const(4);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(31, 0);
                                                        break block_label_22;
                                                      }
                                                      frame.i32_const(5);
                                                      arg1 = frame.pop();
                                                      frame.push(local56);
                                                      local30 = frame.pop();
                                                      frame.unwindTo(9, 0);
                                                      break block_label_10;
                                                    }
                                                    frame.push(local28);
                                                    frame.i32_load8_u(0, 1);
                                                    frame.i32_const(63);
                                                    frame.i32_and();
                                                    local27 = frame.pop();
                                                    frame.push(arg1);
                                                    frame.i32_const(31);
                                                    frame.i32_and();
                                                    local32 = frame.pop();
                                                    block_label_24:
                                                    {
                                                      frame.push(arg1);
                                                      frame.i32_const(-33);
                                                      frame.i32_gt_u();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(31, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local32);
                                                      frame.i32_const(6);
                                                      frame.i32_shl();
                                                      frame.push(local27);
                                                      frame.i32_or();
                                                      local58 = frame.pop();
                                                      frame.unwindTo(31, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.push(local27);
                                                    frame.i32_const(6);
                                                    frame.i32_shl();
                                                    frame.push(local28);
                                                    frame.i32_load8_u(0, 2);
                                                    frame.i32_const(63);
                                                    frame.i32_and();
                                                    frame.i32_or();
                                                    local27 = frame.pop();
                                                    block_label_24:
                                                    {
                                                      frame.push(arg1);
                                                      frame.i32_const(-16);
                                                      frame.i32_ge_u();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(31, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local27);
                                                      frame.push(local32);
                                                      frame.i32_const(12);
                                                      frame.i32_shl();
                                                      frame.i32_or();
                                                      local58 = frame.pop();
                                                      frame.unwindTo(31, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.i32_const(7);
                                                    arg1 = frame.pop();
                                                    frame.push(local27);
                                                    frame.i32_const(6);
                                                    frame.i32_shl();
                                                    frame.push(local28);
                                                    frame.i32_load8_u(0, 3);
                                                    frame.i32_const(63);
                                                    frame.i32_and();
                                                    frame.i32_or();
                                                    frame.push(local32);
                                                    frame.i32_const(18);
                                                    frame.i32_shl();
                                                    frame.i32_const(0x1c0000);
                                                    frame.i32_and();
                                                    frame.i32_or();
                                                    local58 = frame.peek();
                                                    frame.i32_const(0x110000);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(9, 0);
                                                      break block_label_9;
                                                    }
                                                  }
                                                  frame.push(local39);
                                                  frame.push(local30);
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(9, 0);
                                                    break block_label_11;
                                                  }
                                                  frame.push(local41);
                                                  frame.push(local46);
                                                  frame.i32_add();
                                                  local46 = frame.pop();
                                                  frame.push(local49);
                                                  frame.push(local41);
                                                  frame.i32_sub();
                                                  local49 = frame.pop();
                                                  frame.push(local41);
                                                  frame.push(local47);
                                                  frame.i32_add();
                                                  local50 = frame.pop();
                                                  frame.push(local43);
                                                  frame.push(local41);
                                                  frame.i32_sub();
                                                  local43 = frame.pop();
                                                  frame.i32_const(0);
                                                  frame.push(local41);
                                                  frame.i32_sub();
                                                  local47 = frame.pop();
                                                  frame.push(local45);
                                                  frame.push(local41);
                                                  frame.i32_sub();
                                                  local45 = frame.peek();
                                                  frame.push(local40);
                                                  frame.i32_add();
                                                  frame.push(local29);
                                                  frame.i32_sub();
                                                  arg1 = frame.peek();
                                                  frame.i32_const(-6);
                                                  frame.i32_add();
                                                  local52 = frame.pop();
                                                  frame.push(local56);
                                                  frame.i32_const(9);
                                                  frame.i32_add();
                                                  local59 = frame.pop();
                                                  frame.push(arg1);
                                                  frame.push(local39);
                                                  frame.i32_add();
                                                  frame.i32_const(-4);
                                                  frame.i32_add();
                                                  local60 = frame.pop();
                                                  frame.push(local41);
                                                  local54 = frame.pop();
                                                  frame.i32_const(0);
                                                  arg1 = frame.pop();
                                                  frame.i32_const(0);
                                                  local28 = frame.pop();
                                                  frame.i32_const(-1);
                                                  local39 = frame.pop();
                                                  frame.i32_const(0);
                                                  local32 = frame.pop();

                                                  loop_label_23:
                                                  for (;;) {
                                                    frame.push(local56);
                                                    frame.push(local28);
                                                    frame.i32_add();
                                                    local53 = frame.peek();
                                                    frame.i32_const(4);
                                                    frame.i32_add();
                                                    frame.i32_load8_s(0, 0);
                                                    local27 = frame.peek();
                                                    frame.i32_const(127);
                                                    frame.i32_and();
                                                    local57 = frame.peek();
                                                    frame.push(arg1);
                                                    frame.i32_shl();
                                                    frame.push(local32);
                                                    frame.i32_or();
                                                    local32 = frame.pop();
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            frame.push(local27);
                                                            frame.i32_const(0);
                                                            frame.i32_lt_s();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(32, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.push(local39);
                                                            frame.push(local57);
                                                            frame.i32_lt_u();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_12;
                                                            }
                                                            frame.i32_const(4);
                                                            arg1 = frame.pop();
                                                            frame.push(local32);
                                                            frame.i32_const(4);
                                                            frame.i32_gt_u();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_13;
                                                            }
                                                            frame.push(local48);
                                                            frame.push(local41);
                                                            frame.i32_sub();
                                                            frame.push(local28);
                                                            frame.i32_sub();
                                                            frame.push(local32);
                                                            frame.i32_lt_u();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_9;
                                                            }
                                                            frame.push(local0);
                                                            frame.push(local31);
                                                            frame.push(local32);
                                                            frame.push(local26);
                                                            frame.i32_add();
                                                            local27 = frame.peek();
                                                            frame.i32_add();
                                                            frame.push(local29);
                                                            frame.i32_add();
                                                            local59 = frame.peek();
                                                            frame.i32_const(5);
                                                            frame.i32_add();
                                                            local39 = frame.peek();
                                                            frame.i32_store(2, 0x598);
                                                            frame.push(local0);
                                                            frame.i32_const(0x5a0);
                                                            frame.i32_add();
                                                            frame.push(local31);
                                                            frame.push(local41);
                                                            frame.push(local42);
                                                            frame.i32_add();
                                                            frame.i32_add();
                                                            frame.push(local29);
                                                            frame.i32_add();
                                                            frame.push(local28);
                                                            frame.i32_add();
                                                            frame.i32_const(5);
                                                            frame.i32_add();
                                                            frame.push(local32);
                                                            {
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func042(t0, t1, t2);
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_load(2, 0x5a0);
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_13;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_const(0x5a8);
                                                            frame.i32_add();
                                                            frame.i32_load(2, 0);
                                                            frame.i32_eqz();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_13;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_load(2, 0x5a4);
                                                            local28 = frame.peek();
                                                            frame.i32_load8_s(0, 0);
                                                            arg1 = frame.peek();
                                                            frame.i32_const(-1);
                                                            frame.i32_le_s();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(32, 0);
                                                              break block_label_26;
                                                            }
                                                            frame.push(arg1);
                                                            frame.i32_const(255);
                                                            frame.i32_and();
                                                            local61 = frame.pop();
                                                            frame.unwindTo(32, 0);
                                                            break block_label_25;
                                                          }
                                                          frame.push(local28);
                                                          frame.i32_const(4);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(32, 0);
                                                            break block_label_24;
                                                          }
                                                          frame.i32_const(5);
                                                          arg1 = frame.pop();
                                                          frame.push(local59);
                                                          local30 = frame.pop();
                                                          frame.unwindTo(9, 0);
                                                          break block_label_10;
                                                        }
                                                        frame.push(local28);
                                                        frame.i32_load8_u(0, 1);
                                                        frame.i32_const(63);
                                                        frame.i32_and();
                                                        local41 = frame.pop();
                                                        frame.push(arg1);
                                                        frame.i32_const(31);
                                                        frame.i32_and();
                                                        local42 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          frame.push(arg1);
                                                          frame.i32_const(-33);
                                                          frame.i32_gt_u();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(32, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local42);
                                                          frame.i32_const(6);
                                                          frame.i32_shl();
                                                          frame.push(local41);
                                                          frame.i32_or();
                                                          local61 = frame.pop();
                                                          frame.unwindTo(32, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local41);
                                                        frame.i32_const(6);
                                                        frame.i32_shl();
                                                        frame.push(local28);
                                                        frame.i32_load8_u(0, 2);
                                                        frame.i32_const(63);
                                                        frame.i32_and();
                                                        frame.i32_or();
                                                        local41 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          frame.push(arg1);
                                                          frame.i32_const(-16);
                                                          frame.i32_ge_u();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(32, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local41);
                                                          frame.push(local42);
                                                          frame.i32_const(12);
                                                          frame.i32_shl();
                                                          frame.i32_or();
                                                          local61 = frame.pop();
                                                          frame.unwindTo(32, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.i32_const(7);
                                                        arg1 = frame.pop();
                                                        frame.push(local41);
                                                        frame.i32_const(6);
                                                        frame.i32_shl();
                                                        frame.push(local28);
                                                        frame.i32_load8_u(0, 3);
                                                        frame.i32_const(63);
                                                        frame.i32_and();
                                                        frame.i32_or();
                                                        frame.push(local42);
                                                        frame.i32_const(18);
                                                        frame.i32_shl();
                                                        frame.i32_const(0x1c0000);
                                                        frame.i32_and();
                                                        frame.i32_or();
                                                        local61 = frame.peek();
                                                        frame.i32_const(0x110000);
                                                        frame.i32_eq();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_9;
                                                        }
                                                      }
                                                      frame.push(local39);
                                                      frame.push(local30);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(9, 0);
                                                        break block_label_11;
                                                      }
                                                      frame.push(local32);
                                                      frame.push(local46);
                                                      frame.i32_add();
                                                      local46 = frame.pop();
                                                      frame.push(local49);
                                                      frame.push(local32);
                                                      frame.i32_sub();
                                                      local49 = frame.pop();
                                                      frame.push(local32);
                                                      frame.push(local50);
                                                      frame.i32_add();
                                                      local50 = frame.pop();
                                                      frame.push(local43);
                                                      frame.push(local32);
                                                      frame.i32_sub();
                                                      local43 = frame.pop();
                                                      frame.push(local32);
                                                      frame.push(local54);
                                                      frame.i32_add();
                                                      local48 = frame.pop();
                                                      frame.push(local47);
                                                      frame.push(local32);
                                                      frame.i32_sub();
                                                      local47 = frame.pop();
                                                      frame.i32_const(0);
                                                      frame.push(local32);
                                                      frame.i32_sub();
                                                      local54 = frame.pop();
                                                      frame.push(local45);
                                                      frame.push(local32);
                                                      frame.i32_sub();
                                                      local45 = frame.peek();
                                                      frame.push(local40);
                                                      frame.i32_add();
                                                      frame.push(local29);
                                                      frame.i32_sub();
                                                      arg1 = frame.peek();
                                                      frame.i32_const(-7);
                                                      frame.i32_add();
                                                      local56 = frame.pop();
                                                      frame.push(local59);
                                                      frame.i32_const(10);
                                                      frame.i32_add();
                                                      local62 = frame.pop();
                                                      frame.push(arg1);
                                                      frame.push(local39);
                                                      frame.i32_add();
                                                      frame.i32_const(-5);
                                                      frame.i32_add();
                                                      local63 = frame.pop();
                                                      frame.push(local32);
                                                      local53 = frame.pop();
                                                      frame.i32_const(0);
                                                      arg1 = frame.pop();
                                                      frame.i32_const(0);
                                                      local28 = frame.pop();
                                                      frame.i32_const(-1);
                                                      local39 = frame.pop();
                                                      frame.i32_const(0);
                                                      local42 = frame.pop();

                                                      loop_label_25:
                                                      for (;;) {
                                                        frame.push(local59);
                                                        frame.push(local28);
                                                        frame.i32_add();
                                                        local57 = frame.peek();
                                                        frame.i32_const(5);
                                                        frame.i32_add();
                                                        frame.i32_load8_s(0, 0);
                                                        local41 = frame.peek();
                                                        frame.i32_const(127);
                                                        frame.i32_and();
                                                        local60 = frame.peek();
                                                        frame.push(arg1);
                                                        frame.i32_shl();
                                                        frame.push(local42);
                                                        frame.i32_or();
                                                        local42 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                frame.push(local41);
                                                                frame.i32_const(0);
                                                                frame.i32_lt_s();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(33, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local39);
                                                                frame.push(local60);
                                                                frame.i32_lt_u();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_12;
                                                                }
                                                                frame.i32_const(4);
                                                                arg1 = frame.pop();
                                                                frame.push(local42);
                                                                frame.i32_const(4);
                                                                frame.i32_gt_u();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_13;
                                                                }
                                                                frame.push(local52);
                                                                frame.push(local32);
                                                                frame.i32_sub();
                                                                frame.push(local28);
                                                                frame.i32_sub();
                                                                frame.push(local42);
                                                                frame.i32_lt_u();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_9;
                                                                }
                                                                frame.push(local0);
                                                                frame.push(local31);
                                                                frame.push(local42);
                                                                frame.push(local27);
                                                                frame.i32_add();
                                                                local41 = frame.peek();
                                                                frame.i32_add();
                                                                frame.push(local29);
                                                                frame.i32_add();
                                                                local62 = frame.peek();
                                                                frame.i32_const(6);
                                                                frame.i32_add();
                                                                local39 = frame.peek();
                                                                frame.i32_store(2, 0x598);
                                                                frame.push(local0);
                                                                frame.i32_const(0x5a0);
                                                                frame.i32_add();
                                                                frame.push(local31);
                                                                frame.push(local32);
                                                                frame.push(local26);
                                                                frame.i32_add();
                                                                frame.i32_add();
                                                                frame.push(local29);
                                                                frame.i32_add();
                                                                frame.push(local28);
                                                                frame.i32_add();
                                                                frame.i32_const(6);
                                                                frame.i32_add();
                                                                frame.push(local42);
                                                                {
                                                                  var t2 = frame.pop();
                                                                  var t1 = frame.pop();
                                                                  var t0 = frame.pop();
                                                                  _func042(t0, t1, t2);
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_load(2, 0x5a0);
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_13;
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_const(0x5a8);
                                                                frame.i32_add();
                                                                frame.i32_load(2, 0);
                                                                frame.i32_eqz();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_13;
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_load(2, 0x5a4);
                                                                local28 = frame.peek();
                                                                frame.i32_load8_s(0, 0);
                                                                arg1 = frame.peek();
                                                                frame.i32_const(-1);
                                                                frame.i32_le_s();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(33, 0);
                                                                  break block_label_28;
                                                                }
                                                                frame.push(arg1);
                                                                frame.i32_const(255);
                                                                frame.i32_and();
                                                                local64 = frame.pop();
                                                                frame.unwindTo(33, 0);
                                                                break block_label_27;
                                                              }
                                                              frame.push(local28);
                                                              frame.i32_const(4);
                                                              frame.i32_ne();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(33, 0);
                                                                break block_label_26;
                                                              }
                                                              frame.i32_const(5);
                                                              arg1 = frame.pop();
                                                              frame.push(local62);
                                                              local30 = frame.pop();
                                                              frame.unwindTo(9, 0);
                                                              break block_label_10;
                                                            }
                                                            frame.push(local28);
                                                            frame.i32_load8_u(0, 1);
                                                            frame.i32_const(63);
                                                            frame.i32_and();
                                                            local26 = frame.pop();
                                                            frame.push(arg1);
                                                            frame.i32_const(31);
                                                            frame.i32_and();
                                                            local32 = frame.pop();
                                                            block_label_28:
                                                            {
                                                              frame.push(arg1);
                                                              frame.i32_const(-33);
                                                              frame.i32_gt_u();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(33, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.push(local32);
                                                              frame.i32_const(6);
                                                              frame.i32_shl();
                                                              frame.push(local26);
                                                              frame.i32_or();
                                                              local64 = frame.pop();
                                                              frame.unwindTo(33, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.push(local26);
                                                            frame.i32_const(6);
                                                            frame.i32_shl();
                                                            frame.push(local28);
                                                            frame.i32_load8_u(0, 2);
                                                            frame.i32_const(63);
                                                            frame.i32_and();
                                                            frame.i32_or();
                                                            local26 = frame.pop();
                                                            block_label_28:
                                                            {
                                                              frame.push(arg1);
                                                              frame.i32_const(-16);
                                                              frame.i32_ge_u();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(33, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.push(local26);
                                                              frame.push(local32);
                                                              frame.i32_const(12);
                                                              frame.i32_shl();
                                                              frame.i32_or();
                                                              local64 = frame.pop();
                                                              frame.unwindTo(33, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.i32_const(7);
                                                            arg1 = frame.pop();
                                                            frame.push(local26);
                                                            frame.i32_const(6);
                                                            frame.i32_shl();
                                                            frame.push(local28);
                                                            frame.i32_load8_u(0, 3);
                                                            frame.i32_const(63);
                                                            frame.i32_and();
                                                            frame.i32_or();
                                                            frame.push(local32);
                                                            frame.i32_const(18);
                                                            frame.i32_shl();
                                                            frame.i32_const(0x1c0000);
                                                            frame.i32_and();
                                                            frame.i32_or();
                                                            local64 = frame.peek();
                                                            frame.i32_const(0x110000);
                                                            frame.i32_eq();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(9, 0);
                                                              break block_label_9;
                                                            }
                                                          }
                                                          frame.push(local39);
                                                          frame.push(local30);
                                                          frame.i32_eq();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(9, 0);
                                                            break block_label_11;
                                                          }
                                                          frame.push(local42);
                                                          frame.push(local46);
                                                          frame.i32_add();
                                                          local46 = frame.pop();
                                                          frame.push(local49);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local49 = frame.pop();
                                                          frame.push(local42);
                                                          frame.push(local50);
                                                          frame.i32_add();
                                                          local50 = frame.pop();
                                                          frame.push(local43);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local43 = frame.pop();
                                                          frame.push(local42);
                                                          frame.push(local48);
                                                          frame.i32_add();
                                                          local48 = frame.pop();
                                                          frame.push(local47);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local47 = frame.pop();
                                                          frame.push(local42);
                                                          frame.push(local53);
                                                          frame.i32_add();
                                                          local52 = frame.pop();
                                                          frame.push(local54);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local54 = frame.pop();
                                                          frame.i32_const(0);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local53 = frame.pop();
                                                          frame.push(local45);
                                                          frame.push(local42);
                                                          frame.i32_sub();
                                                          local45 = frame.peek();
                                                          frame.push(local40);
                                                          frame.i32_add();
                                                          frame.push(local29);
                                                          frame.i32_sub();
                                                          arg1 = frame.peek();
                                                          frame.i32_const(-8);
                                                          frame.i32_add();
                                                          local59 = frame.pop();
                                                          frame.push(local62);
                                                          frame.i32_const(11);
                                                          frame.i32_add();
                                                          local65 = frame.pop();
                                                          frame.push(arg1);
                                                          frame.push(local39);
                                                          frame.i32_add();
                                                          frame.i32_const(-6);
                                                          frame.i32_add();
                                                          local66 = frame.pop();
                                                          frame.push(local42);
                                                          local57 = frame.pop();
                                                          frame.i32_const(0);
                                                          arg1 = frame.pop();
                                                          frame.i32_const(0);
                                                          local28 = frame.pop();
                                                          frame.i32_const(-1);
                                                          local39 = frame.pop();
                                                          frame.i32_const(0);
                                                          local32 = frame.pop();

                                                          loop_label_27:
                                                          for (;;) {
                                                            frame.push(local62);
                                                            frame.push(local28);
                                                            frame.i32_add();
                                                            local60 = frame.peek();
                                                            frame.i32_const(6);
                                                            frame.i32_add();
                                                            frame.i32_load8_s(0, 0);
                                                            local26 = frame.peek();
                                                            frame.i32_const(127);
                                                            frame.i32_and();
                                                            local63 = frame.peek();
                                                            frame.push(arg1);
                                                            frame.i32_shl();
                                                            frame.push(local32);
                                                            frame.i32_or();
                                                            local32 = frame.pop();
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    frame.push(local26);
                                                                    frame.i32_const(0);
                                                                    frame.i32_lt_s();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(34, 0);
                                                                      break block_label_31;
                                                                    }
                                                                    frame.push(local39);
                                                                    frame.push(local63);
                                                                    frame.i32_lt_u();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_12;
                                                                    }
                                                                    frame.i32_const(4);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local32);
                                                                    frame.i32_const(4);
                                                                    frame.i32_gt_u();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_13;
                                                                    }
                                                                    frame.push(local56);
                                                                    frame.push(local42);
                                                                    frame.i32_sub();
                                                                    frame.push(local28);
                                                                    frame.i32_sub();
                                                                    frame.push(local32);
                                                                    frame.i32_lt_u();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_9;
                                                                    }
                                                                    frame.i32_const(7);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local0);
                                                                    frame.push(local31);
                                                                    frame.push(local32);
                                                                    frame.push(local41);
                                                                    frame.i32_add();
                                                                    local39 = frame.peek();
                                                                    frame.i32_add();
                                                                    frame.push(local29);
                                                                    frame.i32_add();
                                                                    local65 = frame.peek();
                                                                    frame.i32_const(7);
                                                                    frame.i32_add();
                                                                    local26 = frame.peek();
                                                                    frame.i32_store(2, 0x598);
                                                                    frame.push(local0);
                                                                    frame.i32_const(0x5a0);
                                                                    frame.i32_add();
                                                                    frame.push(local31);
                                                                    frame.push(local42);
                                                                    frame.push(local27);
                                                                    frame.i32_add();
                                                                    frame.i32_add();
                                                                    frame.push(local29);
                                                                    frame.i32_add();
                                                                    frame.push(local28);
                                                                    frame.i32_add();
                                                                    frame.i32_const(7);
                                                                    frame.i32_add();
                                                                    frame.push(local32);
                                                                    {
                                                                      var t2 = frame.pop();
                                                                      var t1 = frame.pop();
                                                                      var t0 = frame.pop();
                                                                      _func042(t0, t1, t2);
                                                                    }
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 0x5a0);
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_9;
                                                                    }
                                                                    frame.push(local0);
                                                                    frame.i32_const(0x5a8);
                                                                    frame.i32_add();
                                                                    frame.i32_load(2, 0);
                                                                    frame.i32_eqz();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_9;
                                                                    }
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 0x5a4);
                                                                    local27 = frame.peek();
                                                                    frame.i32_load8_s(0, 0);
                                                                    local28 = frame.peek();
                                                                    frame.i32_const(-1);
                                                                    frame.i32_le_s();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(34, 0);
                                                                      break block_label_30;
                                                                    }
                                                                    frame.push(local28);
                                                                    frame.i32_const(255);
                                                                    frame.i32_and();
                                                                    local67 = frame.pop();
                                                                    frame.unwindTo(34, 0);
                                                                    break block_label_29;
                                                                  }
                                                                  frame.push(local28);
                                                                  frame.i32_const(4);
                                                                  frame.i32_ne();
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(34, 0);
                                                                    break block_label_28;
                                                                  }
                                                                  frame.i32_const(5);
                                                                  arg1 = frame.pop();
                                                                  frame.push(local65);
                                                                  local30 = frame.pop();
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_10;
                                                                }
                                                                frame.push(local27);
                                                                frame.i32_load8_u(0, 1);
                                                                frame.i32_const(63);
                                                                frame.i32_and();
                                                                local56 = frame.pop();
                                                                frame.push(local28);
                                                                frame.i32_const(31);
                                                                frame.i32_and();
                                                                local42 = frame.pop();
                                                                block_label_30:
                                                                {
                                                                  frame.push(local28);
                                                                  frame.i32_const(-33);
                                                                  frame.i32_gt_u();
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(34, 0);
                                                                    break block_label_30;
                                                                  }
                                                                  frame.push(local42);
                                                                  frame.i32_const(6);
                                                                  frame.i32_shl();
                                                                  frame.push(local56);
                                                                  frame.i32_or();
                                                                  local67 = frame.pop();
                                                                  frame.unwindTo(34, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local56);
                                                                frame.i32_const(6);
                                                                frame.i32_shl();
                                                                frame.push(local27);
                                                                frame.i32_load8_u(0, 2);
                                                                frame.i32_const(63);
                                                                frame.i32_and();
                                                                frame.i32_or();
                                                                local56 = frame.pop();
                                                                block_label_30:
                                                                {
                                                                  frame.push(local28);
                                                                  frame.i32_const(-16);
                                                                  frame.i32_ge_u();
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(34, 0);
                                                                    break block_label_30;
                                                                  }
                                                                  frame.push(local56);
                                                                  frame.push(local42);
                                                                  frame.i32_const(12);
                                                                  frame.i32_shl();
                                                                  frame.i32_or();
                                                                  local67 = frame.pop();
                                                                  frame.unwindTo(34, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local56);
                                                                frame.i32_const(6);
                                                                frame.i32_shl();
                                                                frame.push(local27);
                                                                frame.i32_load8_u(0, 3);
                                                                frame.i32_const(63);
                                                                frame.i32_and();
                                                                frame.i32_or();
                                                                frame.push(local42);
                                                                frame.i32_const(18);
                                                                frame.i32_shl();
                                                                frame.i32_const(0x1c0000);
                                                                frame.i32_and();
                                                                frame.i32_or();
                                                                local67 = frame.peek();
                                                                frame.i32_const(0x110000);
                                                                frame.i32_eq();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_9;
                                                                }
                                                              }
                                                              frame.push(local26);
                                                              frame.push(local30);
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(9, 0);
                                                                break block_label_11;
                                                              }
                                                              frame.push(local32);
                                                              frame.push(local46);
                                                              frame.i32_add();
                                                              local46 = frame.pop();
                                                              frame.push(local49);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local49 = frame.pop();
                                                              frame.push(local43);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local43 = frame.pop();
                                                              frame.push(local32);
                                                              frame.push(local50);
                                                              frame.i32_add();
                                                              local50 = frame.pop();
                                                              frame.push(local47);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local47 = frame.pop();
                                                              frame.push(local32);
                                                              frame.push(local48);
                                                              frame.i32_add();
                                                              local48 = frame.pop();
                                                              frame.push(local54);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local54 = frame.pop();
                                                              frame.push(local32);
                                                              frame.push(local52);
                                                              frame.i32_add();
                                                              local52 = frame.pop();
                                                              frame.push(local53);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local53 = frame.pop();
                                                              frame.push(local32);
                                                              frame.push(local57);
                                                              frame.i32_add();
                                                              local56 = frame.pop();
                                                              frame.i32_const(0);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local57 = frame.pop();
                                                              frame.push(local45);
                                                              frame.push(local32);
                                                              frame.i32_sub();
                                                              local45 = frame.peek();
                                                              frame.push(local40);
                                                              frame.i32_add();
                                                              frame.push(local29);
                                                              frame.i32_sub();
                                                              arg1 = frame.peek();
                                                              frame.i32_const(-9);
                                                              frame.i32_add();
                                                              local60 = frame.pop();
                                                              frame.push(local65);
                                                              frame.i32_const(12);
                                                              frame.i32_add();
                                                              local68 = frame.pop();
                                                              frame.push(arg1);
                                                              frame.push(local26);
                                                              frame.i32_add();
                                                              frame.i32_const(-7);
                                                              frame.i32_add();
                                                              local69 = frame.pop();
                                                              frame.push(local32);
                                                              local62 = frame.pop();
                                                              frame.i32_const(0);
                                                              arg1 = frame.pop();
                                                              frame.i32_const(0);
                                                              local28 = frame.pop();
                                                              frame.i32_const(-1);
                                                              local27 = frame.pop();
                                                              frame.i32_const(0);
                                                              local26 = frame.pop();

                                                              loop_label_29:
                                                              for (;;) {
                                                                frame.push(local65);
                                                                frame.push(local28);
                                                                frame.i32_add();
                                                                local63 = frame.peek();
                                                                frame.i32_const(7);
                                                                frame.i32_add();
                                                                frame.i32_load8_s(0, 0);
                                                                local42 = frame.peek();
                                                                frame.i32_const(127);
                                                                frame.i32_and();
                                                                local66 = frame.peek();
                                                                frame.push(arg1);
                                                                frame.i32_shl();
                                                                frame.push(local26);
                                                                frame.i32_or();
                                                                local26 = frame.pop();
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        frame.push(local42);
                                                                        frame.i32_const(0);
                                                                        frame.i32_lt_s();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(35, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local27);
                                                                        frame.push(local66);
                                                                        frame.i32_lt_u();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_12;
                                                                        }
                                                                        frame.i32_const(4);
                                                                        arg1 = frame.pop();
                                                                        frame.push(local26);
                                                                        frame.i32_const(4);
                                                                        frame.i32_gt_u();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_13;
                                                                        }
                                                                        frame.push(local59);
                                                                        frame.push(local32);
                                                                        frame.i32_sub();
                                                                        frame.push(local28);
                                                                        frame.i32_sub();
                                                                        frame.push(local26);
                                                                        frame.i32_lt_u();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_9;
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.push(local31);
                                                                        frame.push(local26);
                                                                        frame.push(local39);
                                                                        frame.i32_add();
                                                                        local27 = frame.peek();
                                                                        frame.i32_add();
                                                                        frame.push(local29);
                                                                        frame.i32_add();
                                                                        local68 = frame.peek();
                                                                        frame.i32_const(8);
                                                                        frame.i32_add();
                                                                        local65 = frame.peek();
                                                                        frame.i32_store(2, 0x598);
                                                                        frame.push(local0);
                                                                        frame.i32_const(0x5a0);
                                                                        frame.i32_add();
                                                                        frame.push(local31);
                                                                        frame.push(local32);
                                                                        frame.push(local41);
                                                                        frame.i32_add();
                                                                        frame.i32_add();
                                                                        frame.push(local29);
                                                                        frame.i32_add();
                                                                        frame.push(local28);
                                                                        frame.i32_add();
                                                                        frame.i32_const(8);
                                                                        frame.i32_add();
                                                                        frame.push(local26);
                                                                        {
                                                                          var t2 = frame.pop();
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          _func042(t0, t1, t2);
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 0x5a0);
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_13;
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_const(0x5a0);
                                                                        frame.i32_add();
                                                                        frame.i32_const(8);
                                                                        frame.i32_add();
                                                                        frame.i32_load(2, 0);
                                                                        frame.i32_eqz();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_13;
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 0x5a4);
                                                                        local28 = frame.peek();
                                                                        frame.i32_load8_s(0, 0);
                                                                        arg1 = frame.peek();
                                                                        frame.i32_const(-1);
                                                                        frame.i32_le_s();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(35, 0);
                                                                          break block_label_32;
                                                                        }
                                                                        frame.push(arg1);
                                                                        frame.i32_const(255);
                                                                        frame.i32_and();
                                                                        local70 = frame.pop();
                                                                        frame.unwindTo(35, 0);
                                                                        break block_label_31;
                                                                      }
                                                                      frame.push(local28);
                                                                      frame.i32_const(4);
                                                                      frame.i32_ne();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(35, 0);
                                                                        break block_label_30;
                                                                      }
                                                                      frame.i32_const(5);
                                                                      arg1 = frame.pop();
                                                                      frame.push(local68);
                                                                      local30 = frame.pop();
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_10;
                                                                    }
                                                                    frame.push(local28);
                                                                    frame.i32_load8_u(0, 1);
                                                                    frame.i32_const(63);
                                                                    frame.i32_and();
                                                                    local42 = frame.pop();
                                                                    frame.push(arg1);
                                                                    frame.i32_const(31);
                                                                    frame.i32_and();
                                                                    local32 = frame.pop();
                                                                    block_label_32:
                                                                    {
                                                                      frame.push(arg1);
                                                                      frame.i32_const(-33);
                                                                      frame.i32_gt_u();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(35, 0);
                                                                        break block_label_32;
                                                                      }
                                                                      frame.push(local32);
                                                                      frame.i32_const(6);
                                                                      frame.i32_shl();
                                                                      frame.push(local42);
                                                                      frame.i32_or();
                                                                      local70 = frame.pop();
                                                                      frame.unwindTo(35, 0);
                                                                      break block_label_31;
                                                                    }
                                                                    frame.push(local42);
                                                                    frame.i32_const(6);
                                                                    frame.i32_shl();
                                                                    frame.push(local28);
                                                                    frame.i32_load8_u(0, 2);
                                                                    frame.i32_const(63);
                                                                    frame.i32_and();
                                                                    frame.i32_or();
                                                                    local42 = frame.pop();
                                                                    block_label_32:
                                                                    {
                                                                      frame.push(arg1);
                                                                      frame.i32_const(-16);
                                                                      frame.i32_ge_u();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(35, 0);
                                                                        break block_label_32;
                                                                      }
                                                                      frame.push(local42);
                                                                      frame.push(local32);
                                                                      frame.i32_const(12);
                                                                      frame.i32_shl();
                                                                      frame.i32_or();
                                                                      local70 = frame.pop();
                                                                      frame.unwindTo(35, 0);
                                                                      break block_label_31;
                                                                    }
                                                                    frame.i32_const(7);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local42);
                                                                    frame.i32_const(6);
                                                                    frame.i32_shl();
                                                                    frame.push(local28);
                                                                    frame.i32_load8_u(0, 3);
                                                                    frame.i32_const(63);
                                                                    frame.i32_and();
                                                                    frame.i32_or();
                                                                    frame.push(local32);
                                                                    frame.i32_const(18);
                                                                    frame.i32_shl();
                                                                    frame.i32_const(0x1c0000);
                                                                    frame.i32_and();
                                                                    frame.i32_or();
                                                                    local70 = frame.peek();
                                                                    frame.i32_const(0x110000);
                                                                    frame.i32_eq();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_9;
                                                                    }
                                                                  }
                                                                  frame.push(local65);
                                                                  frame.push(local30);
                                                                  frame.i32_eq();
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(9, 0);
                                                                    break block_label_11;
                                                                  }
                                                                  frame.push(local26);
                                                                  frame.push(local46);
                                                                  frame.i32_add();
                                                                  local59 = frame.pop();
                                                                  frame.push(local49);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local49 = frame.pop();
                                                                  frame.push(local43);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local43 = frame.pop();
                                                                  frame.push(local26);
                                                                  frame.push(local50);
                                                                  frame.i32_add();
                                                                  local50 = frame.pop();
                                                                  frame.push(local47);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local47 = frame.pop();
                                                                  frame.push(local26);
                                                                  frame.push(local48);
                                                                  frame.i32_add();
                                                                  local48 = frame.pop();
                                                                  frame.push(local54);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local54 = frame.pop();
                                                                  frame.push(local26);
                                                                  frame.push(local52);
                                                                  frame.i32_add();
                                                                  local52 = frame.pop();
                                                                  frame.push(local53);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local53 = frame.pop();
                                                                  frame.push(local26);
                                                                  frame.push(local56);
                                                                  frame.i32_add();
                                                                  local56 = frame.pop();
                                                                  frame.push(local57);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local57 = frame.pop();
                                                                  frame.push(local26);
                                                                  frame.push(local62);
                                                                  frame.i32_add();
                                                                  local62 = frame.pop();
                                                                  frame.i32_const(0);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local63 = frame.pop();
                                                                  frame.push(local45);
                                                                  frame.push(local26);
                                                                  frame.i32_sub();
                                                                  local42 = frame.peek();
                                                                  frame.push(local40);
                                                                  frame.i32_add();
                                                                  frame.push(local29);
                                                                  frame.i32_sub();
                                                                  arg1 = frame.peek();
                                                                  frame.i32_const(-10);
                                                                  frame.i32_add();
                                                                  local41 = frame.pop();
                                                                  frame.push(local68);
                                                                  frame.i32_const(13);
                                                                  frame.i32_add();
                                                                  local71 = frame.pop();
                                                                  frame.push(arg1);
                                                                  frame.push(local65);
                                                                  frame.i32_add();
                                                                  frame.i32_const(-8);
                                                                  frame.i32_add();
                                                                  local72 = frame.pop();
                                                                  frame.push(local26);
                                                                  local65 = frame.pop();
                                                                  frame.i32_const(0);
                                                                  arg1 = frame.pop();
                                                                  frame.i32_const(0);
                                                                  local28 = frame.pop();
                                                                  frame.i32_const(-1);
                                                                  local45 = frame.pop();
                                                                  frame.i32_const(0);
                                                                  local32 = frame.pop();

                                                                  loop_label_31:
                                                                  for (;;) {
                                                                    frame.push(local68);
                                                                    frame.push(local28);
                                                                    frame.i32_add();
                                                                    local66 = frame.peek();
                                                                    frame.i32_const(8);
                                                                    frame.i32_add();
                                                                    frame.i32_load8_s(0, 0);
                                                                    local46 = frame.peek();
                                                                    frame.i32_const(127);
                                                                    frame.i32_and();
                                                                    local69 = frame.peek();
                                                                    frame.push(arg1);
                                                                    frame.i32_shl();
                                                                    frame.push(local32);
                                                                    frame.i32_or();
                                                                    local32 = frame.pop();
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            frame.push(local46);
                                                                            frame.i32_const(0);
                                                                            frame.i32_lt_s();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(36, 0);
                                                                              break block_label_35;
                                                                            }
                                                                            frame.push(local45);
                                                                            frame.push(local69);
                                                                            frame.i32_lt_u();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_12;
                                                                            }
                                                                            frame.i32_const(4);
                                                                            arg1 = frame.pop();
                                                                            frame.push(local32);
                                                                            frame.i32_const(4);
                                                                            frame.i32_gt_u();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_13;
                                                                            }
                                                                            frame.push(local60);
                                                                            frame.push(local26);
                                                                            frame.i32_sub();
                                                                            frame.push(local28);
                                                                            frame.i32_sub();
                                                                            frame.push(local32);
                                                                            frame.i32_lt_u();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_9;
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.push(local31);
                                                                            frame.push(local32);
                                                                            frame.push(local27);
                                                                            frame.i32_add();
                                                                            frame.i32_add();
                                                                            frame.push(local29);
                                                                            frame.i32_add();
                                                                            local45 = frame.peek();
                                                                            frame.i32_const(9);
                                                                            frame.i32_add();
                                                                            local27 = frame.peek();
                                                                            frame.i32_store(2, 0x598);
                                                                            frame.push(local0);
                                                                            frame.i32_const(0x5a0);
                                                                            frame.i32_add();
                                                                            frame.push(local31);
                                                                            frame.push(local26);
                                                                            frame.push(local39);
                                                                            frame.i32_add();
                                                                            frame.i32_add();
                                                                            frame.push(local29);
                                                                            frame.i32_add();
                                                                            frame.push(local28);
                                                                            frame.i32_add();
                                                                            frame.i32_const(9);
                                                                            frame.i32_add();
                                                                            frame.push(local32);
                                                                            {
                                                                              var t2 = frame.pop();
                                                                              var t1 = frame.pop();
                                                                              var t0 = frame.pop();
                                                                              _func042(t0, t1, t2);
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.i32_load(2, 0x5a0);
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_13;
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.i32_const(0x5a8);
                                                                            frame.i32_add();
                                                                            frame.i32_load(2, 0);
                                                                            frame.i32_eqz();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_13;
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.i32_load(2, 0x5a4);
                                                                            local31 = frame.peek();
                                                                            frame.i32_load8_s(0, 0);
                                                                            arg1 = frame.peek();
                                                                            frame.i32_const(-1);
                                                                            frame.i32_le_s();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(36, 0);
                                                                              break block_label_34;
                                                                            }
                                                                            frame.push(arg1);
                                                                            frame.i32_const(255);
                                                                            frame.i32_and();
                                                                            local39 = frame.pop();
                                                                            frame.unwindTo(36, 0);
                                                                            break block_label_33;
                                                                          }
                                                                          frame.push(local28);
                                                                          frame.i32_const(4);
                                                                          frame.i32_ne();
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(36, 0);
                                                                            break block_label_32;
                                                                          }
                                                                          frame.i32_const(5);
                                                                          arg1 = frame.pop();
                                                                          frame.push(local71);
                                                                          local30 = frame.pop();
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_10;
                                                                        }
                                                                        frame.push(local31);
                                                                        frame.i32_load8_u(0, 1);
                                                                        frame.i32_const(63);
                                                                        frame.i32_and();
                                                                        local26 = frame.pop();
                                                                        frame.push(arg1);
                                                                        frame.i32_const(31);
                                                                        frame.i32_and();
                                                                        local28 = frame.pop();
                                                                        block_label_34:
                                                                        {
                                                                          frame.push(arg1);
                                                                          frame.i32_const(-33);
                                                                          frame.i32_gt_u();
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(36, 0);
                                                                            break block_label_34;
                                                                          }
                                                                          frame.push(local28);
                                                                          frame.i32_const(6);
                                                                          frame.i32_shl();
                                                                          frame.push(local26);
                                                                          frame.i32_or();
                                                                          local39 = frame.pop();
                                                                          frame.unwindTo(36, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local26);
                                                                        frame.i32_const(6);
                                                                        frame.i32_shl();
                                                                        frame.push(local31);
                                                                        frame.i32_load8_u(0, 2);
                                                                        frame.i32_const(63);
                                                                        frame.i32_and();
                                                                        frame.i32_or();
                                                                        local26 = frame.pop();
                                                                        block_label_34:
                                                                        {
                                                                          frame.push(arg1);
                                                                          frame.i32_const(-16);
                                                                          frame.i32_ge_u();
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(36, 0);
                                                                            break block_label_34;
                                                                          }
                                                                          frame.push(local26);
                                                                          frame.push(local28);
                                                                          frame.i32_const(12);
                                                                          frame.i32_shl();
                                                                          frame.i32_or();
                                                                          local39 = frame.pop();
                                                                          frame.unwindTo(36, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.i32_const(7);
                                                                        arg1 = frame.pop();
                                                                        frame.push(local26);
                                                                        frame.i32_const(6);
                                                                        frame.i32_shl();
                                                                        frame.push(local31);
                                                                        frame.i32_load8_u(0, 3);
                                                                        frame.i32_const(63);
                                                                        frame.i32_and();
                                                                        frame.i32_or();
                                                                        frame.push(local28);
                                                                        frame.i32_const(18);
                                                                        frame.i32_shl();
                                                                        frame.i32_const(0x1c0000);
                                                                        frame.i32_and();
                                                                        frame.i32_or();
                                                                        local39 = frame.peek();
                                                                        frame.i32_const(0x110000);
                                                                        frame.i32_eq();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_9;
                                                                        }
                                                                      }
                                                                      frame.push(local27);
                                                                      frame.push(local30);
                                                                      frame.i32_eq();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(9, 0);
                                                                        break block_label_11;
                                                                      }
                                                                      frame.push(local45);
                                                                      frame.i32_const(14);
                                                                      frame.i32_add();
                                                                      local46 = frame.pop();
                                                                      frame.push(local42);
                                                                      frame.push(local32);
                                                                      frame.i32_sub();
                                                                      frame.push(local40);
                                                                      frame.i32_add();
                                                                      frame.push(local29);
                                                                      frame.i32_sub();
                                                                      frame.push(local27);
                                                                      frame.i32_add();
                                                                      frame.i32_const(-9);
                                                                      frame.i32_add();
                                                                      local40 = frame.pop();
                                                                      frame.i32_const(-1);
                                                                      local28 = frame.pop();
                                                                      frame.i32_const(0);
                                                                      local29 = frame.pop();
                                                                      frame.i32_const(0);
                                                                      arg1 = frame.pop();
                                                                      frame.i32_const(0);
                                                                      local31 = frame.pop();

                                                                      loop_label_33:
                                                                      for (;;) {
                                                                        frame.push(local45);
                                                                        frame.push(local29);
                                                                        frame.i32_add();
                                                                        local26 = frame.peek();
                                                                        frame.i32_const(9);
                                                                        frame.i32_add();
                                                                        frame.i32_load8_s(0, 0);
                                                                        local27 = frame.peek();
                                                                        frame.i32_const(127);
                                                                        frame.i32_and();
                                                                        local42 = frame.peek();
                                                                        frame.push(arg1);
                                                                        frame.i32_shl();
                                                                        frame.push(local31);
                                                                        frame.i32_or();
                                                                        local31 = frame.pop();
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(local27);
                                                                              frame.i32_const(0);
                                                                              frame.i32_lt_s();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(37, 0);
                                                                                break block_label_36;
                                                                              }
                                                                              frame.i32_const(5);
                                                                              arg1 = frame.pop();
                                                                              frame.push(local28);
                                                                              frame.push(local42);
                                                                              frame.i32_lt_u();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_9;
                                                                              }
                                                                              frame.i32_const(4);
                                                                              arg1 = frame.pop();
                                                                              frame.push(local31);
                                                                              frame.i32_const(4);
                                                                              frame.i32_gt_u();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_13;
                                                                              }
                                                                              frame.push(local41);
                                                                              frame.push(local32);
                                                                              frame.i32_sub();
                                                                              frame.push(local29);
                                                                              frame.i32_sub();
                                                                              frame.push(local31);
                                                                              frame.i32_lt_u();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_9;
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_const(0x5a0);
                                                                              frame.i32_add();
                                                                              frame.push(local26);
                                                                              frame.i32_const(10);
                                                                              frame.i32_add();
                                                                              frame.push(local31);
                                                                              {
                                                                                var t2 = frame.pop();
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                _func042(t0, t1, t2);
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 0x5a0);
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_13;
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_const(0x5a8);
                                                                              frame.i32_add();
                                                                              frame.i32_load(2, 0);
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(37, 0);
                                                                                break block_label_35;
                                                                              }
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_13;
                                                                            }
                                                                            frame.push(local29);
                                                                            frame.i32_const(4);
                                                                            frame.i32_ne();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(37, 0);
                                                                              break block_label_34;
                                                                            }
                                                                            frame.i32_const(5);
                                                                            arg1 = frame.pop();
                                                                            frame.push(local46);
                                                                            local30 = frame.pop();
                                                                            frame.unwindTo(9, 0);
                                                                            break block_label_10;
                                                                          }
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 0x5a4);
                                                                              local29 = frame.peek();
                                                                              frame.i32_load8_s(0, 0);
                                                                              arg1 = frame.peek();
                                                                              frame.i32_const(-1);
                                                                              frame.i32_le_s();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(37, 0);
                                                                                break block_label_36;
                                                                              }
                                                                              frame.push(arg1);
                                                                              frame.i32_const(255);
                                                                              frame.i32_and();
                                                                              local29 = frame.pop();
                                                                              frame.unwindTo(37, 0);
                                                                              break block_label_35;
                                                                            }
                                                                            frame.push(local29);
                                                                            frame.i32_load8_u(0, 1);
                                                                            frame.i32_const(63);
                                                                            frame.i32_and();
                                                                            local30 = frame.pop();
                                                                            frame.push(arg1);
                                                                            frame.i32_const(31);
                                                                            frame.i32_and();
                                                                            local31 = frame.pop();
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(arg1);
                                                                              frame.i32_const(-33);
                                                                              frame.i32_gt_u();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(37, 0);
                                                                                break block_label_36;
                                                                              }
                                                                              frame.push(local31);
                                                                              frame.i32_const(6);
                                                                              frame.i32_shl();
                                                                              frame.push(local30);
                                                                              frame.i32_or();
                                                                              local29 = frame.pop();
                                                                              frame.unwindTo(37, 0);
                                                                              break block_label_35;
                                                                            }
                                                                            frame.push(local30);
                                                                            frame.i32_const(6);
                                                                            frame.i32_shl();
                                                                            frame.push(local29);
                                                                            frame.i32_load8_u(0, 2);
                                                                            frame.i32_const(63);
                                                                            frame.i32_and();
                                                                            frame.i32_or();
                                                                            local30 = frame.pop();
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(arg1);
                                                                              frame.i32_const(-16);
                                                                              frame.i32_ge_u();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(37, 0);
                                                                                break block_label_36;
                                                                              }
                                                                              frame.push(local30);
                                                                              frame.push(local31);
                                                                              frame.i32_const(12);
                                                                              frame.i32_shl();
                                                                              frame.i32_or();
                                                                              local29 = frame.pop();
                                                                              frame.unwindTo(37, 0);
                                                                              break block_label_35;
                                                                            }
                                                                            frame.i32_const(7);
                                                                            arg1 = frame.pop();
                                                                            frame.push(local30);
                                                                            frame.i32_const(6);
                                                                            frame.i32_shl();
                                                                            frame.push(local29);
                                                                            frame.i32_load8_u(0, 3);
                                                                            frame.i32_const(63);
                                                                            frame.i32_and();
                                                                            frame.i32_or();
                                                                            frame.push(local31);
                                                                            frame.i32_const(18);
                                                                            frame.i32_shl();
                                                                            frame.i32_const(0x1c0000);
                                                                            frame.i32_and();
                                                                            frame.i32_or();
                                                                            local29 = frame.peek();
                                                                            frame.i32_const(0x110000);
                                                                            frame.i32_eq();
                                                                            if (frame.pop() != 0) {
                                                                              frame.unwindTo(9, 0);
                                                                              break block_label_9;
                                                                            }
                                                                          }
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x56f);
                                                                          frame.i32_add();
                                                                          frame.i32_const(0);
                                                                          frame.i32_store8(0, 0);
                                                                          frame.push(local0);
                                                                          frame.push(local38);
                                                                          frame.i32_store16(0, 0x591);
                                                                          frame.push(local0);
                                                                          frame.push(local36);
                                                                          frame.i32_store8(0, 0x590);
                                                                          frame.push(local0);
                                                                          frame.push(local29);
                                                                          frame.i32_store(2, 0x58c);
                                                                          frame.push(local0);
                                                                          frame.push(local39);
                                                                          frame.i32_store(2, 0x588);
                                                                          frame.push(local0);
                                                                          frame.push(local70);
                                                                          frame.i32_store(2, 0x584);
                                                                          frame.push(local0);
                                                                          frame.push(local67);
                                                                          frame.i32_store(2, 0x580);
                                                                          frame.push(local0);
                                                                          frame.push(local64);
                                                                          frame.i32_store(2, 0x57c);
                                                                          frame.push(local0);
                                                                          frame.push(local61);
                                                                          frame.i32_store(2, 0x578);
                                                                          frame.push(local0);
                                                                          frame.push(local58);
                                                                          frame.i32_store(2, 0x574);
                                                                          frame.push(local0);
                                                                          frame.push(local55);
                                                                          frame.i32_store(2, 0x570);
                                                                          frame.push(local0);
                                                                          frame.push(local44);
                                                                          frame.i32_store(2, 0x568);
                                                                          frame.push(local0);
                                                                          frame.push(local37);
                                                                          frame.i32_store(2, 0x564);
                                                                          frame.push(local0);
                                                                          frame.push(local34);
                                                                          frame.i32_store(2, 0x560);
                                                                          frame.push(local0);
                                                                          frame.push(local25);
                                                                          frame.i32_store(2, 0x558);
                                                                          frame.push(local0);
                                                                          frame.push(local22);
                                                                          frame.i32_store(2, 0x554);
                                                                          frame.push(local0);
                                                                          frame.push(local23);
                                                                          frame.i32_store(2, 0x550);
                                                                          frame.push(local0);
                                                                          frame.push(local20);
                                                                          frame.i32_store(2, 0x548);
                                                                          frame.push(local0);
                                                                          frame.push(local13);
                                                                          frame.i32_store(2, 0x544);
                                                                          frame.push(local0);
                                                                          frame.push(local14);
                                                                          frame.i32_store(2, 0x540);
                                                                          frame.push(local0);
                                                                          frame.push(local15);
                                                                          frame.i32_store(2, 0x53c);
                                                                          frame.push(local0);
                                                                          frame.push(local16);
                                                                          frame.i32_store(2, 0x538);
                                                                          frame.push(local0);
                                                                          frame.push(local17);
                                                                          frame.i32_store(2, 0x534);
                                                                          frame.push(local0);
                                                                          frame.push(local18);
                                                                          frame.i32_store(2, 0x530);
                                                                          frame.push(local0);
                                                                          frame.push(local11);
                                                                          frame.i32_store(2, 0x528);
                                                                          frame.push(local0);
                                                                          frame.push(local5);
                                                                          frame.i32_store(2, 0x524);
                                                                          frame.push(local0);
                                                                          frame.push(local6);
                                                                          frame.i32_store(2, 0x520);
                                                                          frame.push(local0);
                                                                          frame.push(local7);
                                                                          frame.i32_store(2, 0x51c);
                                                                          frame.push(local0);
                                                                          frame.push(arg2);
                                                                          frame.i32_store(2, 0x518);
                                                                          frame.push(local0);
                                                                          frame.push(local8);
                                                                          frame.i32_store(2, 0x514);
                                                                          frame.push(local0);
                                                                          frame.push(local9);
                                                                          frame.i32_store(2, 0x510);
                                                                          frame.push(local0);
                                                                          frame.push(local51);
                                                                          frame.i32_store8(0, 0x56c);
                                                                          frame.push(local0);
                                                                          frame.push(local51);
                                                                          frame.i32_const(8);
                                                                          frame.i32_shr_u();
                                                                          frame.i32_store16(0, 0x56d);
                                                                          frame.push(local0);
                                                                          frame.push(local4);
                                                                          frame.i32_store16(0, 0x50d);
                                                                          frame.push(local0);
                                                                          frame.push(local4);
                                                                          frame.i32_const(16);
                                                                          frame.i32_shr_u();
                                                                          frame.i32_store8(0, 0x50f);
                                                                          frame.push(local0);
                                                                          frame.push(local33);
                                                                          frame.i32_const(8);
                                                                          frame.i32_shl();
                                                                          frame.push(local35);
                                                                          frame.i32_or();
                                                                          frame.i32_store(2, 0x55c);
                                                                          frame.push(local0);
                                                                          frame.push(local21);
                                                                          frame.i32_const(8);
                                                                          frame.i32_shl();
                                                                          frame.push(local24);
                                                                          frame.i32_or();
                                                                          frame.i32_store(2, 0x54c);
                                                                          frame.push(local0);
                                                                          frame.push(local12);
                                                                          frame.i32_const(8);
                                                                          frame.i32_shl();
                                                                          frame.push(local19);
                                                                          frame.i32_or();
                                                                          frame.i32_store(2, 0x52c);
                                                                          frame.push(local0);
                                                                          frame.push(local10);
                                                                          frame.i32_store8(0, 0x50c);
                                                                          frame.push(local0);
                                                                          frame.push(local3);
                                                                          frame.i32_store(2, 0x508);
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x4e4);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x508);
                                                                          frame.i32_add();
                                                                          frame.i32_const(4);
                                                                          frame.i32_or();
                                                                          frame.i32_const(36);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.push(local0);
                                                                          frame.i32_const(992);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x530);
                                                                          frame.i32_add();
                                                                          frame.i32_const(100);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x4b4);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x4e4);
                                                                          frame.i32_add();
                                                                          frame.i32_const(36);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x490);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x4b4);
                                                                          frame.i32_add();
                                                                          frame.i32_const(36);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x46c);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x490);
                                                                          frame.i32_add();
                                                                          frame.i32_const(36);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x448);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(0x46c);
                                                                          frame.i32_add();
                                                                          frame.i32_const(36);
                                                                          {
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(_func002(t0, t1, t2));
                                                                          }
                                                                          frame.drop();
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_15;
                                                                        }
                                                                        frame.push(local29);
                                                                        frame.i32_const(1);
                                                                        frame.i32_add();
                                                                        local29 = frame.pop();
                                                                        frame.push(arg1);
                                                                        frame.i32_const(7);
                                                                        frame.i32_add();
                                                                        arg1 = frame.pop();
                                                                        frame.push(local28);
                                                                        frame.i32_const(7);
                                                                        frame.i32_shr_u();
                                                                        local28 = frame.pop();
                                                                        frame.push(local26);
                                                                        frame.i32_const(10);
                                                                        frame.i32_add();
                                                                        frame.push(local30);
                                                                        frame.i32_ne();
                                                                        if (frame.pop() != 0) {
                                                                          continue loop_label_33;
                                                                        }
                                                                        break;
                                                                      }
                                                                      frame.i32_const(4);
                                                                      arg1 = frame.pop();
                                                                      frame.push(local40);
                                                                      local30 = frame.pop();
                                                                      frame.unwindTo(9, 0);
                                                                      break block_label_10;
                                                                    }
                                                                    frame.push(local27);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local27 = frame.pop();
                                                                    frame.push(local42);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local42 = frame.pop();
                                                                    frame.push(local59);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local59 = frame.pop();
                                                                    frame.push(local49);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local49 = frame.pop();
                                                                    frame.push(local43);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local43 = frame.pop();
                                                                    frame.push(local50);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local50 = frame.pop();
                                                                    frame.push(local47);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local47 = frame.pop();
                                                                    frame.push(local48);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local48 = frame.pop();
                                                                    frame.push(local54);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local54 = frame.pop();
                                                                    frame.push(local52);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local52 = frame.pop();
                                                                    frame.push(local53);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local53 = frame.pop();
                                                                    frame.push(local56);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local56 = frame.pop();
                                                                    frame.push(local62);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local62 = frame.pop();
                                                                    frame.push(local57);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local57 = frame.pop();
                                                                    frame.push(local65);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local65 = frame.pop();
                                                                    frame.push(local63);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local63 = frame.pop();
                                                                    frame.push(arg1);
                                                                    frame.i32_const(7);
                                                                    frame.i32_add();
                                                                    arg1 = frame.pop();
                                                                    frame.push(local28);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local28 = frame.pop();
                                                                    frame.push(local41);
                                                                    frame.i32_const(-1);
                                                                    frame.i32_add();
                                                                    local41 = frame.pop();
                                                                    frame.push(local45);
                                                                    frame.i32_const(7);
                                                                    frame.i32_shr_u();
                                                                    local45 = frame.pop();
                                                                    frame.push(local66);
                                                                    frame.i32_const(9);
                                                                    frame.i32_add();
                                                                    frame.push(local30);
                                                                    frame.i32_ne();
                                                                    if (frame.pop() != 0) {
                                                                      continue loop_label_31;
                                                                    }
                                                                    break;
                                                                  }
                                                                  frame.i32_const(4);
                                                                  arg1 = frame.pop();
                                                                  frame.push(local72);
                                                                  local30 = frame.pop();
                                                                  frame.unwindTo(9, 0);
                                                                  break block_label_10;
                                                                }
                                                                frame.push(local39);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local39 = frame.pop();
                                                                frame.push(local45);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local45 = frame.pop();
                                                                frame.push(local46);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local46 = frame.pop();
                                                                frame.push(local49);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local49 = frame.pop();
                                                                frame.push(local43);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local43 = frame.pop();
                                                                frame.push(local50);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local50 = frame.pop();
                                                                frame.push(local47);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local47 = frame.pop();
                                                                frame.push(local48);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local48 = frame.pop();
                                                                frame.push(local54);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local54 = frame.pop();
                                                                frame.push(local52);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local52 = frame.pop();
                                                                frame.push(local53);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local53 = frame.pop();
                                                                frame.push(local56);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local56 = frame.pop();
                                                                frame.push(local62);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local62 = frame.pop();
                                                                frame.push(local57);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local57 = frame.pop();
                                                                frame.push(arg1);
                                                                frame.i32_const(7);
                                                                frame.i32_add();
                                                                arg1 = frame.pop();
                                                                frame.push(local28);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local28 = frame.pop();
                                                                frame.push(local60);
                                                                frame.i32_const(-1);
                                                                frame.i32_add();
                                                                local60 = frame.pop();
                                                                frame.push(local27);
                                                                frame.i32_const(7);
                                                                frame.i32_shr_u();
                                                                local27 = frame.pop();
                                                                frame.push(local63);
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                frame.push(local30);
                                                                frame.i32_ne();
                                                                if (frame.pop() != 0) {
                                                                  continue loop_label_29;
                                                                }
                                                                break;
                                                              }
                                                              frame.i32_const(4);
                                                              arg1 = frame.pop();
                                                              frame.push(local69);
                                                              local30 = frame.pop();
                                                              frame.unwindTo(9, 0);
                                                              break block_label_10;
                                                            }
                                                            frame.push(local41);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local41 = frame.pop();
                                                            frame.push(local45);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local45 = frame.pop();
                                                            frame.push(local46);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local46 = frame.pop();
                                                            frame.push(local49);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local49 = frame.pop();
                                                            frame.push(local50);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local50 = frame.pop();
                                                            frame.push(local43);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local43 = frame.pop();
                                                            frame.push(local48);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local48 = frame.pop();
                                                            frame.push(local47);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local47 = frame.pop();
                                                            frame.push(local52);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local52 = frame.pop();
                                                            frame.push(local54);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local54 = frame.pop();
                                                            frame.push(local57);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local57 = frame.pop();
                                                            frame.push(local53);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local53 = frame.pop();
                                                            frame.push(arg1);
                                                            frame.i32_const(7);
                                                            frame.i32_add();
                                                            arg1 = frame.pop();
                                                            frame.push(local28);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            local28 = frame.pop();
                                                            frame.push(local59);
                                                            frame.i32_const(-1);
                                                            frame.i32_add();
                                                            local59 = frame.pop();
                                                            frame.push(local39);
                                                            frame.i32_const(7);
                                                            frame.i32_shr_u();
                                                            local39 = frame.pop();
                                                            frame.push(local60);
                                                            frame.i32_const(7);
                                                            frame.i32_add();
                                                            frame.push(local30);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) {
                                                              continue loop_label_27;
                                                            }
                                                            break;
                                                          }
                                                          frame.i32_const(4);
                                                          arg1 = frame.pop();
                                                          frame.push(local66);
                                                          local30 = frame.pop();
                                                          frame.unwindTo(9, 0);
                                                          break block_label_10;
                                                        }
                                                        frame.push(local27);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local27 = frame.pop();
                                                        frame.push(local45);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local45 = frame.pop();
                                                        frame.push(local46);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local46 = frame.pop();
                                                        frame.push(local49);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local49 = frame.pop();
                                                        frame.push(local50);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local50 = frame.pop();
                                                        frame.push(local43);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local43 = frame.pop();
                                                        frame.push(local48);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local48 = frame.pop();
                                                        frame.push(local47);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local47 = frame.pop();
                                                        frame.push(local53);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local53 = frame.pop();
                                                        frame.push(local54);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local54 = frame.pop();
                                                        frame.push(arg1);
                                                        frame.i32_const(7);
                                                        frame.i32_add();
                                                        arg1 = frame.pop();
                                                        frame.push(local28);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        local28 = frame.pop();
                                                        frame.push(local56);
                                                        frame.i32_const(-1);
                                                        frame.i32_add();
                                                        local56 = frame.pop();
                                                        frame.push(local39);
                                                        frame.i32_const(7);
                                                        frame.i32_shr_u();
                                                        local39 = frame.pop();
                                                        frame.push(local57);
                                                        frame.i32_const(6);
                                                        frame.i32_add();
                                                        frame.push(local30);
                                                        frame.i32_ne();
                                                        if (frame.pop() != 0) {
                                                          continue loop_label_25;
                                                        }
                                                        break;
                                                      }
                                                      frame.i32_const(4);
                                                      arg1 = frame.pop();
                                                      frame.push(local63);
                                                      local30 = frame.pop();
                                                      frame.unwindTo(9, 0);
                                                      break block_label_10;
                                                    }
                                                    frame.push(local26);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    local26 = frame.pop();
                                                    frame.push(local45);
                                                    frame.i32_const(-1);
                                                    frame.i32_add();
                                                    local45 = frame.pop();
                                                    frame.push(local46);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    local46 = frame.pop();
                                                    frame.push(local49);
                                                    frame.i32_const(-1);
                                                    frame.i32_add();
                                                    local49 = frame.pop();
                                                    frame.push(local50);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    local50 = frame.pop();
                                                    frame.push(local43);
                                                    frame.i32_const(-1);
                                                    frame.i32_add();
                                                    local43 = frame.pop();
                                                    frame.push(local54);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    local54 = frame.pop();
                                                    frame.push(local47);
                                                    frame.i32_const(-1);
                                                    frame.i32_add();
                                                    local47 = frame.pop();
                                                    frame.push(arg1);
                                                    frame.i32_const(7);
                                                    frame.i32_add();
                                                    arg1 = frame.pop();
                                                    frame.push(local28);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    local28 = frame.pop();
                                                    frame.push(local52);
                                                    frame.i32_const(-1);
                                                    frame.i32_add();
                                                    local52 = frame.pop();
                                                    frame.push(local39);
                                                    frame.i32_const(7);
                                                    frame.i32_shr_u();
                                                    local39 = frame.pop();
                                                    frame.push(local53);
                                                    frame.i32_const(5);
                                                    frame.i32_add();
                                                    frame.push(local30);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) {
                                                      continue loop_label_23;
                                                    }
                                                    break;
                                                  }
                                                  frame.i32_const(4);
                                                  arg1 = frame.pop();
                                                  frame.push(local60);
                                                  local30 = frame.pop();
                                                  frame.unwindTo(9, 0);
                                                  break block_label_10;
                                                }
                                                frame.push(local42);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                local42 = frame.pop();
                                                frame.push(local45);
                                                frame.i32_const(-1);
                                                frame.i32_add();
                                                local45 = frame.pop();
                                                frame.push(local46);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                local46 = frame.pop();
                                                frame.push(local49);
                                                frame.i32_const(-1);
                                                frame.i32_add();
                                                local49 = frame.pop();
                                                frame.push(local47);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                local47 = frame.pop();
                                                frame.push(local43);
                                                frame.i32_const(-1);
                                                frame.i32_add();
                                                local43 = frame.pop();
                                                frame.push(local26);
                                                frame.i32_const(7);
                                                frame.i32_add();
                                                local26 = frame.pop();
                                                frame.push(local28);
                                                frame.i32_const(1);
                                                frame.i32_add();
                                                local28 = frame.pop();
                                                frame.push(local48);
                                                frame.i32_const(-1);
                                                frame.i32_add();
                                                local48 = frame.pop();
                                                frame.push(local39);
                                                frame.i32_const(7);
                                                frame.i32_shr_u();
                                                local39 = frame.pop();
                                                frame.i32_const(4);
                                                arg1 = frame.pop();
                                                frame.push(local54);
                                                frame.i32_const(4);
                                                frame.i32_add();
                                                frame.push(local30);
                                                frame.i32_ne();
                                                if (frame.pop() != 0) {
                                                  continue loop_label_21;
                                                }
                                                break;
                                              }
                                              frame.push(local57);
                                              local30 = frame.pop();
                                              frame.unwindTo(9, 0);
                                              break block_label_10;
                                            }
                                            frame.push(local32);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            local32 = frame.pop();
                                            frame.push(local45);
                                            frame.i32_const(-1);
                                            frame.i32_add();
                                            local45 = frame.pop();
                                            frame.push(local43);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            local43 = frame.pop();
                                            frame.push(local49);
                                            frame.i32_const(-1);
                                            frame.i32_add();
                                            local49 = frame.pop();
                                            frame.push(arg1);
                                            frame.i32_const(7);
                                            frame.i32_add();
                                            arg1 = frame.pop();
                                            frame.push(local28);
                                            frame.i32_const(1);
                                            frame.i32_add();
                                            local28 = frame.pop();
                                            frame.push(local50);
                                            frame.i32_const(-1);
                                            frame.i32_add();
                                            local50 = frame.pop();
                                            frame.push(local41);
                                            frame.i32_const(7);
                                            frame.i32_shr_u();
                                            local41 = frame.pop();
                                            frame.push(local47);
                                            frame.i32_const(3);
                                            frame.i32_add();
                                            frame.push(local30);
                                            frame.i32_ne();
                                            if (frame.pop() != 0) {
                                              continue loop_label_19;
                                            }
                                            break;
                                          }
                                          frame.i32_const(4);
                                          arg1 = frame.pop();
                                          frame.push(local53);
                                          local30 = frame.pop();
                                          frame.unwindTo(9, 0);
                                          break block_label_10;
                                        }
                                        frame.push(local39);
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        local39 = frame.pop();
                                        frame.push(local45);
                                        frame.i32_const(-1);
                                        frame.i32_add();
                                        local45 = frame.pop();
                                        frame.push(arg1);
                                        frame.i32_const(7);
                                        frame.i32_add();
                                        arg1 = frame.pop();
                                        frame.push(local32);
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        local32 = frame.pop();
                                        frame.push(local46);
                                        frame.i32_const(-1);
                                        frame.i32_add();
                                        local46 = frame.pop();
                                        frame.push(local41);
                                        frame.i32_const(7);
                                        frame.i32_shr_u();
                                        local41 = frame.pop();
                                        frame.push(local49);
                                        frame.i32_const(2);
                                        frame.i32_add();
                                        frame.push(local30);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          continue loop_label_17;
                                        }
                                        break;
                                      }
                                      frame.i32_const(4);
                                      arg1 = frame.pop();
                                      frame.push(local48);
                                      local30 = frame.pop();
                                      frame.unwindTo(9, 0);
                                      break block_label_10;
                                    }
                                    frame.i32_const(2);
                                    local3 = frame.pop();
                                  }
                                  frame.push(local0);
                                  frame.i32_const(956);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(0x448);
                                  frame.i32_add();
                                  frame.i32_const(36);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(684);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(992);
                                  frame.i32_add();
                                  frame.i32_const(100);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  arg1 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(8);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(956);
                                  frame.i32_add();
                                  frame.i32_const(36);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(784);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(904);
                                  frame.i32_add();
                                  frame.i32_const(52);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.push(local2);
                                  frame.i32_store(2, 640);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(2, 652);
                                  frame.i64_store(3, 624);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_const(659);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 631);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 673);
                                  frame.i64_store(3, 608);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_const(680);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 615);
                                  frame.push(local0);
                                  frame.push(local3);
                                  frame.i32_store(2, 644);
                                  frame.push(local0);
                                  frame.i32_load(2, 648);
                                  local5 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 663);
                                  local8 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load(2, 664);
                                  local16 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load(2, 668);
                                  local15 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 672);
                                  local29 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_const(488);
                                  frame.i32_add();
                                  frame.push(arg1);
                                  frame.i32_const(115);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(456);
                                  frame.i32_add();
                                  frame.i32_const(8);
                                  frame.i32_add();
                                  arg1 = frame.peek();
                                  frame.push(local0);
                                  frame.i32_const(817);
                                  frame.i32_add();
                                  frame.i64_load(0, 0);
                                  frame.i64_store(3, 0);
                                  frame.push(local0);
                                  frame.i32_const(472);
                                  frame.i32_add();
                                  local7 = frame.peek();
                                  frame.push(local0);
                                  frame.i32_const(825);
                                  frame.i32_add();
                                  frame.i64_load(0, 0);
                                  frame.i64_store(3, 0);
                                  frame.push(local0);
                                  frame.i32_const(479);
                                  frame.i32_add();
                                  local4 = frame.peek();
                                  frame.push(local0);
                                  frame.i32_const(832);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 0);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 809);
                                  frame.i64_store(3, 456);
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 799);
                                  local10 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load(2, 800);
                                  local6 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load(2, 804);
                                  local11 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 808);
                                  local9 = frame.pop();
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_load(0, 615);
                                  frame.i32_store(0, 647);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 608);
                                  frame.i64_store(3, 640);
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(11);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(488);
                                  frame.i32_add();
                                  frame.i32_const(115);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(344);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(111);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_const(758);
                                  frame.i32_add();
                                  frame.i64_load(0, 0);
                                  frame.i64_store(0, 335);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 751);
                                  frame.i64_store(3, 328);
                                  frame.push(local0);
                                  frame.i32_const(992);
                                  frame.i32_add();
                                  frame.i32_const(33);
                                  frame.i32_add();
                                  frame.push(arg1);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(0, 0);
                                  frame.push(local0);
                                  frame.i32_const(992);
                                  frame.i32_add();
                                  frame.i32_const(41);
                                  frame.i32_add();
                                  frame.push(local7);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(0, 0);
                                  frame.push(local0);
                                  frame.i32_const(992);
                                  frame.i32_add();
                                  frame.i32_const(48);
                                  frame.i32_add();
                                  frame.push(local4);
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 0);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 335);
                                  frame.i64_store(0, 999);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 328);
                                  frame.i64_store(3, 992);
                                  frame.push(local0);
                                  frame.push(local9);
                                  frame.i32_store8(0, 0x3f8);
                                  frame.push(local0);
                                  frame.push(local11);
                                  frame.i32_store(2, 0x3f4);
                                  frame.push(local0);
                                  frame.push(local6);
                                  frame.i32_store(2, 0x3f0);
                                  frame.push(local0);
                                  frame.push(local10);
                                  frame.i32_store8(0, 0x3ef);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 456);
                                  frame.i64_store(0, 0x3f9);
                                  frame.i32_const(2);
                                  arg2 = frame.pop();
                                  block_label_15:
                                  {
                                    frame.push(local3);
                                    frame.i32_const(2);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(23, 0);
                                      break block_label_15;
                                    }
                                    frame.push(local0);
                                    frame.i32_const(992);
                                    frame.i32_add();
                                    {
                                      var t0 = frame.pop();
                                      _func144(t0);
                                    }
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 200);
                                    frame.i64_store(3, 64);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i32_load(0, 207);
                                    frame.i32_store(0, 71);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i64_load(3, 184);
                                    frame.i64_store(3, 48);
                                    frame.push(local0);
                                    frame.push(local0);
                                    frame.i32_load(0, 191);
                                    frame.i32_store(0, 55);
                                    frame.i32_const(6);
                                    local3 = frame.pop();
                                    frame.i32_const(45);
                                    local2 = frame.pop();
                                    frame.i32_const(0xf4aaa);
                                    arg3 = frame.pop();
                                    frame.unwindTo(2, 0);
                                    break block_label_2;
                                  }
                                  frame.push(local0);
                                  frame.i32_const(0x508);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(344);
                                  frame.i32_add();
                                  frame.i32_const(111);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(736);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(0x508);
                                  frame.i32_add();
                                  frame.i32_const(11);
                                  frame.i32_add();
                                  frame.i32_const(100);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(33);
                                  frame.i32_add();
                                  frame.push(arg1);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(0, 0);
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(41);
                                  frame.i32_add();
                                  frame.push(local7);
                                  frame.i64_load(3, 0);
                                  frame.i64_store(0, 0);
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  frame.i32_const(48);
                                  frame.i32_add();
                                  frame.push(local4);
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 0);
                                  frame.push(local0);
                                  frame.i32_const(711);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_load(0, 631);
                                  frame.i32_store(0, 0);
                                  frame.push(local0);
                                  frame.push(local5);
                                  frame.i32_store(2, 700);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 328);
                                  frame.i64_store(3, 640);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 335);
                                  frame.i64_store(0, 647);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 456);
                                  frame.i64_store(0, 665);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 624);
                                  frame.i64_store(3, 704);
                                  frame.push(local0);
                                  frame.i32_const(732);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(344);
                                  frame.i32_add();
                                  frame.i32_const(7);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 0);
                                  frame.push(local0);
                                  frame.push(local6);
                                  frame.i32_store(2, 656);
                                  frame.push(local0);
                                  frame.push(local11);
                                  frame.i32_store(2, 660);
                                  frame.push(local0);
                                  frame.push(local2);
                                  frame.i32_store(2, 692);
                                  frame.push(local0);
                                  frame.push(local3);
                                  frame.i32_store(2, 696);
                                  frame.push(local0);
                                  frame.push(local16);
                                  frame.i32_store(2, 716);
                                  frame.push(local0);
                                  frame.push(local15);
                                  frame.i32_store(2, 720);
                                  frame.push(local0);
                                  frame.push(local29);
                                  frame.i32_store8(0, 724);
                                  frame.push(local0);
                                  frame.push(local8);
                                  frame.i32_store8(0, 715);
                                  frame.push(local0);
                                  frame.push(local9);
                                  frame.i32_store8(0, 664);
                                  frame.push(local0);
                                  frame.push(local10);
                                  frame.i32_store8(0, 655);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 344);
                                  frame.i64_store(0, 725);
                                  frame.push(local0);
                                  frame.i32_const(216);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(725);
                                  frame.i32_add();
                                  frame.i32_const(111);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.i32_const(640);
                                  frame.i32_add();
                                  {
                                    var t0 = frame.pop();
                                    _func144(t0);
                                  }
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(0, 216);
                                  frame.i64_store(3, 184);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_const(216);
                                  frame.i32_add();
                                  frame.i32_const(7);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 191);
                                  frame.push(local0);
                                  frame.i32_const(84);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_const(216);
                                  frame.i32_add();
                                  frame.i32_const(11);
                                  frame.i32_add();
                                  frame.i32_const(100);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func002(t0, t1, t2));
                                  }
                                  frame.drop();
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 624);
                                  frame.i64_store(3, 200);
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i32_load(0, 631);
                                  frame.i32_store(0, 207);
                                  block_label_15:
                                  {
                                    frame.i32_const(0xf5144);
                                    frame.i32_const(148);
                                    {
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_func020(t0, t1));
                                    }
                                    arg1 = frame.peek();
                                    frame.i32_eqz();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(32, 0);
                                      break block_label_15;
                                    }
                                    frame.push(arg1);
                                    frame.push(local5);
                                    frame.i32_store(2, 8);
                                    frame.push(arg1);
                                    frame.push(local3);
                                    frame.i32_store(2, 4);
                                    frame.push(arg1);
                                    frame.push(local2);
                                    frame.i32_store(2, 0);
                                    frame.push(arg1);
                                    frame.push(local0);
                                    frame.i64_load(3, 200);
                                    frame.i64_store(2, 12);
                                    frame.push(arg1);
                                    frame.push(local29);
                                    frame.i32_store8(0, 32);
                                    frame.push(arg1);
                                    frame.push(local15);
                                    frame.i32_store(2, 28);
                                    frame.push(arg1);
                                    frame.push(local16);
                                    frame.i32_store(2, 24);
                                    frame.push(arg1);
                                    frame.push(local8);
                                    frame.i32_store8(0, 23);
                                    frame.push(arg1);
                                    frame.push(local0);
                                    frame.i64_load(3, 184);
                                    frame.i64_store(0, 33);
                                    frame.push(arg1);
                                    frame.i32_const(19);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_load(0, 207);
                                    frame.i32_store(0, 0);
                                    frame.push(arg1);
                                    frame.i32_const(40);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_load(0, 191);
                                    frame.i32_store(0, 0);
                                    frame.push(arg1);
                                    frame.i32_const(44);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(84);
                                    frame.i32_add();
                                    frame.i32_const(100);
                                    {
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(_func002(t0, t1, t2));
                                    }
                                    frame.drop();
                                    frame.push(arg1);
                                    frame.push(arg3);
                                    frame.i32_store8(0, 144);
                                    frame.push(arg1);
                                    frame.push(local0);
                                    frame.i32_load16_u(0, 81);
                                    frame.i32_store16(0, 145);
                                    frame.push(arg1);
                                    frame.i32_const(147);
                                    frame.i32_add();
                                    frame.push(local0);
                                    frame.i32_const(83);
                                    frame.i32_add();
                                    frame.i32_load8_u(0, 0);
                                    frame.i32_store8(0, 0);
                                    frame.unwindTo(2, 0);
                                    break block_label_1;
                                  }
                                  frame.i32_const(148);
                                  frame.i32_const(4);
                                  {
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func030(t0, t1);
                                  }
                                  throw Trap('unreachable');
                                }
                                frame.push(local0);
                                frame.i32_const(0x525);
                                frame.i32_add();
                                frame.push(arg1);
                                frame.i32_store8(0, 0);
                                frame.push(local0);
                                frame.i32_const(0x524);
                                frame.i32_add();
                                frame.i32_const(9);
                                frame.i32_store8(0, 0);
                                frame.push(local0);
                                frame.i32_const(0x51c);
                                frame.i32_add();
                                frame.i32_const(0);
                                frame.i32_store(2, 0);
                                frame.push(local0);
                                frame.i32_const(0x51b);
                                frame.i32_add();
                                frame.i32_const(2);
                                frame.i32_store8(0, 0);
                                frame.unwindTo(9, 0);
                                break block_label_4;
                              }
                              frame.i32_const(7);
                              arg1 = frame.pop();
                              frame.unwindTo(9, 0);
                              break block_label_9;
                            }
                            frame.i32_const(5);
                            arg1 = frame.pop();
                            frame.unwindTo(9, 0);
                            break block_label_9;
                          }
                          frame.i32_const(4);
                          arg1 = frame.pop();
                        }
                        frame.push(local0);
                        frame.push(local30);
                        frame.i32_store(2, 0x598);
                      }
                      frame.push(local25);
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(9, 0);
                        break block_label_8;
                      }
                      frame.push(local33);
                      frame.i32_const(8);
                      frame.i32_shl();
                      frame.push(local35);
                      frame.i32_or();
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(9, 0);
                        break block_label_8;
                      }
                      frame.i32_const(0xf5144);
                      frame.push(local34);
                      {
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        _func019(t0, t1);
                      }
                    }
                    frame.push(local20);
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(9, 0);
                      break block_label_7;
                    }
                    frame.push(local21);
                    frame.i32_const(8);
                    frame.i32_shl();
                    frame.push(local24);
                    frame.i32_or();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(9, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0xf5144);
                    frame.push(local23);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func019(t0, t1);
                    }
                  }
                  block_label_7:
                  {
                    frame.push(local11);
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(9, 0);
                      break block_label_7;
                    }
                    frame.push(local12);
                    frame.i32_const(8);
                    frame.i32_shl();
                    frame.push(local19);
                    frame.i32_or();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(9, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0xf5144);
                    frame.push(local18);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func019(t0, t1);
                    }
                  }
                  frame.push(local16);
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(9, 0);
                    break block_label_6;
                  }
                  frame.push(local15);
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(9, 0);
                    break block_label_6;
                  }
                  frame.i32_const(0xf5144);
                  frame.push(local14);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func019(t0, t1);
                  }
                }
                block_label_6:
                {
                  frame.push(local3);
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(9, 0);
                    break block_label_6;
                  }
                  frame.push(local4);
                  frame.i32_const(8);
                  frame.i32_shl();
                  frame.push(local10);
                  frame.i32_or();
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(9, 0);
                    break block_label_6;
                  }
                  frame.i32_const(0xf5144);
                  frame.push(local9);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func019(t0, t1);
                  }
                }
                frame.push(arg2);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(9, 0);
                  break block_label_5;
                }
                frame.push(local7);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(9, 0);
                  break block_label_5;
                }
                frame.i32_const(0xf5144);
                frame.push(local6);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func019(t0, t1);
                }
              }
              frame.push(local0);
              frame.i32_const(0x508);
              frame.i32_add();
              frame.i32_const(4);
              frame.i32_or();
              frame.push(arg1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func108(t0, t1);
              }
            }
            frame.push(local0);
            frame.i32_const(0x4e4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x508);
            frame.i32_add();
            frame.i32_const(4);
            frame.i32_or();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(0x4b4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x4e4);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            block_label_4:
            {
              frame.push(local2);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(13, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(0x4e0);
              frame.i32_add();
              {
                var t0 = frame.pop();
                _func098(t0);
              }
            }
            frame.push(local0);
            frame.i32_const(0x490);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x4b4);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(0x46c);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x490);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(0x448);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x46c);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(956);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(0x448);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(648);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(956);
            frame.i32_add();
            frame.i32_const(36);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(904);
            frame.i32_add();
            {
              var t0 = frame.pop();
              _func144(t0);
            }
          }
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(659);
          frame.i32_add();
          frame.i32_load(0, 0);
          frame.i32_store(0, 631);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(652);
          frame.i32_add();
          frame.i64_load(2, 0);
          frame.i64_store(3, 624);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(673);
          frame.i32_add();
          frame.i64_load(0, 0);
          frame.i64_store(3, 608);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(680);
          frame.i32_add();
          frame.i32_load(0, 0);
          frame.i32_store(0, 615);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 624);
          frame.i64_store(3, 200);
          frame.push(local0);
          frame.push(local0);
          frame.i32_load(0, 631);
          frame.i32_store(0, 207);
          frame.push(local0);
          frame.i32_const(664);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg3 = frame.pop();
          frame.push(local0);
          frame.i32_const(668);
          frame.i32_add();
          frame.i32_load(2, 0);
          local2 = frame.pop();
          frame.push(local0);
          frame.i32_const(672);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          local3 = frame.pop();
          frame.push(local0);
          frame.i32_const(663);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          arg2 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 648);
          arg1 = frame.pop();
          frame.push(local0);
          frame.push(local0);
          frame.i32_load(0, 615);
          frame.i32_store(0, 191);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 608);
          frame.i64_store(3, 184);
          frame.push(local0);
          frame.push(local0);
          frame.i32_load(0, 207);
          frame.i32_store(0, 71);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 200);
          frame.i64_store(3, 64);
          frame.push(local0);
          frame.push(local0);
          frame.i32_load(0, 191);
          frame.i32_store(0, 55);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 184);
          frame.i64_store(3, 48);
          frame.push(arg2);
          frame.i32_const(3);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(2, 0);
            break block_label_1;
          }
        }
        frame.push(local0);
        frame.i32_const(0x513);
        frame.i32_add();
        frame.push(local0);
        frame.i32_load(0, 71);
        frame.i32_store(0, 0);
        frame.push(local0);
        frame.i32_const(0x508);
        frame.i32_add();
        frame.i32_const(32);
        frame.i32_add();
        frame.push(local0);
        frame.i32_load(0, 55);
        frame.i32_store(0, 0);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_store(2, 0x508);
        frame.push(local0);
        frame.push(local0);
        frame.i64_load(3, 64);
        frame.i64_store(2, 0x50c);
        frame.push(local0);
        frame.push(local3);
        frame.i32_store8(0, 0x520);
        frame.push(local0);
        frame.push(local2);
        frame.i32_store(2, 0x51c);
        frame.push(local0);
        frame.push(arg3);
        frame.i32_store(2, 0x518);
        frame.push(local0);
        frame.push(arg2);
        frame.i32_store8(0, 0x517);
        frame.push(local0);
        frame.push(local0);
        frame.i64_load(3, 48);
        frame.i64_store(0, 0x521);
        frame.push(local0);
        frame.i32_const(640);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(0x508);
        frame.i32_add();
        frame.i32_const(36);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func002(t0, t1, t2));
        }
        frame.drop();
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(640);
        frame.i32_add();
        {
          var t0 = frame.pop();
          frame.push(_func145(t0));
        }
        arg1 = frame.peek();
        frame.i32_store(2, 216);
        frame.i32_const(0);
        arg2 = frame.pop();
        frame.i32_const(0);
        frame.i32_load(2, 0xf530c);
        arg3 = frame.pop();
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(0x508);
        frame.i32_add();
        frame.i32_store(2, 992);
        frame.push(arg3);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_const(640);
        frame.i32_add();
        frame.i32_const(20);
        frame.i32_add();
        frame.i32_const(27);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(640);
        frame.i32_add();
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_const(6);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(488);
        frame.i32_add();
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_const(3);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(488);
        frame.i32_add();
        frame.i32_const(20);
        frame.i32_add();
        frame.i32_const(3);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(0xf4b48);
        frame.i32_store(2, 496);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 488);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_store(2, 644);
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_store(2, 348);
        frame.push(local0);
        frame.i32_const(0xf4ad7);
        frame.i32_store(2, 344);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(640);
        frame.i32_add();
        frame.i32_store(2, 504);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(992);
        frame.i32_add();
        frame.i32_store(2, 656);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(344);
        frame.i32_add();
        frame.i32_store(2, 648);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(216);
        frame.i32_add();
        frame.i32_store(2, 640);
        frame.push(local0);
        frame.i32_const(488);
        frame.i32_add();
        frame.i32_const(2);
        frame.i32_const(0xf4bac);
        frame.i32_const(0);
        frame.push(local0);
        {
          var t4 = frame.pop();
          var t3 = frame.pop();
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func094(t0, t1, t2, t3, t4);
        }
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_load8_u(0, 20);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(local0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(local0);
    {
      var t0 = frame.pop();
      _func142(t0);
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store8(0, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(0x5c0);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void ICU4XFixedDecimalFormatter_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(24);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(36);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(44);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(60);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(68);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(72);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(76);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(84);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(88);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(92);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      {
        var t0 = frame.pop();
        _func098(t0);
      }
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  void ICU4XFixedDecimalFormatter_format(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(4);
    frame.i32_add();
    local1 = frame.pop();
    frame.i32_const(0);
    local2 = frame.pop();
    frame.i32_const(1);
    local3 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_load8_u(0, 18);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  frame.unwindTo(0, 0);
                  break block_label_2;

                case 1:
                  frame.unwindTo(0, 0);
                  break block_label_3;

                case 2:
                  frame.unwindTo(0, 0);
                  break block_label_4;

                default:
                  frame.unwindTo(0, 0);
                  break block_label_2;
              }
            }
            frame.push(arg1);
            frame.i32_const(36);
            frame.i32_add();
            local1 = frame.pop();
          }
          frame.push(local1);
          frame.i32_load(2, 4);
          local4 = frame.pop();
          block_label_3:
          {
            frame.push(arg3);
            frame.i32_load(2, 8);
            local5 = frame.peek();
            frame.push(local1);
            frame.i32_const(12);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.push(local1);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_load(2, 0);
            local6 = frame.peek();
            frame.push(local1);
            frame.i32_load(2, 0);
            local7 = frame.peek();
            frame.select();
            local8 = frame.peek();
            frame.i32_add();
            local9 = frame.peek();
            frame.push(arg3);
            frame.i32_load(2, 12);
            frame.i32_le_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg3);
            frame.push(local9);
            frame.push(arg3);
            frame.i32_load(2, 20);
            {
              var func = table0[frame.pop()] as FunctionType1?;
              if (func == null) throw Trap('uninitialized element');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(arg3);
            frame.i32_load(2, 8);
            local5 = frame.pop();
          }
          frame.push(arg3);
          frame.i32_load(2, 4);
          frame.push(local5);
          frame.i32_add();
          frame.push(local6);
          frame.push(local4);
          frame.push(local7);
          frame.select();
          frame.push(local8);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func002(t0, t1, t2));
          }
          frame.drop();
          frame.push(arg3);
          frame.push(local9);
          frame.i32_store(2, 8);
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(local1);
          local2 = frame.pop();
        }
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_load16_s(1, 16);
          local5 = frame.peek();
          frame.push(arg2);
          frame.i32_load16_s(1, 14);
          local8 = frame.peek();
          frame.i32_gt_s();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(96);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_const(92);
          frame.i32_add();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_const(84);
          frame.i32_add();
          frame.i32_load(2, 0);
          local9 = frame.peek();
          frame.select();
          local10 = frame.pop();
          frame.push(local1);
          frame.push(arg1);
          frame.i32_const(88);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.push(local9);
          frame.select();
          local11 = frame.pop();
          frame.push(arg1);
          frame.i32_const(80);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_const(76);
          frame.i32_add();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_const(68);
          frame.i32_add();
          frame.i32_load(2, 0);
          local9 = frame.peek();
          frame.select();
          local12 = frame.pop();
          frame.push(local1);
          frame.push(arg1);
          frame.i32_const(72);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.push(local9);
          frame.select();
          local13 = frame.pop();
          frame.push(arg1);
          frame.i32_const(140);
          frame.i32_add();
          local14 = frame.pop();
          frame.push(arg1);
          frame.i32_load8_u(0, 144);
          local15 = frame.pop();
          frame.push(local8);
          local1 = frame.pop();

          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(local1);
              frame.i32_const(0xffff);
              frame.i32_and();
              frame.i32_const(0xffff);
              frame.i32_ne();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              block_label_5:
              {
                frame.push(arg3);
                frame.i32_load(2, 8);
                local4 = frame.peek();
                frame.push(local12);
                frame.i32_add();
                local9 = frame.peek();
                frame.push(arg3);
                frame.i32_load(2, 12);
                frame.i32_le_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_5;
                }
                frame.push(arg3);
                frame.push(local9);
                frame.push(arg3);
                frame.i32_load(2, 20);
                {
                  var func = table0[frame.pop()] as FunctionType1?;
                  if (func == null) throw Trap('uninitialized element');
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1));
                }
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_1;
                }
                frame.push(arg3);
                frame.i32_load(2, 8);
                local4 = frame.pop();
              }
              frame.push(arg3);
              frame.i32_load(2, 4);
              frame.push(local4);
              frame.i32_add();
              frame.push(local13);
              frame.push(local12);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.drop();
              frame.push(arg3);
              frame.push(local9);
              frame.i32_store(2, 8);
            }
            frame.i32_const(0);
            local9 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_load16_s(1, 12);
              local4 = frame.peek();
              frame.push(local1);
              frame.i32_const(16);
              frame.i32_shl();
              frame.i32_const(16);
              frame.i32_shr_s();
              local6 = frame.peek();
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg2);
              frame.i32_load(2, 4);
              frame.push(arg2);
              frame.i32_load(2, 8);
              local7 = frame.peek();
              frame.push(local7);
              frame.i32_const(8);
              frame.i32_gt_u();
              local7 = frame.peek();
              frame.select();
              frame.push(local4);
              frame.push(local1);
              frame.i32_sub();
              frame.i32_const(0xffff);
              frame.i32_and();
              local4 = frame.peek();
              frame.i32_le_u();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg2);
              frame.i32_load(2, 0);
              frame.push(arg2);
              frame.push(local7);
              frame.select();
              local7 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(local7);
              frame.push(local4);
              frame.i32_add();
              frame.i32_load8_u(0, 0);
              local9 = frame.peek();
              frame.i32_const(9);
              frame.i32_le_u();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              throw Trap('unreachable');
              throw Trap('unreachable');
            }
            frame.push(arg1);
            frame.push(local9);
            frame.i32_const(2);
            frame.i32_shl();
            frame.i32_add();
            frame.i32_const(100);
            frame.i32_add();
            frame.i32_load(2, 0);
            local9 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 40);
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local9);
                    frame.i32_const(128);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(1, 0);
                      break block_label_7;
                    }
                    frame.push(local9);
                    frame.i32_const(0x800);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(1, 0);
                      break block_label_6;
                    }
                    frame.push(local9);
                    frame.i32_const(0x10000);
                    frame.i32_ge_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(1, 0);
                      break block_label_5;
                    }
                    frame.push(local0);
                    frame.push(local9);
                    frame.i32_const(63);
                    frame.i32_and();
                    frame.i32_const(128);
                    frame.i32_or();
                    frame.i32_store8(0, 42);
                    frame.push(local0);
                    frame.push(local9);
                    frame.i32_const(12);
                    frame.i32_shr_u();
                    frame.i32_const(224);
                    frame.i32_or();
                    frame.i32_store8(0, 40);
                    frame.push(local0);
                    frame.push(local9);
                    frame.i32_const(6);
                    frame.i32_shr_u();
                    frame.i32_const(63);
                    frame.i32_and();
                    frame.i32_const(128);
                    frame.i32_or();
                    frame.i32_store8(0, 41);
                    frame.i32_const(3);
                    local4 = frame.pop();
                    frame.unwindTo(1, 0);
                    break block_label_4;
                  }
                  frame.push(local0);
                  frame.push(local9);
                  frame.i32_store8(0, 40);
                  frame.i32_const(1);
                  local4 = frame.pop();
                  frame.unwindTo(1, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.push(local9);
                frame.i32_const(63);
                frame.i32_and();
                frame.i32_const(128);
                frame.i32_or();
                frame.i32_store8(0, 41);
                frame.push(local0);
                frame.push(local9);
                frame.i32_const(6);
                frame.i32_shr_u();
                frame.i32_const(192);
                frame.i32_or();
                frame.i32_store8(0, 40);
                frame.i32_const(2);
                local4 = frame.pop();
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.push(local9);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 43);
              frame.push(local0);
              frame.push(local9);
              frame.i32_const(18);
              frame.i32_shr_u();
              frame.i32_const(240);
              frame.i32_or();
              frame.i32_store8(0, 40);
              frame.push(local0);
              frame.push(local9);
              frame.i32_const(6);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 42);
              frame.push(local0);
              frame.push(local9);
              frame.i32_const(12);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 41);
              frame.i32_const(4);
              local4 = frame.pop();
            }
            block_label_4:
            {
              frame.push(arg3);
              frame.i32_load(2, 8);
              local7 = frame.peek();
              frame.push(local4);
              frame.i32_add();
              local9 = frame.peek();
              frame.push(arg3);
              frame.i32_load(2, 12);
              frame.i32_le_u();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg3);
              frame.push(local9);
              frame.push(arg3);
              frame.i32_load(2, 20);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg3);
              frame.i32_load(2, 8);
              local7 = frame.pop();
            }
            frame.push(arg3);
            frame.i32_load(2, 4);
            frame.push(local7);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(local4);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(arg3);
            frame.push(local9);
            frame.i32_store(2, 8);
            block_label_4:
            {
              frame.push(local8);
              frame.push(local1);
              frame.push(local15);
              frame.push(local14);
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func123(t0, t1, t2, t3));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(3, 0);
                break block_label_4;
              }
              block_label_5:
              {
                frame.push(local9);
                frame.push(local10);
                frame.i32_add();
                local4 = frame.peek();
                frame.push(arg3);
                frame.i32_load(2, 12);
                frame.i32_le_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(7, 0);
                  break block_label_5;
                }
                frame.push(arg3);
                frame.push(local4);
                frame.push(arg3);
                frame.i32_load(2, 20);
                {
                  var func = table0[frame.pop()] as FunctionType1?;
                  if (func == null) throw Trap('uninitialized element');
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1));
                }
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_1;
                }
                frame.push(arg3);
                frame.i32_load(2, 8);
                local9 = frame.pop();
              }
              frame.push(arg3);
              frame.i32_load(2, 4);
              frame.push(local9);
              frame.i32_add();
              frame.push(local11);
              frame.push(local10);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.drop();
              frame.push(arg3);
              frame.push(local4);
              frame.i32_store(2, 8);
            }
            frame.push(local5);
            frame.push(local6);
            frame.i32_ge_s();
            frame.push(local5);
            frame.push(local1);
            frame.push(local5);
            frame.push(local6);
            frame.i32_lt_s();
            frame.i32_sub();
            frame.i32_const(16);
            frame.i32_shl();
            frame.i32_const(16);
            frame.i32_shr_s();
            local1 = frame.peek();
            frame.i32_gt_s();
            frame.i32_or();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        frame.i32_const(1);
        local1 = frame.pop();
        frame.push(local3);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local2);
        frame.i32_const(20);
        frame.i32_add();
        frame.i32_load(2, 0);
        local5 = frame.pop();
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_load(2, 8);
          arg2 = frame.peek();
          frame.push(local2);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.push(local2);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_load(2, 0);
          local4 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 16);
          local6 = frame.peek();
          frame.select();
          local7 = frame.peek();
          frame.i32_add();
          local9 = frame.peek();
          frame.push(arg3);
          frame.i32_load(2, 12);
          frame.i32_le_u();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(arg3);
          frame.push(local9);
          frame.push(arg3);
          frame.i32_load(2, 20);
          {
            var func = table0[frame.pop()] as FunctionType1?;
            if (func == null) throw Trap('uninitialized element');
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1));
          }
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg3);
          frame.i32_load(2, 8);
          arg2 = frame.pop();
        }
        frame.push(arg3);
        frame.i32_load(2, 4);
        frame.push(arg2);
        frame.i32_add();
        frame.push(local4);
        frame.push(local5);
        frame.push(local6);
        frame.select();
        frame.push(local7);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func002(t0, t1, t2));
        }
        frame.drop();
        frame.push(arg3);
        frame.push(local9);
        frame.i32_store(2, 8);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 12);
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf530c);
      local9 = frame.pop();
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(72);
      frame.i32_add();
      frame.i32_store(2, 8);
      frame.push(local9);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(28);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(6);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0xf4b48);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 68);
      frame.push(local0);
      frame.i32_const(0xf4a7c);
      frame.i32_store(2, 64);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(64);
      frame.i32_add();
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4bac);
      frame.i32_const(0);
      frame.push(arg3);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func094(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg3);
    frame.push(arg3);
    frame.i32_load(2, 16);
    {
      var func = table0[frame.pop()] as FunctionType4?;
      if (func == null) throw Trap('uninitialized element');
      var t0 = frame.pop();
      func(t0);
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store8(0, 4);
    frame.push(arg0);
    frame.i32_const(1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(80);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 ICU4XFixedDecimal_create_from_i32(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func120(t0, t1);
    }
    block_label_0:
    {
      frame.i32_const(0xf5144);
      frame.i32_const(20);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func020(t0, t1));
      }
      arg0 = frame.peek();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(20);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i64_load(3, 8);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(3, 0);
    frame.i64_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    return frame.pop();
  }

  void ICU4XFixedDecimal_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      frame.i32_const(9);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  void ICU4XFixedDecimal_multiply_pow10(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func119(t0, t1);
    }
  }

  void ICU4XLocale_create_from_string(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(320);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(128);
    frame.i32_add();
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func042(t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 128);
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(128);
        frame.i32_add();
        frame.push(local0);
        frame.i32_load(2, 132);
        frame.push(local0);
        frame.i32_const(128);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func081(t0, t1, t2);
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load8_u(0, 224);
            arg1 = frame.peek();
            frame.i32_const(3);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(7, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_load(2, 128);
            local1 = frame.pop();
            frame.push(local0);
            frame.i32_const(36);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(128);
            frame.i32_add();
            frame.i32_const(4);
            frame.i32_or();
            frame.i32_const(92);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_const(31);
            frame.i32_add();
            local2 = frame.peek();
            frame.push(local0);
            frame.i32_const(128);
            frame.i32_add();
            frame.i32_const(120);
            frame.i32_add();
            frame.i32_load(0, 0);
            frame.i32_store(0, 0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            local3 = frame.peek();
            frame.push(local0);
            frame.i32_const(128);
            frame.i32_add();
            frame.i32_const(113);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(128);
            frame.i32_add();
            frame.i32_const(105);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(0, 225);
            frame.i64_store(3, 8);
            frame.i32_const(0xf5144);
            frame.i32_const(124);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func020(t0, t1));
            }
            arg2 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(3, 0);
              break block_label_0;
            }
            frame.push(arg2);
            frame.push(local1);
            frame.i32_store(2, 0);
            frame.push(arg2);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(36);
            frame.i32_add();
            frame.i32_const(92);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func002(t0, t1, t2));
            }
            frame.drop();
            frame.push(arg2);
            frame.push(arg1);
            frame.i32_store8(0, 96);
            frame.push(arg2);
            frame.push(local0);
            frame.i64_load(3, 8);
            frame.i64_store(0, 97);
            frame.push(arg2);
            frame.i32_const(105);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(16);
            frame.i32_add();
            frame.i64_load(3, 0);
            frame.i64_store(0, 0);
            frame.push(arg2);
            frame.i32_const(113);
            frame.i32_add();
            frame.push(local3);
            frame.i64_load(3, 0);
            frame.i64_store(0, 0);
            frame.push(arg2);
            frame.i32_const(120);
            frame.i32_add();
            frame.push(local2);
            frame.i32_load(0, 0);
            frame.i32_store(0, 0);
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.unwindTo(7, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(local0);
          frame.i32_load8_u(0, 128);
          arg2 = frame.peek();
          frame.i32_store8(0, 255);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(2);
          frame.i32_xor();
          frame.i32_const(255);
          frame.i32_and();
          frame.i32_const(2);
          frame.i32_shl();
          frame.i32_const(0xf512c);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.peek();
          frame.i32_store(2, 260);
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.i32_const(0);
          frame.i32_load(2, 0xf530c);
          local1 = frame.pop();
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(255);
          frame.i32_add();
          frame.i32_store(2, 256);
          frame.push(local1);
          frame.i32_const(2);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(7, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(288);
          frame.i32_add();
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_const(29);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(288);
          frame.i32_add();
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_const(6);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(264);
          frame.i32_add();
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_const(3);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(264);
          frame.i32_add();
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_const(3);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.i32_const(0xf4b48);
          frame.i32_store(2, 272);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 264);
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_store(2, 292);
          frame.push(local0);
          frame.i32_const(38);
          frame.i32_store(2, 316);
          frame.push(local0);
          frame.i32_const(0xf4af7);
          frame.i32_store(2, 312);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(288);
          frame.i32_add();
          frame.i32_store(2, 280);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(256);
          frame.i32_add();
          frame.i32_store(2, 304);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(312);
          frame.i32_add();
          frame.i32_store(2, 296);
          frame.push(local0);
          frame.push(local0);
          frame.i32_const(260);
          frame.i32_add();
          frame.i32_store(2, 288);
          frame.push(local0);
          frame.i32_const(264);
          frame.i32_add();
          frame.i32_const(2);
          frame.i32_const(0xf4bac);
          frame.i32_const(0);
          frame.push(local0);
          {
            var t4 = frame.pop();
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func094(t0, t1, t2, t3, t4);
          }
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.i32_const(320);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(124);
    frame.i32_const(4);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func030(t0, t1);
    }
    throw Trap('unreachable');
  }

  void ICU4XLocale_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load8_u(0, 96);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(100);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(104);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(arg0);
    frame.i32_const(12);
    frame.i32_add();
    {
      var t0 = frame.pop();
      _func142(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(1, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.i32_const(0);
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(44);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(2);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_0;
        }
      }
      frame.push(arg0);
      frame.i32_const(48);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(1, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(arg0);
    frame.i32_const(32);
    frame.i32_add();
    {
      var t0 = frame.pop();
      _func072(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 32);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(36);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 72);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(76);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(arg0);
    frame.i32_const(84);
    frame.i32_add();
    {
      var t0 = frame.pop();
      _func073(t0);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 84);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(3, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(88);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  i32 diplomat_alloc(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_popcnt();
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(-0x80000000);
        frame.push(arg1);
        frame.i32_sub();
        frame.push(arg0);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func008(t0, t1));
    }
    return frame.pop();
  }

  i32 diplomat_buffer_writeable_create(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func029(t0, t1, t2);
    }
    frame.push(local0);
    frame.i32_load(2, 12);
    local1 = frame.pop();
    block_label_0:
    {
      frame.i32_const(0xf5144);
      frame.i32_const(24);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func020(t0, t1));
      }
      local2 = frame.peek();
      if (frame.pop() != 0) {
        frame.unwindTo(3, 0);
        break block_label_0;
      }
      frame.i32_const(24);
      frame.i32_const(4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(local2);
    frame.i32_const(21);
    frame.i32_store(2, 20);
    frame.push(local2);
    frame.i32_const(22);
    frame.i32_store(2, 16);
    frame.push(local2);
    frame.push(arg0);
    frame.i32_store(2, 12);
    frame.push(local2);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(local2);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(local2);
    frame.i32_const(0);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local2);
    return frame.pop();
  }

  void diplomat_buffer_writeable_destroy(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 12);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  i32 diplomat_buffer_writeable_get_bytes(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 4);
    return frame.pop();
  }

  i32 diplomat_buffer_writeable_len(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 8);
    return frame.pop();
  }

  void diplomat_free(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_popcnt();
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(-0x80000000);
        frame.push(arg2);
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func019(t0, t1);
    }
  }

  void diplomat_init() {
    final frame = Frame(this);
  }

  void diplomat_simple_writeable(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_const(19);
    frame.i32_store(2, 20);
    frame.push(arg0);
    frame.i32_const(20);
    frame.i32_store(2, 16);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_const(-1);
    frame.i32_add();
    frame.i32_store(2, 12);
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 0);
  }

  void icu4x_init() {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    frame.i32_const(0);
    frame.i32_load(2, 0xf5308);
    local0 = frame.peek();
    frame.i32_const(1);
    frame.push(local0);
    frame.select();
    frame.i32_store(2, 0xf5308);
    block_label_0:
    {
      frame.push(local0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }

        loop_label_2:
        for (;;) {
          frame.i32_const(0);
          frame.i32_load(2, 0xf5308);
          frame.i32_const(1);
          frame.i32_eq();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.i32_const(0);
    frame.i32_const(0xf4be8);
    frame.i32_store(2, 0xf5140);
    frame.i32_const(0);
    frame.i32_const(0xf4bdc);
    frame.i32_store(2, 0xf513c);
    frame.i32_const(0);
    frame.i32_const(2);
    frame.i32_store(2, 0xf5308);
    frame.i32_const(0);
    frame.i32_const(4);
    frame.i32_store(2, 0xf530c);
  }

  i32 _func000(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func005(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func001(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(15);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        local0 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.push(arg0);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_and();
      local1 = frame.peek();
      frame.i32_add();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        local0 = frame.pop();
        frame.push(arg1);
        local3 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.push(local3);
          frame.i32_load8_u(0, 0);
          frame.i32_store8(0, 0);
          frame.push(local3);
          frame.i32_const(1);
          frame.i32_add();
          local3 = frame.pop();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.peek();
          frame.push(local2);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.push(local2);
      frame.push(arg2);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_const(-4);
      frame.i32_and();
      local5 = frame.peek();
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.push(local1);
          frame.i32_add();
          local6 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local5);
          frame.i32_const(1);
          frame.i32_lt_s();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(local6);
          frame.i32_const(3);
          frame.i32_shl();
          local3 = frame.peek();
          frame.i32_const(24);
          frame.i32_and();
          arg2 = frame.pop();
          frame.push(local6);
          frame.i32_const(-4);
          frame.i32_and();
          local7 = frame.peek();
          frame.i32_const(4);
          frame.i32_add();
          arg1 = frame.pop();
          frame.i32_const(0);
          frame.push(local3);
          frame.i32_sub();
          frame.i32_const(24);
          frame.i32_and();
          local1 = frame.pop();
          frame.push(local7);
          frame.i32_load(2, 0);
          local3 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local2);
            frame.push(local3);
            frame.push(arg2);
            frame.i32_shr_u();
            frame.push(arg1);
            frame.i32_load(2, 0);
            local3 = frame.peek();
            frame.push(local1);
            frame.i32_shl();
            frame.i32_or();
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local2);
            frame.i32_const(4);
            frame.i32_add();
            local2 = frame.peek();
            frame.push(local0);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            frame.unwindTo(0, 0);
            break block_label_1;

            break;
          }
        }
        frame.push(local5);
        frame.i32_const(1);
        frame.i32_lt_s();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local6);
        arg1 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local2);
          frame.push(arg1);
          frame.i32_load(2, 0);
          frame.i32_store(2, 0);
          frame.push(arg1);
          frame.i32_const(4);
          frame.i32_add();
          arg1 = frame.pop();
          frame.push(local2);
          frame.i32_const(4);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local0);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.push(local4);
      frame.i32_const(3);
      frame.i32_and();
      arg2 = frame.pop();
      frame.push(local6);
      frame.push(local5);
      frame.i32_add();
      arg1 = frame.pop();
    }
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg2);
      frame.i32_add();
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.push(arg1);
        frame.i32_load8_u(0, 0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_const(1);
        frame.i32_add();
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _func002(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func001(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func003(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_sub();
            frame.push(arg2);
            frame.i32_ge_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            local0 = frame.pop();
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_add();
            local1 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg0);
              local2 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local1);
            frame.i32_const(-4);
            frame.i32_and();
            local3 = frame.pop();
            frame.i32_const(0);
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_and();
            local4 = frame.peek();
            frame.i32_sub();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.push(arg2);
              frame.i32_add();
              frame.i32_const(-1);
              frame.i32_add();
              local2 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.i32_const(-1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local2);
                frame.i32_load8_u(0, 0);
                frame.i32_store8(0, 0);
                frame.push(local2);
                frame.i32_const(-1);
                frame.i32_add();
                local2 = frame.pop();
                frame.push(local3);
                frame.push(local1);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
            }
            frame.push(local3);
            frame.push(arg2);
            frame.push(local4);
            frame.i32_sub();
            local6 = frame.peek();
            frame.i32_const(-4);
            frame.i32_and();
            local2 = frame.peek();
            frame.i32_sub();
            local1 = frame.pop();
            frame.i32_const(0);
            frame.push(local2);
            frame.i32_sub();
            local4 = frame.pop();
            block_label_4:
            {
              frame.push(local0);
              frame.push(local5);
              frame.i32_add();
              local5 = frame.peek();
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(local4);
              frame.i32_const(-1);
              frame.i32_gt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local5);
              frame.i32_const(3);
              frame.i32_shl();
              local2 = frame.peek();
              frame.i32_const(24);
              frame.i32_and();
              arg2 = frame.pop();
              frame.push(local5);
              frame.i32_const(-4);
              frame.i32_and();
              local7 = frame.peek();
              frame.i32_const(-4);
              frame.i32_add();
              arg1 = frame.pop();
              frame.i32_const(0);
              frame.push(local2);
              frame.i32_sub();
              frame.i32_const(24);
              frame.i32_and();
              local0 = frame.pop();
              frame.push(local7);
              frame.i32_load(2, 0);
              local2 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local3);
                frame.i32_const(-4);
                frame.i32_add();
                local3 = frame.peek();
                frame.push(local2);
                frame.push(local0);
                frame.i32_shl();
                frame.push(arg1);
                frame.i32_load(2, 0);
                local2 = frame.peek();
                frame.push(arg2);
                frame.i32_shr_u();
                frame.i32_or();
                frame.i32_store(2, 0);
                frame.push(arg1);
                frame.i32_const(-4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(local1);
                frame.push(local3);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                frame.unwindTo(0, 0);
                break block_label_2;

                break;
              }
            }
            frame.push(local4);
            frame.i32_const(-1);
            frame.i32_gt_s();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local6);
            frame.push(arg1);
            frame.i32_add();
            frame.i32_const(-4);
            frame.i32_add();
            arg1 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local3);
              frame.i32_const(-4);
              frame.i32_add();
              local3 = frame.peek();
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_store(2, 0);
              frame.push(arg1);
              frame.i32_const(-4);
              frame.i32_add();
              arg1 = frame.pop();
              frame.push(local1);
              frame.push(local3);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              frame.unwindTo(0, 0);
              break block_label_2;

              break;
            }
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(arg0);
              local1 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg0);
            frame.i32_const(0);
            frame.push(arg0);
            frame.i32_sub();
            frame.i32_const(3);
            frame.i32_and();
            local0 = frame.peek();
            frame.i32_add();
            local2 = frame.pop();
            block_label_4:
            {
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(arg0);
              local1 = frame.pop();
              frame.push(arg1);
              local3 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.push(local3);
                frame.i32_load8_u(0, 0);
                frame.i32_store8(0, 0);
                frame.push(local3);
                frame.i32_const(1);
                frame.i32_add();
                local3 = frame.pop();
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local2);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
            }
            frame.push(local2);
            frame.push(arg2);
            frame.push(local0);
            frame.i32_sub();
            local5 = frame.peek();
            frame.i32_const(-4);
            frame.i32_and();
            local6 = frame.peek();
            frame.i32_add();
            local1 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg1);
                frame.push(local0);
                frame.i32_add();
                local4 = frame.peek();
                frame.i32_const(3);
                frame.i32_and();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_lt_s();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local4);
                frame.i32_const(3);
                frame.i32_shl();
                local3 = frame.peek();
                frame.i32_const(24);
                frame.i32_and();
                arg2 = frame.pop();
                frame.push(local4);
                frame.i32_const(-4);
                frame.i32_and();
                local7 = frame.peek();
                frame.i32_const(4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.i32_const(0);
                frame.push(local3);
                frame.i32_sub();
                frame.i32_const(24);
                frame.i32_and();
                local0 = frame.pop();
                frame.push(local7);
                frame.i32_load(2, 0);
                local3 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local2);
                  frame.push(local3);
                  frame.push(arg2);
                  frame.i32_shr_u();
                  frame.push(arg1);
                  frame.i32_load(2, 0);
                  local3 = frame.peek();
                  frame.push(local0);
                  frame.i32_shl();
                  frame.i32_or();
                  frame.i32_store(2, 0);
                  frame.push(arg1);
                  frame.i32_const(4);
                  frame.i32_add();
                  arg1 = frame.pop();
                  frame.push(local2);
                  frame.i32_const(4);
                  frame.i32_add();
                  local2 = frame.peek();
                  frame.push(local1);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) {
                    continue loop_label_6;
                  }
                  frame.unwindTo(0, 0);
                  break block_label_4;

                  break;
                }
              }
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local4);
              arg1 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local2);
                frame.push(arg1);
                frame.i32_load(2, 0);
                frame.i32_store(2, 0);
                frame.push(arg1);
                frame.i32_const(4);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(local2);
                frame.i32_const(4);
                frame.i32_add();
                local2 = frame.peek();
                frame.push(local1);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
            }
            frame.push(local5);
            frame.i32_const(3);
            frame.i32_and();
            arg2 = frame.pop();
            frame.push(local4);
            frame.push(local6);
            frame.i32_add();
            arg1 = frame.pop();
          }
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(local1);
          frame.push(arg2);
          frame.i32_add();
          local2 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local1);
            frame.push(arg1);
            frame.i32_load8_u(0, 0);
            frame.i32_store8(0, 0);
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(local2);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            frame.unwindTo(0, 0);
            break block_label_0;

            break;
          }
        }
        frame.push(local6);
        frame.i32_const(3);
        frame.i32_and();
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local5);
        frame.push(local4);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(local1);
        frame.push(arg1);
        frame.i32_sub();
        local2 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(-1);
      frame.i32_add();
      arg1 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local1);
        frame.i32_const(-1);
        frame.i32_add();
        local1 = frame.peek();
        frame.push(arg1);
        frame.i32_load8_u(0, 0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_const(-1);
        frame.i32_add();
        arg1 = frame.pop();
        frame.push(local2);
        frame.push(local1);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _func004(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func003(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func005(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(15);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        local0 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.push(arg0);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_and();
      local1 = frame.peek();
      frame.i32_add();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        local0 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.push(arg1);
          frame.i32_store8(0, 0);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.peek();
          frame.push(local2);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.push(arg1);
      frame.i32_const(255);
      frame.i32_and();
      local3 = frame.pop();
      frame.i32_const(8);
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local3);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_and();
        frame.i32_shl();
        frame.push(local3);
        frame.i32_or();
        local3 = frame.pop();
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_lt_u();
        local4 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_shl();
        local0 = frame.pop();
        frame.push(local4);
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
      frame.push(local2);
      frame.push(arg2);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_const(-4);
      frame.i32_and();
      arg2 = frame.peek();
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_lt_s();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }

        loop_label_2:
        for (;;) {
          frame.push(local2);
          frame.push(local3);
          frame.i32_store(2, 0);
          frame.push(local2);
          frame.i32_const(4);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local0);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.push(local4);
      frame.i32_const(3);
      frame.i32_and();
      arg2 = frame.pop();
    }
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg2);
      frame.i32_add();
      local3 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.push(arg1);
        frame.i32_store8(0, 0);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local3);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(arg0);
    return frame.pop();
  }

  i32 _func006(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(arg0);
          frame.i32_load8_u(0, 0);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_load8_u(0, 0);
          local2 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_1;
          }
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_add();
          arg0 = frame.pop();
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          arg1 = frame.pop();
          frame.push(arg2);
          frame.i32_const(-1);
          frame.i32_add();
          arg2 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          continue loop_label_2;

          break;
        }
      }
      frame.push(local1);
      frame.push(local2);
      frame.i32_sub();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func007(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func006(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func008(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(9);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg1);
      frame.push(arg0);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func021(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.i32_const(0xf5144);
    frame.push(arg0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func020(t0, t1));
    }
    return frame.pop();
  }

  i32 _func009(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(9);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.i32_const(0xf5144);
            frame.push(arg2);
            frame.push(arg3);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func021(t0, t1, t2));
            }
            arg2 = frame.peek();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.i32_const(0);
            return frame.pop();
          }
          frame.i32_const(0);
          arg2 = frame.pop();
          frame.push(arg3);
          frame.i32_const(-0x10034);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(0xf5144);
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          frame.i32_const(16);
          frame.push(arg3);
          frame.i32_const(11);
          frame.i32_add();
          frame.i32_const(-8);
          frame.i32_and();
          frame.push(arg3);
          frame.i32_const(11);
          frame.i32_lt_u();
          frame.select();
          frame.i32_const(1);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func018(t0, t1, t2, t3));
          }
          arg1 = frame.peek();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.i32_const(0xf5144);
          frame.push(arg3);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func020(t0, t1));
          }
          arg1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg1);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_const(-8);
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg2 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          frame.select();
          frame.push(arg2);
          frame.i32_const(-8);
          frame.i32_and();
          frame.i32_add();
          arg2 = frame.peek();
          frame.push(arg3);
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_lt_u();
          frame.select();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func002(t0, t1, t2));
          }
          arg3 = frame.pop();
          frame.i32_const(0xf5144);
          frame.push(arg0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
          frame.push(arg3);
          return frame.pop();
        }
        frame.push(arg2);
        frame.push(arg0);
        frame.push(arg1);
        frame.push(arg3);
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func002(t0, t1, t2));
        }
        frame.drop();
        frame.i32_const(0xf5144);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
      }
      frame.push(arg2);
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    return frame.pop();
  }

  i32 _func010(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_const(9);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0xf5144);
        frame.push(arg1);
        frame.push(arg0);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func021(t0, t1, t2));
        }
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func020(t0, t1));
      }
      arg1 = frame.pop();
    }
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_const(-4);
      frame.i32_add();
      frame.i32_load8_u(0, 0);
      frame.i32_const(3);
      frame.i32_and();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_const(0);
      frame.push(arg0);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func000(t0, t1, t2));
      }
      frame.drop();
    }
    frame.push(arg1);
    return frame.pop();
  }

  void _func011(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func022(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func012(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 416);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(-8);
      frame.i32_and();
      frame.i32_add();
      frame.i32_const(144);
      frame.i32_add();
      local1 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 424);
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 408);
          local3 = frame.peek();
          frame.i32_const(1);
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_shl();
          local0 = frame.peek();
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_load(2, 8);
          local0 = frame.pop();
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(local3);
        frame.push(local0);
        frame.i32_or();
        frame.i32_store(2, 408);
        frame.push(local1);
        local0 = frame.pop();
      }
      frame.push(local1);
      frame.push(local2);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.push(local2);
      frame.i32_store(2, 12);
      frame.push(local2);
      frame.push(local1);
      frame.i32_store(2, 12);
      frame.push(local2);
      frame.push(local0);
      frame.i32_store(2, 8);
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 424);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 416);
  }

  void _func013(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      frame.push(arg2);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func014(t0, t1, t2);
      }
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_const(-8);
    frame.i32_and();
    frame.i32_add();
    frame.i32_const(144);
    frame.i32_add();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 408);
        local1 = frame.peek();
        frame.i32_const(1);
        frame.push(arg2);
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_shl();
        arg2 = frame.peek();
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local1);
      frame.push(arg2);
      frame.i32_or();
      frame.i32_store(2, 408);
      frame.push(local0);
      arg2 = frame.pop();
    }
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 8);
    frame.push(arg2);
    frame.push(arg1);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_store(2, 8);
  }

  void _func014(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(31);
      local0 = frame.pop();
      frame.push(arg2);
      frame.i32_const(0xffffff);
      frame.i32_gt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg2);
      frame.i32_const(6);
      frame.push(arg2);
      frame.i32_const(8);
      frame.i32_shr_u();
      frame.i32_clz();
      local0 = frame.peek();
      frame.i32_sub();
      frame.i32_shr_u();
      frame.i32_const(1);
      frame.i32_and();
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_shl();
      frame.i32_sub();
      frame.i32_const(62);
      frame.i32_add();
      local0 = frame.pop();
    }
    frame.push(arg1);
    frame.i64_const(0);
    frame.i64_store(2, 16);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_store(2, 28);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(2);
    frame.i32_shl();
    frame.i32_add();
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 412);
        local2 = frame.peek();
        frame.i32_const(1);
        frame.push(local0);
        frame.i32_shl();
        local3 = frame.peek();
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_const(0);
        frame.i32_const(25);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.i32_const(31);
        frame.i32_and();
        frame.push(local0);
        frame.i32_const(31);
        frame.i32_eq();
        frame.select();
        frame.i32_shl();
        local0 = frame.pop();
        frame.push(local1);
        frame.i32_load(2, 0);
        local1 = frame.pop();

        loop_label_2:
        for (;;) {
          block_label_3:
          {
            frame.push(local1);
            arg0 = frame.peek();
            frame.i32_load(2, 4);
            frame.i32_const(-8);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(1, 0);
              break block_label_3;
            }
            frame.push(arg0);
            frame.i32_load(2, 8);
            local0 = frame.peek();
            frame.push(arg1);
            frame.i32_store(2, 12);
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_store(2, 8);
            frame.push(arg1);
            frame.i32_const(0);
            frame.i32_store(2, 24);
            frame.push(arg1);
            frame.push(arg0);
            frame.i32_store(2, 12);
            frame.push(arg1);
            frame.push(local0);
            frame.i32_store(2, 8);
          }
          frame.push(local0);
          frame.i32_const(29);
          frame.i32_shr_u();
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_shl();
          local0 = frame.pop();
          frame.push(arg0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_and();
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          local2 = frame.peek();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        frame.push(local2);
        frame.push(arg1);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(arg0);
        frame.i32_store(2, 24);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local2);
      frame.push(local3);
      frame.i32_or();
      frame.i32_store(2, 412);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_store(2, 24);
      frame.push(local1);
      frame.push(arg1);
      frame.i32_store(2, 0);
    }
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_store(2, 8);
  }

  void _func015(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_const(256);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func016(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_load(2, 12);
      local0 = frame.peek();
      frame.push(arg1);
      frame.i32_load(2, 8);
      arg1 = frame.peek();
      frame.i32_eq();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.push(local0);
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 8);
    }
    frame.push(arg0);
    frame.push(arg0);
    frame.i32_load(2, 408);
    frame.i32_const(-2);
    frame.push(arg2);
    frame.i32_const(3);
    frame.i32_shr_u();
    frame.i32_rotl();
    frame.i32_and();
    frame.i32_store(2, 408);
  }

  void _func016(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 24);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 12);
          local1 = frame.peek();
          frame.push(arg1);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_const(16);
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_add();
          local1 = frame.peek();
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.select();
          frame.i32_add();
          frame.i32_load(2, 0);
          local3 = frame.peek();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(0);
          local1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_load(2, 8);
        local3 = frame.peek();
        frame.push(local1);
        frame.i32_store(2, 12);
        frame.push(local1);
        frame.push(local3);
        frame.i32_store(2, 8);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local1);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local2);
      frame.select();
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local2);
        local4 = frame.pop();
        block_label_2:
        {
          frame.push(local3);
          local1 = frame.peek();
          frame.i32_const(20);
          frame.i32_add();
          local2 = frame.peek();
          frame.i32_load(2, 0);
          local3 = frame.peek();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_const(16);
          frame.i32_add();
          local2 = frame.pop();
          frame.push(local1);
          frame.i32_load(2, 16);
          local3 = frame.pop();
        }
        frame.push(local3);
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
      frame.push(local4);
      frame.i32_const(0);
      frame.i32_store(2, 0);
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_load(2, 28);
          local2 = frame.peek();
          frame.i32_const(2);
          frame.i32_shl();
          frame.i32_add();
          local3 = frame.peek();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(16);
          frame.i32_const(20);
          frame.push(local0);
          frame.i32_load(2, 16);
          frame.push(arg1);
          frame.i32_eq();
          frame.select();
          frame.i32_add();
          frame.push(local1);
          frame.i32_store(2, 0);
          frame.push(local1);
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_1;
          }
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local3);
        frame.push(local1);
        frame.i32_store(2, 0);
        frame.push(local1);
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load(2, 412);
        frame.i32_const(-2);
        frame.push(local2);
        frame.i32_rotl();
        frame.i32_and();
        frame.i32_store(2, 412);
      }
      frame.push(local1);
      frame.push(local0);
      frame.i32_store(2, 24);
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 16);
        local3 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local1);
        frame.push(local3);
        frame.i32_store(2, 16);
        frame.push(local3);
        frame.push(local1);
        frame.i32_store(2, 24);
      }
      frame.push(arg1);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      local3 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local1);
      frame.i32_const(20);
      frame.i32_add();
      frame.push(local3);
      frame.i32_store(2, 0);
      frame.push(local3);
      frame.push(local1);
      frame.i32_store(2, 24);
    }
  }

  void _func017(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(1);
          frame.i32_and();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg1);
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          block_label_3:
          {
            frame.push(arg1);
            frame.push(local1);
            frame.i32_sub();
            arg1 = frame.peek();
            frame.push(arg0);
            frame.i32_load(2, 424);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_load(2, 4);
            local1 = frame.peek();
            frame.i32_const(3);
            frame.i32_and();
            frame.i32_const(3);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local0);
            frame.push(local1);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_store(2, 416);
            frame.push(local0);
            frame.push(arg2);
            frame.i32_store(2, 0);
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.push(local1);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func015(t0, t1, t2);
          }
        }
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 4);
          local1 = frame.peek();
          frame.i32_const(2);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(-2);
          frame.i32_and();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_add();
          frame.push(arg2);
          frame.i32_store(2, 0);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local0);
            frame.push(arg0);
            frame.i32_load(2, 428);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.push(arg0);
            frame.i32_load(2, 424);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(arg0);
            frame.push(local0);
            frame.push(local1);
            frame.i32_const(-8);
            frame.i32_and();
            local1 = frame.peek();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func015(t0, t1, t2);
            }
            frame.push(arg1);
            frame.push(local1);
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.peek();
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.push(arg0);
            frame.i32_load(2, 424);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.push(arg0);
            frame.push(arg2);
            frame.i32_store(2, 416);
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_store(2, 428);
          frame.push(arg0);
          frame.push(arg0);
          frame.i32_load(2, 420);
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.peek();
          frame.i32_store(2, 420);
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(arg0);
          frame.i32_load(2, 424);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 416);
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 424);
        }
        frame.push(arg1);
        frame.push(arg0);
        frame.i32_load(2, 416);
        frame.push(arg2);
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 424);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 416);
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_add();
        frame.push(arg2);
        frame.i32_store(2, 0);
      }
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func013(t0, t1, t2);
    }
  }

  i32 _func018(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 4);
    local0 = frame.peek();
    frame.i32_const(-8);
    frame.i32_and();
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_const(3);
                  frame.i32_and();
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_6;
                  }
                  frame.push(arg1);
                  frame.push(local1);
                  frame.i32_add();
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.push(arg2);
                  frame.i32_ge_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_5;
                  }
                  frame.push(local2);
                  frame.push(arg0);
                  frame.i32_load(2, 428);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_4;
                  }
                  frame.push(local2);
                  frame.push(arg0);
                  frame.i32_load(2, 424);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_3;
                  }
                  frame.i32_const(0);
                  local3 = frame.pop();
                  frame.push(local2);
                  frame.i32_load(2, 4);
                  local0 = frame.peek();
                  frame.i32_const(2);
                  frame.i32_and();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(-8);
                  frame.i32_and();
                  local0 = frame.peek();
                  frame.push(local1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg2);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(arg0);
                  frame.push(local2);
                  frame.push(local0);
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func015(t0, t1, t2);
                  }
                  frame.push(local1);
                  frame.push(arg2);
                  frame.i32_sub();
                  local0 = frame.peek();
                  frame.i32_const(16);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_2;
                  }
                  frame.push(arg1);
                  frame.push(arg1);
                  frame.i32_load(2, 4);
                  frame.i32_const(1);
                  frame.i32_and();
                  frame.push(arg2);
                  frame.i32_or();
                  frame.i32_const(2);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg1);
                  frame.push(arg2);
                  frame.i32_add();
                  arg2 = frame.peek();
                  frame.push(local0);
                  frame.i32_const(3);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg1);
                  frame.push(local1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(local1);
                  frame.i32_load(2, 4);
                  frame.i32_const(1);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg0);
                  frame.push(arg2);
                  frame.push(local0);
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func017(t0, t1, t2);
                  }
                  frame.unwindTo(0, 0);
                  break block_label_1;
                }
                frame.i32_const(0);
                local3 = frame.pop();
                frame.push(arg2);
                frame.i32_const(256);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_0;
                }
                frame.push(arg1);
                frame.i32_const(0);
                frame.push(local1);
                frame.push(arg2);
                frame.i32_sub();
                frame.i32_const(0x20001);
                frame.i32_lt_u();
                frame.select();
                frame.i32_const(0);
                frame.push(local1);
                frame.push(arg2);
                frame.i32_const(4);
                frame.i32_add();
                frame.i32_ge_u();
                frame.select();
                local3 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.push(local1);
              frame.push(arg2);
              frame.i32_sub();
              local1 = frame.peek();
              frame.i32_const(16);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_and();
              frame.push(arg2);
              frame.i32_or();
              frame.i32_const(2);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(arg2);
              frame.i32_add();
              arg2 = frame.peek();
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(local2);
              frame.push(local2);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg0);
              frame.push(arg2);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func017(t0, t1, t2);
              }
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.i32_const(0);
            local3 = frame.pop();
            frame.push(arg0);
            frame.i32_load(2, 420);
            frame.push(local1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(arg2);
            frame.i32_le_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.push(arg1);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_or();
            frame.i32_const(2);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_store(2, 428);
            frame.push(arg0);
            frame.push(local1);
            frame.push(arg2);
            frame.i32_sub();
            arg2 = frame.peek();
            frame.i32_store(2, 420);
            frame.push(local0);
            frame.push(arg2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 416);
          frame.push(local1);
          frame.i32_add();
          local1 = frame.peek();
          frame.push(arg2);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.push(arg2);
              frame.i32_sub();
              local2 = frame.peek();
              frame.i32_const(15);
              frame.i32_gt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_and();
              frame.push(local1);
              frame.i32_or();
              frame.i32_const(2);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              arg2 = frame.peek();
              frame.push(arg2);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.i32_const(0);
              local2 = frame.pop();
              frame.i32_const(0);
              arg2 = frame.pop();
              frame.unwindTo(1, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_and();
            frame.push(arg2);
            frame.i32_or();
            frame.i32_const(2);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.peek();
            frame.push(local2);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_add();
            local1 = frame.peek();
            frame.push(local2);
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.push(local1);
            frame.i32_load(2, 4);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
          }
          frame.push(arg0);
          frame.push(arg2);
          frame.i32_store(2, 424);
          frame.push(arg0);
          frame.push(local2);
          frame.i32_store(2, 416);
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(local1);
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_and();
        frame.i32_or();
        frame.i32_const(2);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local1);
        frame.i32_add();
        arg2 = frame.peek();
        frame.push(arg2);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
      }
      frame.push(arg1);
      return frame.pop();
    }
    frame.push(local3);
    return frame.pop();
  }

  void _func019(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_const(-8);
    frame.i32_add();
    local0 = frame.peek();
    frame.push(arg1);
    frame.i32_const(-4);
    frame.i32_add();
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-8);
    frame.i32_and();
    arg1 = frame.peek();
    frame.i32_add();
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local1);
              frame.i32_const(1);
              frame.i32_and();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.push(local0);
              frame.i32_load(2, 0);
              local1 = frame.peek();
              frame.push(arg1);
              frame.i32_add();
              arg1 = frame.pop();
              block_label_5:
              {
                frame.push(local0);
                frame.push(local1);
                frame.i32_sub();
                local0 = frame.peek();
                frame.push(arg0);
                frame.i32_load(2, 424);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_5;
                }
                frame.push(local2);
                frame.i32_load(2, 4);
                local1 = frame.peek();
                frame.i32_const(3);
                frame.i32_and();
                frame.i32_const(3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local2);
                frame.push(local1);
                frame.i32_const(-2);
                frame.i32_and();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg0);
                frame.push(arg1);
                frame.i32_store(2, 416);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_add();
                frame.push(arg1);
                frame.i32_store(2, 0);
              }
              frame.push(arg0);
              frame.push(local0);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func015(t0, t1, t2);
              }
            }
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local2);
                frame.i32_load(2, 4);
                local1 = frame.peek();
                frame.i32_const(2);
                frame.i32_and();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.push(local2);
                frame.push(local1);
                frame.i32_const(-2);
                frame.i32_and();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(arg1);
                frame.i32_add();
                frame.push(arg1);
                frame.i32_store(2, 0);
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(local2);
                      frame.push(arg0);
                      frame.i32_load(2, 428);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_8;
                      }
                      frame.push(local2);
                      frame.push(arg0);
                      frame.i32_load(2, 424);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_7;
                      }
                      frame.push(arg0);
                      frame.push(local2);
                      frame.push(local1);
                      frame.i32_const(-8);
                      frame.i32_and();
                      local1 = frame.peek();
                      {
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        _func015(t0, t1, t2);
                      }
                      frame.push(local0);
                      frame.push(local1);
                      frame.push(arg1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_const(1);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      frame.push(local0);
                      frame.push(arg1);
                      frame.i32_add();
                      frame.push(arg1);
                      frame.i32_store(2, 0);
                      frame.push(local0);
                      frame.push(arg0);
                      frame.i32_load(2, 424);
                      frame.i32_ne();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_4;
                      }
                      frame.push(arg0);
                      frame.push(arg1);
                      frame.i32_store(2, 416);
                    }
                    frame.push(arg0);
                    frame.push(local0);
                    frame.i32_store(2, 428);
                    frame.push(arg0);
                    frame.push(arg0);
                    frame.i32_load(2, 420);
                    frame.push(arg1);
                    frame.i32_add();
                    arg1 = frame.peek();
                    frame.i32_store(2, 420);
                    frame.push(local0);
                    frame.push(arg1);
                    frame.i32_const(1);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(local0);
                    frame.push(arg0);
                    frame.i32_load(2, 424);
                    frame.i32_eq();
                    if (frame.pop() != 0) {
                      frame.unwindTo(0, 0);
                      break block_label_6;
                    }
                    frame.unwindTo(0, 0);
                    break block_label_5;
                  }
                  frame.push(local0);
                  frame.push(arg0);
                  frame.i32_load(2, 416);
                  frame.push(arg1);
                  frame.i32_add();
                  arg1 = frame.peek();
                  frame.i32_const(1);
                  frame.i32_or();
                  frame.i32_store(2, 4);
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_store(2, 424);
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.i32_store(2, 416);
                  frame.push(local0);
                  frame.push(arg1);
                  frame.i32_add();
                  frame.push(arg1);
                  frame.i32_store(2, 0);
                  frame.unwindTo(0, 0);
                  break block_label_3;
                }
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store(2, 416);
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store(2, 424);
              }
              frame.push(arg0);
              frame.i32_load(2, 440);
              frame.push(arg1);
              frame.i32_ge_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              block_label_5:
              {
                frame.push(arg1);
                frame.i32_const(40);
                frame.i32_le_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(1, 0);
                  break block_label_5;
                }
                frame.push(arg0);
                frame.i32_const(128);
                frame.i32_add();
                arg1 = frame.pop();

                loop_label_6:
                for (;;) {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.i32_load(2, 0);
                    local2 = frame.peek();
                    frame.push(local0);
                    frame.i32_gt_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(2, 0);
                      break block_label_7;
                    }
                    frame.push(local2);
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_add();
                    frame.push(local0);
                    frame.i32_gt_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(1, 0);
                      break block_label_5;
                    }
                  }
                  frame.push(arg1);
                  frame.i32_load(2, 8);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) {
                    continue loop_label_6;
                  }
                  break;
                }
              }
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.i32_const(136);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) {
                    frame.unwindTo(1, 0);
                    break block_label_6;
                  }
                  frame.i32_const(0);
                  local0 = frame.pop();
                  frame.unwindTo(1, 0);
                  break block_label_5;
                }
                frame.i32_const(0);
                local0 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_add();
                  local0 = frame.pop();
                  frame.push(arg1);
                  frame.i32_load(2, 8);
                  arg1 = frame.peek();
                  if (frame.pop() != 0) {
                    continue loop_label_6;
                  }
                  break;
                }
              }
              frame.push(arg0);
              frame.i32_const(-1);
              frame.i32_store(2, 440);
              frame.push(arg0);
              frame.push(local0);
              frame.i32_const(0xfff);
              frame.push(local0);
              frame.i32_const(0xfff);
              frame.i32_gt_u();
              frame.select();
              frame.i32_store(2, 448);
            }
            frame.push(arg1);
            frame.i32_const(256);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(arg0);
            frame.push(local0);
            frame.push(arg1);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func014(t0, t1, t2);
            }
            frame.push(arg0);
            frame.push(arg0);
            frame.i32_load(2, 448);
            frame.i32_const(-1);
            frame.i32_add();
            local0 = frame.peek();
            frame.i32_store(2, 448);
            frame.push(local0);
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg0);
            frame.i32_const(136);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg1 = frame.peek();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.i32_const(0);
            local0 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_const(-8);
        frame.i32_and();
        frame.i32_add();
        frame.i32_const(144);
        frame.i32_add();
        local2 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load(2, 408);
            local1 = frame.peek();
            frame.i32_const(1);
            frame.push(arg1);
            frame.i32_const(3);
            frame.i32_shr_u();
            frame.i32_shl();
            arg1 = frame.peek();
            frame.i32_and();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local2);
            frame.i32_load(2, 8);
            arg0 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local1);
          frame.push(arg1);
          frame.i32_or();
          frame.i32_store(2, 408);
          frame.push(local2);
          arg0 = frame.pop();
        }
        frame.push(local2);
        frame.push(local0);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store(2, 12);
        frame.push(local0);
        frame.push(local2);
        frame.i32_store(2, 12);
        frame.push(local0);
        frame.push(arg0);
        frame.i32_store(2, 8);
      }
      frame.i32_const(0);
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 8);
        arg1 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(0xfff);
    frame.push(local0);
    frame.i32_const(0xfff);
    frame.i32_gt_u();
    frame.select();
    frame.i32_store(2, 448);
  }

  i32 _func020(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i64 local8 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(245);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.i32_const(0);
              local0 = frame.pop();
              frame.push(arg1);
              frame.i32_const(-0x10033);
              frame.i32_ge_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.push(arg1);
              frame.i32_const(11);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_const(-8);
              frame.i32_and();
              local1 = frame.pop();
              frame.push(arg0);
              frame.i32_load(2, 412);
              local2 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.i32_const(0);
              local3 = frame.pop();
              block_label_5:
              {
                frame.push(local1);
                frame.i32_const(256);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.i32_const(31);
                local3 = frame.pop();
                frame.push(local1);
                frame.i32_const(0xffffff);
                frame.i32_gt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local1);
                frame.i32_const(6);
                frame.push(arg1);
                frame.i32_const(8);
                frame.i32_shr_u();
                frame.i32_clz();
                arg1 = frame.peek();
                frame.i32_sub();
                frame.i32_shr_u();
                frame.i32_const(1);
                frame.i32_and();
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_shl();
                frame.i32_sub();
                frame.i32_const(62);
                frame.i32_add();
                local3 = frame.pop();
              }
              frame.i32_const(0);
              frame.push(local1);
              frame.i32_sub();
              local4 = frame.pop();
              block_label_5:
              {
                frame.push(arg0);
                frame.push(local3);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_add();
                frame.i32_load(2, 0);
                arg1 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.i32_const(0);
                local5 = frame.pop();
                frame.push(local1);
                frame.i32_const(0);
                frame.i32_const(25);
                frame.push(local3);
                frame.i32_const(1);
                frame.i32_shr_u();
                frame.i32_sub();
                frame.i32_const(31);
                frame.i32_and();
                frame.push(local3);
                frame.i32_const(31);
                frame.i32_eq();
                frame.select();
                frame.i32_shl();
                local0 = frame.pop();
                frame.i32_const(0);
                local6 = frame.pop();

                loop_label_6:
                for (;;) {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_const(-8);
                    frame.i32_and();
                    local7 = frame.peek();
                    frame.push(local1);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(4, 0);
                      break block_label_7;
                    }
                    frame.push(local7);
                    frame.push(local1);
                    frame.i32_sub();
                    local7 = frame.peek();
                    frame.push(local4);
                    frame.i32_ge_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(4, 0);
                      break block_label_7;
                    }
                    frame.push(local7);
                    local4 = frame.pop();
                    frame.push(arg1);
                    local6 = frame.pop();
                    frame.push(local7);
                    if (frame.pop() != 0) {
                      frame.unwindTo(4, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0);
                    local4 = frame.pop();
                    frame.push(arg1);
                    local6 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_3;
                  }
                  frame.push(arg1);
                  frame.i32_const(20);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  local7 = frame.peek();
                  frame.push(local5);
                  frame.push(local7);
                  frame.push(arg1);
                  frame.push(local0);
                  frame.i32_const(29);
                  frame.i32_shr_u();
                  frame.i32_const(4);
                  frame.i32_and();
                  frame.i32_add();
                  frame.i32_const(16);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  frame.i32_ne();
                  frame.select();
                  frame.push(local5);
                  frame.push(local7);
                  frame.select();
                  local5 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_shl();
                  local0 = frame.pop();
                  frame.push(arg1);
                  if (frame.pop() != 0) {
                    continue loop_label_6;
                  }
                  break;
                }
                block_label_6:
                {
                  frame.push(local5);
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(4, 0);
                    break block_label_6;
                  }
                  frame.push(local5);
                  arg1 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_3;
                }
                frame.push(local6);
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
              }
              frame.i32_const(0);
              local6 = frame.pop();
              frame.i32_const(2);
              frame.push(local3);
              frame.i32_shl();
              arg1 = frame.peek();
              frame.i32_const(0);
              frame.push(arg1);
              frame.i32_sub();
              frame.i32_or();
              frame.push(local2);
              frame.i32_and();
              arg1 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg0);
              frame.push(arg1);
              frame.i32_const(0);
              frame.push(arg1);
              frame.i32_sub();
              frame.i32_and();
              frame.i32_ctz();
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.i32_load(2, 0);
              arg1 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.i32_load(2, 408);
                  local0 = frame.peek();
                  frame.i32_const(16);
                  frame.push(arg1);
                  frame.i32_const(11);
                  frame.i32_add();
                  frame.i32_const(-8);
                  frame.i32_and();
                  frame.push(arg1);
                  frame.i32_const(11);
                  frame.i32_lt_u();
                  frame.select();
                  local1 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_shr_u();
                  local4 = frame.peek();
                  frame.i32_shr_u();
                  arg1 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_and();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_6;
                  }
                  frame.push(local1);
                  frame.push(arg0);
                  frame.i32_load(2, 416);
                  frame.i32_le_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_1;
                  }
                  frame.push(arg1);
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_5;
                  }
                  frame.push(arg0);
                  frame.i32_load(2, 412);
                  arg1 = frame.peek();
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_1;
                  }
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_and();
                  frame.i32_ctz();
                  frame.i32_const(2);
                  frame.i32_shl();
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  local5 = frame.peek();
                  frame.i32_load(2, 4);
                  frame.i32_const(-8);
                  frame.i32_and();
                  frame.push(local1);
                  frame.i32_sub();
                  local4 = frame.pop();
                  frame.push(local5);
                  local0 = frame.pop();

                  loop_label_7:
                  for (;;) {
                    block_label_8:
                    {
                      frame.push(local5);
                      frame.i32_load(2, 16);
                      arg1 = frame.peek();
                      if (frame.pop() != 0) {
                        frame.unwindTo(4, 0);
                        break block_label_8;
                      }
                      frame.push(local5);
                      frame.i32_const(20);
                      frame.i32_add();
                      frame.i32_load(2, 0);
                      arg1 = frame.peek();
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_4;
                      }
                    }
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_const(-8);
                    frame.i32_and();
                    frame.push(local1);
                    frame.i32_sub();
                    local5 = frame.peek();
                    frame.push(local4);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_lt_u();
                    local5 = frame.peek();
                    frame.select();
                    local4 = frame.pop();
                    frame.push(arg1);
                    frame.push(local0);
                    frame.push(local5);
                    frame.select();
                    local0 = frame.pop();
                    frame.push(arg1);
                    local5 = frame.pop();
                    continue loop_label_7;

                    break;
                  }
                }
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg0);
                    frame.push(arg1);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.i32_const(1);
                    frame.i32_and();
                    frame.push(local4);
                    frame.i32_add();
                    local1 = frame.peek();
                    frame.i32_const(3);
                    frame.i32_shl();
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_const(152);
                    frame.i32_add();
                    frame.i32_load(2, 0);
                    arg1 = frame.peek();
                    frame.i32_load(2, 8);
                    local4 = frame.peek();
                    frame.push(local5);
                    frame.i32_const(144);
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_eq();
                    if (frame.pop() != 0) {
                      frame.unwindTo(0, 0);
                      break block_label_7;
                    }
                    frame.push(local4);
                    frame.push(local5);
                    frame.i32_store(2, 12);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_store(2, 8);
                    frame.unwindTo(0, 0);
                    break block_label_6;
                  }
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_const(-2);
                  frame.push(local1);
                  frame.i32_rotl();
                  frame.i32_and();
                  frame.i32_store(2, 408);
                }
                frame.push(arg1);
                frame.push(local1);
                frame.i32_const(3);
                frame.i32_shl();
                local1 = frame.peek();
                frame.i32_const(3);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.push(local1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(local1);
                frame.i32_load(2, 4);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.i32_const(8);
                frame.i32_add();
                return frame.pop();
              }
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(arg0);
                  frame.push(arg1);
                  frame.push(local4);
                  frame.i32_shl();
                  frame.i32_const(2);
                  frame.push(local4);
                  frame.i32_shl();
                  arg1 = frame.peek();
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_or();
                  frame.i32_and();
                  arg1 = frame.peek();
                  frame.i32_const(0);
                  frame.push(arg1);
                  frame.i32_sub();
                  frame.i32_and();
                  frame.i32_ctz();
                  local4 = frame.peek();
                  frame.i32_const(3);
                  frame.i32_shl();
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_const(152);
                  frame.i32_add();
                  frame.i32_load(2, 0);
                  arg1 = frame.peek();
                  frame.i32_load(2, 8);
                  local5 = frame.peek();
                  frame.push(local6);
                  frame.i32_const(144);
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_6;
                  }
                  frame.push(local5);
                  frame.push(local6);
                  frame.i32_store(2, 12);
                  frame.push(local6);
                  frame.push(local5);
                  frame.i32_store(2, 8);
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.push(arg0);
                frame.push(local0);
                frame.i32_const(-2);
                frame.push(local4);
                frame.i32_rotl();
                frame.i32_and();
                frame.i32_store(2, 408);
              }
              frame.push(arg1);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              local5 = frame.peek();
              frame.push(local4);
              frame.i32_const(3);
              frame.i32_shl();
              local4 = frame.peek();
              frame.push(local1);
              frame.i32_sub();
              local1 = frame.peek();
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg1);
              frame.push(local4);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.push(local5);
              frame.push(local1);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func012(t0, t1, t2);
              }
              frame.push(arg1);
              frame.i32_const(8);
              frame.i32_add();
              return frame.pop();
            }
            frame.push(arg0);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func016(t0, t1);
            }
            block_label_4:
            {
              block_label_5:
              {
                frame.push(local4);
                frame.i32_const(16);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.push(local1);
                frame.i32_const(3);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(local0);
                frame.push(local1);
                frame.i32_add();
                arg1 = frame.peek();
                frame.push(local4);
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 4);
                frame.push(arg1);
                frame.push(local4);
                frame.i32_add();
                frame.push(local4);
                frame.i32_store(2, 0);
                frame.push(arg0);
                frame.push(arg1);
                frame.push(local4);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func012(t0, t1, t2);
                }
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.push(local4);
              frame.push(local1);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_const(3);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_add();
              arg1 = frame.peek();
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
            }
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            return frame.pop();
          }

          loop_label_3:
          for (;;) {
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_const(-8);
            frame.i32_and();
            local5 = frame.peek();
            frame.push(local1);
            frame.i32_ge_u();
            frame.push(local5);
            frame.push(local1);
            frame.i32_sub();
            local7 = frame.peek();
            frame.push(local4);
            frame.i32_lt_u();
            frame.i32_and();
            local0 = frame.pop();
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 16);
              local5 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.i32_const(20);
              frame.i32_add();
              frame.i32_load(2, 0);
              local5 = frame.pop();
            }
            frame.push(arg1);
            frame.push(local6);
            frame.push(local0);
            frame.select();
            local6 = frame.pop();
            frame.push(local7);
            frame.push(local4);
            frame.push(local0);
            frame.select();
            local4 = frame.pop();
            frame.push(local5);
            arg1 = frame.pop();
            frame.push(local5);
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
          frame.push(local6);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 416);
          arg1 = frame.peek();
          frame.push(local1);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local4);
          frame.push(arg1);
          frame.push(local1);
          frame.i32_sub();
          frame.i32_ge_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        frame.push(arg0);
        frame.push(local6);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func016(t0, t1);
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local4);
            frame.i32_const(16);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local6);
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(local6);
            frame.push(local1);
            frame.i32_add();
            arg1 = frame.peek();
            frame.push(local4);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local4);
            frame.i32_add();
            frame.push(local4);
            frame.i32_store(2, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(local4);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func013(t0, t1, t2);
            }
            frame.unwindTo(2, 0);
            break block_label_2;
          }
          frame.push(local6);
          frame.push(local4);
          frame.push(local1);
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_const(3);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(local6);
          frame.push(arg1);
          frame.i32_add();
          arg1 = frame.peek();
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
        }
        frame.push(local6);
        frame.i32_const(8);
        frame.i32_add();
        return frame.pop();
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(arg0);
                              frame.i32_load(2, 416);
                              arg1 = frame.peek();
                              frame.push(local1);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_12;
                              }
                              frame.push(arg0);
                              frame.i32_load(2, 420);
                              arg1 = frame.peek();
                              frame.push(local1);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_8;
                              }
                              frame.i32_const(0);
                              local0 = frame.pop();
                              frame.push(local1);
                              frame.i32_const(0x1002f);
                              frame.i32_add();
                              local4 = frame.peek();
                              frame.i32_const(16);
                              frame.i32_shr_u();
                              frame.memory_grow(0);
                              arg1 = frame.peek();
                              frame.i32_const(-1);
                              frame.i32_eq();
                              local5 = frame.peek();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_0;
                              }
                              frame.push(arg1);
                              frame.i32_const(16);
                              frame.i32_shl();
                              local6 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_0;
                              }
                              frame.push(arg0);
                              frame.push(arg0);
                              frame.i32_load(2, 432);
                              frame.i32_const(0);
                              frame.push(local4);
                              frame.i32_const(-0x10000);
                              frame.i32_and();
                              frame.push(local5);
                              frame.select();
                              local3 = frame.peek();
                              frame.i32_add();
                              arg1 = frame.peek();
                              frame.i32_store(2, 432);
                              frame.push(arg0);
                              frame.push(arg0);
                              frame.i32_load(2, 436);
                              local4 = frame.peek();
                              frame.push(arg1);
                              frame.push(local4);
                              frame.push(arg1);
                              frame.i32_gt_u();
                              frame.select();
                              frame.i32_store(2, 436);
                              frame.push(arg0);
                              frame.i32_load(2, 428);
                              local4 = frame.peek();
                              frame.i32_eqz();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_11;
                              }
                              frame.push(arg0);
                              frame.i32_const(128);
                              frame.i32_add();
                              local2 = frame.peek();
                              arg1 = frame.pop();

                              loop_label_13:
                              for (;;) {
                                frame.push(arg1);
                                frame.i32_load(2, 0);
                                local5 = frame.peek();
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                local7 = frame.peek();
                                frame.i32_add();
                                frame.push(local6);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(0, 0);
                                  break block_label_10;
                                }
                                frame.push(arg1);
                                frame.i32_load(2, 8);
                                arg1 = frame.peek();
                                if (frame.pop() != 0) {
                                  continue loop_label_13;
                                }
                                frame.unwindTo(0, 0);
                                break block_label_9;

                                break;
                              }
                            }
                            frame.push(arg0);
                            frame.i32_load(2, 424);
                            local4 = frame.pop();
                            block_label_12:
                            {
                              block_label_13:
                              {
                                frame.push(arg1);
                                frame.push(local1);
                                frame.i32_sub();
                                local5 = frame.peek();
                                frame.i32_const(15);
                                frame.i32_gt_u();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(0, 0);
                                  break block_label_13;
                                }
                                frame.push(arg0);
                                frame.i32_const(0);
                                frame.i32_store(2, 424);
                                frame.push(arg0);
                                frame.i32_const(0);
                                frame.i32_store(2, 416);
                                frame.push(local4);
                                frame.push(arg1);
                                frame.i32_const(3);
                                frame.i32_or();
                                frame.i32_store(2, 4);
                                frame.push(local4);
                                frame.push(arg1);
                                frame.i32_add();
                                arg1 = frame.peek();
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                frame.i32_const(1);
                                frame.i32_or();
                                frame.i32_store(2, 4);
                                frame.unwindTo(0, 0);
                                break block_label_12;
                              }
                              frame.push(arg0);
                              frame.push(local5);
                              frame.i32_store(2, 416);
                              frame.push(arg0);
                              frame.push(local4);
                              frame.push(local1);
                              frame.i32_add();
                              local0 = frame.peek();
                              frame.i32_store(2, 424);
                              frame.push(local0);
                              frame.push(local5);
                              frame.i32_const(1);
                              frame.i32_or();
                              frame.i32_store(2, 4);
                              frame.push(local4);
                              frame.push(arg1);
                              frame.i32_add();
                              frame.push(local5);
                              frame.i32_store(2, 0);
                              frame.push(local4);
                              frame.push(local1);
                              frame.i32_const(3);
                              frame.i32_or();
                              frame.i32_store(2, 4);
                            }
                            frame.push(local4);
                            frame.i32_const(8);
                            frame.i32_add();
                            return frame.pop();
                          }
                          frame.push(arg0);
                          frame.i32_load(2, 444);
                          arg1 = frame.peek();
                          frame.i32_eqz();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_7;
                          }
                          frame.push(arg1);
                          frame.push(local6);
                          frame.i32_gt_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_7;
                          }
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.push(arg1);
                        frame.i32_load(2, 12);
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_9;
                        }
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_gt_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_9;
                        }
                        frame.push(local4);
                        frame.push(local6);
                        frame.i32_lt_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_6;
                        }
                      }
                      frame.push(arg0);
                      frame.push(arg0);
                      frame.i32_load(2, 444);
                      arg1 = frame.peek();
                      frame.push(local6);
                      frame.push(arg1);
                      frame.push(local6);
                      frame.i32_lt_u();
                      frame.select();
                      frame.i32_store(2, 444);
                      frame.push(local6);
                      frame.push(local3);
                      frame.i32_add();
                      local5 = frame.pop();
                      frame.push(local2);
                      arg1 = frame.pop();
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            loop_label_12:
                            for (;;) {
                              frame.push(arg1);
                              frame.i32_load(2, 0);
                              frame.push(local5);
                              frame.i32_eq();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_11;
                              }
                              frame.push(arg1);
                              frame.i32_load(2, 8);
                              arg1 = frame.peek();
                              if (frame.pop() != 0) {
                                continue loop_label_12;
                              }
                              frame.unwindTo(0, 0);
                              break block_label_10;

                              break;
                            }
                          }
                          frame.push(arg1);
                          frame.i32_load(2, 12);
                          frame.i32_eqz();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_9;
                          }
                        }
                        frame.push(local2);
                        arg1 = frame.pop();
                        block_label_10:
                        {
                          loop_label_11:
                          for (;;) {
                            block_label_12:
                            {
                              frame.push(arg1);
                              frame.i32_load(2, 0);
                              local5 = frame.peek();
                              frame.push(local4);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_12;
                              }
                              frame.push(local5);
                              frame.push(arg1);
                              frame.i32_load(2, 4);
                              frame.i32_add();
                              local5 = frame.peek();
                              frame.push(local4);
                              frame.i32_gt_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_10;
                              }
                            }
                            frame.push(arg1);
                            frame.i32_load(2, 8);
                            arg1 = frame.pop();
                            continue loop_label_11;

                            break;
                          }
                        }
                        frame.push(local6);
                        frame.push(local3);
                        frame.i32_const(-40);
                        frame.i32_add();
                        arg1 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_or();
                        frame.i32_store(2, 4);
                        frame.push(local6);
                        frame.push(arg1);
                        frame.i32_add();
                        frame.i32_const(40);
                        frame.i32_store(2, 4);
                        frame.push(local4);
                        frame.push(local5);
                        frame.i32_const(-32);
                        frame.i32_add();
                        frame.i32_const(-8);
                        frame.i32_and();
                        frame.i32_const(-8);
                        frame.i32_add();
                        local7 = frame.peek();
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_const(16);
                        frame.i32_add();
                        frame.i32_lt_u();
                        frame.select();
                        local7 = frame.peek();
                        frame.i32_const(27);
                        frame.i32_store(2, 4);
                        frame.push(arg0);
                        frame.push(local6);
                        frame.i32_store(2, 428);
                        frame.push(arg0);
                        frame.i32_const(0x200000);
                        frame.i32_store(2, 440);
                        frame.push(arg0);
                        frame.push(arg1);
                        frame.i32_store(2, 420);
                        frame.push(local2);
                        frame.i64_load(2, 0);
                        local8 = frame.pop();
                        frame.push(local7);
                        frame.i32_const(16);
                        frame.i32_add();
                        frame.push(local2);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.i64_load(2, 0);
                        frame.i64_store(2, 0);
                        frame.push(local7);
                        frame.push(local8);
                        frame.i64_store(2, 8);
                        frame.push(arg0);
                        frame.i32_const(140);
                        frame.i32_add();
                        frame.i32_const(0);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.i32_const(132);
                        frame.i32_add();
                        frame.push(local3);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.push(local6);
                        frame.i32_store(2, 128);
                        frame.push(arg0);
                        frame.i32_const(136);
                        frame.i32_add();
                        frame.push(local7);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.i32_store(2, 0);
                        frame.push(local7);
                        frame.i32_const(28);
                        frame.i32_add();
                        arg1 = frame.pop();

                        loop_label_10:
                        for (;;) {
                          frame.push(arg1);
                          frame.i32_const(7);
                          frame.i32_store(2, 0);
                          frame.push(arg1);
                          frame.i32_const(4);
                          frame.i32_add();
                          arg1 = frame.peek();
                          frame.push(local5);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) {
                            continue loop_label_10;
                          }
                          break;
                        }
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_eq();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_1;
                        }
                        frame.push(local7);
                        frame.push(local7);
                        frame.i32_load(2, 4);
                        frame.i32_const(-2);
                        frame.i32_and();
                        frame.i32_store(2, 4);
                        frame.push(local4);
                        frame.push(local7);
                        frame.push(local4);
                        frame.i32_sub();
                        arg1 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_or();
                        frame.i32_store(2, 4);
                        frame.push(local7);
                        frame.push(arg1);
                        frame.i32_store(2, 0);
                        frame.push(arg0);
                        frame.push(local4);
                        frame.push(arg1);
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func013(t0, t1, t2);
                        }
                        frame.unwindTo(0, 0);
                        break block_label_1;
                      }
                      frame.push(arg1);
                      frame.push(local6);
                      frame.i32_store(2, 0);
                      frame.push(arg1);
                      frame.push(arg1);
                      frame.i32_load(2, 4);
                      frame.push(local3);
                      frame.i32_add();
                      frame.i32_store(2, 4);
                      frame.push(local6);
                      frame.push(local1);
                      frame.i32_const(3);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      frame.push(local5);
                      frame.push(local6);
                      frame.push(local1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_sub();
                      local1 = frame.pop();
                      block_label_9:
                      {
                        frame.push(local5);
                        frame.push(arg0);
                        frame.i32_load(2, 428);
                        frame.i32_eq();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_9;
                        }
                        frame.push(local5);
                        frame.push(arg0);
                        frame.i32_load(2, 424);
                        frame.i32_eq();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_5;
                        }
                        frame.push(local5);
                        frame.i32_load(2, 4);
                        local4 = frame.peek();
                        frame.i32_const(3);
                        frame.i32_and();
                        frame.i32_const(1);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_4;
                        }
                        frame.push(arg0);
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_const(-8);
                        frame.i32_and();
                        local4 = frame.peek();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func015(t0, t1, t2);
                        }
                        frame.push(local4);
                        frame.push(local1);
                        frame.i32_add();
                        local1 = frame.pop();
                        frame.push(local5);
                        frame.push(local4);
                        frame.i32_add();
                        local5 = frame.peek();
                        frame.i32_load(2, 4);
                        local4 = frame.pop();
                        frame.unwindTo(0, 0);
                        break block_label_4;
                      }
                      frame.push(arg0);
                      frame.push(arg1);
                      frame.i32_store(2, 428);
                      frame.push(arg0);
                      frame.push(arg0);
                      frame.i32_load(2, 420);
                      frame.push(local1);
                      frame.i32_add();
                      local1 = frame.peek();
                      frame.i32_store(2, 420);
                      frame.push(arg1);
                      frame.push(local1);
                      frame.i32_const(1);
                      frame.i32_or();
                      frame.i32_store(2, 4);
                      frame.unwindTo(0, 0);
                      break block_label_3;
                    }
                    frame.push(arg0);
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_sub();
                    local4 = frame.peek();
                    frame.i32_store(2, 420);
                    frame.push(arg0);
                    frame.push(arg0);
                    frame.i32_load(2, 428);
                    arg1 = frame.peek();
                    frame.push(local1);
                    frame.i32_add();
                    local5 = frame.peek();
                    frame.i32_store(2, 428);
                    frame.push(local5);
                    frame.push(local4);
                    frame.i32_const(1);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_const(3);
                    frame.i32_or();
                    frame.i32_store(2, 4);
                    frame.push(arg1);
                    frame.i32_const(8);
                    frame.i32_add();
                    local0 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(arg0);
                  frame.push(local6);
                  frame.i32_store(2, 444);
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(arg1);
                frame.push(local7);
                frame.push(local3);
                frame.i32_add();
                frame.i32_store(2, 4);
                frame.push(arg0);
                frame.i32_load(2, 428);
                arg1 = frame.peek();
                frame.i32_const(15);
                frame.i32_add();
                frame.i32_const(-8);
                frame.i32_and();
                local4 = frame.peek();
                frame.i32_const(-4);
                frame.i32_add();
                frame.push(arg1);
                frame.push(local4);
                frame.i32_sub();
                frame.push(arg0);
                frame.i32_load(2, 420);
                frame.push(local3);
                frame.i32_add();
                local5 = frame.peek();
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_const(1);
                frame.i32_or();
                frame.i32_store(2, 0);
                frame.push(arg0);
                frame.i32_const(0x200000);
                frame.i32_store(2, 440);
                frame.push(arg0);
                frame.push(local4);
                frame.i32_const(-8);
                frame.i32_add();
                frame.i32_store(2, 428);
                frame.push(arg0);
                frame.push(local6);
                frame.i32_store(2, 420);
                frame.push(arg1);
                frame.push(local5);
                frame.i32_add();
                frame.i32_const(40);
                frame.i32_store(2, 4);
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg1);
              frame.push(arg0);
              frame.i32_load(2, 416);
              frame.push(local1);
              frame.i32_add();
              local1 = frame.peek();
              frame.i32_const(1);
              frame.i32_or();
              frame.i32_store(2, 4);
              frame.push(arg0);
              frame.push(arg1);
              frame.i32_store(2, 424);
              frame.push(arg0);
              frame.push(local1);
              frame.i32_store(2, 416);
              frame.push(arg1);
              frame.push(local1);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local5);
            frame.push(local4);
            frame.i32_const(-2);
            frame.i32_and();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_or();
            frame.i32_store(2, 4);
            frame.push(arg1);
            frame.push(local1);
            frame.i32_add();
            frame.push(local1);
            frame.i32_store(2, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.push(local1);
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func013(t0, t1, t2);
            }
          }
          frame.push(local6);
          frame.i32_const(8);
          frame.i32_add();
          return frame.pop();
        }
        frame.push(arg0);
        frame.i32_const(0xfff);
        frame.i32_store(2, 448);
        frame.push(arg0);
        frame.push(local6);
        frame.i32_store(2, 128);
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(140);
        frame.i32_add();
        frame.i32_const(0);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(132);
        frame.i32_add();
        frame.push(local3);
        frame.i32_store(2, 0);

        loop_label_2:
        for (;;) {
          frame.push(arg0);
          frame.push(arg1);
          frame.i32_add();
          local4 = frame.peek();
          frame.i32_const(152);
          frame.i32_add();
          frame.push(local4);
          frame.i32_const(144);
          frame.i32_add();
          local5 = frame.peek();
          frame.i32_store(2, 0);
          frame.push(local4);
          frame.i32_const(156);
          frame.i32_add();
          frame.push(local5);
          frame.i32_store(2, 0);
          frame.push(arg1);
          frame.i32_const(8);
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_const(256);
          frame.i32_ne();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        frame.push(local6);
        frame.push(local3);
        frame.i32_const(-40);
        frame.i32_add();
        arg1 = frame.peek();
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(local6);
        frame.i32_store(2, 428);
        frame.push(arg0);
        frame.i32_const(0x200000);
        frame.i32_store(2, 440);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 420);
        frame.push(local6);
        frame.push(arg1);
        frame.i32_add();
        frame.i32_const(40);
        frame.i32_store(2, 4);
      }
      frame.push(arg0);
      frame.i32_load(2, 420);
      arg1 = frame.peek();
      frame.push(local1);
      frame.i32_le_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_sub();
      local4 = frame.peek();
      frame.i32_store(2, 420);
      frame.push(arg0);
      frame.push(arg0);
      frame.i32_load(2, 428);
      arg1 = frame.peek();
      frame.push(local1);
      frame.i32_add();
      local5 = frame.peek();
      frame.i32_store(2, 428);
      frame.push(local5);
      frame.push(local4);
      frame.i32_const(1);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg1);
      frame.push(local1);
      frame.i32_const(3);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_add();
      return frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func021(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.i32_const(-0x10033);
      frame.push(arg1);
      frame.i32_const(16);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_sub();
      frame.push(arg2);
      frame.i32_le_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_const(16);
      frame.push(arg2);
      frame.i32_const(11);
      frame.i32_add();
      frame.i32_const(-8);
      frame.i32_and();
      frame.push(arg2);
      frame.i32_const(11);
      frame.i32_lt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func020(t0, t1));
      }
      arg2 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg2);
      frame.i32_const(-8);
      frame.i32_add();
      local0 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_const(-1);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(arg2);
          frame.i32_and();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local0);
          arg1 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_const(-4);
        frame.i32_add();
        local3 = frame.peek();
        frame.i32_load(2, 0);
        local4 = frame.peek();
        frame.i32_const(-8);
        frame.i32_and();
        frame.push(local2);
        frame.push(arg2);
        frame.i32_add();
        frame.i32_const(0);
        frame.push(arg1);
        frame.i32_sub();
        frame.i32_and();
        frame.i32_const(-8);
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_const(0);
        frame.push(arg1);
        frame.push(arg2);
        frame.push(local0);
        frame.i32_sub();
        frame.i32_const(16);
        frame.i32_gt_u();
        frame.select();
        frame.i32_add();
        arg1 = frame.peek();
        frame.push(local0);
        frame.i32_sub();
        arg2 = frame.peek();
        frame.i32_sub();
        local2 = frame.pop();
        block_label_2:
        {
          frame.push(local4);
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.push(local2);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_and();
          frame.i32_or();
          frame.i32_const(2);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg1);
          frame.push(local2);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(local3);
          frame.push(arg2);
          frame.push(local3);
          frame.i32_load(2, 0);
          frame.i32_const(1);
          frame.i32_and();
          frame.i32_or();
          frame.i32_const(2);
          frame.i32_or();
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_add();
          local2 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 4);
          frame.i32_const(1);
          frame.i32_or();
          frame.i32_store(2, 4);
          frame.push(arg0);
          frame.push(local0);
          frame.push(arg2);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func017(t0, t1, t2);
          }
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 0);
        local0 = frame.pop();
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local0);
        frame.push(arg2);
        frame.i32_add();
        frame.i32_store(2, 0);
      }
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg2 = frame.peek();
        frame.i32_const(3);
        frame.i32_and();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_const(-8);
        frame.i32_and();
        local0 = frame.peek();
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_le_u();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(local1);
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_and();
        frame.i32_or();
        frame.i32_const(2);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local1);
        frame.i32_add();
        arg2 = frame.peek();
        frame.push(local0);
        frame.push(local1);
        frame.i32_sub();
        local1 = frame.peek();
        frame.i32_const(3);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local0);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.i32_const(1);
        frame.i32_or();
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(arg2);
        frame.push(local1);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func017(t0, t1, t2);
        }
      }
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_add();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  void _func022(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func023(i32 arg0) {
    final frame = Frame(this);
  }

  i32 _func024(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(128);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 12);
              frame.push(arg1);
              frame.i32_const(0x800);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.push(arg1);
              frame.i32_const(0x10000);
              frame.i32_ge_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 14);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(12);
              frame.i32_shr_u();
              frame.i32_const(224);
              frame.i32_or();
              frame.i32_store8(0, 12);
              frame.push(local0);
              frame.push(arg1);
              frame.i32_const(6);
              frame.i32_shr_u();
              frame.i32_const(63);
              frame.i32_and();
              frame.i32_const(128);
              frame.i32_or();
              frame.i32_store8(0, 13);
              frame.i32_const(3);
              arg1 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load(2, 8);
              local1 = frame.peek();
              frame.push(arg0);
              frame.i32_load(2, 0);
              frame.i32_ne();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(arg0);
              frame.push(local1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func025(t0, t1);
              }
              frame.push(arg0);
              frame.i32_load(2, 8);
              local1 = frame.pop();
            }
            frame.push(arg0);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            frame.i32_store(2, 8);
            frame.push(arg0);
            frame.i32_load(2, 4);
            frame.push(local1);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_store8(0, 0);
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(63);
          frame.i32_and();
          frame.i32_const(128);
          frame.i32_or();
          frame.i32_store8(0, 13);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(6);
          frame.i32_shr_u();
          frame.i32_const(192);
          frame.i32_or();
          frame.i32_store8(0, 12);
          frame.i32_const(2);
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 15);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(6);
        frame.i32_shr_u();
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 14);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_shr_u();
        frame.i32_const(63);
        frame.i32_and();
        frame.i32_const(128);
        frame.i32_or();
        frame.i32_store8(0, 13);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(18);
        frame.i32_shr_u();
        frame.i32_const(7);
        frame.i32_and();
        frame.i32_const(240);
        frame.i32_or();
        frame.i32_store8(0, 12);
        frame.i32_const(4);
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func026(t0, t1, t2);
      }
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    return frame.pop();
  }

  void _func025(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func032(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 12);
        arg1 = frame.peek();
        frame.i32_const(-0x7fffffff);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func026(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_sub();
      frame.push(arg1);
      frame.push(arg2);
      frame.i32_sub();
      arg1 = frame.peek();
      frame.i32_ge_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local0);
      frame.push(arg1);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func031(t0, t1, t2);
      }
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.push(local0);
    frame.i32_add();
    frame.push(arg2);
    frame.push(arg1);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func002(t0, t1, t2));
    }
    frame.drop();
    frame.push(arg0);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_add();
    frame.i32_store(2, 8);
  }

  i32 _func027(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_store(2, 4);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 8);
    frame.push(local0);
    frame.i32_const(4);
    frame.i32_add();
    frame.i32_const(0xf4240);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func038(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func028(i32 arg0, i32 arg1, i32 arg2) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    frame.push(arg1);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func026(t0, t1, t2);
    }
    frame.i32_const(0);
    return frame.pop();
  }

  void _func029(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_const(-1);
        frame.i32_gt_s();
        local0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            if (frame.pop() != 0) {
              frame.unwindTo(1, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.push(local0);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func008(t0, t1));
            }
            arg2 = frame.pop();
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.push(local0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func010(t0, t1));
          }
          arg2 = frame.pop();
        }
        frame.push(arg2);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.push(local0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func030(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func034(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func031(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func032(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 12);
        arg2 = frame.peek();
        frame.i32_const(-0x7fffffff);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        frame.push(arg2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func032(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.push(arg3);
      frame.i32_add();
      arg3 = frame.peek();
      frame.push(arg2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      arg2 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local1 = frame.peek();
      frame.push(arg3);
      frame.push(local1);
      frame.push(arg3);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(8);
      frame.push(arg3);
      frame.i32_const(8);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(-1);
      frame.i32_xor();
      frame.i32_const(31);
      frame.i32_shr_u();
      local1 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(-1);
          frame.i32_xor();
          frame.i32_const(31);
          frame.i32_shr_u();
          frame.i32_store(2, 24);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(arg3);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        arg2 = frame.pop();
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_store(2, 4);
        frame.i32_const(-0x7fffffff);
        local1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 4);
      arg3 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg3);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func033(i32 arg0, i32 arg1, i32 arg2, i32 arg3, i32 arg4) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(arg1);
                      frame.i32_const(0);
                      frame.i32_lt_s();
                      if (frame.pop() != 0) {
                        frame.unwindTo(1, 0);
                        break block_label_8;
                      }
                      frame.push(arg3);
                      frame.i32_load(2, 8);
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(1, 0);
                        break block_label_6;
                      }
                      frame.push(arg3);
                      frame.i32_load(2, 4);
                      local0 = frame.peek();
                      if (frame.pop() != 0) {
                        frame.unwindTo(1, 0);
                        break block_label_7;
                      }
                      frame.push(arg1);
                      if (frame.pop() != 0) {
                        frame.unwindTo(1, 0);
                        break block_label_5;
                      }
                      frame.unwindTo(0, 0);
                      break block_label_3;
                    }
                    frame.push(arg0);
                    frame.i32_const(8);
                    frame.i32_add();
                    frame.i32_const(0);
                    frame.i32_store(2, 0);
                    frame.unwindTo(0, 0);
                    break block_label_1;
                  }
                  frame.push(arg3);
                  frame.i32_load(2, 0);
                  frame.push(local0);
                  frame.push(arg2);
                  frame.push(arg1);
                  {
                    var t3 = frame.pop();
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    frame.push(_func009(t0, t1, t2, t3));
                  }
                  arg3 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(arg1);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_3;
                }
              }
              frame.push(arg1);
              frame.push(arg2);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func008(t0, t1));
              }
              arg3 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(arg0);
            frame.push(arg1);
            frame.i32_store(2, 4);
            frame.push(arg0);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_const(0);
            frame.i32_store(2, 0);
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg2);
          arg3 = frame.pop();
        }
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(arg3);
          frame.i32_store(2, 4);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(arg1);
          frame.i32_store(2, 0);
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(arg2);
        frame.i32_store(2, 0);
      }
      frame.i32_const(1);
      arg1 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func034(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func011(t0, t1);
    }
    throw Trap('unreachable');
  }

  void _func035(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(12);
            frame.i32_add();
            frame.i32_load(2, 0);
            local1 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local1);
            frame.i32_const(3);
            frame.i32_shl();
            local2 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 8);
            local3 = frame.peek();
            frame.i32_const(4);
            frame.i32_add();
            local1 = frame.pop();
            frame.i32_const(0);
            local4 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local1);
              frame.i32_load(2, 0);
              frame.push(local4);
              frame.i32_add();
              local4 = frame.pop();
              frame.push(local1);
              frame.i32_const(8);
              frame.i32_add();
              local1 = frame.pop();
              frame.push(local2);
              frame.i32_const(-8);
              frame.i32_add();
              local2 = frame.peek();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.push(arg1);
            frame.i32_const(20);
            frame.i32_add();
            frame.i32_load(2, 0);
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local4);
            local1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.i32_const(0);
          local4 = frame.pop();
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(arg1);
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_load(2, 0);
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local3);
        frame.i32_load(2, 4);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        local1 = frame.pop();
        frame.push(local4);
        frame.i32_const(16);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      frame.i32_const(0);
      frame.push(local4);
      frame.push(local4);
      frame.i32_add();
      local1 = frame.peek();
      frame.push(local1);
      frame.push(local4);
      frame.i32_lt_u();
      frame.select();
      local1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local1);
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func029(t0, t1, t2);
    }
    frame.push(local0);
    frame.i64_load(3, 8);
    local5 = frame.pop();
    frame.push(arg0);
    frame.i32_const(0);
    frame.i32_store(2, 8);
    frame.push(arg0);
    frame.push(local5);
    frame.i64_store(2, 0);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 20);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 24);
    block_label_0:
    {
      frame.push(local0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(0xf4240);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func038(t0, t1, t2));
      }
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(3, 0);
        break block_label_0;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func036(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _func037(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.drop();

    loop_label_0:
    for (;;) {
      continue loop_label_0;

      break;
    }
    return frame.pop();
  }

  i32 _func038(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(3);
    frame.i32_store8(0, 56);
    frame.push(local0);
    frame.i64_const(0x2000000000);
    frame.i64_store(3, 48);
    frame.i32_const(0);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 40);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 32);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 28);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 24);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_load(2, 0);
            local2 = frame.peek();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg2);
            frame.i32_const(20);
            frame.i32_add();
            frame.i32_load(2, 0);
            arg0 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(arg2);
            frame.i32_load(2, 16);
            arg1 = frame.pop();
            frame.push(arg0);
            frame.i32_const(3);
            frame.i32_shl();
            local3 = frame.pop();
            frame.push(arg0);
            frame.i32_const(-1);
            frame.i32_add();
            frame.i32_const(0x1fffffff);
            frame.i32_and();
            frame.i32_const(1);
            frame.i32_add();
            local1 = frame.pop();
            frame.push(arg2);
            frame.i32_load(2, 8);
            arg0 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_add();
                frame.i32_load(2, 0);
                local4 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_load(2, 24);
                frame.push(arg0);
                frame.i32_load(2, 0);
                frame.push(local4);
                frame.push(local0);
                frame.i32_load(2, 28);
                frame.i32_load(2, 12);
                {
                  var func = table0[frame.pop()] as FunctionType0?;
                  if (func == null) throw Trap('uninitialized element');
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1, t2));
                }
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_1;
                }
              }
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              frame.push(arg1);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_load(2, 0);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg1);
              frame.i32_const(8);
              frame.i32_add();
              arg1 = frame.pop();
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              arg0 = frame.pop();
              frame.push(local3);
              frame.i32_const(-8);
              frame.i32_add();
              local3 = frame.peek();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              frame.unwindTo(0, 0);
              break block_label_2;

              break;
            }
          }
          frame.push(arg2);
          frame.i32_load(2, 4);
          arg1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(5);
          frame.i32_shl();
          local5 = frame.pop();
          frame.push(arg1);
          frame.i32_const(-1);
          frame.i32_add();
          frame.i32_const(0x7ffffff);
          frame.i32_and();
          frame.i32_const(1);
          frame.i32_add();
          local1 = frame.pop();
          frame.push(arg2);
          frame.i32_load(2, 8);
          arg0 = frame.pop();
          frame.i32_const(0);
          local3 = frame.pop();

          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg1 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_load(2, 24);
              frame.push(arg0);
              frame.i32_load(2, 0);
              frame.push(arg1);
              frame.push(local0);
              frame.i32_load(2, 28);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()] as FunctionType0?;
                if (func == null) throw Trap('uninitialized element');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
            }
            frame.push(local0);
            frame.push(local2);
            frame.push(local3);
            frame.i32_add();
            arg1 = frame.peek();
            frame.i32_const(28);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            frame.i32_store8(0, 56);
            frame.push(local0);
            frame.push(arg1);
            frame.i32_const(20);
            frame.i32_add();
            frame.i64_load(2, 0);
            frame.i64_store(3, 48);
            frame.push(local0);
            frame.i32_const(16);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_load(2, 16);
            local4 = frame.peek();
            frame.push(arg1);
            frame.i32_const(12);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func039(t0, t1, t2);
            }
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(3, 16);
            frame.i64_store(3, 32);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local4);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func039(t0, t1, t2);
            }
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(3, 8);
            frame.i64_store(3, 40);
            frame.push(local4);
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_const(3);
            frame.i32_shl();
            frame.i32_add();
            arg1 = frame.peek();
            frame.i32_load(2, 0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_load(2, 4);
            {
              var func = table0[frame.pop()] as FunctionType1?;
              if (func == null) throw Trap('uninitialized element');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(arg0);
            frame.i32_const(8);
            frame.i32_add();
            arg0 = frame.pop();
            frame.push(local5);
            frame.push(local3);
            frame.i32_const(32);
            frame.i32_add();
            local3 = frame.peek();
            frame.i32_ne();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        block_label_2:
        {
          frame.push(local1);
          frame.push(arg2);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_ge_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_load(2, 24);
          frame.push(arg2);
          frame.i32_load(2, 8);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          arg1 = frame.peek();
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.push(local0);
          frame.i32_load(2, 28);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()] as FunctionType0?;
            if (func == null) throw Trap('uninitialized element');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(1);
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  void _func039(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_load(2, 0);
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(0, 0);
                break block_label_3;

              case 1:
                frame.unwindTo(0, 0);
                break block_label_2;

              case 2:
                frame.unwindTo(0, 0);
                break block_label_0;

              default:
                frame.unwindTo(0, 0);
                break block_label_3;
            }
          }
          frame.push(arg2);
          frame.i32_const(4);
          frame.i32_add();
          local1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_load(2, 4);
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        arg2 = frame.peek();
        frame.i32_load(2, 4);
        frame.i32_const(5);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg2);
        frame.i32_load(2, 0);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.i32_load(2, 0);
      local1 = frame.pop();
      frame.i32_const(1);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  i32 _func040(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 16);
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 8);
          local1 = frame.peek();
          frame.i32_const(1);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        block_label_2:
        {
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.push(arg2);
          frame.i32_add();
          local2 = frame.pop();
          frame.push(arg0);
          frame.i32_const(20);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_const(1);
          frame.i32_add();
          local3 = frame.pop();
          frame.i32_const(0);
          local4 = frame.pop();
          frame.push(arg1);
          local5 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local5);
              local0 = frame.pop();
              frame.push(local3);
              frame.i32_const(-1);
              frame.i32_add();
              local3 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_3;
              }
              frame.push(local0);
              frame.push(local2);
              frame.i32_eq();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_load8_s(0, 0);
                  local6 = frame.peek();
                  frame.i32_const(-1);
                  frame.i32_le_s();
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_6;
                  }
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_add();
                  local5 = frame.pop();
                  frame.push(local6);
                  frame.i32_const(255);
                  frame.i32_and();
                  local6 = frame.pop();
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_load8_u(0, 1);
                frame.i32_const(63);
                frame.i32_and();
                local5 = frame.pop();
                frame.push(local6);
                frame.i32_const(31);
                frame.i32_and();
                local7 = frame.pop();
                block_label_6:
                {
                  frame.push(local6);
                  frame.i32_const(-33);
                  frame.i32_gt_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_6;
                  }
                  frame.push(local7);
                  frame.i32_const(6);
                  frame.i32_shl();
                  frame.push(local5);
                  frame.i32_or();
                  local6 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(2);
                  frame.i32_add();
                  local5 = frame.pop();
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local5);
                frame.i32_const(6);
                frame.i32_shl();
                frame.push(local0);
                frame.i32_load8_u(0, 2);
                frame.i32_const(63);
                frame.i32_and();
                frame.i32_or();
                local5 = frame.pop();
                block_label_6:
                {
                  frame.push(local6);
                  frame.i32_const(-16);
                  frame.i32_ge_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_6;
                  }
                  frame.push(local5);
                  frame.push(local7);
                  frame.i32_const(12);
                  frame.i32_shl();
                  frame.i32_or();
                  local6 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(3);
                  frame.i32_add();
                  local5 = frame.pop();
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local5);
                frame.i32_const(6);
                frame.i32_shl();
                frame.push(local0);
                frame.i32_load8_u(0, 3);
                frame.i32_const(63);
                frame.i32_and();
                frame.i32_or();
                frame.push(local7);
                frame.i32_const(18);
                frame.i32_shl();
                frame.i32_const(0x1c0000);
                frame.i32_and();
                frame.i32_or();
                local6 = frame.peek();
                frame.i32_const(0x110000);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(local0);
                frame.i32_const(4);
                frame.i32_add();
                local5 = frame.pop();
              }
              frame.push(local4);
              frame.push(local0);
              frame.i32_sub();
              frame.push(local5);
              frame.i32_add();
              local4 = frame.pop();
              frame.push(local6);
              frame.i32_const(0x110000);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              frame.unwindTo(0, 0);
              break block_label_2;

              break;
            }
          }
          frame.push(local0);
          frame.push(local2);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          block_label_3:
          {
            frame.push(local0);
            frame.i32_load8_s(0, 0);
            local5 = frame.peek();
            frame.i32_const(-1);
            frame.i32_gt_s();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local5);
            frame.i32_const(-32);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local5);
            frame.i32_const(-16);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_load8_u(0, 2);
            frame.i32_const(63);
            frame.i32_and();
            frame.i32_const(6);
            frame.i32_shl();
            frame.push(local0);
            frame.i32_load8_u(0, 1);
            frame.i32_const(63);
            frame.i32_and();
            frame.i32_const(12);
            frame.i32_shl();
            frame.i32_or();
            frame.push(local0);
            frame.i32_load8_u(0, 3);
            frame.i32_const(63);
            frame.i32_and();
            frame.i32_or();
            frame.push(local5);
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_const(18);
            frame.i32_shl();
            frame.i32_const(0x1c0000);
            frame.i32_and();
            frame.i32_or();
            frame.i32_const(0x110000);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              block_label_5:
              {
                frame.push(local4);
                frame.push(arg2);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.i32_const(0);
                local0 = frame.pop();
                frame.push(local4);
                frame.push(arg2);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_4;
                }
                frame.unwindTo(2, 0);
                break block_label_3;
              }
              frame.i32_const(0);
              local0 = frame.pop();
              frame.push(arg1);
              frame.push(local4);
              frame.i32_add();
              frame.i32_load8_s(0, 0);
              frame.i32_const(-64);
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_3;
              }
            }
            frame.push(arg1);
            local0 = frame.pop();
          }
          frame.push(local4);
          frame.push(arg2);
          frame.push(local0);
          frame.select();
          arg2 = frame.pop();
          frame.push(local0);
          frame.push(arg1);
          frame.push(local0);
          frame.select();
          arg1 = frame.pop();
        }
        block_label_2:
        {
          frame.push(local1);
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.push(arg1);
          frame.push(arg2);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()] as FunctionType0?;
            if (func == null) throw Trap('uninitialized element');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          return frame.pop();
        }
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local3 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(16);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.push(arg2);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func041(t0, t1));
            }
            local5 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local5 = frame.pop();
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg2);
          local6 = frame.pop();
          frame.push(arg1);
          local0 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            frame.push(local0);
            frame.i32_load8_s(0, 0);
            frame.i32_const(-65);
            frame.i32_gt_s();
            frame.i32_add();
            local5 = frame.pop();
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_add();
            local0 = frame.pop();
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_add();
            local6 = frame.peek();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        block_label_2:
        {
          frame.push(local3);
          frame.push(local5);
          frame.i32_le_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local3);
          frame.push(local5);
          frame.i32_sub();
          local5 = frame.peek();
          local3 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.i32_const(0);
                frame.push(arg0);
                frame.i32_load8_u(0, 32);
                local0 = frame.peek();
                frame.push(local0);
                frame.i32_const(3);
                frame.i32_eq();
                frame.select();
                frame.i32_const(3);
                frame.i32_and();
                local0 = frame.peek();
                var t0 = frame.pop();
                switch (t0) {
                  case 0:
                    frame.unwindTo(1, 0);
                    break block_label_3;

                  case 1:
                    frame.unwindTo(1, 0);
                    break block_label_5;

                  case 2:
                    frame.unwindTo(1, 0);
                    break block_label_4;

                  case 3:
                    frame.unwindTo(1, 0);
                    break block_label_5;

                  default:
                    frame.unwindTo(1, 0);
                    break block_label_3;
                }
              }
              frame.i32_const(0);
              local3 = frame.pop();
              frame.push(local5);
              local0 = frame.pop();
              frame.unwindTo(1, 0);
              break block_label_3;
            }
            frame.push(local5);
            frame.i32_const(1);
            frame.i32_shr_u();
            local0 = frame.pop();
            frame.push(local5);
            frame.i32_const(1);
            frame.i32_add();
            frame.i32_const(1);
            frame.i32_shr_u();
            local3 = frame.pop();
          }
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 28);
          local5 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 4);
          local6 = frame.pop();
          frame.push(arg0);
          frame.i32_load(2, 0);
          arg0 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local0);
              frame.i32_const(-1);
              frame.i32_add();
              local0 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_3;
              }
              frame.push(arg0);
              frame.push(local5);
              frame.push(local6);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.i32_const(1);
            return frame.pop();
          }
          frame.i32_const(1);
          local0 = frame.pop();
          frame.push(local5);
          frame.i32_const(0x110000);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg0);
          frame.push(arg1);
          frame.push(arg2);
          frame.push(local6);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()] as FunctionType0?;
            if (func == null) throw Trap('uninitialized element');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.i32_const(0);
          local0 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              block_label_5:
              {
                frame.push(local3);
                frame.push(local0);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(6, 0);
                  break block_label_5;
                }
                frame.push(local3);
                local0 = frame.pop();
                frame.unwindTo(6, 0);
                break block_label_3;
              }
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_add();
              local0 = frame.pop();
              frame.push(arg0);
              frame.push(local5);
              frame.push(local6);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              frame.i32_eqz();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.push(local0);
            frame.i32_const(-1);
            frame.i32_add();
            local0 = frame.pop();
          }
          frame.push(local0);
          frame.push(local3);
          frame.i32_lt_u();
          return frame.pop();
        }
        frame.push(arg0);
        frame.i32_load(2, 0);
        frame.push(arg1);
        frame.push(arg2);
        frame.push(arg0);
        frame.i32_load(2, 4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()] as FunctionType0?;
          if (func == null) throw Trap('uninitialized element');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.push(arg1);
      frame.push(arg2);
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()] as FunctionType0?;
        if (func == null) throw Trap('uninitialized element');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func041(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(3);
        frame.i32_add();
        frame.i32_const(-4);
        frame.i32_and();
        local0 = frame.peek();
        frame.push(arg0);
        frame.i32_sub();
        local1 = frame.peek();
        frame.push(arg1);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local1);
        frame.i32_const(4);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.push(local1);
        frame.i32_sub();
        local2 = frame.peek();
        frame.i32_const(4);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local2);
        frame.i32_const(3);
        frame.i32_and();
        local3 = frame.pop();
        frame.i32_const(0);
        local4 = frame.pop();
        frame.i32_const(0);
        local5 = frame.pop();
        block_label_2:
        {
          frame.push(local0);
          frame.push(arg0);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i32_sub();
          local0 = frame.pop();
          frame.i32_const(0);
          local5 = frame.pop();
          frame.push(arg0);
          arg1 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            frame.push(arg1);
            frame.i32_load8_s(0, 0);
            frame.i32_const(-65);
            frame.i32_gt_s();
            frame.i32_add();
            local5 = frame.pop();
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_add();
            local0 = frame.peek();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_add();
        local0 = frame.pop();
        block_label_2:
        {
          frame.push(local3);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(local2);
          frame.i32_const(-4);
          frame.i32_and();
          frame.i32_add();
          arg0 = frame.pop();
          frame.i32_const(0);
          local4 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local4);
            frame.push(arg0);
            frame.i32_load8_s(0, 0);
            frame.i32_const(-65);
            frame.i32_gt_s();
            frame.i32_add();
            local4 = frame.pop();
            frame.push(arg0);
            frame.i32_const(1);
            frame.i32_add();
            arg0 = frame.pop();
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.peek();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        frame.push(local2);
        frame.i32_const(2);
        frame.i32_shr_u();
        arg0 = frame.pop();
        frame.push(local4);
        frame.push(local5);
        frame.i32_add();
        local1 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          local6 = frame.pop();
          frame.push(arg0);
          local2 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(local2);
          frame.i32_const(192);
          frame.push(local2);
          frame.i32_const(192);
          frame.i32_lt_u();
          frame.select();
          local7 = frame.peek();
          frame.i32_const(3);
          frame.i32_and();
          local8 = frame.pop();
          frame.push(local7);
          frame.i32_const(2);
          frame.i32_shl();
          local9 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local7);
              frame.i32_const(252);
              frame.i32_and();
              local10 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_4;
              }
              frame.i32_const(0);
              arg1 = frame.pop();
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.push(local6);
            frame.push(local10);
            frame.i32_const(2);
            frame.i32_shl();
            frame.i32_add();
            local0 = frame.pop();
            frame.i32_const(0);
            arg1 = frame.pop();
            frame.push(local6);
            local3 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local3);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_3;
              }
              frame.push(local3);
              frame.i32_const(16);
              frame.i32_add();
              local5 = frame.pop();
              frame.i32_const(0);
              arg0 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local3);
                frame.push(arg0);
                frame.i32_add();
                frame.i32_load(2, 0);
                local4 = frame.peek();
                frame.i32_const(-1);
                frame.i32_xor();
                frame.i32_const(7);
                frame.i32_shr_u();
                frame.push(local4);
                frame.i32_const(6);
                frame.i32_shr_u();
                frame.i32_or();
                frame.i32_const(0x1010101);
                frame.i32_and();
                frame.push(arg1);
                frame.i32_add();
                arg1 = frame.pop();
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_add();
                arg0 = frame.peek();
                frame.i32_const(16);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
              frame.push(local5);
              local3 = frame.pop();
              frame.push(local5);
              frame.push(local0);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
          }
          frame.push(local2);
          frame.push(local7);
          frame.i32_sub();
          arg0 = frame.pop();
          frame.push(local6);
          frame.push(local9);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(arg1);
          frame.i32_const(8);
          frame.i32_shr_u();
          frame.i32_const(0xff00ff);
          frame.i32_and();
          frame.push(arg1);
          frame.i32_const(0xff00ff);
          frame.i32_and();
          frame.i32_add();
          frame.i32_const(0x10001);
          frame.i32_mul();
          frame.i32_const(16);
          frame.i32_shr_u();
          frame.push(local1);
          frame.i32_add();
          local1 = frame.pop();
          frame.push(local8);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local6);
            if (frame.pop() != 0) {
              frame.unwindTo(3, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            arg1 = frame.pop();
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local6);
          frame.push(local10);
          frame.i32_const(2);
          frame.i32_shl();
          frame.i32_add();
          arg0 = frame.pop();
          frame.push(local2);
          frame.i32_const(192);
          frame.push(local2);
          frame.i32_const(192);
          frame.i32_lt_u();
          frame.select();
          frame.i32_const(3);
          frame.i32_and();
          frame.i32_const(2);
          frame.i32_shl();
          local4 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(arg0);
            frame.i32_load(2, 0);
            local3 = frame.peek();
            frame.i32_const(-1);
            frame.i32_xor();
            frame.i32_const(7);
            frame.i32_shr_u();
            frame.push(local3);
            frame.i32_const(6);
            frame.i32_shr_u();
            frame.i32_or();
            frame.i32_const(0x1010101);
            frame.i32_and();
            frame.push(arg1);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_add();
            arg0 = frame.pop();
            frame.push(local4);
            frame.i32_const(-4);
            frame.i32_add();
            local4 = frame.peek();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        frame.push(arg1);
        frame.i32_const(8);
        frame.i32_shr_u();
        frame.i32_const(0xff00ff);
        frame.i32_and();
        frame.push(arg1);
        frame.i32_const(0xff00ff);
        frame.i32_and();
        frame.i32_add();
        frame.i32_const(0x10001);
        frame.i32_mul();
        frame.i32_const(16);
        frame.i32_shr_u();
        frame.push(local1);
        frame.i32_add();
        return frame.pop();
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.push(arg1);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }

      loop_label_1:
      for (;;) {
        frame.push(local1);
        frame.push(arg0);
        frame.i32_load8_s(0, 0);
        frame.i32_const(-65);
        frame.i32_gt_s();
        frame.i32_add();
        local1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_const(-1);
        frame.i32_add();
        arg1 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(local1);
    return frame.pop();
  }

  void _func042(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;
    i64 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        frame.push(arg2);
        frame.i32_const(-7);
        frame.i32_add();
        local0 = frame.peek();
        frame.push(local0);
        frame.push(arg2);
        frame.i32_gt_u();
        frame.select();
        local1 = frame.pop();
        frame.push(arg1);
        frame.i32_const(3);
        frame.i32_add();
        frame.i32_const(-4);
        frame.i32_and();
        frame.push(arg1);
        frame.i32_sub();
        local2 = frame.pop();
        frame.i32_const(0);
        local0 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  loop_label_7:
                  for (;;) {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(arg1);
                          frame.push(local0);
                          frame.i32_add();
                          frame.i32_load8_u(0, 0);
                          local3 = frame.peek();
                          frame.i32_const(24);
                          frame.i32_shl();
                          frame.i32_const(24);
                          frame.i32_shr_s();
                          local4 = frame.peek();
                          frame.i32_const(0);
                          frame.i32_lt_s();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_10;
                          }
                          frame.push(local2);
                          frame.i32_const(-1);
                          frame.i32_eq();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_9;
                          }
                          frame.push(local2);
                          frame.push(local0);
                          frame.i32_sub();
                          frame.i32_const(3);
                          frame.i32_and();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_9;
                          }
                          block_label_11:
                          {
                            frame.push(local0);
                            frame.push(local1);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(4, 0);
                              break block_label_11;
                            }

                            loop_label_12:
                            for (;;) {
                              frame.push(arg1);
                              frame.push(local0);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.i32_load(2, 0);
                              frame.push(local3);
                              frame.i32_const(4);
                              frame.i32_add();
                              frame.i32_load(2, 0);
                              frame.i32_or();
                              frame.i32_const(-0x7f7f7f80);
                              frame.i32_and();
                              if (frame.pop() != 0) {
                                frame.unwindTo(4, 0);
                                break block_label_11;
                              }
                              frame.push(local0);
                              frame.i32_const(8);
                              frame.i32_add();
                              local0 = frame.peek();
                              frame.push(local1);
                              frame.i32_lt_u();
                              if (frame.pop() != 0) {
                                continue loop_label_12;
                              }
                              break;
                            }
                          }
                          frame.push(local0);
                          frame.push(arg2);
                          frame.i32_ge_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_8;
                          }

                          loop_label_11:
                          for (;;) {
                            frame.push(arg1);
                            frame.push(local0);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            frame.i32_const(0);
                            frame.i32_lt_s();
                            if (frame.pop() != 0) {
                              frame.unwindTo(1, 0);
                              break block_label_8;
                            }
                            frame.push(arg2);
                            frame.push(local0);
                            frame.i32_const(1);
                            frame.i32_add();
                            local0 = frame.peek();
                            frame.i32_ne();
                            if (frame.pop() != 0) {
                              continue loop_label_11;
                            }
                            frame.unwindTo(0, 0);
                            break block_label_1;

                            break;
                          }
                        }
                        frame.i64_const(0x10000000000);
                        local5 = frame.pop();
                        frame.i64_const(0x100000000);
                        local6 = frame.pop();
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.push(local3);
                                  frame.i32_const(0xf4285);
                                  frame.i32_add();
                                  frame.i32_load8_u(0, 0);
                                  frame.i32_const(-2);
                                  frame.i32_add();
                                  var t0 = frame.pop();
                                  switch (t0) {
                                    case 0:
                                      frame.unwindTo(1, 0);
                                      break block_label_14;

                                    case 1:
                                      frame.unwindTo(1, 0);
                                      break block_label_12;

                                    case 2:
                                      frame.unwindTo(1, 0);
                                      break block_label_13;

                                    default:
                                      frame.unwindTo(1, 0);
                                      break block_label_2;
                                  }
                                }
                                frame.push(local0);
                                frame.i32_const(1);
                                frame.i32_add();
                                local3 = frame.peek();
                                frame.push(arg2);
                                frame.i32_lt_u();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(1, 0);
                                  break block_label_11;
                                }
                                frame.i64_const(0);
                                local5 = frame.pop();
                                frame.unwindTo(1, 0);
                                break block_label_3;
                              }
                              frame.i64_const(0);
                              local5 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(1);
                              frame.i32_add();
                              local7 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_3;
                              }
                              frame.push(arg1);
                              frame.push(local7);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              local7 = frame.pop();
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      frame.push(local3);
                                      frame.i32_const(-240);
                                      frame.i32_add();
                                      var t0 = frame.pop();
                                      switch (t0) {
                                        case 0:
                                          frame.unwindTo(2, 0);
                                          break block_label_15;

                                        case 1:
                                          frame.unwindTo(2, 0);
                                          break block_label_16;

                                        case 2:
                                          frame.unwindTo(2, 0);
                                          break block_label_16;

                                        case 3:
                                          frame.unwindTo(2, 0);
                                          break block_label_16;

                                        case 4:
                                          frame.unwindTo(2, 0);
                                          break block_label_14;

                                        default:
                                          frame.unwindTo(2, 0);
                                          break block_label_16;
                                      }
                                    }
                                    frame.push(local4);
                                    frame.i32_const(15);
                                    frame.i32_add();
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    frame.i32_const(2);
                                    frame.i32_gt_u();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.push(local7);
                                    frame.i32_const(-1);
                                    frame.i32_gt_s();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.push(local7);
                                    frame.i32_const(-64);
                                    frame.i32_ge_u();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.unwindTo(2, 0);
                                    break block_label_13;
                                  }
                                  frame.push(local7);
                                  frame.i32_const(112);
                                  frame.i32_add();
                                  frame.i32_const(255);
                                  frame.i32_and();
                                  frame.i32_const(48);
                                  frame.i32_ge_u();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(1, 0);
                                    break block_label_5;
                                  }
                                  frame.unwindTo(2, 0);
                                  break block_label_13;
                                }
                                frame.push(local7);
                                frame.i32_const(-113);
                                frame.i32_gt_s();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(1, 0);
                                  break block_label_5;
                                }
                              }
                              frame.push(local0);
                              frame.i32_const(2);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_3;
                              }
                              frame.push(arg1);
                              frame.push(local3);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              frame.i32_const(-65);
                              frame.i32_gt_s();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_6;
                              }
                              frame.i64_const(0);
                              local6 = frame.pop();
                              frame.push(local0);
                              frame.i32_const(3);
                              frame.i32_add();
                              local3 = frame.peek();
                              frame.push(arg2);
                              frame.i32_ge_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_2;
                              }
                              frame.push(arg1);
                              frame.push(local3);
                              frame.i32_add();
                              frame.i32_load8_s(0, 0);
                              frame.i32_const(-65);
                              frame.i32_le_s();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_10;
                              }
                              frame.i64_const(0x30000000000);
                              local5 = frame.pop();
                              frame.unwindTo(1, 0);
                              break block_label_4;
                            }
                            frame.i64_const(0);
                            local5 = frame.pop();
                            frame.push(local0);
                            frame.i32_const(1);
                            frame.i32_add();
                            local7 = frame.peek();
                            frame.push(arg2);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(1, 0);
                              break block_label_3;
                            }
                            frame.push(arg1);
                            frame.push(local7);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            local7 = frame.pop();
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    frame.push(local3);
                                    frame.i32_const(224);
                                    frame.i32_eq();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(2, 0);
                                      break block_label_15;
                                    }
                                    frame.push(local3);
                                    frame.i32_const(237);
                                    frame.i32_eq();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(2, 0);
                                      break block_label_14;
                                    }
                                    frame.push(local4);
                                    frame.i32_const(31);
                                    frame.i32_add();
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    frame.i32_const(12);
                                    frame.i32_lt_u();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(2, 0);
                                      break block_label_13;
                                    }
                                    frame.push(local4);
                                    frame.i32_const(-2);
                                    frame.i32_and();
                                    frame.i32_const(-18);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.push(local7);
                                    frame.i32_const(-1);
                                    frame.i32_gt_s();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.push(local7);
                                    frame.i32_const(-64);
                                    frame.i32_ge_u();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(1, 0);
                                      break block_label_5;
                                    }
                                    frame.unwindTo(2, 0);
                                    break block_label_12;
                                  }
                                  frame.push(local7);
                                  frame.i32_const(-32);
                                  frame.i32_and();
                                  frame.i32_const(-96);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(1, 0);
                                    break block_label_5;
                                  }
                                  frame.unwindTo(2, 0);
                                  break block_label_12;
                                }
                                frame.push(local7);
                                frame.i32_const(-96);
                                frame.i32_ge_s();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(1, 0);
                                  break block_label_5;
                                }
                                frame.unwindTo(2, 0);
                                break block_label_12;
                              }
                              frame.push(local7);
                              frame.i32_const(-65);
                              frame.i32_gt_s();
                              if (frame.pop() != 0) {
                                frame.unwindTo(1, 0);
                                break block_label_5;
                              }
                            }
                            frame.i64_const(0);
                            local6 = frame.pop();
                            frame.push(local0);
                            frame.i32_const(2);
                            frame.i32_add();
                            local3 = frame.peek();
                            frame.push(arg2);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(1, 0);
                              break block_label_2;
                            }
                            frame.push(arg1);
                            frame.push(local3);
                            frame.i32_add();
                            frame.i32_load8_s(0, 0);
                            frame.i32_const(-65);
                            frame.i32_gt_s();
                            if (frame.pop() != 0) {
                              frame.unwindTo(1, 0);
                              break block_label_6;
                            }
                            frame.unwindTo(1, 0);
                            break block_label_10;
                          }
                          frame.i64_const(0x10000000000);
                          local5 = frame.pop();
                          frame.i64_const(0x100000000);
                          local6 = frame.pop();
                          frame.push(arg1);
                          frame.push(local3);
                          frame.i32_add();
                          frame.i32_load8_s(0, 0);
                          frame.i32_const(-65);
                          frame.i32_gt_s();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_2;
                          }
                        }
                        frame.push(local3);
                        frame.i32_const(1);
                        frame.i32_add();
                        local0 = frame.pop();
                        frame.unwindTo(1, 0);
                        break block_label_8;
                      }
                      frame.push(local0);
                      frame.i32_const(1);
                      frame.i32_add();
                      local0 = frame.pop();
                    }
                    frame.push(local0);
                    frame.push(arg2);
                    frame.i32_lt_u();
                    if (frame.pop() != 0) {
                      continue loop_label_7;
                    }
                    frame.unwindTo(0, 0);
                    break block_label_1;

                    break;
                  }
                }
                frame.i64_const(0x20000000000);
                local5 = frame.pop();
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.i64_const(0x10000000000);
              local5 = frame.pop();
            }
            frame.i64_const(0x100000000);
            local6 = frame.pop();
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i64_const(0);
          local6 = frame.pop();
        }
        frame.push(arg0);
        frame.push(local5);
        frame.push(local0);
        frame.i64_extend_i32_u();
        frame.i64_or();
        frame.push(local6);
        frame.i64_or();
        frame.i64_store(2, 4);
        frame.i32_const(1);
        local0 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg2);
      frame.i32_store(2, 0);
      frame.i32_const(0);
      local0 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  i32 _func043(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local2 = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg1 = frame.peek();
    frame.i32_const(16);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(3, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.i64_load(2, 0);
    frame.i64_store(3, 8);
    frame.push(local2);
    frame.push(local1);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func038(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func044(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 4);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func040(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func045(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 4);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func040(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func046(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    frame.push(arg0);
                                    frame.i32_load8_u(0, 0);
                                    var t0 = frame.pop();
                                    switch (t0) {
                                      case 0:
                                        frame.unwindTo(0, 0);
                                        break block_label_15;

                                      case 1:
                                        frame.unwindTo(0, 0);
                                        break block_label_14;

                                      case 2:
                                        frame.unwindTo(0, 0);
                                        break block_label_13;

                                      case 3:
                                        frame.unwindTo(0, 0);
                                        break block_label_12;

                                      case 4:
                                        frame.unwindTo(0, 0);
                                        break block_label_11;

                                      case 5:
                                        frame.unwindTo(0, 0);
                                        break block_label_10;

                                      case 6:
                                        frame.unwindTo(0, 0);
                                        break block_label_9;

                                      case 7:
                                        frame.unwindTo(0, 0);
                                        break block_label_8;

                                      case 8:
                                        frame.unwindTo(0, 0);
                                        break block_label_7;

                                      case 9:
                                        frame.unwindTo(0, 0);
                                        break block_label_6;

                                      case 10:
                                        frame.unwindTo(0, 0);
                                        break block_label_5;

                                      case 11:
                                        frame.unwindTo(0, 0);
                                        break block_label_4;

                                      case 12:
                                        frame.unwindTo(0, 0);
                                        break block_label_3;

                                      case 13:
                                        frame.unwindTo(0, 0);
                                        break block_label_2;

                                      case 14:
                                        frame.unwindTo(0, 0);
                                        break block_label_1;

                                      default:
                                        frame.unwindTo(0, 0);
                                        break block_label_15;
                                    }
                                  }
                                  frame.push(local0);
                                  frame.i32_const(0xf45dc);
                                  frame.i32_store(2, 16);
                                  frame.i32_const(52);
                                  arg0 = frame.pop();
                                  frame.unwindTo(0, 0);
                                  break block_label_0;
                                }
                                frame.push(local0);
                                frame.i32_const(0xf4598);
                                frame.i32_store(2, 16);
                                frame.i32_const(68);
                                arg0 = frame.pop();
                                frame.unwindTo(0, 0);
                                break block_label_0;
                              }
                              frame.push(local0);
                              frame.i32_const(0xf457c);
                              frame.i32_store(2, 16);
                              frame.i32_const(28);
                              arg0 = frame.pop();
                              frame.unwindTo(0, 0);
                              break block_label_0;
                            }
                            frame.push(local0);
                            frame.i32_const(0xf4556);
                            frame.i32_store(2, 16);
                            frame.i32_const(38);
                            arg0 = frame.pop();
                            frame.unwindTo(0, 0);
                            break block_label_0;
                          }
                          frame.push(local0);
                          frame.i32_const(0xf452d);
                          frame.i32_store(2, 16);
                          frame.i32_const(41);
                          arg0 = frame.pop();
                          frame.unwindTo(0, 0);
                          break block_label_0;
                        }
                        frame.push(local0);
                        frame.i32_const(0xf44e0);
                        frame.i32_store(2, 16);
                        frame.i32_const(77);
                        arg0 = frame.pop();
                        frame.unwindTo(0, 0);
                        break block_label_0;
                      }
                      frame.push(local0);
                      frame.i32_const(0xf44c1);
                      frame.i32_store(2, 16);
                      frame.i32_const(31);
                      arg0 = frame.pop();
                      frame.unwindTo(0, 0);
                      break block_label_0;
                    }
                    frame.push(local0);
                    frame.i32_const(0xf44a4);
                    frame.i32_store(2, 16);
                    frame.i32_const(29);
                    arg0 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(0xf4488);
                  frame.i32_store(2, 16);
                  frame.i32_const(28);
                  arg0 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_0;
                }
                frame.push(local0);
                frame.i32_const(0xf4459);
                frame.i32_store(2, 16);
                frame.i32_const(47);
                arg0 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.push(local0);
              frame.i32_const(0xf4423);
              frame.i32_store(2, 16);
              frame.i32_const(54);
              arg0 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.push(local0);
            frame.i32_const(0xf43fd);
            frame.i32_store(2, 16);
            frame.i32_const(38);
            arg0 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(local0);
          frame.i32_const(0xf43e4);
          frame.i32_store(2, 16);
          frame.i32_const(25);
          arg0 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_const(0xf43c9);
        frame.i32_store(2, 16);
        frame.i32_const(27);
        arg0 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(0xf4390);
      frame.i32_store(2, 16);
      frame.i32_const(57);
      arg0 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(6);
    frame.i32_store(2, 12);
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 20);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_store(2, 8);
    frame.push(arg1);
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 36);
    frame.push(local0);
    frame.i32_const(0xf4388);
    frame.i32_store(2, 32);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 24);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_store(2, 40);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func038(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  void _func047(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;
    i64 local6 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local0);
                frame.i32_const(8);
                frame.i32_add();
                frame.push(local1);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func048(t0, t1);
                }
                frame.push(local0);
                frame.i32_load(2, 8);
                local3 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.i32_const(2);
                local4 = frame.pop();
                frame.push(local0);
                frame.i32_load(2, 12);
                arg1 = frame.peek();
                frame.i32_const(-9);
                frame.i32_add();
                frame.i32_const(-8);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.i32_const(16);
                frame.i32_add();
                frame.push(local3);
                frame.push(arg1);
                frame.push(arg1);
                {
                  var t3 = frame.pop();
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func049(t0, t1, t2, t3);
                }
                frame.push(local0);
                frame.i32_load(2, 16);
                frame.i32_const(3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.i64_load(2, 20);
                local5 = frame.peek();
                frame.i64_const(0x7f7f7f7f7f7f7f7f);
                frame.i64_add();
                frame.i64_const(-0x5050505050505051);
                frame.push(local5);
                frame.i64_sub();
                frame.push(local5);
                frame.i64_const(0x4646464646464646);
                frame.i64_add();
                frame.i64_or();
                frame.i64_and();
                frame.i64_const(-0x1f1f1f1f1f1f1f20);
                frame.push(local5);
                frame.i64_const(0x2020202020202020);
                frame.i64_or();
                local6 = frame.peek();
                frame.i64_sub();
                frame.push(local6);
                frame.i64_const(0x505050505050505);
                frame.i64_add();
                frame.i64_or();
                frame.i64_and();
                frame.i64_const(-0x7f7f7f7f7f7f7f80);
                frame.i64_and();
                frame.i64_eqz();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local5);
                frame.i64_const(0x3f3f3f3f3f3f3f3f);
                frame.i64_add();
                frame.i64_const(-0x2525252525252526);
                frame.push(local5);
                frame.i64_sub();
                frame.i64_and();
                frame.i64_const(2);
                frame.i64_shr_u();
                frame.i64_const(0x2020202020202020);
                frame.i64_and();
                frame.push(local5);
                frame.i64_or();
                local5 = frame.peek();
                frame.i32_wrap_i64();
                frame.i32_const(255);
                frame.i32_and();
                arg1 = frame.peek();
                frame.i32_const(129);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
              frame.push(arg1);
              frame.i32_const(128);
              frame.i32_ne();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.push(local5);
              frame.i64_const(8);
              frame.i64_shr_u();
              frame.i32_wrap_i64();
              local4 = frame.pop();
            }
            frame.push(local2);
            frame.push(local4);
            frame.i32_store8(0, 0);
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local5);
          frame.i64_const(255);
          frame.i64_and();
          local6 = frame.peek();
          frame.i64_const(129);
          frame.i64_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local6);
          frame.i64_const(128);
          frame.i64_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        frame.push(arg0);
        frame.i32_const(128);
        frame.i32_store8(0, 0);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local5);
      frame.i64_store(0, 0);
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func048(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 16);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_load(2, 8);
        local1 = frame.pop();
        frame.i32_const(1);
        local2 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 0);
        local3 = frame.peek();
        local4 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 4);
        local5 = frame.peek();
        local6 = frame.pop();
        block_label_2:
        {
          frame.push(local5);
          frame.push(arg1);
          frame.i32_load(2, 12);
          local7 = frame.peek();
          frame.i32_ge_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local1);
          frame.push(local7);
          frame.push(local5);
          {
            var t3 = frame.pop();
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func082(t0, t1, t2, t3);
          }
          frame.i32_const(0);
          local2 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 12);
          local6 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 8);
          local4 = frame.pop();
        }
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store8(0, 16);
        frame.push(arg1);
        frame.push(local6);
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local4);
        frame.i32_store(2, 0);
        frame.push(local5);
        frame.push(local3);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local5);
        frame.push(local7);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local5);
        frame.push(local3);
        frame.i32_sub();
        local5 = frame.pop();
        frame.push(local1);
        frame.push(local3);
        frame.i32_add();
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local5);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func049(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(8);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i64_const(0);
          local1 = frame.pop();
          frame.push(local0);
          frame.i64_const(0);
          frame.i64_store(3, 8);
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            local2 = frame.pop();
            frame.i32_const(0);
            local3 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local2);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local4 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_7;
                    }
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local4);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_6;
                    }
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local4);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local3 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(8);
                  frame.i32_add();
                  frame.push(local2);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local3 = frame.pop();
                  frame.push(local2);
                  frame.i32_const(1);
                  frame.i32_add();
                  local2 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(8);
                frame.i32_add();
                frame.push(local2);
                frame.i32_add();
                frame.push(local4);
                frame.i32_store8(0, 0);
                frame.push(local2);
                frame.i32_const(1);
                frame.i32_add();
                local2 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i64_load(3, 8);
                local1 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(local4);
              frame.i32_eqz();
              local3 = frame.pop();
              frame.push(local2);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.push(arg3);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.i64_const(0x800000000);
        frame.i64_store(2, 0);
      }
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i64_store(2, 4);
    }
    frame.push(arg0);
    frame.push(local3);
    frame.i32_store(2, 0);
  }

  void _func050(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(4);
    frame.i32_add();
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func051(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local1 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_const(8);
      frame.i32_add();
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(local0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i32_const(0xf5144);
          frame.push(local0);
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        local0 = frame.pop();
        frame.push(local1);
        frame.i32_const(-16);
        frame.i32_add();
        local1 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func052(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 4);
            local0 = frame.peek();
            frame.i32_const(-3);
            frame.i32_add();
            frame.i32_const(1);
            frame.push(local0);
            frame.i32_const(2);
            frame.i32_gt_u();
            frame.select();
            frame.i32_const(255);
            frame.i32_and();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(0, 0);
                break block_label_0;

              case 1:
                frame.unwindTo(0, 0);
                break block_label_2;

              default:
                frame.unwindTo(0, 0);
                break block_label_3;
            }
          }
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          {
            var t0 = frame.pop();
            _func053(t0);
          }
          frame.push(arg0);
          frame.i32_load(2, 8);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 12);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func053(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(20);
      frame.i32_mul();
      local0 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_const(12);
      frame.i32_add();
      arg0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          frame.i32_const(2);
          frame.i32_lt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i32_const(0xf5144);
          frame.push(arg0);
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-20);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
  }

  void _func054(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i32_const(0xf5144);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_add();
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_add();
        local1 = frame.pop();
        frame.push(local0);
        frame.i32_const(-16);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func055(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load8_u(0, 16);
      frame.i32_const(6);
      frame.i32_eq();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(12);
      frame.i32_add();
      {
        var t0 = frame.pop();
        _func052(t0);
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 4);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func056(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local0 = frame.pop();
        frame.i32_const(0);
        local1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.push(arg2);
      local2 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_const(1);
        frame.i32_shr_u();
        frame.push(local1);
        frame.i32_add();
        local3 = frame.peek();
        frame.i32_const(3);
        frame.i32_shl();
        frame.i32_add();
        local0 = frame.pop();
        frame.i32_const(0);
        arg2 = frame.pop();

        loop_label_2:
        for (;;) {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(8);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            local0 = frame.pop();
            frame.push(local3);
            local1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg3);
          frame.push(arg2);
          frame.i32_add();
          local4 = frame.pop();
          frame.push(local0);
          frame.push(arg2);
          frame.i32_add();
          local5 = frame.pop();
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(local5);
          frame.i32_load8_u(0, 0);
          local5 = frame.peek();
          frame.push(local4);
          frame.i32_load8_u(0, 0);
          local4 = frame.peek();
          frame.i32_eq();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        frame.i32_const(1);
        local0 = frame.pop();
        frame.push(local2);
        frame.push(local3);
        frame.push(local5);
        frame.push(local4);
        frame.i32_lt_u();
        arg2 = frame.peek();
        frame.select();
        local2 = frame.peek();
        frame.push(local3);
        frame.i32_const(1);
        frame.i32_add();
        frame.push(local1);
        frame.push(arg2);
        frame.select();
        local1 = frame.peek();
        frame.i32_sub();
        arg2 = frame.pop();
        frame.push(local2);
        frame.push(local1);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_store(2, 0);
  }

  void _func057(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_ne();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func058(t0, t1);
      }
    }
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.push(arg1);
    frame.i32_const(3);
    frame.i32_shl();
    frame.i32_add();
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.push(arg1);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.push(arg1);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.push(local0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func036(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local1);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local1);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_sub();
      frame.i32_const(3);
      frame.i32_shl();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func004(t0, t1, t2));
      }
      frame.drop();
    }
    frame.push(local1);
    frame.push(arg2);
    frame.i64_load(0, 0);
    frame.i64_store(0, 0);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_add();
    frame.i32_store(2, 8);
  }

  void _func058(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func062(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 12);
        arg1 = frame.peek();
        frame.i32_const(-0x7fffffff);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func059(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(0xfffffff);
            frame.i32_gt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(3);
            frame.i32_shl();
            local0 = frame.peek();
            frame.i32_const(0);
            frame.i32_lt_s();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(0x10000000);
            frame.i32_lt_u();
            local1 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.push(local1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func008(t0, t1));
              }
              arg2 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local0);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local0);
            frame.push(local1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func010(t0, t1));
            }
            arg2 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(local1);
        arg2 = frame.pop();
      }
      frame.push(arg2);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(local1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func060(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(0xfffffff);
            frame.i32_gt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(3);
            frame.i32_shl();
            local0 = frame.peek();
            frame.i32_const(0);
            frame.i32_lt_s();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(0x10000000);
            frame.i32_lt_u();
            local1 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.push(local1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func008(t0, t1));
              }
              arg2 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local0);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local0);
            frame.push(local1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func010(t0, t1));
            }
            arg2 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(local1);
        arg2 = frame.pop();
      }
      frame.push(arg2);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(local1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func061(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.push(arg3);
      frame.i32_add();
      arg3 = frame.peek();
      frame.push(arg2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      arg2 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local1 = frame.peek();
      frame.push(arg3);
      frame.push(local1);
      frame.push(arg3);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(4);
      frame.push(arg3);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local1 = frame.pop();
      frame.push(arg3);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local1);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg1);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        arg2 = frame.pop();
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_store(2, 4);
        frame.i32_const(-0x7fffffff);
        local1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 4);
      arg3 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg3);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func062(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.push(arg3);
      frame.i32_add();
      arg3 = frame.peek();
      frame.push(arg2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      arg2 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local1 = frame.peek();
      frame.push(arg3);
      frame.push(local1);
      frame.push(arg3);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(4);
      frame.push(arg3);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg3 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local1 = frame.pop();
      frame.push(arg3);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local1);
      frame.push(local2);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg1);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        arg2 = frame.pop();
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_store(2, 0);
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_store(2, 4);
        frame.i32_const(-0x7fffffff);
        local1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 4);
      arg3 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg3);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func063(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      arg1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(local1);
      frame.push(local2);
      frame.push(local1);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(4);
      frame.push(local1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(local1);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func064(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      arg1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(local1);
      frame.push(local2);
      frame.push(local1);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(4);
      frame.push(local1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(local1);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func065(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(1);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func061(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 12);
        arg1 = frame.peek();
        frame.i32_const(-0x7fffffff);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func066(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(0x8000000);
      frame.i32_lt_u();
      frame.i32_const(2);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.push(local0);
          frame.i32_const(4);
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func067(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(0x8000000);
      frame.i32_lt_u();
      frame.i32_const(2);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.push(local0);
          frame.i32_const(4);
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(4);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func068(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg1);
    frame.push(arg2);
    {
      var t3 = frame.pop();
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func061(t0, t1, t2, t3);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 12);
        arg2 = frame.peek();
        frame.i32_const(-0x7fffffff);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        frame.push(arg2);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func069(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      arg1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      local1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(arg1);
      frame.push(local2);
      frame.push(arg1);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(4);
      frame.push(arg1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      arg1 = frame.peek();
      frame.i32_const(20);
      frame.i32_mul();
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_const(0x6666667);
      frame.i32_lt_u();
      frame.i32_const(2);
      frame.i32_shl();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.i32_const(4);
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(local1);
          frame.i32_const(20);
          frame.i32_mul();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      local1 = frame.pop();
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func070(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      arg1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(local1);
      frame.push(local2);
      frame.push(local1);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(4);
      frame.push(local1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(local1);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func071(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(1);
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 0);
      arg1 = frame.peek();
      frame.i32_const(1);
      frame.i32_shl();
      local2 = frame.peek();
      frame.push(local1);
      frame.push(local2);
      frame.push(local1);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(4);
      frame.push(local1);
      frame.i32_const(4);
      frame.i32_gt_u();
      frame.select();
      local1 = frame.peek();
      frame.i32_const(3);
      frame.i32_shl();
      local2 = frame.pop();
      frame.push(local1);
      frame.i32_const(0x10000000);
      frame.i32_lt_u();
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(0x10000000);
          frame.i32_lt_u();
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.push(arg1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.push(arg0);
          frame.i32_load(2, 4);
          frame.i32_store(2, 16);
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
      }
      frame.push(local0);
      frame.push(local2);
      frame.push(local3);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func033(t0, t1, t2, t3, t4);
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(6, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func030(t0, t1);
        }
        throw Trap('unreachable');
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func072(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local0 = frame.pop();
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_const(8);
      frame.i32_add();
      arg0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(-4);
          frame.i32_add();
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i32_const(0xf5144);
          frame.push(arg0);
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-16);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
  }

  void _func073(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 4);
      arg0 = frame.pop();
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_shl();
      local0 = frame.pop();

      loop_label_1:
      for (;;) {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.i32_const(0xf5144);
          frame.push(arg0);
          frame.i32_const(4);
          frame.i32_add();
          frame.i32_load(2, 0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        arg0 = frame.pop();
        frame.push(local0);
        frame.i32_const(-16);
        frame.i32_add();
        local0 = frame.peek();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
  }

  void _func074(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 4);
    local0 = frame.pop();
    frame.push(arg0);
    frame.i32_const(0xf4610);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg0);
    frame.i32_const(0xf4610);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 16);
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.push(local0);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_load(2, 12);
          local0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg0);
          frame.i32_load(2, 8);
          local1 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 8);
          arg0 = frame.peek();
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(local2);
          frame.i32_load(2, 4);
          local3 = frame.peek();
          frame.push(arg0);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local3);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_shl();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func004(t0, t1, t2));
          }
          frame.drop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_load(2, 12);
        local0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 8);
          local1 = frame.peek();
          frame.push(local2);
          frame.i32_load(2, 8);
          arg0 = frame.peek();
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_2;
          }
          frame.push(local2);
          frame.i32_load(2, 4);
          local3 = frame.peek();
          frame.push(arg0);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local3);
          frame.push(local1);
          frame.i32_const(3);
          frame.i32_shl();
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_shl();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func004(t0, t1, t2));
          }
          frame.drop();
        }
        frame.push(local2);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_add();
        frame.i32_store(2, 8);
      }
    }
    frame.push(local2);
    frame.push(arg0);
    frame.push(local0);
    frame.i32_add();
    frame.i32_store(2, 8);
  }

  void _func075(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_store16(1, 0);
    frame.push(arg1);
    frame.i32_load(2, 4);
    local1 = frame.pop();
    frame.i32_const(0);
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 8);
              local3 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local3);
              local4 = frame.pop();
              frame.push(local3);
              local5 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local1);
                frame.push(local4);
                frame.i32_const(1);
                frame.i32_shr_u();
                frame.push(local2);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_const(4);
                frame.i32_shl();
                frame.i32_add();
                local7 = frame.pop();
                frame.i32_const(0);
                local4 = frame.pop();

                loop_label_6:
                for (;;) {
                  frame.push(local4);
                  frame.i32_const(2);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_3;
                  }
                  frame.push(local7);
                  frame.push(local4);
                  frame.i32_add();
                  local8 = frame.pop();
                  frame.push(local0);
                  frame.push(local4);
                  frame.i32_add();
                  local9 = frame.pop();
                  frame.push(local4);
                  frame.i32_const(1);
                  frame.i32_add();
                  local4 = frame.pop();
                  frame.push(local8);
                  frame.i32_load8_u(0, 0);
                  local8 = frame.peek();
                  frame.push(local9);
                  frame.i32_load8_u(0, 0);
                  local9 = frame.peek();
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    continue loop_label_6;
                  }
                  break;
                }
                frame.push(local5);
                frame.push(local6);
                frame.push(local8);
                frame.push(local9);
                frame.i32_lt_u();
                local4 = frame.peek();
                frame.select();
                local5 = frame.peek();
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                frame.push(local2);
                frame.push(local4);
                frame.select();
                local2 = frame.peek();
                frame.i32_sub();
                local4 = frame.pop();
                frame.push(local5);
                frame.push(local2);
                frame.i32_gt_u();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
            }
            frame.push(local0);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(arg3);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_load(1, 0);
            frame.i32_store(1, 0);
            frame.push(local0);
            frame.push(arg3);
            frame.i64_load(1, 0);
            frame.i64_store(1, 4);
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.push(local3);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_const(12);
          frame.i32_add();
          frame.push(arg3);
          frame.i32_const(8);
          frame.i32_add();
          frame.i32_load(1, 0);
          frame.i32_store(1, 0);
          frame.push(arg0);
          frame.push(arg2);
          frame.i32_store16(1, 0);
          frame.push(local0);
          frame.push(arg3);
          frame.i64_load(1, 0);
          frame.i64_store(1, 4);
          frame.push(arg0);
          frame.push(local0);
          frame.i64_load(1, 2);
          frame.i64_store(1, 2);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(1, 0);
          frame.i64_store(1, 0);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.push(local3);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func066(t0, t1);
        }
        frame.push(arg1);
        frame.i32_load(2, 4);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.push(local2);
      frame.i32_const(4);
      frame.i32_shl();
      frame.i32_add();
      local4 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local3);
          frame.push(local2);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local3);
          frame.push(local2);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(local2);
          frame.push(local3);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func036(t0, t1);
          }
          throw Trap('unreachable');
        }
        frame.push(local4);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local4);
        frame.push(local3);
        frame.push(local2);
        frame.i32_sub();
        frame.i32_const(4);
        frame.i32_shl();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func004(t0, t1, t2));
        }
        frame.drop();
      }
      frame.push(local4);
      frame.push(local0);
      frame.i64_load(1, 2);
      frame.i64_store(1, 2);
      frame.push(local4);
      frame.push(arg2);
      frame.i32_store16(1, 0);
      frame.push(local4);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i64_load(1, 0);
      frame.i64_store(1, 0);
      frame.push(arg1);
      frame.push(local3);
      frame.i32_const(1);
      frame.i32_add();
      frame.i32_store(2, 8);
      frame.push(arg0);
      frame.i32_const(128);
      frame.i32_store8(0, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func076(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i64 local11 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_store16(1, 8);
    frame.push(arg1);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      frame.push(arg1);
                                      frame.i32_load8_u(0, 4);
                                      local2 = frame.peek();
                                      frame.i32_const(-3);
                                      frame.i32_add();
                                      frame.i32_const(1);
                                      frame.push(local2);
                                      frame.i32_const(2);
                                      frame.i32_gt_u();
                                      frame.select();
                                      local3 = frame.peek();
                                      frame.i32_const(255);
                                      frame.i32_and();
                                      local4 = frame.peek();
                                      var t0 = frame.pop();
                                      switch (t0) {
                                        case 0:
                                          frame.unwindTo(0, 0);
                                          break block_label_14;

                                        case 1:
                                          frame.unwindTo(0, 0);
                                          break block_label_15;

                                        case 2:
                                          frame.unwindTo(0, 0);
                                          break block_label_16;

                                        default:
                                          frame.unwindTo(0, 0);
                                          break block_label_14;
                                      }
                                    }
                                    frame.push(arg1);
                                    frame.i32_const(12);
                                    frame.i32_add();
                                    local5 = frame.pop();
                                    frame.push(arg1);
                                    frame.i32_const(16);
                                    frame.i32_add();
                                    frame.i32_load(2, 0);
                                    local4 = frame.peek();
                                    frame.i32_eqz();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(0, 0);
                                      break block_label_12;
                                    }
                                    frame.push(local5);
                                    frame.i32_load(2, 0);
                                    local1 = frame.pop();
                                  }
                                  frame.i32_const(0);
                                  local5 = frame.pop();
                                  frame.push(local4);
                                  local6 = frame.pop();

                                  loop_label_15:
                                  for (;;) {
                                    frame.push(local1);
                                    frame.push(local4);
                                    frame.i32_const(1);
                                    frame.i32_shr_u();
                                    frame.push(local5);
                                    frame.i32_add();
                                    local7 = frame.peek();
                                    frame.i32_const(20);
                                    frame.i32_mul();
                                    frame.i32_add();
                                    local8 = frame.pop();
                                    frame.i32_const(0);
                                    local4 = frame.pop();

                                    loop_label_16:
                                    for (;;) {
                                      frame.push(local4);
                                      frame.i32_const(2);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(0, 0);
                                        break block_label_9;
                                      }
                                      frame.push(local8);
                                      frame.push(local4);
                                      frame.i32_add();
                                      local9 = frame.pop();
                                      frame.push(local0);
                                      frame.i32_const(8);
                                      frame.i32_add();
                                      frame.push(local4);
                                      frame.i32_add();
                                      local10 = frame.pop();
                                      frame.push(local4);
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      local4 = frame.pop();
                                      frame.push(local9);
                                      frame.i32_load8_u(0, 0);
                                      local9 = frame.peek();
                                      frame.push(local10);
                                      frame.i32_load8_u(0, 0);
                                      local10 = frame.peek();
                                      frame.i32_eq();
                                      if (frame.pop() != 0) {
                                        continue loop_label_16;
                                      }
                                      break;
                                    }
                                    frame.push(local6);
                                    frame.push(local7);
                                    frame.push(local9);
                                    frame.push(local10);
                                    frame.i32_lt_u();
                                    local4 = frame.peek();
                                    frame.select();
                                    local6 = frame.peek();
                                    frame.push(local7);
                                    frame.i32_const(1);
                                    frame.i32_add();
                                    frame.push(local5);
                                    frame.push(local4);
                                    frame.select();
                                    local5 = frame.peek();
                                    frame.i32_sub();
                                    local4 = frame.pop();
                                    frame.push(local6);
                                    frame.push(local5);
                                    frame.i32_gt_u();
                                    if (frame.pop() != 0) {
                                      continue loop_label_15;
                                    }
                                    break;
                                  }
                                  frame.push(local0);
                                  frame.i32_const(42);
                                  frame.i32_add();
                                  frame.push(arg3);
                                  frame.i32_const(3);
                                  frame.i32_add();
                                  frame.i32_load8_u(0, 0);
                                  frame.i32_store8(0, 0);
                                  frame.push(local0);
                                  frame.push(arg3);
                                  frame.i32_load16_u(0, 1);
                                  frame.i32_store16(1, 40);
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        frame.push(local3);
                                        frame.i32_const(255);
                                        frame.i32_and();
                                        local4 = frame.peek();
                                        var t0 = frame.pop();
                                        switch (t0) {
                                          case 0:
                                            frame.unwindTo(0, 0);
                                            break block_label_15;

                                          case 1:
                                            frame.unwindTo(0, 0);
                                            break block_label_16;

                                          case 2:
                                            frame.unwindTo(0, 0);
                                            break block_label_17;

                                          default:
                                            frame.unwindTo(0, 0);
                                            break block_label_15;
                                        }
                                      }
                                      frame.push(arg1);
                                      frame.i32_const(16);
                                      frame.i32_add();
                                      frame.i32_load(2, 0);
                                      local4 = frame.pop();
                                      frame.unwindTo(0, 0);
                                      break block_label_15;
                                    }
                                    frame.i32_const(1);
                                    local4 = frame.pop();
                                  }
                                  block_label_15:
                                  {
                                    frame.push(local4);
                                    frame.push(local5);
                                    frame.i32_lt_u();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(0, 0);
                                      break block_label_15;
                                    }
                                    frame.push(arg3);
                                    frame.i32_load(2, 12);
                                    local9 = frame.pop();
                                    frame.push(arg3);
                                    frame.i32_load(2, 8);
                                    local10 = frame.pop();
                                    frame.push(arg3);
                                    frame.i32_load(2, 4);
                                    local8 = frame.pop();
                                    frame.push(arg3);
                                    frame.i32_load8_u(0, 0);
                                    local1 = frame.pop();
                                    frame.push(arg1);
                                    frame.i32_const(3);
                                    frame.i32_store8(0, 4);
                                    frame.push(local0);
                                    frame.push(arg1);
                                    frame.i64_load(0, 5);
                                    frame.i64_store(3, 16);
                                    frame.push(local0);
                                    frame.push(arg1);
                                    frame.i32_const(12);
                                    frame.i32_add();
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 23);
                                    frame.push(arg1);
                                    frame.i32_const(5);
                                    frame.i32_add();
                                    local4 = frame.pop();
                                    frame.push(local3);
                                    frame.i32_const(255);
                                    frame.i32_and();
                                    var t0 = frame.pop();
                                    switch (t0) {
                                      case 0:
                                        frame.unwindTo(0, 0);
                                        break block_label_13;

                                      case 1:
                                        frame.unwindTo(0, 0);
                                        break block_label_10;

                                      case 2:
                                        frame.unwindTo(0, 0);
                                        break block_label_11;

                                      default:
                                        frame.unwindTo(0, 0);
                                        break block_label_13;
                                    }
                                  }
                                  throw Trap('unreachable');
                                  throw Trap('unreachable');
                                }
                                frame.push(local0);
                                frame.i32_const(40);
                                frame.i32_add();
                                frame.i32_const(2);
                                frame.i32_add();
                                frame.push(arg3);
                                frame.i32_const(3);
                                frame.i32_add();
                                frame.i32_load8_u(0, 0);
                                frame.i32_store8(0, 0);
                                frame.push(local0);
                                frame.push(arg3);
                                frame.i32_load16_u(0, 1);
                                frame.i32_store16(1, 40);
                                frame.push(arg3);
                                frame.i32_load8_u(0, 0);
                                local1 = frame.pop();
                                frame.push(arg3);
                                frame.i32_load(2, 4);
                                local8 = frame.pop();
                                frame.push(arg3);
                                frame.i32_load(2, 8);
                                local10 = frame.pop();
                                frame.push(arg3);
                                frame.i32_load(2, 12);
                                local9 = frame.pop();
                                frame.push(arg1);
                                frame.i32_const(3);
                                frame.i32_store8(0, 4);
                                frame.push(local0);
                                frame.push(arg1);
                                frame.i32_const(12);
                                frame.i32_add();
                                frame.i64_load(0, 0);
                                frame.i64_store(0, 23);
                                frame.push(local0);
                                frame.push(arg1);
                                frame.i64_load(0, 5);
                                frame.i64_store(3, 16);
                                frame.push(arg1);
                                frame.i32_const(5);
                                frame.i32_add();
                                local4 = frame.pop();
                              }
                              frame.push(local0);
                              frame.i32_const(44);
                              frame.i32_add();
                              frame.i32_const(2);
                              frame.i32_add();
                              frame.push(local0);
                              frame.i32_const(40);
                              frame.i32_add();
                              frame.i32_const(2);
                              frame.i32_add();
                              frame.i32_load8_u(0, 0);
                              frame.i32_store8(0, 0);
                              frame.push(local0);
                              frame.push(local0);
                              frame.i32_load16_u(1, 40);
                              frame.i32_store16(1, 44);
                              frame.push(arg2);
                              frame.i32_const(0xffff);
                              frame.i32_and();
                              arg3 = frame.pop();
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.i32_const(42);
                            frame.i32_add();
                            frame.push(arg3);
                            frame.i32_const(3);
                            frame.i32_add();
                            frame.i32_load8_u(0, 0);
                            frame.i32_store8(0, 0);
                            frame.push(local0);
                            frame.push(arg3);
                            frame.i32_load16_u(0, 1);
                            frame.i32_store16(1, 40);
                            frame.push(arg3);
                            frame.i32_load8_u(0, 0);
                            local1 = frame.pop();
                            frame.push(arg3);
                            frame.i32_load(2, 4);
                            local8 = frame.pop();
                            frame.push(arg3);
                            frame.i32_load(2, 8);
                            local10 = frame.pop();
                            frame.push(arg3);
                            frame.i32_load(2, 12);
                            local9 = frame.pop();
                            frame.push(arg1);
                            frame.i32_const(3);
                            frame.i32_store8(0, 4);
                            frame.push(local0);
                            frame.push(local5);
                            frame.i64_load(0, 0);
                            frame.i64_store(0, 23);
                            frame.push(local0);
                            frame.push(arg1);
                            frame.i64_load(0, 5);
                            frame.i64_store(3, 16);
                            frame.push(arg1);
                            frame.i32_const(5);
                            frame.i32_add();
                            local4 = frame.pop();
                            frame.i32_const(0);
                            local5 = frame.pop();
                          }
                          frame.push(local0);
                          frame.i32_const(56);
                          frame.i32_add();
                          frame.push(local0);
                          frame.i32_const(27);
                          frame.i32_add();
                          frame.i32_load(0, 0);
                          local6 = frame.peek();
                          frame.i32_store(2, 0);
                          frame.push(local0);
                          frame.push(local0);
                          frame.i64_load(0, 19);
                          local11 = frame.peek();
                          frame.i64_store(3, 48);
                          frame.push(local6);
                          frame.push(local11);
                          frame.i32_wrap_i64();
                          frame.i32_eq();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_8;
                          }
                          frame.unwindTo(0, 0);
                          break block_label_3;
                        }
                        frame.push(arg3);
                        frame.i32_const(1);
                        frame.i32_add();
                        local6 = frame.pop();
                        frame.push(arg1);
                        frame.i32_load(2, 0);
                        local7 = frame.pop();
                        frame.i32_const(0xf5144);
                        frame.i32_const(40);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_func020(t0, t1));
                        }
                        arg3 = frame.pop();
                        frame.push(local5);
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_6;
                        }
                        frame.push(arg3);
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_7;
                        }
                        frame.push(arg3);
                        frame.push(local2);
                        frame.i32_store8(0, 4);
                        frame.push(arg3);
                        frame.push(local7);
                        frame.i32_store(2, 0);
                        frame.push(arg3);
                        frame.push(local4);
                        frame.i64_load(0, 0);
                        frame.i64_store(0, 5);
                        frame.push(arg3);
                        frame.i32_const(24);
                        frame.i32_add();
                        frame.push(local1);
                        frame.i32_store8(0, 0);
                        frame.push(arg3);
                        frame.push(arg2);
                        frame.i32_const(0xffff);
                        frame.i32_and();
                        frame.i32_store(2, 20);
                        frame.push(arg3);
                        frame.i32_const(25);
                        frame.i32_add();
                        frame.push(local6);
                        frame.i32_load16_u(0, 0);
                        frame.i32_store16(0, 0);
                        frame.push(arg3);
                        frame.i32_const(36);
                        frame.i32_add();
                        frame.push(local9);
                        frame.i32_store(2, 0);
                        frame.push(arg3);
                        frame.i32_const(32);
                        frame.i32_add();
                        frame.push(local10);
                        frame.i32_store(2, 0);
                        frame.push(arg3);
                        frame.i32_const(28);
                        frame.i32_add();
                        frame.push(local8);
                        frame.i32_store(2, 0);
                        frame.push(arg3);
                        frame.i32_const(12);
                        frame.i32_add();
                        frame.push(local4);
                        frame.i32_const(7);
                        frame.i32_add();
                        frame.i64_load(0, 0);
                        frame.i64_store(0, 0);
                        frame.i32_const(2);
                        local8 = frame.pop();
                        frame.push(arg3);
                        frame.i32_const(27);
                        frame.i32_add();
                        frame.push(local6);
                        frame.i32_const(2);
                        frame.i32_add();
                        frame.i32_load8_u(0, 0);
                        frame.i32_store8(0, 0);
                        frame.unwindTo(0, 0);
                        break block_label_5;
                      }
                      frame.push(local0);
                      frame.i32_const(16);
                      frame.i32_add();
                      frame.i32_const(10);
                      frame.i32_add();
                      frame.push(arg3);
                      frame.i32_const(8);
                      frame.i32_add();
                      frame.i64_load(1, 0);
                      frame.i64_store(1, 0);
                      frame.push(arg0);
                      frame.push(arg2);
                      frame.i32_store16(1, 0);
                      frame.push(local0);
                      frame.push(arg3);
                      frame.i64_load(1, 0);
                      frame.i64_store(1, 18);
                      frame.push(arg0);
                      frame.push(local0);
                      frame.i64_load(3, 16);
                      frame.i64_store(1, 2);
                      frame.push(arg0);
                      frame.i32_const(10);
                      frame.i32_add();
                      frame.push(local0);
                      frame.i32_const(16);
                      frame.i32_add();
                      frame.i32_const(8);
                      frame.i32_add();
                      frame.i64_load(3, 0);
                      frame.i64_store(1, 0);
                      frame.push(arg0);
                      frame.i32_const(18);
                      frame.i32_add();
                      frame.push(local0);
                      frame.i32_const(32);
                      frame.i32_add();
                      frame.i32_load16_u(1, 0);
                      frame.i32_store16(1, 0);
                      frame.unwindTo(0, 0);
                      break block_label_0;
                    }
                    frame.push(local0);
                    frame.i32_const(48);
                    frame.i32_add();
                    frame.push(local6);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func069(t0, t1);
                    }
                    frame.unwindTo(0, 0);
                    break block_label_3;
                  }
                  frame.i32_const(40);
                  frame.i32_const(4);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func030(t0, t1);
                  }
                  throw Trap('unreachable');
                }
                frame.push(arg3);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(arg3);
                frame.push(local1);
                frame.i32_store8(0, 4);
                frame.push(arg3);
                frame.push(local9);
                frame.i32_store(2, 16);
                frame.push(arg3);
                frame.push(local10);
                frame.i32_store(2, 12);
                frame.push(arg3);
                frame.push(local8);
                frame.i32_store(2, 8);
                frame.push(arg3);
                frame.push(local7);
                frame.i32_store(2, 20);
                frame.push(arg3);
                frame.push(arg2);
                frame.i32_const(0xffff);
                frame.i32_and();
                frame.i32_store(2, 0);
                frame.push(arg3);
                frame.push(local6);
                frame.i32_load16_u(0, 0);
                frame.i32_store16(0, 5);
                frame.push(arg3);
                frame.i32_const(25);
                frame.i32_add();
                frame.push(local4);
                frame.i64_load(0, 0);
                frame.i64_store(0, 0);
                frame.push(arg3);
                frame.i32_const(24);
                frame.i32_add();
                frame.push(local2);
                frame.i32_store8(0, 0);
                frame.i32_const(2);
                local8 = frame.pop();
                frame.push(arg3);
                frame.i32_const(7);
                frame.i32_add();
                frame.push(local6);
                frame.i32_const(2);
                frame.i32_add();
                frame.i32_load8_u(0, 0);
                frame.i32_store8(0, 0);
                frame.push(arg3);
                frame.i32_const(32);
                frame.i32_add();
                frame.push(local4);
                frame.i32_const(7);
                frame.i32_add();
                frame.i64_load(0, 0);
                frame.i64_store(0, 0);
              }
              frame.i32_const(5);
              local1 = frame.pop();
              frame.push(arg3);
              local10 = frame.pop();
              frame.i32_const(2);
              local9 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.i32_const(40);
            frame.i32_const(4);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func030(t0, t1);
            }
            throw Trap('unreachable');
          }
          frame.push(local0);
          frame.i32_load(2, 52);
          local7 = frame.peek();
          frame.push(local5);
          frame.i32_const(20);
          frame.i32_mul();
          frame.i32_add();
          arg3 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local6);
              frame.push(local5);
              frame.i32_gt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local6);
              frame.push(local5);
              frame.i32_eq();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.push(local5);
              frame.push(local6);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func036(t0, t1);
              }
              throw Trap('unreachable');
            }
            frame.push(arg3);
            frame.i32_const(20);
            frame.i32_add();
            frame.push(arg3);
            frame.push(local6);
            frame.push(local5);
            frame.i32_sub();
            frame.i32_const(20);
            frame.i32_mul();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func004(t0, t1, t2));
            }
            frame.drop();
            frame.push(local0);
            frame.i32_load(2, 52);
            local7 = frame.pop();
          }
          frame.push(arg3);
          frame.push(local1);
          frame.i32_store8(0, 4);
          frame.push(arg3);
          frame.push(local0);
          frame.i32_load16_u(1, 40);
          frame.i32_store16(0, 5);
          frame.push(arg3);
          frame.push(local9);
          frame.i32_store(2, 16);
          frame.push(arg3);
          frame.push(local10);
          frame.i32_store(2, 12);
          frame.push(arg3);
          frame.push(local8);
          frame.i32_store(2, 8);
          frame.push(arg3);
          frame.push(arg2);
          frame.i32_const(0xffff);
          frame.i32_and();
          frame.i32_store(2, 0);
          frame.push(arg3);
          frame.i32_const(7);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(42);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          frame.i32_store8(0, 0);
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_add();
          local9 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 48);
          local8 = frame.pop();
          frame.i32_const(5);
          local1 = frame.pop();
          frame.push(local7);
          local10 = frame.pop();
        }
      }
      frame.push(arg1);
      {
        var t0 = frame.pop();
        _func052(t0);
      }
      frame.push(arg1);
      frame.push(local1);
      frame.i32_store8(0, 4);
      frame.push(arg1);
      frame.push(arg3);
      frame.i32_store(2, 0);
      frame.push(local4);
      frame.i32_const(2);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(44);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_add();
      frame.i32_load8_u(0, 0);
      frame.i32_store8(0, 0);
      frame.push(local4);
      frame.push(local0);
      frame.i32_load16_u(1, 44);
      frame.i32_store16(0, 0);
      frame.push(arg1);
      frame.push(local9);
      frame.i32_store(2, 16);
      frame.push(arg1);
      frame.push(local10);
      frame.i32_store(2, 12);
      frame.push(arg1);
      frame.push(local8);
      frame.i32_store(2, 8);
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_store8(0, 4);
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func077(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(2);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store16(1, 14);
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            local1 = frame.pop();
            frame.i32_const(0);
            local2 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local3 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_7;
                    }
                    frame.push(local2);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_6;
                    }
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local3);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local2 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(14);
                  frame.i32_add();
                  frame.push(local1);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(14);
                frame.i32_add();
                frame.push(local1);
                frame.i32_add();
                frame.push(local3);
                frame.i32_store8(0, 0);
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_load16_u(1, 14);
                local1 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(local3);
              frame.i32_eqz();
              local2 = frame.pop();
              frame.push(local1);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.push(arg3);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.i64_const(0x200000000);
        frame.i64_store(2, 0);
      }
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store16(1, 4);
    }
    frame.push(arg0);
    frame.push(local2);
    frame.i32_store(2, 0);
  }

  void _func078(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg3);
          frame.i32_const(3);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store8(0, 14);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store16(1, 12);
          frame.push(arg3);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            local1 = frame.pop();
            frame.i32_const(0);
            local2 = frame.pop();

            loop_label_4:
            for (;;) {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg1);
                    frame.push(local1);
                    frame.i32_add();
                    frame.i32_load8_s(0, 0);
                    local3 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_7;
                    }
                    frame.push(local2);
                    frame.i32_const(-1);
                    frame.i32_xor();
                    frame.push(local3);
                    frame.i32_const(-1);
                    frame.i32_gt_s();
                    frame.i32_and();
                    if (frame.pop() != 0) {
                      frame.unwindTo(3, 0);
                      break block_label_6;
                    }
                    frame.i32_const(2);
                    frame.i32_const(1);
                    frame.push(local3);
                    frame.i32_const(0);
                    frame.i32_lt_s();
                    frame.select();
                    local2 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(local0);
                  frame.i32_const(12);
                  frame.i32_add();
                  frame.push(local1);
                  frame.i32_add();
                  frame.i32_const(0);
                  frame.i32_store8(0, 0);
                  frame.i32_const(1);
                  local2 = frame.pop();
                  frame.push(local1);
                  frame.i32_const(1);
                  frame.i32_add();
                  local1 = frame.peek();
                  frame.push(arg3);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(12);
                frame.i32_add();
                frame.push(local1);
                frame.i32_add();
                frame.push(local3);
                frame.i32_store8(0, 0);
                frame.push(local1);
                frame.i32_const(1);
                frame.i32_add();
                local1 = frame.peek();
                frame.push(arg3);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_load16_u(1, 12);
                frame.push(local0);
                frame.i32_load8_u(0, 14);
                frame.i32_const(16);
                frame.i32_shl();
                frame.i32_or();
                local1 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(local3);
              frame.i32_eqz();
              local2 = frame.pop();
              frame.push(local1);
              frame.push(arg2);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.push(arg3);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.i64_const(0x300000000);
        frame.i64_store(2, 0);
      }
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store16(1, 4);
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.i32_const(6);
      frame.i32_add();
      frame.push(local1);
      frame.i32_const(16);
      frame.i32_shr_u();
      frame.i32_store8(0, 0);
    }
    frame.push(arg0);
    frame.push(local2);
    frame.i32_store(2, 0);
  }

  void _func079(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i64 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_load(2, 8);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  frame.unwindTo(0, 0);
                  break block_label_3;

                case 1:
                  frame.unwindTo(0, 0);
                  break block_label_2;

                default:
                  frame.unwindTo(0, 0);
                  break block_label_4;
              }
            }
            frame.push(arg0);
            frame.i32_const(2);
            frame.i32_store8(0, 0);
            frame.push(arg0);
            frame.push(arg1);
            frame.i64_load(2, 0);
            frame.i64_store(2, 4);
            frame.push(arg0);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(arg1);
            frame.i32_const(8);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_store(2, 0);
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
          frame.push(arg1);
          frame.i32_load(2, 0);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(0xf5144);
          frame.push(arg1);
          frame.i32_load(2, 4);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func019(t0, t1);
          }
        }
        frame.push(arg1);
        frame.i32_load(2, 4);
        local0 = frame.peek();
        frame.i64_load(0, 0);
        local1 = frame.peek();
        frame.i64_const(255);
        frame.i64_and();
        frame.i64_const(128);
        frame.i64_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i64_store(0, 1);
        frame.push(arg0);
        frame.i32_const(1);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0xf5144);
        frame.push(local0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
      }
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _func080(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_const(25);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    local0 = frame.pop();
    frame.push(arg0);
    frame.i32_load16_u(0, 23);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load(2, 0);
          local2 = frame.peek();
          frame.i32_load8_u(0, 0);
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(1);
          local3 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg1 = frame.peek();
          frame.i32_load(2, 0);
          frame.i32_const(45);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_load(2, 16);
          {
            var func = table0[frame.pop()] as FunctionType1?;
            if (func == null) throw Trap('uninitialized element');
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1));
          }
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local2);
        frame.i32_const(0);
        frame.i32_store8(0, 0);
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg1 = frame.pop();
      }
      frame.i32_const(1);
      local3 = frame.pop();
      frame.push(arg1);
      frame.i32_load(2, 0);
      frame.push(arg0);
      frame.i32_const(23);
      frame.i32_add();
      frame.i32_const(4);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      frame.i32_clz();
      frame.i32_const(3);
      frame.i32_shr_u();
      frame.i32_sub();
      frame.push(arg1);
      frame.i32_load(2, 4);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()] as FunctionType0?;
        if (func == null) throw Trap('uninitialized element');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 16);
        frame.i32_const(128);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_load(2, 0);
        local1 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local2);
            frame.i32_load8_u(0, 0);
            if (frame.pop() != 0) {
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_const(45);
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()] as FunctionType1?;
              if (func == null) throw Trap('uninitialized element');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.unwindTo(5, 0);
            break block_label_2;
          }
          frame.push(local2);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.push(local0);
        frame.i32_const(4);
        frame.push(local1);
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()] as FunctionType0?;
          if (func == null) throw Trap('uninitialized element');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 20);
        frame.i32_const(128);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(2);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        local1 = frame.pop();
        frame.push(local0);
        frame.i32_load16_u(1, 0);
        local4 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(local2);
            frame.i32_load8_u(0, 0);
            if (frame.pop() != 0) {
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_const(45);
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_load(2, 16);
            {
              var func = table0[frame.pop()] as FunctionType1?;
              if (func == null) throw Trap('uninitialized element');
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1));
            }
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.unwindTo(5, 0);
            break block_label_2;
          }
          frame.push(local2);
          frame.i32_const(0);
          frame.i32_store8(0, 0);
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.push(local0);
        frame.i32_const(4);
        frame.push(local4);
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()] as FunctionType0?;
          if (func == null) throw Trap('uninitialized element');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      frame.i32_const(0xf4610);
      local3 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 0);
            local0 = frame.peek();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(4, 0);
                break block_label_1;

              case 1:
                frame.unwindTo(4, 0);
                break block_label_3;

              case 2:
                frame.unwindTo(4, 0);
                break block_label_2;

              default:
                frame.unwindTo(4, 0);
                break block_label_1;
            }
          }
          frame.i32_const(1);
          local0 = frame.pop();
          frame.push(arg0);
          frame.i32_const(1);
          frame.i32_add();
          local3 = frame.pop();
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local0 = frame.pop();
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        local3 = frame.pop();
      }
      frame.push(local0);
      frame.i32_const(3);
      frame.i32_shl();
      local0 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(local0);
          arg0 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(4, 0);
            break block_label_1;
          }
          frame.push(local3);
          frame.i64_load(0, 0);
          local5 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local2);
              frame.i32_load8_u(0, 0);
              if (frame.pop() != 0) {
                frame.unwindTo(5, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_1;
              }
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(local2);
            frame.i32_const(0);
            frame.i32_store8(0, 0);
          }
          frame.push(arg0);
          frame.i32_const(-8);
          frame.i32_add();
          local0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 0);
          frame.push(local3);
          frame.i32_const(8);
          frame.push(local5);
          frame.i64_clz();
          frame.i32_wrap_i64();
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_sub();
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()] as FunctionType0?;
            if (func == null) throw Trap('uninitialized element');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          local1 = frame.pop();
          frame.push(local3);
          frame.i32_const(8);
          frame.i32_add();
          local3 = frame.pop();
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_ne();
      local3 = frame.pop();
    }
    frame.push(local3);
    return frame.pop();
  }

  void _func081(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;
    i32 local24 = 0;
    i32 local25 = 0;
    i32 local26 = 0;
    i32 local27 = 0;
    i32 local28 = 0;
    i32 local29 = 0;
    i32 local30 = 0;
    i32 local31 = 0;
    i32 local32 = 0;
    i64 local33 = 0;
    i64 local34 = 0;
    i32 local35 = 0;
    i32 local36 = 0;
    i32 local37 = 0;
    i32 local38 = 0;
    i64 local39 = 0;
    i64 local40 = 0;
    i64 local41 = 0;
    i32 local42 = 0;
    i64 local43 = 0;
    i32 local44 = 0;
    i32 local45 = 0;
    i32 local46 = 0;
    i32 local47 = 0;
    i32 local48 = 0;
    i32 local49 = 0;
    i32 local50 = 0;
    i32 local51 = 0;
    i32 local52 = 0;
    i64 local53 = 0;
    i32 local54 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(448);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    frame.i32_const(0);
    local2 = frame.pop();
    block_label_0:
    {
      frame.push(arg2);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      local2 = frame.pop();
      frame.push(arg1);
      frame.i32_load8_u(0, 0);
      local3 = frame.peek();
      frame.i32_const(45);
      frame.i32_eq();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      local1 = frame.pop();
      frame.i32_const(0);
      local2 = frame.pop();
      frame.push(local3);
      frame.i32_const(95);
      frame.i32_eq();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(72);
      frame.i32_add();
      frame.push(arg1);
      frame.push(arg2);
      frame.i32_const(0);
      {
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func082(t0, t1, t2, t3);
      }
      frame.push(local0);
      frame.i32_load(2, 76);
      local1 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 72);
      local2 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(92);
    frame.i32_add();
    frame.push(arg2);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store8(0, 96);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 88);
    frame.push(local0);
    frame.push(local1);
    frame.i32_store(2, 84);
    frame.push(local0);
    frame.push(local2);
    frame.i32_store(2, 80);
    frame.i32_const(1);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(200);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(80);
    frame.i32_add();
    frame.i32_const(1);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func083(t0, t1, t2);
    }
    frame.i32_const(3);
    local4 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local0);
              frame.i32_load8_u(0, 200);
              local5 = frame.peek();
              frame.i32_const(3);
              frame.i32_eq();
              if (frame.pop() != 0) {
                frame.unwindTo(3, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_const(104);
              frame.i32_add();
              frame.i32_const(8);
              frame.i32_add();
              local6 = frame.peek();
              frame.push(local0);
              frame.i32_const(220);
              frame.i32_add();
              frame.i64_load(2, 0);
              frame.i64_store(3, 0);
              frame.push(local0);
              frame.push(local0);
              frame.i64_load(2, 212);
              frame.i64_store(3, 104);
              frame.push(local0);
              frame.i32_load(2, 208);
              local7 = frame.pop();
              frame.push(local0);
              frame.i32_load(2, 204);
              local8 = frame.pop();
              frame.push(local0);
              frame.i32_load16_u(1, 202);
              local9 = frame.pop();
              frame.push(local0);
              frame.i32_load8_u(0, 201);
              local10 = frame.pop();
              block_label_5:
              {
                frame.push(local0);
                frame.i32_load8_u(0, 96);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(4, 0);
                  break block_label_5;
                }
                frame.i32_const(4);
                local11 = frame.pop();
                frame.i32_const(0);
                local12 = frame.pop();
                frame.i32_const(0);
                local13 = frame.pop();
                frame.i32_const(0);
                local14 = frame.pop();
                frame.i32_const(0);
                local15 = frame.pop();
                frame.i32_const(0);
                local16 = frame.pop();
                frame.i32_const(4);
                arg2 = frame.pop();
                frame.i32_const(0);
                arg1 = frame.pop();
                frame.i32_const(3);
                local3 = frame.pop();
                frame.i32_const(0);
                local17 = frame.pop();
                frame.i32_const(1);
                local2 = frame.pop();
                frame.i32_const(0);
                local18 = frame.pop();
                frame.unwindTo(3, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.i32_load(2, 84);
              local1 = frame.peek();
              frame.push(local0);
              frame.i32_load(2, 80);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(3, 0);
                break block_label_0;
              }
              frame.push(local1);
              frame.push(local0);
              frame.i32_load(2, 92);
              frame.i32_le_u();
              if (frame.pop() != 0) {
                frame.unwindTo(3, 0);
                break block_label_3;
              }
              frame.unwindTo(3, 0);
              break block_label_0;
            }
            frame.push(local0);
            frame.i32_load8_u(0, 201);
            local1 = frame.pop();
            frame.push(arg0);
            frame.i32_const(3);
            frame.i32_store8(0, 96);
            frame.push(arg0);
            frame.push(local1);
            frame.i32_store8(0, 0);
            frame.unwindTo(3, 0);
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_const(6);
          frame.i32_store8(0, 184);
          frame.push(local0);
          frame.i32_const(4);
          frame.i32_store8(0, 212);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 248);
          frame.push(local0);
          frame.i64_const(0x400000000);
          frame.i64_store(3, 240);
          frame.i32_const(1);
          local2 = frame.pop();
          frame.push(local0);
          frame.i32_const(64);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(80);
          frame.i32_add();
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func048(t0, t1);
          }
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_load(2, 64);
                  local1 = frame.peek();
                  if (frame.pop() != 0) {
                    frame.unwindTo(5, 0);
                    break block_label_6;
                  }
                  frame.i32_const(4);
                  arg2 = frame.pop();
                  frame.i32_const(0);
                  local17 = frame.pop();
                  frame.i32_const(3);
                  local3 = frame.pop();
                  frame.i32_const(0);
                  local18 = frame.pop();
                  frame.i32_const(0);
                  local19 = frame.pop();
                  frame.i32_const(0);
                  arg1 = frame.pop();
                  frame.unwindTo(5, 0);
                  break block_label_5;
                }
                frame.push(local0);
                frame.i32_const(213);
                frame.i32_add();
                local20 = frame.pop();
                frame.push(local0);
                frame.i32_const(200);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_or();
                local21 = frame.pop();
                frame.push(local0);
                frame.i32_const(368);
                frame.i32_add();
                frame.i32_const(16);
                frame.i32_add();
                local22 = frame.pop();
                frame.push(local0);
                frame.i32_const(185);
                frame.i32_add();
                local23 = frame.pop();
                frame.push(local0);
                frame.i32_const(168);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_or();
                local24 = frame.pop();
                frame.push(local0);
                frame.i32_const(336);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_or();
                local25 = frame.pop();
                frame.push(local0);
                frame.i32_const(368);
                frame.i32_add();
                frame.i32_const(5);
                frame.i32_or();
                local26 = frame.pop();
                frame.push(local0);
                frame.i32_load(2, 68);
                local2 = frame.pop();
                frame.push(local0);
                frame.i32_const(200);
                frame.i32_add();
                frame.i32_const(24);
                frame.i32_add();
                local27 = frame.pop();
                frame.push(local0);
                frame.i32_const(408);
                frame.i32_add();
                frame.i32_const(16);
                frame.i32_add();
                local28 = frame.pop();
                frame.push(local0);
                frame.i32_const(420);
                frame.i32_add();
                local29 = frame.pop();
                frame.push(local0);
                frame.i32_const(320);
                frame.i32_add();
                frame.i32_const(8);
                frame.i32_add();
                local30 = frame.pop();
                frame.push(local0);
                frame.i32_const(320);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_or();
                local31 = frame.peek();
                frame.i32_const(7);
                frame.i32_add();
                local32 = frame.pop();
                frame.i32_const(0);
                local19 = frame.pop();
                frame.i32_const(6);
                local15 = frame.pop();
                frame.i32_const(4);
                local4 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        loop_label_10:
                        for (;;) {
                          block_label_11:
                          {
                            frame.push(local2);
                            if (frame.pop() != 0) {
                              frame.unwindTo(5, 0);
                              break block_label_11;
                            }
                            frame.i32_const(2);
                            local16 = frame.pop();
                            frame.unwindTo(5, 0);
                            break block_label_9;
                          }
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          frame.push(local1);
                                                          frame.i32_load8_u(0, 0);
                                                          local1 = frame.peek();
                                                          frame.i32_const(-65);
                                                          frame.i32_add();
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          frame.i32_const(26);
                                                          frame.i32_lt_u();
                                                          frame.i32_const(5);
                                                          frame.i32_shl();
                                                          frame.push(local1);
                                                          frame.i32_or();
                                                          local1 = frame.peek();
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          frame.i32_const(-116);
                                                          frame.i32_add();
                                                          var t0 = frame.pop();
                                                          switch (t0) {
                                                            case 0:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_25;

                                                            case 1:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_24;

                                                            case 2:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_26;

                                                            case 3:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_26;

                                                            case 4:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_22;

                                                            default:
                                                              frame.unwindTo(5, 0);
                                                              break block_label_26;
                                                          }
                                                        }
                                                        frame.i32_const(2);
                                                        local16 = frame.pop();
                                                        frame.push(local1);
                                                        frame.i32_const(-97);
                                                        frame.i32_add();
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        frame.i32_const(26);
                                                        frame.i32_lt_u();
                                                        local2 = frame.peek();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(5, 0);
                                                          break block_label_21;
                                                        }
                                                        frame.unwindTo(5, 0);
                                                        break block_label_9;
                                                      }
                                                      frame.push(local4);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(4);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_23;
                                                      }
                                                      frame.unwindTo(5, 0);
                                                      break block_label_11;
                                                    }
                                                    frame.push(local15);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(6);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(5, 0);
                                                      break block_label_11;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_const(0);
                                                    frame.i32_store(2, 344);
                                                    frame.push(local0);
                                                    frame.i64_const(0x100000000);
                                                    frame.i64_store(3, 336);
                                                    frame.push(local22);
                                                    frame.i32_const(0x3030303);
                                                    frame.i32_store(2, 0);
                                                    frame.push(local0);
                                                    frame.i32_const(368);
                                                    frame.i32_add();
                                                    frame.i32_const(8);
                                                    frame.i32_add();
                                                    frame.i64_const(0x303030303030303);
                                                    frame.i64_store(3, 0);
                                                    frame.push(local0);
                                                    frame.i64_const(0x303030303030303);
                                                    frame.i64_store(3, 368);
                                                    frame.push(local0);
                                                    frame.i32_const(0);
                                                    frame.i32_store(2, 360);
                                                    frame.push(local0);
                                                    frame.i64_const(0x100000000);
                                                    frame.i64_store(3, 352);
                                                    frame.i32_const(3);
                                                    local15 = frame.pop();
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 96);
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(5, 0);
                                                      break block_label_19;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 84);
                                                    local1 = frame.peek();
                                                    frame.push(local0);
                                                    frame.i32_load(2, 80);
                                                    local2 = frame.peek();
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(3, 0);
                                                      break block_label_0;
                                                    }
                                                    frame.push(local1);
                                                    frame.push(local0);
                                                    frame.i32_load(2, 92);
                                                    frame.i32_gt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(3, 0);
                                                      break block_label_0;
                                                    }
                                                    frame.push(local1);
                                                    frame.push(local2);
                                                    frame.i32_sub();
                                                    local1 = frame.peek();
                                                    frame.i32_const(-9);
                                                    frame.i32_add();
                                                    frame.i32_const(-6);
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(5, 0);
                                                      break block_label_20;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 88);
                                                    frame.push(local2);
                                                    frame.i32_add();
                                                    arg2 = frame.pop();

                                                    loop_label_24:
                                                    for (;;) {
                                                      frame.push(local0);
                                                      frame.i32_const(408);
                                                      frame.i32_add();
                                                      frame.push(arg2);
                                                      frame.push(local1);
                                                      frame.push(local1);
                                                      {
                                                        var t3 = frame.pop();
                                                        var t2 = frame.pop();
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func049(t0, t1, t2, t3);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 408);
                                                      frame.i32_const(3);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_20;
                                                      }
                                                      frame.push(local0);
                                                      frame.i64_load(2, 412);
                                                      local33 = frame.peek();
                                                      frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                      frame.i64_add();
                                                      frame.i64_const(-0x5050505050505051);
                                                      frame.push(local33);
                                                      frame.i64_sub();
                                                      frame.push(local33);
                                                      frame.i64_const(0x4646464646464646);
                                                      frame.i64_add();
                                                      frame.i64_or();
                                                      frame.i64_and();
                                                      frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                      frame.push(local33);
                                                      frame.i64_const(0x2020202020202020);
                                                      frame.i64_or();
                                                      local34 = frame.peek();
                                                      frame.i64_sub();
                                                      frame.push(local34);
                                                      frame.i64_const(0x505050505050505);
                                                      frame.i64_add();
                                                      frame.i64_or();
                                                      frame.i64_and();
                                                      frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                      frame.i64_and();
                                                      frame.i64_eqz();
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_20;
                                                      }
                                                      frame.push(local33);
                                                      frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                                      frame.i64_add();
                                                      frame.i64_const(-0x2525252525252526);
                                                      frame.push(local33);
                                                      frame.i64_sub();
                                                      frame.i64_and();
                                                      frame.i64_const(2);
                                                      frame.i64_shr_u();
                                                      frame.i64_const(0x2020202020202020);
                                                      frame.i64_and();
                                                      frame.push(local33);
                                                      frame.i64_or();
                                                      local33 = frame.peek();
                                                      frame.i64_const(255);
                                                      frame.i64_and();
                                                      frame.i64_const(128);
                                                      frame.i64_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_20;
                                                      }
                                                      frame.push(local0);
                                                      frame.push(local33);
                                                      frame.i64_store(3, 408);
                                                      frame.push(local0);
                                                      frame.i32_load(2, 340);
                                                      local18 = frame.pop();
                                                      frame.i32_const(0);
                                                      local3 = frame.pop();
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          frame.push(local0);
                                                          frame.i32_load(2, 344);
                                                          local17 = frame.peek();
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(17, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local17);
                                                          local1 = frame.pop();
                                                          frame.push(local17);
                                                          local11 = frame.pop();

                                                          loop_label_27:
                                                          for (;;) {
                                                            frame.push(local18);
                                                            frame.push(local1);
                                                            frame.i32_const(1);
                                                            frame.i32_shr_u();
                                                            frame.push(local3);
                                                            frame.i32_add();
                                                            local12 = frame.peek();
                                                            frame.i32_const(3);
                                                            frame.i32_shl();
                                                            frame.i32_add();
                                                            arg1 = frame.pop();
                                                            frame.i32_const(0);
                                                            local1 = frame.pop();

                                                            loop_label_28:
                                                            for (;;) {
                                                              frame.push(local1);
                                                              frame.i32_const(8);
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(17, 0);
                                                                break block_label_25;
                                                              }
                                                              frame.push(arg1);
                                                              frame.push(local1);
                                                              frame.i32_add();
                                                              local2 = frame.pop();
                                                              frame.push(local0);
                                                              frame.i32_const(408);
                                                              frame.i32_add();
                                                              frame.push(local1);
                                                              frame.i32_add();
                                                              arg2 = frame.pop();
                                                              frame.push(local1);
                                                              frame.i32_const(1);
                                                              frame.i32_add();
                                                              local1 = frame.pop();
                                                              frame.push(local2);
                                                              frame.i32_load8_u(0, 0);
                                                              local2 = frame.peek();
                                                              frame.push(arg2);
                                                              frame.i32_load8_u(0, 0);
                                                              arg2 = frame.peek();
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) {
                                                                continue loop_label_28;
                                                              }
                                                              break;
                                                            }
                                                            frame.push(local11);
                                                            frame.push(local12);
                                                            frame.push(local2);
                                                            frame.push(arg2);
                                                            frame.i32_lt_u();
                                                            local1 = frame.peek();
                                                            frame.select();
                                                            local11 = frame.peek();
                                                            frame.push(local12);
                                                            frame.i32_const(1);
                                                            frame.i32_add();
                                                            frame.push(local3);
                                                            frame.push(local1);
                                                            frame.select();
                                                            local3 = frame.peek();
                                                            frame.i32_sub();
                                                            local1 = frame.pop();
                                                            frame.push(local11);
                                                            frame.push(local3);
                                                            frame.i32_gt_u();
                                                            if (frame.pop() != 0) {
                                                              continue loop_label_27;
                                                            }
                                                            break;
                                                          }
                                                        }
                                                        block_label_26:
                                                        {
                                                          frame.push(local0);
                                                          frame.i32_load(2, 336);
                                                          frame.push(local17);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(17, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(336);
                                                          frame.i32_add();
                                                          frame.push(local17);
                                                          {
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func071(t0, t1);
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 340);
                                                          local18 = frame.pop();
                                                        }
                                                        frame.push(local18);
                                                        frame.push(local3);
                                                        frame.i32_const(3);
                                                        frame.i32_shl();
                                                        frame.i32_add();
                                                        local1 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            frame.push(local17);
                                                            frame.push(local3);
                                                            frame.i32_gt_u();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(17, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.push(local17);
                                                            frame.push(local3);
                                                            frame.i32_eq();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(17, 0);
                                                              break block_label_26;
                                                            }
                                                            frame.push(local3);
                                                            frame.push(local17);
                                                            {
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func036(t0, t1);
                                                            }
                                                            throw Trap('unreachable');
                                                          }
                                                          frame.push(local1);
                                                          frame.i32_const(8);
                                                          frame.i32_add();
                                                          frame.push(local1);
                                                          frame.push(local17);
                                                          frame.push(local3);
                                                          frame.i32_sub();
                                                          frame.i32_const(3);
                                                          frame.i32_shl();
                                                          {
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            frame.push(_func004(t0, t1, t2));
                                                          }
                                                          frame.drop();
                                                        }
                                                        frame.push(local1);
                                                        frame.push(local33);
                                                        frame.i64_store(0, 0);
                                                        frame.push(local0);
                                                        frame.push(local17);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        frame.i32_store(2, 344);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_const(24);
                                                      frame.i32_add();
                                                      frame.push(local0);
                                                      frame.i32_const(80);
                                                      frame.i32_add();
                                                      {
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func048(t0, t1);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 96);
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_19;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 84);
                                                      local1 = frame.peek();
                                                      frame.push(local0);
                                                      frame.i32_load(2, 80);
                                                      local2 = frame.peek();
                                                      frame.i32_lt_u();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(3, 0);
                                                        break block_label_0;
                                                      }
                                                      frame.push(local1);
                                                      frame.push(local0);
                                                      frame.i32_load(2, 92);
                                                      frame.i32_gt_u();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(3, 0);
                                                        break block_label_0;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 88);
                                                      frame.push(local2);
                                                      frame.i32_add();
                                                      arg2 = frame.pop();
                                                      frame.push(local1);
                                                      frame.push(local2);
                                                      frame.i32_sub();
                                                      local1 = frame.peek();
                                                      frame.i32_const(-9);
                                                      frame.i32_add();
                                                      frame.i32_const(-6);
                                                      frame.i32_ge_u();
                                                      if (frame.pop() != 0) {
                                                        continue loop_label_24;
                                                      }
                                                      frame.unwindTo(5, 0);
                                                      break block_label_20;

                                                      break;
                                                    }
                                                  }
                                                  frame.push(local30);
                                                  frame.i32_const(0);
                                                  frame.i32_load(2, 0xf4618);
                                                  frame.i32_store(2, 0);
                                                  frame.push(local0);
                                                  frame.i32_const(0);
                                                  frame.i64_load(2, 0xf4610);
                                                  frame.i64_store(3, 320);
                                                  frame.i32_const(3);
                                                  local4 = frame.pop();
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          frame.push(local0);
                                                          frame.i32_load8_u(0, 96);
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(5, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 84);
                                                          local1 = frame.peek();
                                                          frame.push(local0);
                                                          frame.i32_load(2, 80);
                                                          local2 = frame.peek();
                                                          frame.i32_lt_u();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(3, 0);
                                                            break block_label_0;
                                                          }
                                                          frame.push(local1);
                                                          frame.push(local0);
                                                          frame.i32_load(2, 92);
                                                          frame.i32_gt_u();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(3, 0);
                                                            break block_label_0;
                                                          }
                                                          frame.i32_const(3);
                                                          local4 = frame.pop();
                                                          frame.push(local0);
                                                          frame.i32_load(2, 88);
                                                          frame.push(local2);
                                                          frame.i32_add();
                                                          frame.push(local1);
                                                          frame.push(local2);
                                                          frame.i32_sub();
                                                          local1 = frame.peek();
                                                          frame.push(local1);
                                                          {
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            frame.push(_func084(t0, t1, t2));
                                                          }
                                                          frame.i32_const(255);
                                                          frame.i32_and();
                                                          frame.i32_const(128);
                                                          frame.i32_eq();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(5, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(408);
                                                          frame.i32_add();
                                                          frame.push(local0);
                                                          frame.i32_const(80);
                                                          frame.i32_add();
                                                          frame.i32_const(2);
                                                          {
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func083(t0, t1, t2);
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load8_u(0, 409);
                                                          local35 = frame.pop();
                                                          block_label_27:
                                                          {
                                                            frame.push(local0);
                                                            frame.i32_load8_u(0, 408);
                                                            local4 = frame.peek();
                                                            frame.i32_const(3);
                                                            frame.i32_eq();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(14, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_const(304);
                                                            frame.i32_add();
                                                            frame.i32_const(8);
                                                            frame.i32_add();
                                                            frame.push(local29);
                                                            frame.i32_const(8);
                                                            frame.i32_add();
                                                            frame.i64_load(2, 0);
                                                            frame.i64_store(3, 0);
                                                            frame.push(local0);
                                                            frame.push(local29);
                                                            frame.i64_load(2, 0);
                                                            frame.i64_store(3, 304);
                                                            frame.push(local0);
                                                            frame.i32_load(2, 416);
                                                            local36 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_load(2, 412);
                                                            local37 = frame.pop();
                                                            frame.push(local0);
                                                            frame.i32_load16_u(1, 410);
                                                            local38 = frame.pop();
                                                            frame.unwindTo(5, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(320);
                                                          frame.i32_add();
                                                          {
                                                            var t0 = frame.pop();
                                                            _func051(t0);
                                                          }
                                                          frame.push(local35);
                                                          local16 = frame.pop();
                                                          frame.unwindTo(5, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(0);
                                                        frame.i32_store(2, 344);
                                                        frame.push(local0);
                                                        frame.i64_const(0x100000000);
                                                        frame.i64_store(3, 336);
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                frame.push(local0);
                                                                frame.i32_load8_u(0, 96);
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(5, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_load(2, 84);
                                                                local1 = frame.peek();
                                                                frame.push(local0);
                                                                frame.i32_load(2, 80);
                                                                local2 = frame.peek();
                                                                frame.i32_lt_u();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(3, 0);
                                                                  break block_label_0;
                                                                }
                                                                frame.push(local1);
                                                                frame.push(local0);
                                                                frame.i32_load(2, 92);
                                                                frame.i32_gt_u();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(3, 0);
                                                                  break block_label_0;
                                                                }
                                                                frame.push(local1);
                                                                frame.push(local2);
                                                                frame.i32_sub();
                                                                arg2 = frame.pop();
                                                                frame.push(local0);
                                                                frame.i32_load(2, 88);
                                                                frame.push(local2);
                                                                frame.i32_add();
                                                                local3 = frame.pop();
                                                                frame.i32_const(128);
                                                                local17 = frame.pop();
                                                                block_label_30:
                                                                {
                                                                  loop_label_31:
                                                                  for (;;) {
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  frame.push(local17);
                                                                                  frame.i32_const(255);
                                                                                  frame.i32_and();
                                                                                  local12 = frame.peek();
                                                                                  frame.i32_const(128);
                                                                                  frame.i32_eq();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(8, 0);
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.i32_const(1);
                                                                                  local18 = frame.pop();
                                                                                  frame.push(arg2);
                                                                                  frame.i32_const(8);
                                                                                  frame.i32_gt_u();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(8, 0);
                                                                                    break block_label_33;
                                                                                  }
                                                                                  frame.push(local0);
                                                                                  frame.i64_const(0);
                                                                                  frame.i64_store(3, 408);
                                                                                  frame.push(arg2);
                                                                                  frame.i32_eqz();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(8, 0);
                                                                                    break block_label_34;
                                                                                  }
                                                                                  frame.i32_const(0);
                                                                                  local1 = frame.pop();
                                                                                  frame.i32_const(0);
                                                                                  arg1 = frame.pop();
                                                                                  block_label_39:
                                                                                  {
                                                                                    loop_label_40:
                                                                                    for (;;) {
                                                                                      block_label_41:
                                                                                      {
                                                                                        block_label_42:
                                                                                        {
                                                                                          frame.push(local3);
                                                                                          frame.push(local1);
                                                                                          frame.i32_add();
                                                                                          frame.i32_load8_s(
                                                                                              0, 0);
                                                                                          local2 =
                                                                                              frame.peek();
                                                                                          frame.i32_eqz();
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                11, 0);
                                                                                            break block_label_42;
                                                                                          }
                                                                                          frame.push(arg1);
                                                                                          frame.i32_const(-1);
                                                                                          frame.i32_xor();
                                                                                          frame.push(local2);
                                                                                          frame.i32_const(-1);
                                                                                          frame.i32_gt_s();
                                                                                          frame.i32_and();
                                                                                          frame.i32_eqz();
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                8, 0);
                                                                                            break block_label_33;
                                                                                          }
                                                                                          frame.push(local0);
                                                                                          frame
                                                                                              .i32_const(408);
                                                                                          frame.i32_add();
                                                                                          frame.push(local1);
                                                                                          frame.i32_add();
                                                                                          frame.push(local2);
                                                                                          frame.i32_store8(
                                                                                              0, 0);
                                                                                          frame.push(local1);
                                                                                          frame.i32_const(1);
                                                                                          frame.i32_add();
                                                                                          local1 =
                                                                                              frame.peek();
                                                                                          frame.push(arg2);
                                                                                          frame.i32_ne();
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                11, 0);
                                                                                            break block_label_41;
                                                                                          }
                                                                                          frame.push(local0);
                                                                                          frame.i64_load(
                                                                                              3, 408);
                                                                                          local33 =
                                                                                              frame.peek();
                                                                                          frame
                                                                                              .i64_const(255);
                                                                                          frame.i64_and();
                                                                                          frame
                                                                                              .i64_const(128);
                                                                                          frame.i64_ne();
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                11, 0);
                                                                                            break block_label_39;
                                                                                          }
                                                                                          frame.push(local33);
                                                                                          frame.i64_const(8);
                                                                                          frame.i64_shr_u();
                                                                                          frame
                                                                                              .i32_wrap_i64();
                                                                                          local18 =
                                                                                              frame.pop();
                                                                                          frame.unwindTo(
                                                                                              8, 0);
                                                                                          break block_label_33;
                                                                                        }
                                                                                        frame.push(local0);
                                                                                        frame.i32_const(408);
                                                                                        frame.i32_add();
                                                                                        frame.push(local1);
                                                                                        frame.i32_add();
                                                                                        frame.i32_const(0);
                                                                                        frame.i32_store8(
                                                                                            0, 0);
                                                                                        frame.push(local1);
                                                                                        frame.i32_const(1);
                                                                                        frame.i32_add();
                                                                                        local1 = frame.peek();
                                                                                        frame.push(arg2);
                                                                                        frame.i32_eq();
                                                                                        if (frame.pop() !=
                                                                                            0) {
                                                                                          frame.unwindTo(
                                                                                              8, 0);
                                                                                          break block_label_33;
                                                                                        }
                                                                                      }
                                                                                      frame.push(local2);
                                                                                      frame.i32_eqz();
                                                                                      arg1 = frame.pop();
                                                                                      frame.push(local1);
                                                                                      frame.push(arg2);
                                                                                      frame.i32_eq();
                                                                                      if (frame.pop() != 0) {
                                                                                        frame.unwindTo(3, 0);
                                                                                        break block_label_0;
                                                                                      }
                                                                                      continue loop_label_40;

                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  frame.i32_const(2);
                                                                                  local18 = frame.pop();
                                                                                  frame.push(arg2);
                                                                                  frame.i32_const(-3);
                                                                                  frame.i32_add();
                                                                                  frame.i32_const(5);
                                                                                  frame.i32_gt_u();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(8, 0);
                                                                                    break block_label_33;
                                                                                  }
                                                                                  frame.push(local33);
                                                                                  frame.i64_const(
                                                                                      0x7f7f7f7f7f7f7f7f);
                                                                                  frame.i64_add();
                                                                                  frame.i64_const(
                                                                                      -0x5050505050505051);
                                                                                  frame.push(local33);
                                                                                  frame.i64_sub();
                                                                                  frame.push(local33);
                                                                                  frame.i64_const(
                                                                                      0x4646464646464646);
                                                                                  frame.i64_add();
                                                                                  frame.i64_or();
                                                                                  frame.i64_and();
                                                                                  frame.i64_const(
                                                                                      -0x1f1f1f1f1f1f1f20);
                                                                                  frame.push(local33);
                                                                                  frame.i64_const(
                                                                                      0x2020202020202020);
                                                                                  frame.i64_or();
                                                                                  local34 = frame.peek();
                                                                                  frame.i64_sub();
                                                                                  frame.push(local34);
                                                                                  frame.i64_const(
                                                                                      0x505050505050505);
                                                                                  frame.i64_add();
                                                                                  frame.i64_or();
                                                                                  frame.i64_and();
                                                                                  frame.i64_const(
                                                                                      -0x7f7f7f7f7f7f7f80);
                                                                                  frame.i64_and();
                                                                                  frame.i64_const(0);
                                                                                  frame.i64_ne();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(8, 0);
                                                                                    break block_label_33;
                                                                                  }
                                                                                  frame.push(local0);
                                                                                  frame.push(local33);
                                                                                  frame.i64_const(
                                                                                      0x3f3f3f3f3f3f3f3f);
                                                                                  frame.i64_add();
                                                                                  frame.i64_const(
                                                                                      -0x2525252525252526);
                                                                                  frame.push(local33);
                                                                                  frame.i64_sub();
                                                                                  frame.i64_and();
                                                                                  frame.i64_const(2);
                                                                                  frame.i64_shr_u();
                                                                                  frame.i64_const(
                                                                                      0x2020202020202020);
                                                                                  frame.i64_and();
                                                                                  frame.push(local33);
                                                                                  frame.i64_or();
                                                                                  local33 = frame.peek();
                                                                                  frame.i64_store(3, 408);
                                                                                  frame.i32_const(0);
                                                                                  local1 = frame.pop();
                                                                                  block_label_39:
                                                                                  {
                                                                                    loop_label_40:
                                                                                    for (;;) {
                                                                                      frame.push(local1);
                                                                                      frame.i32_const(8);
                                                                                      frame.i32_eq();
                                                                                      if (frame.pop() != 0) {
                                                                                        frame.unwindTo(13, 0);
                                                                                        break block_label_39;
                                                                                      }
                                                                                      frame.push(local1);
                                                                                      frame
                                                                                          .i32_const(0xf461c);
                                                                                      frame.i32_add();
                                                                                      local2 = frame.pop();
                                                                                      frame.push(local0);
                                                                                      frame.i32_const(408);
                                                                                      frame.i32_add();
                                                                                      frame.push(local1);
                                                                                      frame.i32_add();
                                                                                      arg2 = frame.pop();
                                                                                      frame.push(local1);
                                                                                      frame.i32_const(1);
                                                                                      frame.i32_add();
                                                                                      arg1 = frame.peek();
                                                                                      local1 = frame.pop();
                                                                                      frame.push(arg2);
                                                                                      frame.i32_load8_u(0, 0);
                                                                                      frame.push(local2);
                                                                                      frame.i32_load8_u(0, 0);
                                                                                      frame.i32_eq();
                                                                                      if (frame.pop() != 0) {
                                                                                        continue loop_label_40;
                                                                                      }
                                                                                      break;
                                                                                    }
                                                                                    frame.push(arg1);
                                                                                    frame.i32_const(-1);
                                                                                    frame.i32_add();
                                                                                    frame.i32_const(8);
                                                                                    frame.i32_lt_u();
                                                                                    if (frame.pop() != 0) {
                                                                                      frame.unwindTo(8, 0);
                                                                                      break block_label_37;
                                                                                    }
                                                                                  }
                                                                                  frame.i64_const(128);
                                                                                  local33 = frame.pop();
                                                                                  frame.unwindTo(8, 0);
                                                                                  break block_label_36;
                                                                                }
                                                                                frame.push(arg2);
                                                                                frame.i32_const(2);
                                                                                frame.i32_ne();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(5, 0);
                                                                                  break block_label_29;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_const(408);
                                                                                frame.i32_add();
                                                                                frame.push(local3);
                                                                                frame.i32_const(2);
                                                                                frame.i32_const(2);
                                                                                {
                                                                                  var t3 = frame.pop();
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  _func077(t0, t1, t2, t3);
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_load(2, 408);
                                                                                frame.i32_const(3);
                                                                                frame.i32_ne();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(5, 0);
                                                                                  break block_label_29;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_load8_u(0, 412);
                                                                                frame.i32_const(223);
                                                                                frame.i32_and();
                                                                                frame.i32_const(-65);
                                                                                frame.i32_add();
                                                                                frame.i32_const(255);
                                                                                frame.i32_and();
                                                                                frame.i32_const(25);
                                                                                frame.i32_gt_u();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(5, 0);
                                                                                  break block_label_29;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_load8_u(0, 413);
                                                                                frame.i32_const(-48);
                                                                                frame.i32_add();
                                                                                frame.i32_const(255);
                                                                                frame.i32_and();
                                                                                frame.i32_const(10);
                                                                                frame.i32_ge_u();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(5, 0);
                                                                                  break block_label_29;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_load16_u(1, 412);
                                                                                local1 = frame.peek();
                                                                                frame.i32_const(0x3f3f);
                                                                                frame.i32_add();
                                                                                frame.i32_const(0xdada);
                                                                                frame.push(local1);
                                                                                frame.i32_sub();
                                                                                frame.i32_and();
                                                                                frame.i32_const(2);
                                                                                frame.i32_shr_u();
                                                                                frame.i32_const(0x2020);
                                                                                frame.i32_and();
                                                                                frame.push(local1);
                                                                                frame.i32_or();
                                                                                local17 = frame.peek();
                                                                                frame.i32_const(255);
                                                                                frame.i32_and();
                                                                                frame.i32_const(128);
                                                                                frame.i32_eq();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(5, 0);
                                                                                  break block_label_29;
                                                                                }
                                                                                frame.push(local17);
                                                                                frame.i32_const(8);
                                                                                frame.i32_shr_u();
                                                                                local11 = frame.pop();
                                                                                frame.unwindTo(8, 0);
                                                                                break block_label_35;
                                                                              }
                                                                              frame.push(local33);
                                                                              frame.i64_const(16);
                                                                              frame.i64_shr_u();
                                                                              local39 = frame.pop();
                                                                              frame.push(local33);
                                                                              frame.i64_const(8);
                                                                              frame.i64_shr_u();
                                                                              frame.i32_wrap_i64();
                                                                              local13 = frame.peek();
                                                                              local18 = frame.pop();
                                                                              frame.push(local33);
                                                                              frame.i64_const(255);
                                                                              frame.i64_and();
                                                                              frame.i64_const(129);
                                                                              frame.i64_eq();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(8, 0);
                                                                                break block_label_33;
                                                                              }
                                                                            }
                                                                            frame.push(local13);
                                                                            frame.i64_extend_i32_u();
                                                                            frame.i64_const(255);
                                                                            frame.i64_and();
                                                                            frame.i64_const(8);
                                                                            frame.i64_shl();
                                                                            frame.push(local39);
                                                                            frame.i64_const(16);
                                                                            frame.i64_shl();
                                                                            frame.i64_or();
                                                                            frame.push(local33);
                                                                            frame.i64_const(255);
                                                                            frame.i64_and();
                                                                            frame.i64_or();
                                                                            local33 = frame.pop();
                                                                            block_label_36:
                                                                            {
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 344);
                                                                              local1 = frame.peek();
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 336);
                                                                              frame.i32_ne();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(8, 0);
                                                                                break block_label_36;
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_const(336);
                                                                              frame.i32_add();
                                                                              frame.push(local1);
                                                                              {
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                _func064(t0, t1);
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_load(2, 344);
                                                                              local1 = frame.pop();
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.i32_load(2, 340);
                                                                            frame.push(local1);
                                                                            frame.i32_const(3);
                                                                            frame.i32_shl();
                                                                            frame.i32_add();
                                                                            frame.push(local33);
                                                                            frame.i64_store(0, 0);
                                                                            frame.push(local0);
                                                                            frame.push(local0);
                                                                            frame.i32_load(2, 344);
                                                                            frame.i32_const(1);
                                                                            frame.i32_add();
                                                                            frame.i32_store(2, 344);
                                                                          }
                                                                          frame.push(local0);
                                                                          frame.i32_const(40);
                                                                          frame.i32_add();
                                                                          frame.push(local0);
                                                                          frame.i32_const(80);
                                                                          frame.i32_add();
                                                                          {
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            _func048(t0, t1);
                                                                          }
                                                                          frame.push(local0);
                                                                          frame.i32_load8_u(0, 96);
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(8, 0);
                                                                            break block_label_30;
                                                                          }
                                                                          frame.push(local13);
                                                                          local18 = frame.pop();
                                                                          frame.unwindTo(8, 0);
                                                                          break block_label_32;
                                                                        }
                                                                        frame.i32_const(2);
                                                                        local18 = frame.pop();
                                                                      }
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 344);
                                                                      local2 = frame.peek();
                                                                      frame.i32_eqz();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(5, 0);
                                                                        break block_label_27;
                                                                      }
                                                                      frame.push(local0);
                                                                      frame.i32_const(0);
                                                                      frame.i32_store(2, 344);
                                                                      frame.push(local0);
                                                                      frame.i32_load(2, 340);
                                                                      local1 = frame.pop();
                                                                      frame.push(local0);
                                                                      frame.i32_const(0);
                                                                      frame.i32_store(2, 396);
                                                                      frame.i32_const(129);
                                                                      arg2 = frame.pop();
                                                                      frame.push(local0);
                                                                      frame.i32_const(129);
                                                                      frame.i32_store8(0, 376);
                                                                      frame.push(local0);
                                                                      frame.i32_const(129);
                                                                      frame.i32_store8(0, 368);
                                                                      frame.push(local0);
                                                                      frame.push(local2);
                                                                      frame.i32_store(2, 392);
                                                                      frame.push(local0);
                                                                      frame.push(local1);
                                                                      frame.push(local2);
                                                                      frame.i32_const(3);
                                                                      frame.i32_shl();
                                                                      local2 = frame.peek();
                                                                      frame.i32_add();
                                                                      arg1 = frame.peek();
                                                                      frame.i32_store(2, 384);
                                                                      frame.push(local0);
                                                                      frame.push(local0);
                                                                      frame.i32_const(336);
                                                                      frame.i32_add();
                                                                      frame.i32_store(2, 400);
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            loop_label_36:
                                                                            for (;;) {
                                                                              block_label_37:
                                                                              {
                                                                                frame.push(arg2);
                                                                                frame.i32_const(255);
                                                                                frame.i32_and();
                                                                                frame.i32_const(129);
                                                                                frame.i32_eq();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(9, 0);
                                                                                  break block_label_37;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i64_load(3, 368);
                                                                                local33 = frame.pop();
                                                                                frame.push(local0);
                                                                                frame.i64_const(128);
                                                                                frame.i64_store(3, 368);
                                                                                frame.push(local33);
                                                                                frame.i64_const(255);
                                                                                frame.i64_and();
                                                                                frame.i64_const(128);
                                                                                frame.i64_ne();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(9, 0);
                                                                                  break block_label_34;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_const(129);
                                                                                frame.i32_store8(0, 368);
                                                                              }
                                                                              frame.push(local2);
                                                                              frame.i32_eqz();
                                                                              if (frame.pop() != 0) {
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_35;
                                                                              }
                                                                              block_label_37:
                                                                              {
                                                                                frame.push(local1);
                                                                                frame.i64_load(0, 0);
                                                                                local33 = frame.peek();
                                                                                frame.i64_const(255);
                                                                                frame.i64_and();
                                                                                frame.i64_const(129);
                                                                                frame.i64_eq();
                                                                                if (frame.pop() != 0) {
                                                                                  frame.unwindTo(10, 0);
                                                                                  break block_label_37;
                                                                                }
                                                                                frame.push(local1);
                                                                                frame.i32_const(8);
                                                                                frame.i32_add();
                                                                                local1 = frame.pop();
                                                                                frame.push(local2);
                                                                                frame.i32_const(-8);
                                                                                frame.i32_add();
                                                                                local2 = frame.pop();
                                                                                frame.push(local0);
                                                                                frame.push(local33);
                                                                                frame.i64_store(3, 368);
                                                                                frame.push(local33);
                                                                                frame.i32_wrap_i64();
                                                                                arg2 = frame.pop();
                                                                                continue loop_label_36;
                                                                              }
                                                                              break;
                                                                            }
                                                                            frame.push(local1);
                                                                            frame.i32_const(8);
                                                                            frame.i32_add();
                                                                            arg1 = frame.pop();
                                                                          }
                                                                          frame.push(local0);
                                                                          frame.i32_const(0);
                                                                          frame.i32_store(2, 360);
                                                                          frame.push(local0);
                                                                          frame.i64_const(0x100000000);
                                                                          frame.i64_store(3, 352);
                                                                          frame.push(local0);
                                                                          frame.push(arg1);
                                                                          frame.i32_store(2, 388);
                                                                          frame.push(local22);
                                                                          {
                                                                            var t0 = frame.pop();
                                                                            _func074(t0);
                                                                          }
                                                                          frame.unwindTo(9, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.push(local1);
                                                                        frame.i32_store(2, 388);
                                                                        frame.push(local0);
                                                                        frame.i32_const(48);
                                                                        frame.i32_add();
                                                                        frame.i32_const(4);
                                                                        frame.i32_const(0);
                                                                        {
                                                                          var t2 = frame.pop();
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          _func059(t0, t1, t2);
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 48);
                                                                        local1 = frame.pop();
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 52);
                                                                        local2 = frame.peek();
                                                                        frame.push(local33);
                                                                        frame.i64_store(0, 0);
                                                                        frame.i32_const(1);
                                                                        local3 = frame.pop();
                                                                        frame.push(local0);
                                                                        frame.i32_const(1);
                                                                        frame.i32_store(2, 264);
                                                                        frame.push(local0);
                                                                        frame.push(local2);
                                                                        frame.i32_store(2, 260);
                                                                        frame.push(local0);
                                                                        frame.push(local1);
                                                                        frame.i32_store(2, 256);
                                                                        frame.push(local0);
                                                                        frame.i32_const(408);
                                                                        frame.i32_add();
                                                                        frame.push(local0);
                                                                        frame.i32_const(368);
                                                                        frame.i32_add();
                                                                        frame.i32_const(36);
                                                                        {
                                                                          var t2 = frame.pop();
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          frame.push(_func002(t0, t1, t2));
                                                                        }
                                                                        frame.drop();
                                                                        frame.push(local0);
                                                                        frame.i32_load8_u(0, 408);
                                                                        local2 = frame.pop();
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 428);
                                                                        arg2 = frame.pop();
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 424);
                                                                        arg1 = frame.pop();

                                                                        loop_label_34:
                                                                        for (;;) {
                                                                          frame.push(arg2);
                                                                          local1 = frame.pop();

                                                                          loop_label_35:
                                                                          for (;;) {
                                                                            block_label_36:
                                                                            {
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  block_label_39:
                                                                                  {
                                                                                    block_label_40:
                                                                                    {
                                                                                      frame.push(local2);
                                                                                      frame.i32_const(255);
                                                                                      frame.i32_and();
                                                                                      frame.i32_const(129);
                                                                                      frame.i32_eq();
                                                                                      if (frame.pop() != 0) {
                                                                                        frame.unwindTo(14, 0);
                                                                                        break block_label_40;
                                                                                      }
                                                                                      frame.push(local0);
                                                                                      frame.i64_load(3, 408);
                                                                                      local33 = frame.pop();
                                                                                      frame.push(local0);
                                                                                      frame.i64_const(128);
                                                                                      frame.i64_store(3, 408);
                                                                                      block_label_41:
                                                                                      {
                                                                                        frame.push(local33);
                                                                                        frame.i64_const(255);
                                                                                        frame.i64_and();
                                                                                        local34 =
                                                                                            frame.peek();
                                                                                        frame.i64_const(128);
                                                                                        frame.i64_eq();
                                                                                        if (frame.pop() !=
                                                                                            0) {
                                                                                          frame.unwindTo(
                                                                                              15, 0);
                                                                                          break block_label_41;
                                                                                        }
                                                                                        frame.i32_const(128);
                                                                                        local2 = frame.pop();
                                                                                        frame.unwindTo(14, 0);
                                                                                        break block_label_39;
                                                                                      }
                                                                                      frame.push(local0);
                                                                                      frame.i32_const(129);
                                                                                      frame.i32_store8(
                                                                                          0, 408);
                                                                                    }
                                                                                    block_label_40:
                                                                                    {
                                                                                      block_label_41:
                                                                                      {
                                                                                        block_label_42:
                                                                                        {
                                                                                          frame.push(local1);
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                14, 0);
                                                                                            break block_label_42;
                                                                                          }
                                                                                          frame.i32_const(0);
                                                                                          local1 =
                                                                                              frame.pop();
                                                                                          frame.unwindTo(
                                                                                              14, 0);
                                                                                          break block_label_41;
                                                                                        }
                                                                                        block_label_42:
                                                                                        {
                                                                                          frame.push(local1);
                                                                                          frame.push(arg1);
                                                                                          frame.i32_ne();
                                                                                          if (frame.pop() !=
                                                                                              0) {
                                                                                            frame.unwindTo(
                                                                                                14, 0);
                                                                                            break block_label_42;
                                                                                          }
                                                                                          frame.push(arg1);
                                                                                          local1 =
                                                                                              frame.pop();
                                                                                          frame.unwindTo(
                                                                                              14, 0);
                                                                                          break block_label_41;
                                                                                        }
                                                                                        frame.push(local1);
                                                                                        frame.i64_load(0, 0);
                                                                                        local33 =
                                                                                            frame.peek();
                                                                                        frame.i64_const(255);
                                                                                        frame.i64_and();
                                                                                        frame.i64_const(129);
                                                                                        frame.i64_ne();
                                                                                        if (frame.pop() !=
                                                                                            0) {
                                                                                          frame.unwindTo(
                                                                                              14, 0);
                                                                                          break block_label_40;
                                                                                        }
                                                                                        frame.push(local1);
                                                                                        frame.i32_const(8);
                                                                                        frame.i32_add();
                                                                                        arg2 = frame.peek();
                                                                                        local1 = frame.pop();
                                                                                      }
                                                                                      frame.push(local0);
                                                                                      frame.i32_load8_u(
                                                                                          0, 416);
                                                                                      frame.i32_const(129);
                                                                                      frame.i32_eq();
                                                                                      if (frame.pop() != 0) {
                                                                                        frame.unwindTo(14, 0);
                                                                                        break block_label_38;
                                                                                      }
                                                                                      frame.push(local0);
                                                                                      frame.i64_load(3, 416);
                                                                                      local33 = frame.pop();
                                                                                      frame.push(local0);
                                                                                      frame.i64_const(128);
                                                                                      frame.i64_store(3, 416);
                                                                                      frame.i32_const(129);
                                                                                      local2 = frame.pop();
                                                                                      frame.push(local33);
                                                                                      frame.i64_const(255);
                                                                                      frame.i64_and();
                                                                                      local34 = frame.peek();
                                                                                      frame.i64_const(128);
                                                                                      frame.i64_ne();
                                                                                      if (frame.pop() != 0) {
                                                                                        frame.unwindTo(14, 0);
                                                                                        break block_label_39;
                                                                                      }
                                                                                      frame.push(local0);
                                                                                      frame.i32_const(129);
                                                                                      frame.i32_store8(
                                                                                          0, 416);
                                                                                      frame.unwindTo(14, 0);
                                                                                      break block_label_38;
                                                                                    }
                                                                                    frame.push(local1);
                                                                                    frame.i32_const(8);
                                                                                    frame.i32_add();
                                                                                    arg2 = frame.pop();
                                                                                    frame.push(local0);
                                                                                    frame.push(local33);
                                                                                    frame.i64_store(3, 408);
                                                                                    frame.push(local33);
                                                                                    frame.i32_wrap_i64();
                                                                                    local2 = frame.pop();
                                                                                    continue loop_label_34;
                                                                                  }
                                                                                  frame.push(local34);
                                                                                  frame.i64_const(128);
                                                                                  frame.i64_eq();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(14, 0);
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.push(local0);
                                                                                  frame.i32_load(2, 256);
                                                                                  frame.push(local3);
                                                                                  frame.i32_eq();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(14, 0);
                                                                                    break block_label_37;
                                                                                  }
                                                                                  frame.unwindTo(14, 0);
                                                                                  break block_label_36;
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.push(arg2);
                                                                                frame.i32_store(2, 428);
                                                                                block_label_38:
                                                                                {
                                                                                  frame.push(local1);
                                                                                  frame.i32_eqz();
                                                                                  if (frame.pop() != 0) {
                                                                                    frame.unwindTo(14, 0);
                                                                                    break block_label_38;
                                                                                  }
                                                                                  frame.push(local28);
                                                                                  {
                                                                                    var t0 = frame.pop();
                                                                                    _func074(t0);
                                                                                  }
                                                                                }
                                                                                frame.push(local0);
                                                                                frame.i32_const(352);
                                                                                frame.i32_add();
                                                                                frame.i32_const(8);
                                                                                frame.i32_add();
                                                                                frame.push(local0);
                                                                                frame.i32_const(256);
                                                                                frame.i32_add();
                                                                                frame.i32_const(8);
                                                                                frame.i32_add();
                                                                                frame.i32_load(2, 0);
                                                                                frame.i32_store(2, 0);
                                                                                frame.push(local0);
                                                                                frame.push(local0);
                                                                                frame.i64_load(3, 256);
                                                                                frame.i64_store(3, 352);
                                                                                frame.unwindTo(9, 0);
                                                                                break block_label_33;
                                                                              }
                                                                              frame.push(local0);
                                                                              frame.i32_const(256);
                                                                              frame.i32_add();
                                                                              frame.push(local3);
                                                                              frame.i32_const(2);
                                                                              frame.i32_const(1);
                                                                              frame.push(local0);
                                                                              frame.i32_load8_s(0, 416);
                                                                              frame.i32_const(-127);
                                                                              frame.i32_gt_s();
                                                                              frame.select();
                                                                              {
                                                                                var t2 = frame.pop();
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                _func068(t0, t1, t2);
                                                                              }
                                                                            }
                                                                            frame.push(local0);
                                                                            frame.i32_load(2, 260);
                                                                            frame.push(local3);
                                                                            frame.i32_const(3);
                                                                            frame.i32_shl();
                                                                            frame.i32_add();
                                                                            frame.push(local33);
                                                                            frame.i64_store(0, 0);
                                                                            frame.push(local0);
                                                                            frame.push(local3);
                                                                            frame.i32_const(1);
                                                                            frame.i32_add();
                                                                            local3 = frame.peek();
                                                                            frame.i32_store(2, 264);
                                                                            continue loop_label_35;

                                                                            break;
                                                                          }
                                                                          break;
                                                                        }
                                                                      }
                                                                      frame.push(local0);
                                                                      frame.i32_const(408);
                                                                      frame.i32_add();
                                                                      frame.push(local0);
                                                                      frame.i32_const(320);
                                                                      frame.i32_add();
                                                                      frame.push(local11);
                                                                      frame.i32_const(8);
                                                                      frame.i32_shl();
                                                                      frame.push(local12);
                                                                      frame.i32_or();
                                                                      frame.push(local0);
                                                                      frame.i32_const(352);
                                                                      frame.i32_add();
                                                                      {
                                                                        var t3 = frame.pop();
                                                                        var t2 = frame.pop();
                                                                        var t1 = frame.pop();
                                                                        var t0 = frame.pop();
                                                                        _func075(t0, t1, t2, t3);
                                                                      }
                                                                      block_label_33:
                                                                      {
                                                                        frame.push(local0);
                                                                        frame.i32_load8_u(0, 408);
                                                                        frame.i32_const(128);
                                                                        frame.i32_eq();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(13, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 412);
                                                                        frame.i32_eqz();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(13, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.i32_const(0xf5144);
                                                                        frame.push(local0);
                                                                        frame.i32_load(2, 416);
                                                                        {
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          _func019(t0, t1);
                                                                        }
                                                                      }
                                                                      frame.i32_const(128);
                                                                      local17 = frame.pop();
                                                                      frame.push(local0);
                                                                      frame.i32_load8_u(0, 96);
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(5, 0);
                                                                        break block_label_29;
                                                                      }
                                                                    }
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 84);
                                                                    local1 = frame.peek();
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 80);
                                                                    local2 = frame.peek();
                                                                    frame.i32_lt_u();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(3, 0);
                                                                      break block_label_0;
                                                                    }
                                                                    frame.push(local1);
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 92);
                                                                    frame.i32_gt_u();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(3, 0);
                                                                      break block_label_0;
                                                                    }
                                                                    frame.push(local1);
                                                                    frame.push(local2);
                                                                    frame.i32_sub();
                                                                    arg2 = frame.pop();
                                                                    frame.push(local0);
                                                                    frame.i32_load(2, 88);
                                                                    frame.push(local2);
                                                                    frame.i32_add();
                                                                    local3 = frame.pop();
                                                                    frame.push(local18);
                                                                    local13 = frame.pop();
                                                                    continue loop_label_31;

                                                                    break;
                                                                  }
                                                                }
                                                                frame.push(local17);
                                                                frame.i32_const(255);
                                                                frame.i32_and();
                                                                local16 = frame.peek();
                                                                frame.i32_const(128);
                                                                frame.i32_ne();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(5, 0);
                                                                  break block_label_28;
                                                                }
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_const(272);
                                                              frame.i32_add();
                                                              frame.i32_const(8);
                                                              frame.i32_add();
                                                              frame.push(local0);
                                                              frame.i32_const(304);
                                                              frame.i32_add();
                                                              frame.i32_const(8);
                                                              frame.i32_add();
                                                              frame.i64_load(3, 0);
                                                              frame.i64_store(3, 0);
                                                              frame.push(local0);
                                                              frame.push(local0);
                                                              frame.i64_load(3, 304);
                                                              frame.i64_store(3, 272);
                                                              frame.push(local0);
                                                              frame.push(local31);
                                                              frame.i64_load(0, 0);
                                                              frame.i64_store(3, 288);
                                                              frame.push(local0);
                                                              frame.push(local32);
                                                              frame.i32_load(0, 0);
                                                              frame.i32_store(0, 295);
                                                              frame.push(local0);
                                                              frame.i32_load8_u(0, 320);
                                                              local1 = frame.pop();
                                                              frame.push(local0);
                                                              frame.i32_load(2, 336);
                                                              frame.i32_eqz();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(5, 0);
                                                                break block_label_23;
                                                              }
                                                              frame.i32_const(0xf5144);
                                                              frame.push(local0);
                                                              frame.i32_load(2, 340);
                                                              {
                                                                var t1 = frame.pop();
                                                                var t0 = frame.pop();
                                                                _func019(t0, t1);
                                                              }
                                                              frame.unwindTo(5, 0);
                                                              break block_label_23;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_load(2, 344);
                                                            local1 = frame.peek();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(5, 0);
                                                              break block_label_26;
                                                            }
                                                          }
                                                          block_label_27:
                                                          {
                                                            frame.push(local0);
                                                            frame.i32_load(2, 336);
                                                            frame.i32_eqz();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(5, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.i32_const(0xf5144);
                                                            frame.push(local0);
                                                            frame.i32_load(2, 340);
                                                            {
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func019(t0, t1);
                                                            }
                                                          }
                                                          frame.i32_const(2);
                                                          local16 = frame.pop();
                                                          frame.push(local0);
                                                          frame.i32_const(320);
                                                          frame.i32_add();
                                                          {
                                                            var t0 = frame.pop();
                                                            _func051(t0);
                                                          }
                                                          frame.push(local4);
                                                          frame.i32_const(3);
                                                          frame.i32_and();
                                                          frame.i32_const(2);
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(5, 0);
                                                            break block_label_25;
                                                          }
                                                          frame.push(local37);
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(5, 0);
                                                            break block_label_25;
                                                          }
                                                          frame.i32_const(0xf5144);
                                                          frame.push(local36);
                                                          {
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func019(t0, t1);
                                                          }
                                                          frame.unwindTo(5, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local40);
                                                        frame.i64_const(-256);
                                                        frame.i64_and();
                                                        frame.i64_const(129);
                                                        frame.i64_or();
                                                        local40 = frame.pop();
                                                        frame.push(local41);
                                                        frame.i64_const(-256);
                                                        frame.i64_and();
                                                        frame.i64_const(129);
                                                        frame.i64_or();
                                                        local33 = frame.pop();
                                                        frame.push(local0);
                                                        frame.i32_load(2, 340);
                                                        local14 = frame.peek();
                                                        frame.push(local1);
                                                        frame.i32_const(3);
                                                        frame.i32_shl();
                                                        arg1 = frame.peek();
                                                        frame.i32_add();
                                                        local12 = frame.pop();
                                                        frame.push(local0);
                                                        frame.i32_load(2, 336);
                                                        local42 = frame.pop();
                                                        frame.i32_const(129);
                                                        arg2 = frame.pop();
                                                        frame.i32_const(0);
                                                        local2 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          loop_label_27:
                                                          for (;;) {
                                                            frame.push(local14);
                                                            frame.push(local2);
                                                            frame.i32_add();
                                                            local1 = frame.pop();
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                frame.push(arg2);
                                                                frame.i32_const(255);
                                                                frame.i32_and();
                                                                frame.i32_const(129);
                                                                frame.i32_ne();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(5, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local33);
                                                                local41 = frame.pop();
                                                                frame.unwindTo(5, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.i64_const(129);
                                                              local41 = frame.pop();
                                                              frame.push(local33);
                                                              frame.i64_const(255);
                                                              frame.i64_and();
                                                              frame.i64_const(128);
                                                              frame.i64_ne();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(5, 0);
                                                                break block_label_26;
                                                              }
                                                            }
                                                            block_label_28:
                                                            {
                                                              frame.push(arg1);
                                                              frame.push(local2);
                                                              frame.i32_eq();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(5, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.push(local2);
                                                              frame.i32_const(8);
                                                              frame.i32_add();
                                                              local2 = frame.pop();
                                                              frame.push(local1);
                                                              frame.i64_load(0, 0);
                                                              local33 = frame.peek();
                                                              frame.i32_wrap_i64();
                                                              arg2 = frame.pop();
                                                              frame.push(local33);
                                                              frame.i64_const(255);
                                                              frame.i64_and();
                                                              frame.i64_const(129);
                                                              frame.i64_ne();
                                                              if (frame.pop() != 0) {
                                                                continue loop_label_27;
                                                              }
                                                            }
                                                            break;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(0);
                                                          frame.i32_store(2, 376);
                                                          frame.push(local0);
                                                          frame.i64_const(0x100000000);
                                                          frame.i64_store(3, 368);
                                                          frame.push(local42);
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(5, 0);
                                                            break block_label_24;
                                                          }
                                                          frame.i32_const(0xf5144);
                                                          frame.push(local14);
                                                          {
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func019(t0, t1);
                                                          }
                                                          frame.unwindTo(5, 0);
                                                          break block_label_24;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(32);
                                                        frame.i32_add();
                                                        frame.i32_const(4);
                                                        frame.i32_const(0);
                                                        {
                                                          var t2 = frame.pop();
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func059(t0, t1, t2);
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_load(2, 32);
                                                        local2 = frame.pop();
                                                        frame.push(local0);
                                                        frame.i32_load(2, 36);
                                                        arg2 = frame.peek();
                                                        frame.push(local33);
                                                        frame.i64_store(0, 0);
                                                        frame.push(local0);
                                                        frame.push(arg2);
                                                        frame.i32_store(2, 412);
                                                        frame.push(local0);
                                                        frame.push(local2);
                                                        frame.i32_store(2, 408);
                                                        frame.i64_const(0);
                                                        local34 = frame.pop();
                                                        frame.i32_const(128);
                                                        local2 = frame.pop();
                                                        frame.i32_const(1);
                                                        local13 = frame.pop();
                                                        frame.push(local40);
                                                        local39 = frame.pop();
                                                        frame.i32_const(128);
                                                        arg1 = frame.pop();
                                                        frame.i32_const(128);
                                                        arg2 = frame.pop();

                                                        loop_label_26:
                                                        for (;;) {
                                                          frame.push(local0);
                                                          frame.push(local13);
                                                          frame.i32_store(2, 416);
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    loop_label_32:
                                                                    for (;;) {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          frame.push(arg2);
                                                                          frame.i32_const(255);
                                                                          frame.i32_and();
                                                                          frame.i32_const(129);
                                                                          frame.i32_ne();
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(8, 0);
                                                                            break block_label_34;
                                                                          }
                                                                          frame.push(local2);
                                                                          local3 = frame.pop();
                                                                          frame.push(local34);
                                                                          local41 = frame.pop();
                                                                          frame.push(arg1);
                                                                          local17 = frame.pop();
                                                                          frame.unwindTo(8, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local2);
                                                                        frame.i32_const(255);
                                                                        frame.i32_and();
                                                                        frame.i32_const(128);
                                                                        frame.i32_ne();
                                                                        if (frame.pop() != 0) {
                                                                          frame.unwindTo(8, 0);
                                                                          break block_label_31;
                                                                        }
                                                                        frame.i64_const(0);
                                                                        local41 = frame.pop();
                                                                        frame.i32_const(129);
                                                                        local3 = frame.pop();
                                                                        frame.i32_const(129);
                                                                        local17 = frame.pop();
                                                                      }
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          frame.push(local1);
                                                                          frame.push(local12);
                                                                          frame.i32_ne();
                                                                          if (frame.pop() != 0) {
                                                                            frame.unwindTo(8, 0);
                                                                            break block_label_34;
                                                                          }
                                                                          frame.push(local12);
                                                                          local18 = frame.pop();
                                                                          frame.unwindTo(8, 0);
                                                                          break block_label_33;
                                                                        }
                                                                        frame.push(local1);
                                                                        frame.i64_load(0, 0);
                                                                        local33 = frame.peek();
                                                                        frame.i64_const(8);
                                                                        frame.i64_shr_u();
                                                                        local34 = frame.pop();
                                                                        frame.push(local33);
                                                                        frame.i32_wrap_i64();
                                                                        local2 = frame.peek();
                                                                        arg1 = frame.pop();
                                                                        frame.push(local2);
                                                                        arg2 = frame.pop();
                                                                        frame.push(local1);
                                                                        frame.i32_const(8);
                                                                        frame.i32_add();
                                                                        local18 = frame.peek();
                                                                        local1 = frame.pop();
                                                                        frame.push(local33);
                                                                        frame.i64_const(255);
                                                                        frame.i64_and();
                                                                        frame.i64_const(129);
                                                                        frame.i64_ne();
                                                                        if (frame.pop() != 0) {
                                                                          continue loop_label_32;
                                                                        }
                                                                      }
                                                                      break;
                                                                    }
                                                                    frame.i64_const(128);
                                                                    local33 = frame.pop();
                                                                    frame.push(local39);
                                                                    frame.i64_const(254);
                                                                    frame.i64_and();
                                                                    frame.i64_const(128);
                                                                    frame.i64_eq();
                                                                    if (frame.pop() != 0) {
                                                                      frame.unwindTo(8, 0);
                                                                      break block_label_29;
                                                                    }
                                                                    frame.push(local39);
                                                                    frame.i64_const(255);
                                                                    frame.i64_and();
                                                                    local43 = frame.pop();
                                                                    frame.i32_const(129);
                                                                    arg2 = frame.pop();
                                                                    frame.push(local3);
                                                                    local2 = frame.pop();
                                                                    frame.push(local41);
                                                                    local34 = frame.pop();
                                                                    frame.push(local17);
                                                                    arg1 = frame.pop();
                                                                    frame.push(local18);
                                                                    local1 = frame.pop();
                                                                    frame.unwindTo(8, 0);
                                                                    break block_label_30;
                                                                  }
                                                                  frame.push(local34);
                                                                  frame.i64_const(8);
                                                                  frame.i64_shl();
                                                                  local41 = frame.pop();
                                                                  frame.push(local2);
                                                                  frame.i64_extend_i32_u();
                                                                  local43 = frame.pop();
                                                                  frame.i64_const(0);
                                                                  local34 = frame.pop();
                                                                  frame.i32_const(128);
                                                                  local2 = frame.pop();
                                                                  frame.push(local39);
                                                                  local33 = frame.pop();
                                                                  frame.i32_const(128);
                                                                  arg1 = frame.pop();
                                                                  frame.i32_const(128);
                                                                  arg2 = frame.pop();
                                                                  frame.push(local41);
                                                                  frame.push(local43);
                                                                  frame.i64_const(255);
                                                                  frame.i64_and();
                                                                  local43 = frame.peek();
                                                                  frame.i64_or();
                                                                  local39 = frame.pop();
                                                                }
                                                                frame.push(local43);
                                                                frame.i64_const(128);
                                                                frame.i64_eq();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(8, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.push(local0);
                                                                frame.i32_load(2, 408);
                                                                frame.push(local13);
                                                                frame.i32_eq();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(8, 0);
                                                                  break block_label_28;
                                                                }
                                                                frame.unwindTo(8, 0);
                                                                break block_label_27;
                                                              }
                                                              block_label_29:
                                                              {
                                                                frame.push(local42);
                                                                frame.i32_eqz();
                                                                if (frame.pop() != 0) {
                                                                  frame.unwindTo(8, 0);
                                                                  break block_label_29;
                                                                }
                                                                frame.i32_const(0xf5144);
                                                                frame.push(local14);
                                                                {
                                                                  var t1 = frame.pop();
                                                                  var t0 = frame.pop();
                                                                  _func019(t0, t1);
                                                                }
                                                              }
                                                              frame.push(local0);
                                                              frame.i32_const(368);
                                                              frame.i32_add();
                                                              frame.i32_const(8);
                                                              frame.i32_add();
                                                              frame.push(local0);
                                                              frame.i32_const(408);
                                                              frame.i32_add();
                                                              frame.i32_const(8);
                                                              frame.i32_add();
                                                              frame.i32_load(2, 0);
                                                              frame.i32_store(2, 0);
                                                              frame.push(local0);
                                                              frame.push(local0);
                                                              frame.i64_load(3, 408);
                                                              frame.i64_store(3, 368);
                                                              frame.i64_const(128);
                                                              local41 = frame.pop();
                                                              frame.unwindTo(5, 0);
                                                              break block_label_24;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_const(408);
                                                            frame.i32_add();
                                                            frame.push(local13);
                                                            frame.i32_const(2);
                                                            frame.i32_const(1);
                                                            frame.push(arg1);
                                                            frame.i32_const(24);
                                                            frame.i32_shl();
                                                            frame.i32_const(24);
                                                            frame.i32_shr_s();
                                                            frame.i32_const(-127);
                                                            frame.i32_gt_s();
                                                            frame.select();
                                                            frame.push(local33);
                                                            frame.i32_wrap_i64();
                                                            frame.i32_const(24);
                                                            frame.i32_shl();
                                                            frame.i32_const(24);
                                                            frame.i32_shr_s();
                                                            frame.i32_const(-127);
                                                            frame.i32_gt_s();
                                                            frame.i32_add();
                                                            {
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              _func068(t0, t1, t2);
                                                            }
                                                            frame.push(arg1);
                                                            arg2 = frame.pop();
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 412);
                                                          frame.push(local13);
                                                          frame.i32_const(3);
                                                          frame.i32_shl();
                                                          frame.i32_add();
                                                          frame.push(local39);
                                                          frame.i64_store(0, 0);
                                                          frame.push(local13);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local13 = frame.pop();
                                                          frame.push(local33);
                                                          local39 = frame.pop();
                                                          continue loop_label_26;

                                                          break;
                                                        }
                                                      }
                                                      frame.i32_const(4);
                                                      local4 = frame.pop();
                                                      frame.unwindTo(5, 0);
                                                      break block_label_9;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_const(408);
                                                    frame.i32_add();
                                                    frame.push(local0);
                                                    frame.i32_const(320);
                                                    frame.i32_add();
                                                    frame.push(local11);
                                                    frame.i32_const(8);
                                                    frame.i32_shl();
                                                    frame.push(local16);
                                                    frame.i32_or();
                                                    frame.push(local0);
                                                    frame.i32_const(368);
                                                    frame.i32_add();
                                                    {
                                                      var t3 = frame.pop();
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func075(t0, t1, t2, t3);
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 408);
                                                      frame.i32_const(128);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(9, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 412);
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(9, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.i32_const(0xf5144);
                                                      frame.push(local0);
                                                      frame.i32_load(2, 416);
                                                      {
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func019(t0, t1);
                                                      }
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_const(272);
                                                    frame.i32_add();
                                                    frame.i32_const(8);
                                                    frame.i32_add();
                                                    frame.push(local0);
                                                    frame.i32_const(304);
                                                    frame.i32_add();
                                                    frame.i32_const(8);
                                                    frame.i32_add();
                                                    frame.i64_load(3, 0);
                                                    frame.i64_store(3, 0);
                                                    frame.push(local0);
                                                    frame.push(local0);
                                                    frame.i64_load(3, 304);
                                                    frame.i64_store(3, 272);
                                                    frame.push(local0);
                                                    frame.push(local31);
                                                    frame.i64_load(0, 0);
                                                    frame.i64_store(3, 288);
                                                    frame.push(local0);
                                                    frame.push(local32);
                                                    frame.i32_load(0, 0);
                                                    frame.i32_store(0, 295);
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 320);
                                                    local1 = frame.pop();
                                                  }
                                                  frame.push(local21);
                                                  frame.i32_const(7);
                                                  frame.i32_add();
                                                  frame.push(local0);
                                                  frame.i32_load(0, 295);
                                                  frame.i32_store(0, 0);
                                                  frame.push(local21);
                                                  frame.push(local0);
                                                  frame.i64_load(3, 288);
                                                  frame.i64_store(0, 0);
                                                  frame.push(local27);
                                                  frame.push(local0);
                                                  frame.i64_load(3, 272);
                                                  frame.i64_store(0, 0);
                                                  frame.push(local27);
                                                  frame.i32_const(8);
                                                  frame.i32_add();
                                                  frame.push(local0);
                                                  frame.i32_const(272);
                                                  frame.i32_add();
                                                  frame.i32_const(8);
                                                  frame.i32_add();
                                                  frame.i64_load(3, 0);
                                                  frame.i64_store(0, 0);
                                                  frame.push(local0);
                                                  frame.push(local36);
                                                  frame.i32_store(2, 220);
                                                  frame.push(local0);
                                                  frame.push(local37);
                                                  frame.i32_store(2, 216);
                                                  frame.push(local0);
                                                  frame.push(local38);
                                                  frame.i32_store16(1, 214);
                                                  frame.push(local0);
                                                  frame.push(local35);
                                                  frame.i32_store8(0, 213);
                                                  frame.push(local0);
                                                  frame.push(local1);
                                                  frame.i32_store8(0, 200);
                                                  frame.push(local0);
                                                  frame.push(local4);
                                                  frame.i32_store8(0, 212);
                                                  frame.unwindTo(5, 0);
                                                  break block_label_12;
                                                }
                                                block_label_22:
                                                {
                                                  frame.push(local19);
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(5, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_const(240);
                                                  frame.i32_add();
                                                  {
                                                    var t0 = frame.pop();
                                                    _func054(t0);
                                                  }
                                                  frame.i32_const(3);
                                                  local1 = frame.pop();
                                                  frame.unwindTo(5, 0);
                                                  break block_label_8;
                                                }
                                                frame.push(local0);
                                                frame.i32_const(4);
                                                frame.i32_store8(0, 256);
                                                frame.push(local0);
                                                frame.push(local0);
                                                frame.i32_const(256);
                                                frame.i32_add();
                                                frame.i32_store(2, 276);
                                                frame.push(local0);
                                                frame.push(local0);
                                                frame.i32_const(80);
                                                frame.i32_add();
                                                frame.i32_store(2, 272);
                                                frame.push(local0);
                                                frame.i32_const(368);
                                                frame.i32_add();
                                                frame.push(local0);
                                                frame.i32_const(272);
                                                frame.i32_add();
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func047(t0, t1);
                                                }
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    frame.push(local0);
                                                    frame.i32_load8_u(0, 368);
                                                    frame.i32_const(128);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(7, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.push(local0);
                                                    frame.i64_load(3, 368);
                                                    local33 = frame.pop();
                                                    frame.push(local0);
                                                    frame.i32_const(56);
                                                    frame.i32_add();
                                                    frame.i32_const(4);
                                                    frame.i32_const(0);
                                                    {
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func060(t0, t1, t2);
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 56);
                                                    local44 = frame.pop();
                                                    frame.push(local0);
                                                    frame.i32_load(2, 60);
                                                    local19 = frame.peek();
                                                    frame.push(local33);
                                                    frame.i64_store(0, 0);
                                                    frame.i32_const(1);
                                                    local45 = frame.pop();
                                                    frame.push(local0);
                                                    frame.i32_const(1);
                                                    frame.i32_store(2, 416);
                                                    frame.push(local0);
                                                    frame.push(local19);
                                                    frame.i32_store(2, 412);
                                                    frame.push(local0);
                                                    frame.push(local44);
                                                    frame.i32_store(2, 408);
                                                    frame.push(local0);
                                                    frame.push(local0);
                                                    frame.i64_load(3, 272);
                                                    frame.i64_store(3, 304);
                                                    frame.push(local0);
                                                    frame.i32_const(368);
                                                    frame.i32_add();
                                                    frame.push(local0);
                                                    frame.i32_const(304);
                                                    frame.i32_add();
                                                    {
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func047(t0, t1);
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 368);
                                                      frame.i32_const(128);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(13, 0);
                                                        break block_label_24;
                                                      }

                                                      loop_label_25:
                                                      for (;;) {
                                                        frame.push(local0);
                                                        frame.i64_load(3, 368);
                                                        local33 = frame.pop();
                                                        block_label_26:
                                                        {
                                                          frame.push(local0);
                                                          frame.i32_load(2, 408);
                                                          frame.push(local0);
                                                          frame.i32_load(2, 416);
                                                          local1 = frame.peek();
                                                          frame.i32_ne();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(14, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_const(408);
                                                          frame.i32_add();
                                                          frame.push(local1);
                                                          {
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func070(t0, t1);
                                                          }
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_load(2, 412);
                                                        frame.push(local1);
                                                        frame.i32_const(3);
                                                        frame.i32_shl();
                                                        frame.i32_add();
                                                        frame.push(local33);
                                                        frame.i64_store(0, 0);
                                                        frame.push(local0);
                                                        frame.push(local1);
                                                        frame.i32_const(1);
                                                        frame.i32_add();
                                                        frame.i32_store(2, 416);
                                                        frame.push(local0);
                                                        frame.i32_const(368);
                                                        frame.i32_add();
                                                        frame.push(local0);
                                                        frame.i32_const(304);
                                                        frame.i32_add();
                                                        {
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func047(t0, t1);
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_load8_u(0, 368);
                                                        frame.i32_const(128);
                                                        frame.i32_ne();
                                                        if (frame.pop() != 0) {
                                                          continue loop_label_25;
                                                        }
                                                        break;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 416);
                                                      local45 = frame.pop();
                                                      frame.push(local0);
                                                      frame.i32_load(2, 412);
                                                      local19 = frame.pop();
                                                      frame.push(local0);
                                                      frame.i32_load(2, 408);
                                                      local44 = frame.pop();
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 256);
                                                      local1 = frame.peek();
                                                      frame.i32_const(4);
                                                      frame.i32_eq();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(13, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local44);
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(7, 0);
                                                        break block_label_22;
                                                      }
                                                      frame.i32_const(0xf5144);
                                                      frame.push(local19);
                                                      {
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func019(t0, t1);
                                                      }
                                                      frame.unwindTo(7, 0);
                                                      break block_label_22;
                                                    }
                                                    frame.push(local19);
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(5, 0);
                                                      break block_label_12;
                                                    }
                                                    frame.push(local44);
                                                    local1 = frame.pop();
                                                    frame.unwindTo(7, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 256);
                                                  local1 = frame.peek();
                                                  frame.i32_const(4);
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(7, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.i32_const(0);
                                                  local44 = frame.pop();
                                                  frame.i32_const(1);
                                                  local19 = frame.pop();
                                                  frame.i32_const(0);
                                                  local45 = frame.pop();
                                                  frame.unwindTo(5, 0);
                                                  break block_label_12;
                                                }
                                                frame.push(local1);
                                                frame.i32_const(255);
                                                frame.i32_and();
                                                local1 = frame.pop();
                                                frame.push(local0);
                                                frame.i32_const(240);
                                                frame.i32_add();
                                                {
                                                  var t0 = frame.pop();
                                                  _func054(t0);
                                                }
                                                frame.unwindTo(5, 0);
                                                break block_label_7;
                                              }
                                              frame.push(local1);
                                              frame.i32_const(2);
                                              frame.push(local2);
                                              frame.select();
                                              local12 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 248);
                                              frame.i32_const(4);
                                              frame.i32_shl();
                                              local1 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 244);
                                              local2 = frame.pop();
                                              block_label_21:
                                              {
                                                loop_label_22:
                                                for (;;) {
                                                  frame.push(local1);
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(5, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local1);
                                                  frame.i32_const(-16);
                                                  frame.i32_add();
                                                  local1 = frame.pop();
                                                  frame.push(local2);
                                                  frame.i32_load8_u(0, 12);
                                                  arg2 = frame.pop();
                                                  frame.push(local2);
                                                  frame.i32_const(16);
                                                  frame.i32_add();
                                                  local2 = frame.pop();
                                                  frame.push(arg2);
                                                  frame.push(local12);
                                                  frame.i32_const(255);
                                                  frame.i32_and();
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(5, 0);
                                                    break block_label_11;
                                                  }
                                                  continue loop_label_22;

                                                  break;
                                                }
                                              }
                                              frame.push(local0);
                                              frame.i32_const(0);
                                              frame.i32_store(2, 376);
                                              frame.push(local0);
                                              frame.i64_const(0x100000000);
                                              frame.i64_store(3, 368);
                                              block_label_21:
                                              {
                                                frame.push(local0);
                                                frame.i32_load8_u(0, 96);
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(5, 0);
                                                  break block_label_21;
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 84);
                                                local1 = frame.peek();
                                                frame.push(local0);
                                                frame.i32_load(2, 80);
                                                local2 = frame.peek();
                                                frame.i32_lt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(3, 0);
                                                  break block_label_0;
                                                }
                                                frame.push(local1);
                                                frame.push(local0);
                                                frame.i32_load(2, 92);
                                                frame.i32_gt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(3, 0);
                                                  break block_label_0;
                                                }
                                                frame.push(local1);
                                                frame.push(local2);
                                                frame.i32_sub();
                                                local1 = frame.peek();
                                                frame.i32_const(-2);
                                                frame.i32_add();
                                                frame.i32_const(6);
                                                frame.i32_gt_u();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(5, 0);
                                                  break block_label_21;
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 88);
                                                frame.push(local2);
                                                frame.i32_add();
                                                arg2 = frame.pop();

                                                loop_label_22:
                                                for (;;) {
                                                  frame.push(local0);
                                                  frame.i32_const(408);
                                                  frame.i32_add();
                                                  frame.push(arg2);
                                                  frame.push(local1);
                                                  frame.push(local1);
                                                  {
                                                    var t3 = frame.pop();
                                                    var t2 = frame.pop();
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func049(t0, t1, t2, t3);
                                                  }
                                                  block_label_23:
                                                  {
                                                    frame.push(local0);
                                                    frame.i32_load(2, 408);
                                                    frame.i32_const(3);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(13, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.push(local0);
                                                    frame.i64_load(2, 412);
                                                    local33 = frame.peek();
                                                    frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                    frame.i64_add();
                                                    frame.i64_const(-0x5050505050505051);
                                                    frame.push(local33);
                                                    frame.i64_sub();
                                                    frame.push(local33);
                                                    frame.i64_const(0x4646464646464646);
                                                    frame.i64_add();
                                                    frame.i64_or();
                                                    frame.i64_and();
                                                    frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                    frame.push(local33);
                                                    frame.i64_const(0x2020202020202020);
                                                    frame.i64_or();
                                                    local34 = frame.peek();
                                                    frame.i64_sub();
                                                    frame.push(local34);
                                                    frame.i64_const(0x505050505050505);
                                                    frame.i64_add();
                                                    frame.i64_or();
                                                    frame.i64_and();
                                                    frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                    frame.i64_and();
                                                    frame.i64_eqz();
                                                    frame.i32_eqz();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(13, 0);
                                                      break block_label_23;
                                                    }
                                                    frame.push(local33);
                                                    frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                                    frame.i64_add();
                                                    frame.i64_const(-0x2525252525252526);
                                                    frame.push(local33);
                                                    frame.i64_sub();
                                                    frame.i64_and();
                                                    frame.i64_const(2);
                                                    frame.i64_shr_u();
                                                    frame.i64_const(0x2020202020202020);
                                                    frame.i64_and();
                                                    frame.push(local33);
                                                    frame.i64_or();
                                                    local33 = frame.peek();
                                                    frame.i64_const(255);
                                                    frame.i64_and();
                                                    frame.i64_const(128);
                                                    frame.i64_eq();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(13, 0);
                                                      break block_label_23;
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load(2, 376);
                                                      local1 = frame.peek();
                                                      frame.push(local0);
                                                      frame.i32_load(2, 368);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(16, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_const(368);
                                                      frame.i32_add();
                                                      frame.push(local1);
                                                      {
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func063(t0, t1);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 376);
                                                      local1 = frame.pop();
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 372);
                                                    frame.push(local1);
                                                    frame.i32_const(3);
                                                    frame.i32_shl();
                                                    frame.i32_add();
                                                    frame.push(local33);
                                                    frame.i64_store(0, 0);
                                                    frame.push(local0);
                                                    frame.push(local0);
                                                    frame.i32_load(2, 376);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    frame.i32_store(2, 376);
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_const(8);
                                                  frame.i32_add();
                                                  frame.push(local0);
                                                  frame.i32_const(80);
                                                  frame.i32_add();
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func048(t0, t1);
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 96);
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(5, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load(2, 84);
                                                  local1 = frame.peek();
                                                  frame.push(local0);
                                                  frame.i32_load(2, 80);
                                                  local2 = frame.peek();
                                                  frame.i32_lt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(3, 0);
                                                    break block_label_0;
                                                  }
                                                  frame.push(local1);
                                                  frame.push(local0);
                                                  frame.i32_load(2, 92);
                                                  frame.i32_gt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(3, 0);
                                                    break block_label_0;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load(2, 88);
                                                  frame.push(local2);
                                                  frame.i32_add();
                                                  arg2 = frame.pop();
                                                  frame.push(local1);
                                                  frame.push(local2);
                                                  frame.i32_sub();
                                                  local1 = frame.peek();
                                                  frame.i32_const(-2);
                                                  frame.i32_add();
                                                  frame.i32_const(7);
                                                  frame.i32_lt_u();
                                                  if (frame.pop() != 0) {
                                                    continue loop_label_22;
                                                  }
                                                  break;
                                                }
                                              }
                                              frame.push(local12);
                                              frame.i32_const(223);
                                              frame.i32_and();
                                              frame.i32_const(-65);
                                              frame.i32_add();
                                              frame.i32_const(255);
                                              frame.i32_and();
                                              frame.i32_const(26);
                                              frame.i32_ge_u();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(3, 0);
                                                break block_label_0;
                                              }
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 368);
                                              local46 = frame.pop();
                                              block_label_21:
                                              {
                                                frame.push(local0);
                                                frame.i32_load(2, 372);
                                                local47 = frame.peek();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(6, 0);
                                                  break block_label_21;
                                                }
                                                frame.push(local46);
                                                local16 = frame.pop();
                                                frame.unwindTo(5, 0);
                                                break block_label_9;
                                              }
                                              frame.push(local0);
                                              frame.i32_load(2, 376);
                                              local48 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load16_u(0, 369);
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 371);
                                              frame.i32_const(16);
                                              frame.i32_shl();
                                              frame.i32_or();
                                              local49 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 244);
                                              local42 = frame.pop();
                                              frame.i32_const(0);
                                              local11 = frame.pop();
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load(2, 248);
                                                      local50 = frame.peek();
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(6, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local50);
                                                      local1 = frame.pop();
                                                      frame.push(local50);
                                                      local13 = frame.pop();

                                                      loop_label_25:
                                                      for (;;) {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              frame.i32_const(-1);
                                                              frame.push(local42);
                                                              frame.push(local1);
                                                              frame.i32_const(1);
                                                              frame.i32_shr_u();
                                                              frame.push(local11);
                                                              frame.i32_add();
                                                              local14 = frame.peek();
                                                              frame.i32_const(4);
                                                              frame.i32_shl();
                                                              frame.i32_add();
                                                              arg2 = frame.peek();
                                                              frame.i32_load8_u(0, 12);
                                                              local1 = frame.peek();
                                                              frame.push(local12);
                                                              frame.i32_const(255);
                                                              frame.i32_and();
                                                              local2 = frame.peek();
                                                              frame.i32_ne();
                                                              frame.push(local1);
                                                              frame.push(local2);
                                                              frame.i32_lt_u();
                                                              frame.select();
                                                              local2 = frame.peek();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(7, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.push(arg2);
                                                              frame.i32_load(2, 8);
                                                              local51 = frame.peek();
                                                              frame.push(local48);
                                                              frame.push(local51);
                                                              frame.push(local48);
                                                              frame.i32_lt_u();
                                                              local52 = frame.peek();
                                                              frame.select();
                                                              local18 = frame.pop();
                                                              frame.push(arg2);
                                                              frame.i32_load(2, 4);
                                                              arg1 = frame.pop();
                                                              frame.i32_const(0);
                                                              local17 = frame.pop();
                                                              frame.push(local47);
                                                              local3 = frame.pop();

                                                              loop_label_29:
                                                              for (;;) {
                                                                block_label_30:
                                                                {
                                                                  frame.push(local17);
                                                                  frame.push(local18);
                                                                  frame.i32_ne();
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(8, 0);
                                                                    break block_label_30;
                                                                  }
                                                                  frame.push(local52);
                                                                  if (frame.pop() != 0) {
                                                                    frame.unwindTo(7, 0);
                                                                    break block_label_27;
                                                                  }
                                                                  frame.push(local51);
                                                                  frame.push(local48);
                                                                  frame.i32_ne();
                                                                  local2 = frame.pop();
                                                                  frame.unwindTo(7, 0);
                                                                  break block_label_28;
                                                                }
                                                                frame.push(local17);
                                                                frame.i32_const(1);
                                                                frame.i32_add();
                                                                local17 = frame.pop();
                                                                frame.i32_const(0);
                                                                local1 = frame.pop();
                                                                block_label_30:
                                                                {
                                                                  loop_label_31:
                                                                  for (;;) {
                                                                    block_label_32:
                                                                    {
                                                                      frame.push(local1);
                                                                      frame.i32_const(8);
                                                                      frame.i32_ne();
                                                                      if (frame.pop() != 0) {
                                                                        frame.unwindTo(8, 0);
                                                                        break block_label_32;
                                                                      }
                                                                      frame.i32_const(0);
                                                                      local2 = frame.pop();
                                                                      frame.unwindTo(8, 0);
                                                                      break block_label_30;
                                                                    }
                                                                    frame.push(local3);
                                                                    frame.push(local1);
                                                                    frame.i32_add();
                                                                    local2 = frame.pop();
                                                                    frame.push(arg1);
                                                                    frame.push(local1);
                                                                    frame.i32_add();
                                                                    arg2 = frame.pop();
                                                                    frame.push(local1);
                                                                    frame.i32_const(1);
                                                                    frame.i32_add();
                                                                    local1 = frame.pop();
                                                                    frame.i32_const(-1);
                                                                    frame.push(arg2);
                                                                    frame.i32_load8_u(0, 0);
                                                                    arg2 = frame.peek();
                                                                    frame.push(local2);
                                                                    frame.i32_load8_u(0, 0);
                                                                    local2 = frame.peek();
                                                                    frame.i32_ne();
                                                                    frame.push(arg2);
                                                                    frame.push(local2);
                                                                    frame.i32_lt_u();
                                                                    frame.select();
                                                                    local2 = frame.peek();
                                                                    frame.i32_eqz();
                                                                    if (frame.pop() != 0) {
                                                                      continue loop_label_31;
                                                                    }
                                                                    break;
                                                                  }
                                                                }
                                                                frame.push(arg1);
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                arg1 = frame.pop();
                                                                frame.push(local3);
                                                                frame.i32_const(8);
                                                                frame.i32_add();
                                                                local3 = frame.pop();
                                                                frame.push(local2);
                                                                frame.i32_eqz();
                                                                if (frame.pop() != 0) {
                                                                  continue loop_label_29;
                                                                }
                                                                break;
                                                              }
                                                            }
                                                            block_label_28:
                                                            {
                                                              frame.push(local2);
                                                              frame.i32_const(1);
                                                              frame.i32_ne();
                                                              if (frame.pop() != 0) {
                                                                frame.unwindTo(7, 0);
                                                                break block_label_28;
                                                              }
                                                              frame.push(local14);
                                                              local13 = frame.pop();
                                                              frame.unwindTo(7, 0);
                                                              break block_label_26;
                                                            }
                                                            frame.push(local2);
                                                            frame.i32_const(255);
                                                            frame.i32_and();
                                                            frame.i32_const(255);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(6, 0);
                                                              break block_label_23;
                                                            }
                                                          }
                                                          frame.push(local14);
                                                          frame.i32_const(1);
                                                          frame.i32_add();
                                                          local11 = frame.pop();
                                                        }
                                                        frame.push(local13);
                                                        frame.push(local11);
                                                        frame.i32_sub();
                                                        local1 = frame.pop();
                                                        frame.push(local13);
                                                        frame.push(local11);
                                                        frame.i32_gt_u();
                                                        if (frame.pop() != 0) {
                                                          continue loop_label_25;
                                                        }
                                                        break;
                                                      }
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 240);
                                                    frame.push(local50);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(6, 0);
                                                      break block_label_22;
                                                    }
                                                    frame.unwindTo(6, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local49);
                                                  frame.i32_const(8);
                                                  frame.i32_shl();
                                                  frame.push(local46);
                                                  frame.i32_or();
                                                  frame.i32_eqz();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(5, 0);
                                                    break block_label_9;
                                                  }
                                                  frame.i32_const(0xf5144);
                                                  frame.push(local47);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func019(t0, t1);
                                                  }
                                                  frame.unwindTo(5, 0);
                                                  break block_label_9;
                                                }
                                                frame.push(local0);
                                                frame.i32_const(240);
                                                frame.i32_add();
                                                frame.push(local50);
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func067(t0, t1);
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 244);
                                                local42 = frame.pop();
                                              }
                                              frame.push(local42);
                                              frame.push(local11);
                                              frame.i32_const(4);
                                              frame.i32_shl();
                                              frame.i32_add();
                                              local1 = frame.pop();
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.push(local50);
                                                  frame.push(local11);
                                                  frame.i32_gt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(6, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local50);
                                                  frame.push(local11);
                                                  frame.i32_eq();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(6, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local11);
                                                  frame.push(local50);
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func036(t0, t1);
                                                  }
                                                  throw Trap('unreachable');
                                                }
                                                frame.push(local1);
                                                frame.i32_const(16);
                                                frame.i32_add();
                                                frame.push(local1);
                                                frame.push(local50);
                                                frame.push(local11);
                                                frame.i32_sub();
                                                frame.i32_const(4);
                                                frame.i32_shl();
                                                {
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  frame.push(_func004(t0, t1, t2));
                                                }
                                                frame.drop();
                                              }
                                              frame.push(local1);
                                              frame.push(local53);
                                              frame.i64_const(-0x10000000000);
                                              frame.i64_and();
                                              frame.push(local48);
                                              frame.i64_extend_i32_u();
                                              frame.i64_or();
                                              frame.push(local12);
                                              frame.i64_extend_i32_u();
                                              frame.i64_const(255);
                                              frame.i64_and();
                                              frame.i64_const(32);
                                              frame.i64_shl();
                                              frame.i64_or();
                                              local53 = frame.peek();
                                              frame.i64_store(2, 8);
                                              frame.push(local1);
                                              frame.push(local47);
                                              frame.i32_store(2, 4);
                                              frame.push(local1);
                                              frame.push(local49);
                                              frame.i32_const(8);
                                              frame.i32_shl();
                                              frame.push(local46);
                                              frame.i32_or();
                                              frame.i32_store(2, 0);
                                              frame.push(local0);
                                              frame.push(local50);
                                              frame.i32_const(1);
                                              frame.i32_add();
                                              frame.i32_store(2, 248);
                                              frame.unwindTo(5, 0);
                                              break block_label_12;
                                            }
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 96);
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(5, 0);
                                              break block_label_19;
                                            }
                                            frame.push(local0);
                                            frame.i32_load(2, 84);
                                            local1 = frame.peek();
                                            frame.push(local0);
                                            frame.i32_load(2, 80);
                                            local2 = frame.peek();
                                            frame.i32_lt_u();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(3, 0);
                                              break block_label_0;
                                            }
                                            frame.push(local1);
                                            frame.push(local0);
                                            frame.i32_load(2, 92);
                                            frame.i32_gt_u();
                                            if (frame.pop() != 0) {
                                              frame.unwindTo(3, 0);
                                              break block_label_0;
                                            }
                                            frame.push(local1);
                                            frame.push(local2);
                                            frame.i32_sub();
                                            local1 = frame.pop();
                                            frame.push(local0);
                                            frame.i32_load(2, 88);
                                            frame.push(local2);
                                            frame.i32_add();
                                            local2 = frame.pop();
                                            frame.i32_const(128);
                                            arg2 = frame.pop();
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                loop_label_22:
                                                for (;;) {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      frame.push(local1);
                                                      frame.i32_const(2);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(8, 0);
                                                        break block_label_24;
                                                      }
                                                      block_label_25:
                                                      {
                                                        frame.push(arg2);
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        local1 = frame.peek();
                                                        frame.i32_const(128);
                                                        frame.i32_eq();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(9, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(408);
                                                        frame.i32_add();
                                                        frame.i32_const(8);
                                                        frame.i32_add();
                                                        frame.push(local0);
                                                        frame.i32_const(352);
                                                        frame.i32_add();
                                                        frame.i32_const(8);
                                                        frame.i32_add();
                                                        frame.i32_load(2, 0);
                                                        frame.i32_store(2, 0);
                                                        frame.push(local0);
                                                        frame.push(local0);
                                                        frame.i64_load(3, 352);
                                                        frame.i64_store(3, 408);
                                                        frame.push(local0);
                                                        frame.i32_const(304);
                                                        frame.i32_add();
                                                        frame.push(local0);
                                                        frame.i32_const(408);
                                                        frame.i32_add();
                                                        {
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func079(t0, t1);
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(408);
                                                        frame.i32_add();
                                                        frame.push(local0);
                                                        frame.i32_const(368);
                                                        frame.i32_add();
                                                        frame.push(local16);
                                                        frame.i32_const(8);
                                                        frame.i32_shl();
                                                        frame.push(local1);
                                                        frame.i32_or();
                                                        frame.push(local0);
                                                        frame.i32_const(304);
                                                        frame.i32_add();
                                                        {
                                                          var t3 = frame.pop();
                                                          var t2 = frame.pop();
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          _func076(t0, t1, t2, t3);
                                                        }
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            frame.i32_const(0);
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(16, 0);
                                                              break block_label_27;
                                                            }
                                                            frame.push(local0);
                                                            frame.i32_load8_u(0, 412);
                                                            frame.i32_const(2);
                                                            frame.i32_ne();
                                                            if (frame.pop() != 0) {
                                                              frame.unwindTo(16, 0);
                                                              break block_label_26;
                                                            }
                                                          }
                                                          frame.push(local0);
                                                          frame.i32_load(2, 416);
                                                          frame.i32_eqz();
                                                          if (frame.pop() != 0) {
                                                            frame.unwindTo(16, 0);
                                                            break block_label_26;
                                                          }
                                                          frame.i32_const(0xf5144);
                                                          frame.push(local0);
                                                          frame.i32_load(2, 420);
                                                          {
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            _func019(t0, t1);
                                                          }
                                                        }
                                                        frame.push(local0);
                                                        frame.i32_const(0);
                                                        frame.i32_store(2, 360);
                                                        frame.push(local0);
                                                        frame.i64_const(0x100000000);
                                                        frame.i64_store(3, 352);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_const(408);
                                                      frame.i32_add();
                                                      frame.push(local2);
                                                      frame.i32_const(2);
                                                      frame.i32_const(2);
                                                      {
                                                        var t3 = frame.pop();
                                                        var t2 = frame.pop();
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func077(t0, t1, t2, t3);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 408);
                                                      frame.i32_const(3);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_18;
                                                      }
                                                      block_label_25:
                                                      {
                                                        frame.push(local0);
                                                        frame.i32_load8_u(0, 412);
                                                        local1 = frame.peek();
                                                        frame.i32_const(-48);
                                                        frame.i32_add();
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        frame.i32_const(10);
                                                        frame.i32_lt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(14, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local1);
                                                        frame.i32_const(-65);
                                                        frame.i32_add();
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        frame.i32_const(26);
                                                        frame.i32_lt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(14, 0);
                                                          break block_label_25;
                                                        }
                                                        frame.push(local1);
                                                        frame.i32_const(-97);
                                                        frame.i32_add();
                                                        frame.i32_const(255);
                                                        frame.i32_and();
                                                        frame.i32_const(25);
                                                        frame.i32_gt_u();
                                                        if (frame.pop() != 0) {
                                                          frame.unwindTo(5, 0);
                                                          break block_label_18;
                                                        }
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 413);
                                                      frame.i32_const(223);
                                                      frame.i32_and();
                                                      frame.i32_const(-65);
                                                      frame.i32_add();
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(26);
                                                      frame.i32_ge_u();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(5, 0);
                                                        break block_label_18;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load16_u(1, 412);
                                                      local1 = frame.peek();
                                                      frame.i32_const(0x3f3f);
                                                      frame.i32_add();
                                                      frame.i32_const(0xdada);
                                                      frame.push(local1);
                                                      frame.i32_sub();
                                                      frame.i32_and();
                                                      frame.i32_const(2);
                                                      frame.i32_shr_u();
                                                      frame.i32_const(0x2020);
                                                      frame.i32_and();
                                                      frame.push(local1);
                                                      frame.i32_or();
                                                      arg2 = frame.peek();
                                                      frame.i32_const(8);
                                                      frame.i32_shr_u();
                                                      local16 = frame.pop();
                                                      frame.push(arg2);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(128);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(8, 0);
                                                        break block_label_23;
                                                      }
                                                      frame.unwindTo(5, 0);
                                                      break block_label_17;
                                                    }
                                                    frame.push(arg2);
                                                    frame.i32_const(255);
                                                    frame.i32_and();
                                                    frame.i32_const(128);
                                                    frame.i32_eq();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(8, 0);
                                                      break block_label_20;
                                                    }
                                                    frame.push(local1);
                                                    frame.i32_const(-9);
                                                    frame.i32_add();
                                                    frame.i32_const(-6);
                                                    frame.i32_lt_u();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(8, 0);
                                                      break block_label_21;
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_const(408);
                                                    frame.i32_add();
                                                    frame.push(local2);
                                                    frame.push(local1);
                                                    frame.push(local1);
                                                    {
                                                      var t3 = frame.pop();
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      _func049(t0, t1, t2, t3);
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 408);
                                                    frame.i32_const(3);
                                                    frame.i32_ne();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(8, 0);
                                                      break block_label_21;
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 412);
                                                      frame.i32_const(116);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 413);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(114);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 414);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(117);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 415);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(101);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 416);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 417);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 418);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(15, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load8_u(0, 419);
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_eqz();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(8, 0);
                                                        break block_label_23;
                                                      }
                                                    }
                                                    frame.push(local0);
                                                    frame.i64_load(2, 412);
                                                    local33 = frame.peek();
                                                    frame.i64_const(0x7f7f7f7f7f7f7f7f);
                                                    frame.i64_add();
                                                    frame.i64_const(-0x5050505050505051);
                                                    frame.push(local33);
                                                    frame.i64_sub();
                                                    frame.push(local33);
                                                    frame.i64_const(0x4646464646464646);
                                                    frame.i64_add();
                                                    frame.i64_or();
                                                    frame.i64_and();
                                                    frame.i64_const(-0x1f1f1f1f1f1f1f20);
                                                    frame.push(local33);
                                                    frame.i64_const(0x2020202020202020);
                                                    frame.i64_or();
                                                    local34 = frame.peek();
                                                    frame.i64_sub();
                                                    frame.push(local34);
                                                    frame.i64_const(0x505050505050505);
                                                    frame.i64_add();
                                                    frame.i64_or();
                                                    frame.i64_and();
                                                    frame.i64_const(-0x7f7f7f7f7f7f7f80);
                                                    frame.i64_and();
                                                    frame.i64_eqz();
                                                    frame.i32_eqz();
                                                    if (frame.pop() != 0) {
                                                      frame.unwindTo(8, 0);
                                                      break block_label_21;
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local33);
                                                      frame.i64_const(0x3f3f3f3f3f3f3f3f);
                                                      frame.i64_add();
                                                      frame.i64_const(-0x2525252525252526);
                                                      frame.push(local33);
                                                      frame.i64_sub();
                                                      frame.i64_and();
                                                      frame.i64_const(2);
                                                      frame.i64_shr_u();
                                                      frame.i64_const(0x2020202020202020);
                                                      frame.i64_and();
                                                      frame.push(local33);
                                                      frame.i64_or();
                                                      local33 = frame.peek();
                                                      frame.i32_wrap_i64();
                                                      frame.i32_const(255);
                                                      frame.i32_and();
                                                      frame.i32_const(-128);
                                                      frame.i32_add();
                                                      var t0 = frame.pop();
                                                      switch (t0) {
                                                        case 0:
                                                          frame.unwindTo(8, 0);
                                                          break block_label_23;

                                                        case 1:
                                                          frame.unwindTo(8, 0);
                                                          break block_label_21;

                                                        default:
                                                          frame.unwindTo(16, 0);
                                                          break block_label_24;
                                                      }
                                                    }
                                                    block_label_24:
                                                    {
                                                      frame.push(local0);
                                                      frame.i32_load(2, 360);
                                                      local1 = frame.peek();
                                                      frame.push(local0);
                                                      frame.i32_load(2, 352);
                                                      frame.i32_ne();
                                                      if (frame.pop() != 0) {
                                                        frame.unwindTo(16, 0);
                                                        break block_label_24;
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_const(352);
                                                      frame.i32_add();
                                                      frame.push(local1);
                                                      {
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        _func065(t0, t1);
                                                      }
                                                      frame.push(local0);
                                                      frame.i32_load(2, 360);
                                                      local1 = frame.pop();
                                                    }
                                                    frame.push(local0);
                                                    frame.i32_load(2, 356);
                                                    frame.push(local1);
                                                    frame.i32_const(3);
                                                    frame.i32_shl();
                                                    frame.i32_add();
                                                    frame.push(local33);
                                                    frame.i64_store(0, 0);
                                                    frame.push(local0);
                                                    frame.push(local0);
                                                    frame.i32_load(2, 360);
                                                    frame.i32_const(1);
                                                    frame.i32_add();
                                                    frame.i32_store(2, 360);
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_const(16);
                                                  frame.i32_add();
                                                  frame.push(local0);
                                                  frame.i32_const(80);
                                                  frame.i32_add();
                                                  {
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    _func048(t0, t1);
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 96);
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(8, 0);
                                                    break block_label_21;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load(2, 84);
                                                  local1 = frame.peek();
                                                  frame.push(local0);
                                                  frame.i32_load(2, 80);
                                                  local2 = frame.peek();
                                                  frame.i32_lt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(3, 0);
                                                    break block_label_0;
                                                  }
                                                  frame.push(local1);
                                                  frame.push(local0);
                                                  frame.i32_load(2, 92);
                                                  frame.i32_gt_u();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(3, 0);
                                                    break block_label_0;
                                                  }
                                                  frame.push(local1);
                                                  frame.push(local2);
                                                  frame.i32_sub();
                                                  local1 = frame.pop();
                                                  frame.push(local0);
                                                  frame.i32_load(2, 88);
                                                  frame.push(local2);
                                                  frame.i32_add();
                                                  local2 = frame.pop();
                                                  continue loop_label_22;

                                                  break;
                                                }
                                              }
                                              frame.push(local0);
                                              frame.i32_const(408);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(352);
                                              frame.i32_add();
                                              frame.i32_const(8);
                                              frame.i32_add();
                                              frame.i32_load(2, 0);
                                              frame.i32_store(2, 0);
                                              frame.push(local0);
                                              frame.push(local0);
                                              frame.i64_load(3, 352);
                                              frame.i64_store(3, 408);
                                              frame.push(local0);
                                              frame.i32_const(304);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(408);
                                              frame.i32_add();
                                              {
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func079(t0, t1);
                                              }
                                              frame.push(local0);
                                              frame.i32_const(408);
                                              frame.i32_add();
                                              frame.push(local0);
                                              frame.i32_const(368);
                                              frame.i32_add();
                                              frame.push(local16);
                                              frame.i32_const(8);
                                              frame.i32_shl();
                                              frame.push(arg2);
                                              frame.i32_const(255);
                                              frame.i32_and();
                                              frame.i32_or();
                                              frame.push(local0);
                                              frame.i32_const(304);
                                              frame.i32_add();
                                              {
                                                var t3 = frame.pop();
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                _func076(t0, t1, t2, t3);
                                              }
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  frame.i32_const(0);
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(14, 0);
                                                    break block_label_22;
                                                  }
                                                  frame.push(local0);
                                                  frame.i32_load8_u(0, 412);
                                                  frame.i32_const(2);
                                                  frame.i32_ne();
                                                  if (frame.pop() != 0) {
                                                    frame.unwindTo(14, 0);
                                                    break block_label_21;
                                                  }
                                                }
                                                frame.push(local0);
                                                frame.i32_load(2, 416);
                                                frame.i32_eqz();
                                                if (frame.pop() != 0) {
                                                  frame.unwindTo(14, 0);
                                                  break block_label_21;
                                                }
                                                frame.i32_const(0xf5144);
                                                frame.push(local0);
                                                frame.i32_load(2, 420);
                                                {
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  _func019(t0, t1);
                                                }
                                              }
                                              frame.push(local0);
                                              frame.i32_load8_u(0, 372);
                                              local15 = frame.pop();
                                              frame.push(local0);
                                              frame.i32_load(2, 344);
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(5, 0);
                                                break block_label_15;
                                              }
                                              frame.push(local15);
                                              frame.i32_const(255);
                                              frame.i32_and();
                                              frame.i32_const(3);
                                              frame.i32_ne();
                                              if (frame.pop() != 0) {
                                                frame.unwindTo(5, 0);
                                                break block_label_15;
                                              }
                                              frame.i32_const(2);
                                              local16 = frame.pop();
                                              frame.unwindTo(5, 0);
                                              break block_label_13;
                                            }
                                            frame.push(local0);
                                            frame.i32_load8_u(0, 372);
                                            local15 = frame.pop();
                                          }
                                          frame.push(local0);
                                          frame.i32_load(2, 344);
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(5, 0);
                                            break block_label_16;
                                          }
                                          frame.push(local15);
                                          frame.i32_const(255);
                                          frame.i32_and();
                                          frame.i32_const(3);
                                          frame.i32_ne();
                                          if (frame.pop() != 0) {
                                            frame.unwindTo(5, 0);
                                            break block_label_16;
                                          }
                                        }
                                        frame.i32_const(2);
                                        local16 = frame.pop();
                                      }
                                      frame.push(local0);
                                      frame.i32_load(2, 352);
                                      frame.i32_eqz();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(5, 0);
                                        break block_label_13;
                                      }
                                      frame.i32_const(0xf5144);
                                      frame.push(local0);
                                      frame.i32_load(2, 356);
                                      {
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        _func019(t0, t1);
                                      }
                                      frame.unwindTo(5, 0);
                                      break block_label_13;
                                    }
                                    frame.push(local0);
                                    frame.push(local26);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(3, 272);
                                    frame.push(local0);
                                    frame.push(local25);
                                    frame.i64_load(0, 0);
                                    frame.i64_store(3, 320);
                                    frame.push(local0);
                                    frame.push(local26);
                                    frame.i32_const(7);
                                    frame.i32_add();
                                    frame.i64_load(0, 0);
                                    frame.i64_store(0, 279);
                                    frame.push(local0);
                                    frame.push(local25);
                                    frame.i32_const(7);
                                    frame.i32_add();
                                    frame.i32_load(0, 0);
                                    frame.i32_store(0, 327);
                                    frame.push(local0);
                                    frame.i32_load8_u(0, 336);
                                    local16 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load(2, 368);
                                    local54 = frame.pop();
                                    frame.push(local0);
                                    frame.i32_load(2, 352);
                                    frame.i32_eqz();
                                    if (frame.pop() != 0) {
                                      frame.unwindTo(5, 0);
                                      break block_label_14;
                                    }
                                    frame.i32_const(0xf5144);
                                    frame.push(local0);
                                    frame.i32_load(2, 356);
                                    {
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      _func019(t0, t1);
                                    }
                                    frame.unwindTo(5, 0);
                                    break block_label_14;
                                  }
                                  frame.push(local0);
                                  frame.push(local26);
                                  frame.i64_load(0, 0);
                                  frame.i64_store(3, 272);
                                  frame.push(local0);
                                  frame.push(local25);
                                  frame.i64_load(0, 0);
                                  frame.i64_store(3, 320);
                                  frame.push(local0);
                                  frame.push(local26);
                                  frame.i32_const(7);
                                  frame.i32_add();
                                  frame.i64_load(0, 0);
                                  frame.i64_store(0, 279);
                                  frame.push(local0);
                                  frame.push(local25);
                                  frame.i32_const(7);
                                  frame.i32_add();
                                  frame.i32_load(0, 0);
                                  frame.i32_store(0, 327);
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 336);
                                  local16 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_load(2, 368);
                                  local54 = frame.pop();
                                }
                                frame.push(local15);
                                frame.i32_const(255);
                                frame.i32_and();
                                frame.i32_const(6);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(5, 0);
                                  break block_label_9;
                                }
                                frame.push(local0);
                                frame.push(local0);
                                frame.i32_load(0, 327);
                                frame.i32_store(0, 295);
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(3, 320);
                                frame.i64_store(3, 288);
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(3, 272);
                                frame.i64_store(3, 256);
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(0, 279);
                                frame.i64_store(0, 263);
                                frame.push(local0);
                                frame.i32_const(168);
                                frame.i32_add();
                                {
                                  var t0 = frame.pop();
                                  _func055(t0);
                                }
                                frame.push(local24);
                                frame.push(local0);
                                frame.i64_load(3, 288);
                                frame.i64_store(0, 0);
                                frame.push(local24);
                                frame.i32_const(7);
                                frame.i32_add();
                                frame.push(local0);
                                frame.i32_load(0, 295);
                                frame.i32_store(0, 0);
                                frame.push(local23);
                                frame.push(local0);
                                frame.i64_load(3, 256);
                                frame.i64_store(0, 0);
                                frame.push(local23);
                                frame.i32_const(7);
                                frame.i32_add();
                                frame.push(local0);
                                frame.i64_load(0, 263);
                                frame.i64_store(0, 0);
                                frame.push(local0);
                                frame.push(local16);
                                frame.i32_store8(0, 168);
                                frame.push(local0);
                                frame.push(local15);
                                frame.i32_store8(0, 184);
                                frame.push(local0);
                                frame.push(local54);
                                frame.i32_store(2, 180);
                                frame.unwindTo(5, 0);
                                break block_label_12;
                              }
                              frame.push(local0);
                              frame.i32_const(368);
                              frame.i32_add();
                              {
                                var t0 = frame.pop();
                                _func052(t0);
                              }
                              frame.push(local0);
                              frame.i32_load(2, 336);
                              frame.i32_eqz();
                              if (frame.pop() != 0) {
                                frame.unwindTo(5, 0);
                                break block_label_9;
                              }
                              frame.i32_const(0xf5144);
                              frame.push(local0);
                              frame.i32_load(2, 340);
                              {
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                _func019(t0, t1);
                              }
                              frame.unwindTo(5, 0);
                              break block_label_9;
                            }
                            frame.push(local0);
                            frame.push(local0);
                            frame.i32_const(80);
                            frame.i32_add();
                            {
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              _func048(t0, t1);
                            }
                            frame.push(local0);
                            frame.i32_load(2, 4);
                            local2 = frame.pop();
                            frame.push(local0);
                            frame.i32_load(2, 0);
                            local1 = frame.peek();
                            frame.i32_eqz();
                            if (frame.pop() != 0) {
                              frame.unwindTo(5, 0);
                              break block_label_6;
                            }
                            continue loop_label_10;
                          }
                          break;
                        }
                        frame.i32_const(3);
                        local16 = frame.pop();
                      }
                      frame.push(local16);
                      frame.i32_const(255);
                      frame.i32_and();
                      local1 = frame.pop();
                      frame.push(local0);
                      frame.i32_const(240);
                      frame.i32_add();
                      {
                        var t0 = frame.pop();
                        _func054(t0);
                      }
                      frame.push(local19);
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(5, 0);
                        break block_label_7;
                      }
                    }
                    frame.push(local44);
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(5, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0xf5144);
                    frame.push(local19);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func019(t0, t1);
                    }
                  }
                  block_label_7:
                  {
                    frame.push(local4);
                    frame.i32_const(255);
                    frame.i32_and();
                    frame.i32_const(4);
                    frame.i32_eq();
                    if (frame.pop() != 0) {
                      frame.unwindTo(5, 0);
                      break block_label_7;
                    }
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.i32_const(0);
                        if (frame.pop() != 0) {
                          frame.unwindTo(6, 0);
                          break block_label_9;
                        }
                        frame.push(local0);
                        frame.i32_load8_u(0, 212);
                        frame.i32_const(2);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          frame.unwindTo(6, 0);
                          break block_label_8;
                        }
                      }
                      frame.push(local0);
                      frame.i32_load(2, 216);
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(6, 0);
                        break block_label_8;
                      }
                      frame.i32_const(0xf5144);
                      frame.push(local0);
                      frame.i32_load(2, 220);
                      {
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        _func019(t0, t1);
                      }
                    }
                    frame.push(local0);
                    frame.i32_const(200);
                    frame.i32_add();
                    {
                      var t0 = frame.pop();
                      _func051(t0);
                    }
                  }
                  frame.push(local0);
                  frame.i32_const(168);
                  frame.i32_add();
                  {
                    var t0 = frame.pop();
                    _func055(t0);
                  }
                  frame.push(arg0);
                  frame.i32_const(3);
                  frame.i32_store8(0, 96);
                  frame.push(arg0);
                  frame.push(local1);
                  frame.i32_store8(0, 0);
                  frame.push(local5);
                  frame.i32_const(2);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_1;
                  }
                  frame.push(local8);
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_1;
                  }
                  frame.i32_const(0xf5144);
                  frame.push(local7);
                  {
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    _func019(t0, t1);
                  }
                  frame.unwindTo(3, 0);
                  break block_label_1;
                }
                frame.i32_const(1);
                local2 = frame.pop();
                frame.i32_const(0);
                arg1 = frame.pop();
                frame.i32_const(0);
                local18 = frame.pop();
                frame.i32_const(0);
                local17 = frame.pop();
                frame.i32_const(3);
                local3 = frame.pop();
                block_label_6:
                {
                  frame.push(local15);
                  frame.i32_const(255);
                  frame.i32_and();
                  frame.i32_const(6);
                  frame.i32_eq();
                  if (frame.pop() != 0) {
                    frame.unwindTo(5, 0);
                    break block_label_6;
                  }
                  frame.push(local0);
                  frame.push(local23);
                  frame.i64_load(0, 0);
                  frame.i64_store(3, 368);
                  frame.push(local0);
                  frame.push(local23);
                  frame.i32_const(7);
                  frame.i32_add();
                  frame.i64_load(0, 0);
                  frame.i64_store(0, 375);
                  frame.push(local0);
                  frame.i32_load(2, 168);
                  local18 = frame.pop();
                  frame.push(local0);
                  frame.i32_load(2, 172);
                  local2 = frame.pop();
                  frame.push(local0);
                  frame.i32_load(2, 176);
                  local17 = frame.pop();
                  frame.push(local15);
                  local3 = frame.pop();
                }
                frame.i32_const(4);
                arg2 = frame.pop();
                frame.push(local4);
                frame.i32_const(255);
                frame.i32_and();
                frame.i32_const(4);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(5, 0);
                  break block_label_4;
                }
              }
              frame.i32_const(0);
              local16 = frame.pop();
              frame.i32_const(3);
              local4 = frame.pop();
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(408);
            frame.i32_add();
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local20);
            frame.i32_const(8);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(408);
            frame.i32_add();
            frame.i32_const(16);
            frame.i32_add();
            frame.push(local20);
            frame.i32_const(16);
            frame.i32_add();
            frame.i64_load(0, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(408);
            frame.i32_add();
            frame.i32_const(23);
            frame.i32_add();
            frame.push(local20);
            frame.i32_const(23);
            frame.i32_add();
            frame.i32_load(0, 0);
            frame.i32_store(0, 0);
            frame.push(local0);
            frame.push(local20);
            frame.i64_load(0, 0);
            frame.i64_store(3, 408);
            frame.push(local0);
            frame.i32_load(2, 200);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_load(2, 204);
            arg2 = frame.pop();
            frame.push(local0);
            frame.i32_load(2, 208);
            local16 = frame.pop();
          }
          frame.push(local0);
          frame.i32_const(120);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(408);
          frame.i32_add();
          frame.i32_const(8);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(120);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(408);
          frame.i32_add();
          frame.i32_const(16);
          frame.i32_add();
          frame.i64_load(3, 0);
          frame.i64_store(3, 0);
          frame.push(local0);
          frame.i32_const(120);
          frame.i32_add();
          frame.i32_const(23);
          frame.i32_add();
          frame.push(local0);
          frame.i32_const(408);
          frame.i32_add();
          frame.i32_const(23);
          frame.i32_add();
          frame.i32_load(0, 0);
          frame.i32_store(0, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(0, 375);
          frame.i64_store(0, 159);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 368);
          frame.i64_store(3, 152);
          frame.push(local0);
          frame.push(local0);
          frame.i64_load(3, 408);
          frame.i64_store(3, 120);
          frame.push(local45);
          frame.i32_const(0);
          frame.push(local19);
          frame.select();
          local14 = frame.pop();
          frame.push(local44);
          frame.i32_const(0);
          frame.push(local19);
          frame.select();
          local15 = frame.pop();
          frame.push(local19);
          frame.i32_const(1);
          frame.push(local19);
          frame.select();
          local1 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 240);
          local13 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 244);
          local11 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 248);
          local12 = frame.pop();
        }
        frame.push(arg0);
        frame.push(local7);
        frame.i32_store(2, 104);
        frame.push(arg0);
        frame.push(local8);
        frame.i32_store(2, 100);
        frame.push(arg0);
        frame.push(local9);
        frame.i32_store16(1, 98);
        frame.push(arg0);
        frame.push(local10);
        frame.i32_store8(0, 97);
        frame.push(arg0);
        frame.push(local5);
        frame.i32_store8(0, 96);
        frame.push(arg0);
        frame.push(local0);
        frame.i64_load(3, 104);
        frame.i64_store(2, 108);
        frame.push(arg0);
        frame.push(local0);
        frame.i64_load(3, 152);
        frame.i64_store(0, 17);
        frame.push(arg0);
        frame.push(local0);
        frame.i64_load(3, 120);
        frame.i64_store(0, 45);
        frame.push(arg0);
        frame.i32_const(24);
        frame.i32_add();
        frame.push(local0);
        frame.i64_load(0, 159);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(116);
        frame.i32_add();
        frame.push(local6);
        frame.i64_load(3, 0);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(53);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(120);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(61);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(136);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(0, 0);
        frame.push(arg0);
        frame.i32_const(68);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(143);
        frame.i32_add();
        frame.i32_load(0, 0);
        frame.i32_store(0, 0);
        frame.push(arg0);
        frame.push(local12);
        frame.i32_store(2, 92);
        frame.push(arg0);
        frame.push(local11);
        frame.i32_store(2, 88);
        frame.push(arg0);
        frame.push(local13);
        frame.i32_store(2, 84);
        frame.push(arg0);
        frame.push(local14);
        frame.i32_store(2, 80);
        frame.push(arg0);
        frame.push(local1);
        frame.i32_store(2, 76);
        frame.push(arg0);
        frame.push(local15);
        frame.i32_store(2, 72);
        frame.push(arg0);
        frame.push(local4);
        frame.i32_store8(0, 44);
        frame.push(arg0);
        frame.push(local16);
        frame.i32_store(2, 40);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store(2, 36);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 32);
        frame.push(arg0);
        frame.push(local3);
        frame.i32_store8(0, 16);
        frame.push(arg0);
        frame.push(local54);
        frame.i32_store(2, 12);
        frame.push(arg0);
        frame.push(local17);
        frame.i32_store(2, 8);
        frame.push(arg0);
        frame.push(local2);
        frame.i32_store(2, 4);
        frame.push(arg0);
        frame.push(local18);
        frame.i32_store(2, 0);
      }
      frame.push(local0);
      frame.i32_const(448);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func082(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg3);
      frame.push(arg2);
      frame.i32_ge_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg3);
        frame.i32_const(1);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(1);
        frame.push(arg1);
        frame.push(arg3);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        arg3 = frame.peek();
        frame.i32_const(45);
        frame.i32_eq();
        frame.push(arg3);
        frame.i32_const(95);
        frame.i32_eq();
        frame.i32_or();
        local1 = frame.peek();
        frame.select();
        arg3 = frame.peek();
        frame.push(arg2);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }

        loop_label_2:
        for (;;) {
          frame.push(arg1);
          frame.push(arg3);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          local2 = frame.peek();
          frame.i32_const(95);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_1;
          }
          frame.push(local2);
          frame.i32_const(45);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(1, 0);
            break block_label_1;
          }
          frame.push(arg2);
          frame.push(arg3);
          frame.i32_const(1);
          frame.i32_add();
          arg3 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        frame.push(arg2);
        arg3 = frame.pop();
      }
      frame.push(arg0);
      frame.push(arg3);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(0);
      frame.push(local1);
      frame.select();
      frame.i32_store(2, 0);
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  void _func083(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i64 local13 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(96);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 64);
    frame.push(local0);
    frame.i64_const(0x100000000);
    frame.i64_store(3, 56);
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func048(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 48);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(2, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.push(local0);
          frame.i32_load(2, 52);
          local2 = frame.peek();
          frame.push(local2);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func084(t0, t1, t2));
          }
          local3 = frame.peek();
          frame.i32_const(0xffffff);
          frame.i32_and();
          local4 = frame.peek();
          frame.i32_const(8);
          frame.i32_shr_u();
          local5 = frame.pop();
          frame.i32_const(128);
          local6 = frame.pop();
          block_label_3:
          {
            frame.push(local3);
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_const(128);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func085(t0, t1);
            }
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.push(local0);
                        frame.i32_load(2, 40);
                        local7 = frame.peek();
                        if (frame.pop() != 0) {
                          frame.unwindTo(8, 0);
                          break block_label_9;
                        }
                        frame.i32_const(128);
                        local8 = frame.pop();
                        frame.unwindTo(8, 0);
                        break block_label_8;
                      }
                      frame.i32_const(128);
                      local8 = frame.pop();
                      frame.push(local0);
                      frame.i32_load(2, 44);
                      local9 = frame.peek();
                      frame.i32_const(1);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(8, 0);
                        break block_label_8;
                      }
                      frame.i32_const(128);
                      local8 = frame.pop();
                      frame.i32_const(128);
                      local6 = frame.pop();
                      frame.i32_const(0);
                      local1 = frame.pop();

                      loop_label_9:
                      for (;;) {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  frame.push(local1);
                                  frame.i32_const(255);
                                  frame.i32_and();
                                  var t0 = frame.pop();
                                  switch (t0) {
                                    case 0:
                                      frame.unwindTo(9, 0);
                                      break block_label_14;

                                    case 1:
                                      frame.unwindTo(9, 0);
                                      break block_label_13;

                                    default:
                                      frame.unwindTo(9, 0);
                                      break block_label_12;
                                  }
                                }
                                block_label_14:
                                {
                                  frame.push(local9);
                                  frame.i32_const(4);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(9, 0);
                                    break block_label_14;
                                  }
                                  frame.i32_const(0);
                                  local1 = frame.pop();
                                  frame.push(local0);
                                  frame.i32_const(0);
                                  frame.i32_store(2, 88);
                                  frame.i32_const(0);
                                  local10 = frame.pop();

                                  loop_label_15:
                                  for (;;) {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        frame.push(local7);
                                        frame.push(local1);
                                        frame.i32_add();
                                        frame.i32_load8_s(0, 0);
                                        local2 = frame.peek();
                                        frame.i32_eqz();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(10, 0);
                                          break block_label_17;
                                        }
                                        frame.push(local10);
                                        frame.push(local2);
                                        frame.i32_const(0);
                                        frame.i32_lt_s();
                                        frame.i32_or();
                                        frame.i32_const(1);
                                        frame.i32_and();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(9, 0);
                                          break block_label_14;
                                        }
                                        frame.push(local0);
                                        frame.i32_const(88);
                                        frame.i32_add();
                                        frame.push(local1);
                                        frame.i32_add();
                                        frame.push(local2);
                                        frame.i32_store8(0, 0);
                                        frame.push(local1);
                                        frame.i32_const(1);
                                        frame.i32_add();
                                        local1 = frame.peek();
                                        frame.i32_const(4);
                                        frame.i32_ne();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(10, 0);
                                          break block_label_16;
                                        }
                                        frame.push(local0);
                                        frame.i32_load(2, 88);
                                        local1 = frame.peek();
                                        frame.i32_const(0x7f7f7f7f);
                                        frame.i32_add();
                                        frame.i32_const(-0x1f1f1f20);
                                        frame.push(local1);
                                        frame.i32_const(0x20202020);
                                        frame.i32_or();
                                        local2 = frame.peek();
                                        frame.i32_sub();
                                        frame.push(local2);
                                        frame.i32_const(0x5050505);
                                        frame.i32_add();
                                        frame.i32_or();
                                        frame.i32_and();
                                        frame.i32_const(-0x7f7f7f80);
                                        frame.i32_and();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(9, 0);
                                          break block_label_14;
                                        }
                                        frame.push(local1);
                                        frame.i32_const(0x3f3f3f1f);
                                        frame.i32_add();
                                        frame.i32_const(-0x25252506);
                                        frame.push(local1);
                                        frame.i32_sub();
                                        frame.i32_and();
                                        frame.i32_const(2);
                                        frame.i32_shr_u();
                                        local2 = frame.peek();
                                        frame.i32_const(0x20202020);
                                        frame.i32_and();
                                        frame.push(local1);
                                        frame.i32_or();
                                        local1 = frame.peek();
                                        frame.push(local2);
                                        frame.i32_const(-1);
                                        frame.i32_xor();
                                        frame.i32_const(-33);
                                        frame.i32_or();
                                        frame.i32_and();
                                        local2 = frame.peek();
                                        frame.i32_const(255);
                                        frame.i32_and();
                                        frame.i32_const(128);
                                        frame.i32_eq();
                                        if (frame.pop() != 0) {
                                          frame.unwindTo(9, 0);
                                          break block_label_14;
                                        }
                                        frame.push(local1);
                                        frame.i32_const(8);
                                        frame.i32_shr_u();
                                        local11 = frame.pop();
                                        frame.i32_const(1);
                                        local1 = frame.pop();
                                        frame.push(local2);
                                        local8 = frame.pop();
                                        frame.unwindTo(9, 0);
                                        break block_label_10;
                                      }
                                      frame.push(local0);
                                      frame.i32_const(88);
                                      frame.i32_add();
                                      frame.push(local1);
                                      frame.i32_add();
                                      frame.i32_const(0);
                                      frame.i32_store8(0, 0);
                                      frame.push(local1);
                                      frame.i32_const(1);
                                      frame.i32_add();
                                      local1 = frame.peek();
                                      frame.i32_const(4);
                                      frame.i32_eq();
                                      if (frame.pop() != 0) {
                                        frame.unwindTo(9, 0);
                                        break block_label_14;
                                      }
                                    }
                                    frame.push(local2);
                                    frame.i32_eqz();
                                    local10 = frame.pop();
                                    frame.push(local1);
                                    frame.i32_const(4);
                                    frame.i32_ne();
                                    if (frame.pop() != 0) {
                                      continue loop_label_15;
                                    }
                                    frame.unwindTo(8, 0);
                                    break block_label_7;

                                    break;
                                  }
                                }
                                block_label_14:
                                {
                                  frame.push(local7);
                                  frame.push(local9);
                                  frame.push(local9);
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(_func086(t0, t1, t2));
                                  }
                                  local2 = frame.peek();
                                  frame.i32_const(255);
                                  frame.i32_and();
                                  frame.i32_const(128);
                                  frame.i32_eq();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(9, 0);
                                    break block_label_14;
                                  }
                                  frame.push(local2);
                                  frame.i32_const(0xffff00);
                                  frame.i32_and();
                                  frame.i32_const(8);
                                  frame.i32_shr_u();
                                  local12 = frame.pop();
                                  frame.i32_const(2);
                                  local1 = frame.pop();
                                  frame.push(local2);
                                  local6 = frame.pop();
                                  frame.unwindTo(9, 0);
                                  break block_label_10;
                                }
                                frame.push(local0);
                                frame.i32_const(72);
                                frame.i32_add();
                                frame.push(local7);
                                frame.push(local9);
                                frame.push(local9);
                                {
                                  var t3 = frame.pop();
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func087(t0, t1, t2, t3);
                                }
                                block_label_14:
                                {
                                  frame.push(local0);
                                  frame.i32_load8_u(0, 72);
                                  frame.i32_const(128);
                                  frame.i32_eq();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(13, 0);
                                    break block_label_14;
                                  }
                                  frame.push(local0);
                                  frame.push(local0);
                                  frame.i64_load(3, 72);
                                  local13 = frame.peek();
                                  frame.i64_store(3, 80);
                                  frame.push(local0);
                                  frame.i32_const(24);
                                  frame.i32_add();
                                  frame.push(local0);
                                  frame.i32_load(2, 60);
                                  frame.push(local0);
                                  frame.i32_load(2, 64);
                                  frame.push(local0);
                                  frame.i32_const(80);
                                  frame.i32_add();
                                  {
                                    var t3 = frame.pop();
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func056(t0, t1, t2, t3);
                                  }
                                  frame.push(local0);
                                  frame.i32_load(2, 24);
                                  frame.i32_const(1);
                                  frame.i32_ne();
                                  if (frame.pop() != 0) {
                                    frame.unwindTo(9, 0);
                                    break block_label_11;
                                  }
                                  frame.push(local0);
                                  frame.i32_load(2, 28);
                                  local1 = frame.pop();
                                  frame.push(local0);
                                  frame.push(local13);
                                  frame.i64_store(3, 88);
                                  frame.push(local0);
                                  frame.i32_const(56);
                                  frame.i32_add();
                                  frame.push(local1);
                                  frame.push(local0);
                                  frame.i32_const(88);
                                  frame.i32_add();
                                  {
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    _func057(t0, t1, t2);
                                  }
                                  frame.unwindTo(9, 0);
                                  break block_label_11;
                                }
                                frame.push(arg2);
                                frame.i32_const(255);
                                frame.i32_and();
                                frame.i32_const(2);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(8, 0);
                                  break block_label_8;
                                }
                                frame.push(arg0);
                                frame.i32_const(259);
                                frame.i32_store16(1, 0);
                                frame.unwindTo(2, 0);
                                break block_label_1;
                              }
                              block_label_13:
                              {
                                frame.push(local7);
                                frame.push(local9);
                                frame.push(local9);
                                {
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  frame.push(_func086(t0, t1, t2));
                                }
                                local2 = frame.peek();
                                frame.i32_const(255);
                                frame.i32_and();
                                frame.i32_const(128);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(9, 0);
                                  break block_label_13;
                                }
                                frame.push(local2);
                                frame.i32_const(0xffff00);
                                frame.i32_and();
                                frame.i32_const(8);
                                frame.i32_shr_u();
                                local12 = frame.pop();
                                frame.i32_const(2);
                                local1 = frame.pop();
                                frame.push(local2);
                                local6 = frame.pop();
                                frame.unwindTo(9, 0);
                                break block_label_10;
                              }
                              frame.push(local0);
                              frame.i32_const(72);
                              frame.i32_add();
                              frame.push(local7);
                              frame.push(local9);
                              frame.push(local9);
                              {
                                var t3 = frame.pop();
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                _func087(t0, t1, t2, t3);
                              }
                              block_label_13:
                              {
                                frame.push(local0);
                                frame.i32_load8_u(0, 72);
                                frame.i32_const(128);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(13, 0);
                                  break block_label_13;
                                }
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(3, 72);
                                local13 = frame.peek();
                                frame.i64_store(3, 80);
                                frame.push(local0);
                                frame.i32_const(32);
                                frame.i32_add();
                                frame.push(local0);
                                frame.i32_load(2, 60);
                                frame.push(local0);
                                frame.i32_load(2, 64);
                                frame.push(local0);
                                frame.i32_const(80);
                                frame.i32_add();
                                {
                                  var t3 = frame.pop();
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func056(t0, t1, t2, t3);
                                }
                                frame.push(local0);
                                frame.i32_load(2, 32);
                                frame.i32_const(1);
                                frame.i32_ne();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(9, 0);
                                  break block_label_11;
                                }
                                frame.push(local0);
                                frame.i32_load(2, 36);
                                local1 = frame.pop();
                                frame.push(local0);
                                frame.push(local13);
                                frame.i64_store(3, 88);
                                frame.push(local0);
                                frame.i32_const(56);
                                frame.i32_add();
                                frame.push(local1);
                                frame.push(local0);
                                frame.i32_const(88);
                                frame.i32_add();
                                {
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func057(t0, t1, t2);
                                }
                                frame.unwindTo(9, 0);
                                break block_label_11;
                              }
                              frame.push(arg2);
                              frame.i32_const(255);
                              frame.i32_and();
                              frame.i32_const(2);
                              frame.i32_eq();
                              if (frame.pop() != 0) {
                                frame.unwindTo(8, 0);
                                break block_label_8;
                              }
                              frame.push(arg0);
                              frame.i32_const(259);
                              frame.i32_store16(1, 0);
                              frame.unwindTo(2, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.i32_const(72);
                            frame.i32_add();
                            frame.push(local7);
                            frame.push(local9);
                            frame.push(local9);
                            {
                              var t3 = frame.pop();
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              _func087(t0, t1, t2, t3);
                            }
                            block_label_12:
                            {
                              block_label_13:
                              {
                                frame.push(local0);
                                frame.i32_load8_u(0, 72);
                                frame.i32_const(128);
                                frame.i32_eq();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(13, 0);
                                  break block_label_13;
                                }
                                frame.push(local0);
                                frame.push(local0);
                                frame.i64_load(3, 72);
                                local13 = frame.peek();
                                frame.i64_store(3, 80);
                                frame.push(local0);
                                frame.i32_const(16);
                                frame.i32_add();
                                frame.push(local0);
                                frame.i32_load(2, 60);
                                frame.push(local0);
                                frame.i32_load(2, 64);
                                frame.push(local0);
                                frame.i32_const(80);
                                frame.i32_add();
                                {
                                  var t3 = frame.pop();
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func056(t0, t1, t2, t3);
                                }
                                frame.push(local0);
                                frame.i32_load(2, 16);
                                frame.i32_const(1);
                                frame.i32_ne();
                                if (frame.pop() != 0) {
                                  frame.unwindTo(13, 0);
                                  break block_label_12;
                                }
                                frame.push(local0);
                                frame.i32_load(2, 20);
                                local2 = frame.pop();
                                frame.push(local0);
                                frame.push(local13);
                                frame.i64_store(3, 88);
                                frame.push(local0);
                                frame.i32_const(56);
                                frame.i32_add();
                                frame.push(local2);
                                frame.push(local0);
                                frame.i32_const(88);
                                frame.i32_add();
                                {
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  _func057(t0, t1, t2);
                                }
                                frame.unwindTo(9, 0);
                                break block_label_10;
                              }
                              frame.push(arg2);
                              frame.i32_const(255);
                              frame.i32_and();
                              frame.i32_const(2);
                              frame.i32_eq();
                              if (frame.pop() != 0) {
                                frame.unwindTo(8, 0);
                                break block_label_8;
                              }
                              frame.push(arg0);
                              frame.i32_const(259);
                              frame.i32_store16(1, 0);
                              frame.unwindTo(2, 0);
                              break block_label_1;
                            }
                            frame.push(arg0);
                            frame.i32_const(259);
                            frame.i32_store16(1, 0);
                            frame.unwindTo(2, 0);
                            break block_label_1;
                          }
                          frame.i32_const(2);
                          local1 = frame.pop();
                        }
                        frame.push(local0);
                        frame.i32_const(8);
                        frame.i32_add();
                        frame.push(arg1);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func048(t0, t1);
                        }
                        frame.push(local0);
                        frame.push(arg1);
                        {
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          _func085(t0, t1);
                        }
                        frame.push(local0);
                        frame.i32_load(2, 0);
                        local7 = frame.peek();
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(8, 0);
                          break block_label_8;
                        }
                        frame.push(local0);
                        frame.i32_load(2, 4);
                        local9 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          continue loop_label_9;
                        }
                        break;
                      }
                    }
                    frame.push(local0);
                    frame.i32_load(2, 60);
                    local1 = frame.pop();
                    frame.push(local0);
                    frame.i32_load(2, 56);
                    local2 = frame.pop();
                    block_label_8:
                    {
                      frame.push(local0);
                      frame.i32_load(2, 64);
                      local7 = frame.peek();
                      var t0 = frame.pop();
                      switch (t0) {
                        case 0:
                          frame.unwindTo(8, 0);
                          break block_label_6;

                        case 1:
                          frame.unwindTo(8, 0);
                          break block_label_8;

                        default:
                          frame.unwindTo(8, 0);
                          break block_label_5;
                      }
                    }
                    frame.push(local1);
                    frame.i64_load(0, 0);
                    local13 = frame.peek();
                    frame.i64_const(255);
                    frame.i64_and();
                    frame.i64_const(128);
                    frame.i64_eq();
                    if (frame.pop() != 0) {
                      frame.unwindTo(8, 0);
                      break block_label_7;
                    }
                    frame.push(arg0);
                    frame.i32_const(1);
                    frame.i32_store8(0, 0);
                    frame.push(arg0);
                    frame.push(local13);
                    frame.i64_store(0, 1);
                    frame.push(local2);
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(8, 0);
                      break block_label_4;
                    }
                    frame.i32_const(0xf5144);
                    frame.push(local1);
                    {
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      _func019(t0, t1);
                    }
                    frame.unwindTo(8, 0);
                    break block_label_4;
                  }
                  throw Trap('unreachable');
                  throw Trap('unreachable');
                }
                frame.push(arg0);
                frame.i32_const(0);
                frame.i32_store8(0, 0);
                frame.push(local2);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(8, 0);
                  break block_label_4;
                }
                frame.i32_const(0xf5144);
                frame.push(local1);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  _func019(t0, t1);
                }
                frame.unwindTo(8, 0);
                break block_label_4;
              }
              frame.push(arg0);
              frame.push(local2);
              frame.i32_store(2, 4);
              frame.push(arg0);
              frame.i32_const(2);
              frame.i32_store8(0, 0);
              frame.push(arg0);
              frame.i32_const(12);
              frame.i32_add();
              frame.push(local7);
              frame.i32_store(2, 0);
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local1);
              frame.i32_store(2, 0);
            }
            frame.push(arg0);
            frame.push(local11);
            frame.i32_store16(0, 17);
            frame.push(arg0);
            frame.push(local4);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store8(0, 25);
            frame.push(arg0);
            frame.push(local5);
            frame.i32_store8(0, 24);
            frame.push(arg0);
            frame.push(local3);
            frame.i32_store8(0, 23);
            frame.push(arg0);
            frame.push(local12);
            frame.i32_store16(0, 21);
            frame.push(arg0);
            frame.push(local6);
            frame.i32_store8(0, 20);
            frame.push(arg0);
            frame.push(local8);
            frame.i32_store8(0, 16);
            frame.push(arg0);
            frame.i32_const(19);
            frame.i32_add();
            frame.push(local11);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store8(0, 0);
            frame.unwindTo(2, 0);
            break block_label_0;
          }
          frame.push(arg0);
          frame.i32_const(3);
          frame.i32_store8(0, 0);
          frame.push(arg0);
          frame.push(local5);
          frame.i32_store8(0, 1);
          frame.unwindTo(2, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(3);
        frame.i32_store16(1, 0);
      }
      frame.push(local0);
      frame.i32_load(2, 56);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(local0);
      frame.i32_load(2, 60);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(local0);
    frame.i32_const(96);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func084(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(-2);
        frame.i32_and();
        frame.i32_const(2);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(128);
        arg2 = frame.pop();
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg0);
      frame.push(arg1);
      frame.push(arg2);
      {
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func078(t0, t1, t2, t3);
      }
      frame.i32_const(128);
      arg2 = frame.pop();
      frame.i32_const(0);
      arg1 = frame.pop();
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_const(3);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_load16_u(1, 4);
      frame.push(local0);
      frame.i32_load8_u(0, 6);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      local1 = frame.peek();
      frame.i32_const(0x7f7f7f7f);
      frame.i32_add();
      frame.i32_const(-0x1f1f1f20);
      frame.push(local1);
      frame.i32_const(0x20202020);
      frame.i32_or();
      local2 = frame.peek();
      frame.i32_sub();
      frame.push(local2);
      frame.i32_const(0x5050505);
      frame.i32_add();
      frame.i32_or();
      frame.i32_and();
      frame.i32_const(-0x7f7f7f80);
      frame.i32_and();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local1);
      frame.i32_const(0x3f3f3f);
      frame.i32_add();
      frame.i32_const(0xdadada);
      frame.push(local1);
      frame.i32_sub();
      frame.i32_and();
      frame.i32_const(2);
      frame.i32_shr_u();
      frame.i32_const(0x202020);
      frame.i32_and();
      frame.push(local1);
      frame.i32_or();
      arg2 = frame.peek();
      frame.i32_const(16);
      frame.i32_shr_u();
      arg0 = frame.pop();
      frame.push(arg2);
      frame.i32_const(8);
      frame.i32_shr_u();
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(8);
    frame.i32_shl();
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.push(arg2);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_or();
    return frame.pop();
  }

  void _func085(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 16);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg1);
        frame.i32_load(2, 4);
        local0 = frame.peek();
        frame.push(arg1);
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.push(arg1);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_gt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.push(local1);
        frame.i32_sub();
        local0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 8);
        frame.push(local1);
        frame.i32_add();
        arg1 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_store(2, 0);
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _func086(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        frame.i32_const(-2);
        frame.i32_and();
        frame.i32_const(2);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(128);
        arg2 = frame.pop();
        frame.i32_const(1);
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg0);
      frame.push(arg1);
      frame.push(arg2);
      {
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func078(t0, t1, t2, t3);
      }
      frame.i32_const(128);
      arg2 = frame.pop();
      frame.i32_const(1);
      arg1 = frame.pop();
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_const(3);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_load16_u(1, 4);
      frame.push(local0);
      frame.i32_load8_u(0, 6);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      local1 = frame.peek();
      frame.i32_const(0x7f7f7f7f);
      frame.i32_add();
      frame.i32_const(-0x7f7f7f80);
      frame.i32_and();
      local2 = frame.pop();
      block_label_1:
      {
        frame.push(local1);
        frame.i32_clz();
        frame.i32_const(56);
        frame.i32_and();
        frame.i32_const(16);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(local2);
        frame.i32_const(-0x1f1f1f20);
        frame.push(local1);
        frame.i32_const(0x20202020);
        frame.i32_or();
        local3 = frame.peek();
        frame.i32_sub();
        frame.push(local3);
        frame.i32_const(0x5050505);
        frame.i32_add();
        frame.i32_or();
        frame.i32_and();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local1);
        frame.i32_const(0x1f1f1f);
        frame.i32_add();
        frame.i32_const(0xfafafa);
        frame.push(local1);
        frame.i32_sub();
        frame.i32_and();
        frame.i32_const(-1);
        frame.i32_xor();
        frame.i32_const(2);
        frame.i32_shr_u();
        frame.i32_const(0xdfdfdf);
        frame.i32_or();
        frame.push(local1);
        frame.i32_and();
        arg2 = frame.peek();
        frame.i32_const(16);
        frame.i32_shr_u();
        arg0 = frame.pop();
        frame.push(arg2);
        frame.i32_const(8);
        frame.i32_shr_u();
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local2);
      frame.i32_const(-0x50505051);
      frame.push(local1);
      frame.i32_sub();
      frame.push(local1);
      frame.i32_const(0x46464646);
      frame.i32_add();
      frame.i32_or();
      frame.i32_and();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local1);
      frame.i32_const(16);
      frame.i32_shr_u();
      arg0 = frame.pop();
      frame.push(local1);
      frame.i32_const(8);
      frame.i32_shr_u();
      arg1 = frame.pop();
      frame.push(local1);
      arg2 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(8);
    frame.i32_shl();
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.push(arg2);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_or();
    return frame.pop();
  }

  void _func087(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i64 local1 = 0;
    i64 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg3);
            frame.i32_const(-9);
            frame.i32_add();
            frame.i32_const(-5);
            frame.i32_lt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.push(arg1);
            frame.push(arg2);
            frame.push(arg3);
            {
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func049(t0, t1, t2, t3);
            }
            frame.push(local0);
            frame.i32_load(2, 0);
            frame.i32_const(3);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local0);
            frame.i64_load(2, 4);
            local1 = frame.peek();
            frame.i64_const(0x7f7f7f7f7f7f7f7f);
            frame.i64_add();
            frame.i64_const(-0x5050505050505051);
            frame.push(local1);
            frame.i64_sub();
            frame.push(local1);
            frame.i64_const(0x4646464646464646);
            frame.i64_add();
            frame.i64_or();
            frame.i64_and();
            frame.i64_const(-0x1f1f1f1f1f1f1f20);
            frame.push(local1);
            frame.i64_const(0x2020202020202020);
            frame.i64_or();
            local2 = frame.peek();
            frame.i64_sub();
            frame.push(local2);
            frame.i64_const(0x505050505050505);
            frame.i64_add();
            frame.i64_or();
            frame.i64_and();
            frame.i64_const(-0x7f7f7f7f7f7f7f80);
            frame.i64_and();
            frame.i64_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg0);
          frame.i32_const(384);
          frame.i32_store16(0, 0);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        block_label_2:
        {
          frame.push(local1);
          frame.i64_clz();
          frame.i64_const(120);
          frame.i64_and();
          frame.i64_const(32);
          frame.i64_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_wrap_i64();
          frame.i32_const(-48);
          frame.i32_add();
          frame.i32_const(255);
          frame.i32_and();
          frame.i32_const(9);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i64_const(0x3f3f3f3f3f3f3f3f);
        frame.i64_add();
        frame.i64_const(-0x2525252525252526);
        frame.push(local1);
        frame.i64_sub();
        frame.i64_and();
        frame.i64_const(2);
        frame.i64_shr_u();
        frame.i64_const(0x2020202020202020);
        frame.i64_and();
        frame.push(local1);
        frame.i64_or();
        frame.i64_store(0, 0);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(384);
      frame.i32_store16(0, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func088(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load8_u(0, 0);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  frame.unwindTo(0, 0);
                  break block_label_4;

                case 1:
                  frame.unwindTo(0, 0);
                  break block_label_3;

                case 2:
                  frame.unwindTo(0, 0);
                  break block_label_2;

                case 3:
                  frame.unwindTo(0, 0);
                  break block_label_1;

                default:
                  frame.unwindTo(0, 0);
                  break block_label_4;
              }
            }
            frame.push(arg1);
            frame.i32_load(2, 4);
            arg0 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 0);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 28);
            frame.push(local0);
            frame.i32_const(0xf4610);
            frame.i32_store(2, 24);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_store(2, 20);
            frame.push(local0);
            frame.i32_const(0xf4698);
            frame.i32_store(2, 16);
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 8);
            frame.push(arg1);
            frame.push(arg0);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func038(t0, t1, t2));
            }
            arg1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 0);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 28);
          frame.push(local0);
          frame.i32_const(0xf4610);
          frame.i32_store(2, 24);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_store(2, 20);
          frame.push(local0);
          frame.i32_const(0xf466c);
          frame.i32_store(2, 16);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 8);
          frame.push(arg1);
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func038(t0, t1, t2));
          }
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 0);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 28);
        frame.push(local0);
        frame.i32_const(0xf4610);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 20);
        frame.push(local0);
        frame.i32_const(0xf4654);
        frame.i32_store(2, 16);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 8);
        frame.push(arg1);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func038(t0, t1, t2));
        }
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 4);
      arg0 = frame.pop();
      frame.push(arg1);
      frame.i32_load(2, 0);
      arg1 = frame.pop();
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 28);
      frame.push(local0);
      frame.i32_const(0xf4610);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 20);
      frame.push(local0);
      frame.i32_const(0xf4638);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 8);
      frame.push(arg1);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func038(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  void _func089(i32 arg0) {
    final frame = Frame(this);
  }

  i32 _func090(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(3);
    frame.i32_shl();
    arg0 = frame.peek();
    frame.i32_const(0xf46e4);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_const(0xf46e8);
    frame.i32_add();
    frame.i32_load(2, 0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func040(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func091(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(0);
    return frame.pop();
  }

  void _func092(i32 arg0, i32 arg1) {
    final frame = Frame(this);
  }

  void _func093(i32 arg0) {
    final frame = Frame(this);
  }

  void _func094(i32 arg0, i32 arg1, i32 arg2, i32 arg3, i32 arg4) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i64 local3 = 0;
    i32 local4 = 0;
    i64 local5 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg3);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      frame.i32_load(2, 0xf5140);
      arg3 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf513c);
      local1 = frame.pop();
      frame.i32_const(0);
      frame.i32_load(2, 0xf5308);
      local2 = frame.pop();
      frame.push(arg2);
      frame.i64_load(2, 0);
      local3 = frame.pop();
      frame.push(arg2);
      frame.i32_load(2, 24);
      local4 = frame.pop();
      frame.push(arg2);
      frame.i64_load(2, 8);
      local5 = frame.pop();
      frame.push(local0);
      frame.i32_const(68);
      frame.i32_add();
      frame.push(arg2);
      frame.i64_load(2, 16);
      frame.i64_store(2, 0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.push(local5);
      frame.i64_store(3, 0);
      frame.push(local0);
      frame.i32_const(48);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(36);
      frame.i32_add();
      frame.push(local4);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 64);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 52);
      frame.push(local0);
      frame.push(local3);
      frame.i64_store(3, 40);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(arg0);
      frame.i64_load(2, 16);
      frame.i64_store(3, 24);
      frame.push(local0);
      frame.push(arg0);
      frame.i64_load(2, 8);
      frame.i64_store(3, 16);
      frame.push(local0);
      frame.push(arg0);
      frame.i64_load(2, 0);
      frame.i64_store(3, 8);
      frame.push(local1);
      frame.i32_const(0xf4714);
      frame.push(local2);
      frame.i32_const(2);
      frame.i32_eq();
      arg2 = frame.peek();
      frame.select();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg3);
      frame.i32_const(0xf46ac);
      frame.push(arg2);
      frame.select();
      frame.i32_load(2, 20);
      {
        var func = table0[frame.pop()] as FunctionType2?;
        if (func == null) throw Trap('uninitialized element');
        var t1 = frame.pop();
        var t0 = frame.pop();
        func(t0, t1);
      }
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
  }

  i32 _func095(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load(2, 0);
          frame.i32_load8_u(0, 0);
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              frame.unwindTo(0, 0);
              break block_label_2;

            case 1:
              frame.unwindTo(0, 0);
              break block_label_1;

            case 2:
              frame.unwindTo(0, 0);
              break block_label_0;

            default:
              frame.unwindTo(0, 0);
              break block_label_2;
          }
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.i32_const(0xf4839);
        frame.i32_const(4);
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()] as FunctionType0?;
          if (func == null) throw Trap('uninitialized element');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      frame.i32_const(0xf4831);
      frame.i32_const(8);
      frame.push(arg1);
      frame.i32_load(2, 4);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()] as FunctionType0?;
        if (func == null) throw Trap('uninitialized element');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_load(2, 0);
    frame.i32_const(0xf4828);
    frame.i32_const(9);
    frame.push(arg1);
    frame.i32_load(2, 4);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()] as FunctionType0?;
      if (func == null) throw Trap('uninitialized element');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func096(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func046(t0, t1));
    }
    return frame.pop();
  }

  void _func097(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(0xfffffff);
            frame.i32_gt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(3);
            frame.i32_shl();
            local0 = frame.peek();
            frame.i32_const(0);
            frame.i32_lt_s();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg1);
            frame.i32_const(0x10000000);
            frame.i32_lt_u();
            local1 = frame.pop();
            block_label_4:
            {
              frame.push(arg2);
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.push(local1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func008(t0, t1));
              }
              arg2 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local0);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local0);
            frame.push(local1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func010(t0, t1));
            }
            arg2 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(local1);
        arg2 = frame.pop();
      }
      frame.push(arg2);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(local1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func030(t0, t1);
      }
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_store(2, 0);
  }

  void _func098(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(-1);
    frame.i32_add();
    local0 = frame.peek();
    frame.i32_store(2, 0);
    block_label_0:
    {
      frame.push(local0);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.i32_const(0xf5144);
        frame.push(arg0);
        frame.i32_load(2, 8);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
      }
      frame.push(arg0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_const(-1);
      frame.i32_add();
      local0 = frame.peek();
      frame.i32_store(2, 4);
      frame.push(local0);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func099(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i64 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 8);
            local1 = frame.peek();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(arg0);
            frame.i64_const(0x400000000);
            frame.i64_store(2, 0);
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_const(0x6666666);
          frame.i32_gt_u();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(local1);
          frame.i32_const(20);
          frame.i32_mul();
          local2 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg1);
          frame.i32_load(2, 4);
          local3 = frame.pop();
          frame.push(local1);
          frame.i32_const(0x6666667);
          frame.i32_lt_u();
          frame.i32_const(2);
          frame.i32_shl();
          arg1 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local2);
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.push(arg1);
              local4 = frame.pop();
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local2);
            frame.push(arg1);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func008(t0, t1));
            }
            local4 = frame.pop();
          }
          frame.push(local4);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg0);
          frame.push(local4);
          frame.i32_store(2, 4);
          frame.push(arg0);
          frame.push(local1);
          frame.i32_store(2, 0);
          frame.push(local1);
          frame.i32_const(20);
          frame.i32_mul();
          local5 = frame.pop();
          frame.i32_const(0);
          local2 = frame.pop();
          frame.push(local3);
          local6 = frame.pop();
          frame.push(local1);
          local7 = frame.pop();

          loop_label_3:
          for (;;) {
            frame.push(local5);
            frame.push(local2);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local7);
            frame.i32_const(-1);
            frame.i32_add();
            local7 = frame.pop();
            frame.push(local4);
            frame.push(local2);
            frame.i32_add();
            arg1 = frame.pop();
            frame.push(local6);
            frame.i32_load16_u(1, 0);
            local8 = frame.pop();
            frame.i32_const(0);
            local9 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local6);
                  frame.i32_load8_u(0, 4);
                  var t0 = frame.pop();
                  switch (t0) {
                    case 0:
                      frame.unwindTo(4, 0);
                      break block_label_4;

                    case 1:
                      frame.unwindTo(4, 0);
                      break block_label_6;

                    case 2:
                      frame.unwindTo(4, 0);
                      break block_label_5;

                    default:
                      frame.unwindTo(4, 0);
                      break block_label_4;
                  }
                }
                frame.push(local3);
                frame.push(local2);
                frame.i32_add();
                local10 = frame.peek();
                frame.i32_const(5);
                frame.i32_add();
                frame.i64_load32_u(0, 0);
                local11 = frame.peek();
                frame.push(local10);
                frame.i32_const(9);
                frame.i32_add();
                frame.i64_load16_u(0, 0);
                frame.push(local10);
                frame.i32_const(11);
                frame.i32_add();
                frame.i64_load8_u(0, 0);
                frame.i64_const(16);
                frame.i64_shl();
                frame.i64_or();
                frame.i64_const(32);
                frame.i64_shl();
                frame.i64_or();
                frame.i64_const(24);
                frame.i64_shr_u();
                frame.i32_wrap_i64();
                local12 = frame.pop();
                frame.push(local10);
                frame.i32_const(12);
                frame.i32_add();
                frame.i32_load8_u(0, 0);
                local13 = frame.pop();
                frame.push(local11);
                frame.i32_wrap_i64();
                local14 = frame.pop();
                frame.i32_const(1);
                local9 = frame.pop();
                frame.unwindTo(4, 0);
                break block_label_4;
              }
              frame.push(local3);
              frame.push(local2);
              frame.i32_add();
              local12 = frame.peek();
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_load(2, 0);
              local9 = frame.pop();
              frame.push(local0);
              frame.i32_const(8);
              frame.i32_add();
              frame.push(local12);
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_load(2, 0);
              local10 = frame.peek();
              frame.i32_const(0);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func059(t0, t1, t2);
              }
              frame.push(local0);
              frame.i32_load(2, 8);
              local12 = frame.pop();
              frame.push(local0);
              frame.i32_load(2, 12);
              local13 = frame.peek();
              frame.push(local9);
              frame.push(local10);
              frame.i32_const(3);
              frame.i32_shl();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.drop();
              frame.i32_const(2);
              local9 = frame.pop();
            }
            frame.push(local6);
            frame.i32_const(20);
            frame.i32_add();
            local6 = frame.pop();
            frame.push(arg1);
            frame.push(local8);
            frame.i32_store16(1, 0);
            frame.push(arg1);
            frame.i32_const(11);
            frame.i32_add();
            frame.push(local12);
            frame.i32_const(24);
            frame.i32_shr_u();
            frame.i64_extend_i32_u();
            frame.i64_store8(0, 0);
            frame.push(arg1);
            frame.i32_const(9);
            frame.i32_add();
            frame.push(local12);
            frame.i32_const(8);
            frame.i32_shr_u();
            frame.i64_extend_i32_u();
            frame.i64_store16(0, 0);
            frame.push(arg1);
            frame.i32_const(16);
            frame.i32_add();
            frame.push(local10);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(12);
            frame.i32_add();
            frame.push(local13);
            frame.i32_store(2, 0);
            frame.push(arg1);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(local9);
            frame.i32_store8(0, 0);
            frame.push(arg1);
            frame.i32_const(5);
            frame.i32_add();
            frame.push(local12);
            frame.i32_const(24);
            frame.i32_shl();
            frame.i64_extend_i32_u();
            frame.push(local14);
            frame.i64_extend_i32_u();
            frame.i64_const(0xffffff);
            frame.i64_and();
            frame.i64_or();
            frame.i64_store32(0, 0);
            frame.push(local2);
            frame.i32_const(20);
            frame.i32_add();
            local2 = frame.pop();
            frame.push(local7);
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
        }
        frame.push(arg0);
        frame.push(local1);
        frame.i32_store(2, 8);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        globals.__stack_pointer = frame.pop();
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(local2);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func030(t0, t1);
    }
    throw Trap('unreachable');
  }

  i32 _func100(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(2);
    local1 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg0);
              frame.i32_load8_u(0, 4);
              local2 = frame.peek();
              frame.i32_const(-3);
              frame.i32_add();
              frame.i32_const(1);
              frame.push(local2);
              frame.i32_const(2);
              frame.i32_gt_u();
              frame.select();
              frame.i32_const(255);
              frame.i32_and();
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  frame.unwindTo(0, 0);
                  break block_label_0;

                case 1:
                  frame.unwindTo(0, 0);
                  break block_label_4;

                case 2:
                  frame.unwindTo(0, 0);
                  break block_label_3;

                default:
                  frame.unwindTo(0, 0);
                  break block_label_0;
              }
            }
            frame.push(arg0);
            frame.i32_const(20);
            frame.i32_add();
            local3 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_const(16);
          frame.i32_add();
          frame.i32_load(2, 0);
          local1 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_load(2, 0);
          arg0 = frame.peek();
          frame.push(local1);
          frame.i32_const(20);
          frame.i32_mul();
          frame.i32_add();
          local3 = frame.pop();
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        local4 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(arg0);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func050(t0, t1);
          }
          frame.push(local0);
          frame.i32_load(2, 8);
          local5 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              frame.i32_load8_u(0, 8);
              if (frame.pop() != 0) {
                frame.unwindTo(3, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.i32_load(2, 12);
              local6 = frame.pop();
              frame.i32_const(4);
              frame.push(local5);
              frame.i32_load16_u(0, 0);
              frame.i32_clz();
              frame.i32_const(3);
              frame.i32_shr_u();
              frame.i32_sub();
              local7 = frame.pop();
              frame.push(local4);
              frame.i32_load(2, 0);
              local8 = frame.pop();
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local4);
                    frame.i32_load(2, 4);
                    local2 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(4, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0);
                    local1 = frame.pop();

                    loop_label_8:
                    for (;;) {
                      frame.push(local8);
                      frame.push(local1);
                      frame.i32_add();
                      arg1 = frame.peek();
                      frame.i32_load8_u(0, 0);
                      frame.i32_const(45);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(4, 0);
                        break block_label_6;
                      }
                      frame.push(local2);
                      frame.push(local1);
                      frame.i32_const(1);
                      frame.i32_add();
                      local1 = frame.peek();
                      frame.i32_ne();
                      if (frame.pop() != 0) {
                        continue loop_label_8;
                      }
                      break;
                    }
                  }
                  frame.i32_const(1);
                  local9 = frame.pop();
                  frame.push(local4);
                  frame.i32_const(1);
                  frame.i32_store8(0, 8);
                  frame.push(local8);
                  arg1 = frame.pop();
                  frame.push(local2);
                  local1 = frame.pop();
                  frame.unwindTo(4, 0);
                  break block_label_5;
                }
                frame.push(local4);
                frame.push(local1);
                frame.i32_const(-1);
                frame.i32_xor();
                frame.push(local2);
                frame.i32_add();
                local2 = frame.peek();
                frame.i32_store(2, 4);
                frame.push(local4);
                frame.push(arg1);
                frame.i32_const(1);
                frame.i32_add();
                arg1 = frame.peek();
                frame.i32_store(2, 0);
                frame.i32_const(0);
                local9 = frame.pop();
              }
              frame.i32_const(-1);
              frame.push(local5);
              frame.push(local8);
              frame.push(local7);
              frame.push(local1);
              frame.push(local7);
              frame.push(local1);
              frame.i32_lt_u();
              frame.select();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func007(t0, t1, t2));
              }
              local8 = frame.peek();
              frame.push(local7);
              frame.push(local1);
              frame.i32_sub();
              frame.push(local8);
              frame.select();
              local1 = frame.peek();
              frame.i32_const(0);
              frame.i32_ne();
              frame.push(local1);
              frame.i32_const(0);
              frame.i32_lt_s();
              frame.select();
              local1 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.i32_const(0xf4714);
              local7 = frame.pop();
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local6);
                    frame.i32_load8_u(0, 0);
                    local1 = frame.peek();
                    var t0 = frame.pop();
                    switch (t0) {
                      case 0:
                        frame.unwindTo(7, 0);
                        break block_label_5;

                      case 1:
                        frame.unwindTo(7, 0);
                        break block_label_7;

                      case 2:
                        frame.unwindTo(7, 0);
                        break block_label_6;

                      default:
                        frame.unwindTo(7, 0);
                        break block_label_5;
                    }
                  }
                  frame.i32_const(1);
                  local1 = frame.pop();
                  frame.push(local6);
                  frame.i32_const(1);
                  frame.i32_add();
                  local7 = frame.pop();
                  frame.unwindTo(7, 0);
                  break block_label_5;
                }
                frame.push(local6);
                frame.i32_const(12);
                frame.i32_add();
                frame.i32_load(2, 0);
                local1 = frame.pop();
                frame.push(local6);
                frame.i32_const(8);
                frame.i32_add();
                frame.i32_load(2, 0);
                local7 = frame.pop();
              }
              frame.push(arg0);
              frame.i32_const(20);
              frame.i32_add();
              arg0 = frame.pop();
              frame.push(local7);
              frame.push(local1);
              frame.i32_const(3);
              frame.i32_shl();
              frame.i32_add();
              local10 = frame.pop();

              loop_label_5:
              for (;;) {
                frame.push(local7);
                frame.push(local10);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_3;
                }
                frame.push(local9);
                frame.i32_const(255);
                frame.i32_and();
                if (frame.pop() != 0) {
                  frame.unwindTo(3, 0);
                  break block_label_4;
                }
                frame.i32_const(8);
                frame.push(local7);
                frame.i64_load(0, 0);
                frame.i64_clz();
                frame.i32_wrap_i64();
                frame.i32_const(3);
                frame.i32_shr_u();
                frame.i32_sub();
                local5 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      frame.push(local2);
                      frame.i32_eqz();
                      if (frame.pop() != 0) {
                        frame.unwindTo(9, 0);
                        break block_label_8;
                      }
                      frame.i32_const(0);
                      local1 = frame.pop();

                      loop_label_9:
                      for (;;) {
                        frame.push(arg1);
                        frame.push(local1);
                        frame.i32_add();
                        local8 = frame.peek();
                        frame.i32_load8_u(0, 0);
                        frame.i32_const(45);
                        frame.i32_eq();
                        if (frame.pop() != 0) {
                          frame.unwindTo(9, 0);
                          break block_label_7;
                        }
                        frame.push(local2);
                        frame.push(local1);
                        frame.i32_const(1);
                        frame.i32_add();
                        local1 = frame.peek();
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          continue loop_label_9;
                        }
                        break;
                      }
                    }
                    frame.i32_const(1);
                    local9 = frame.pop();
                    frame.push(local4);
                    frame.i32_const(1);
                    frame.i32_store8(0, 8);
                    frame.push(arg1);
                    local6 = frame.pop();
                    frame.push(local2);
                    local1 = frame.pop();
                    frame.unwindTo(9, 0);
                    break block_label_6;
                  }
                  frame.push(local4);
                  frame.push(local1);
                  frame.i32_const(-1);
                  frame.i32_xor();
                  frame.push(local2);
                  frame.i32_add();
                  local2 = frame.peek();
                  frame.i32_store(2, 4);
                  frame.push(local4);
                  frame.push(local8);
                  frame.i32_const(1);
                  frame.i32_add();
                  local6 = frame.peek();
                  frame.i32_store(2, 0);
                  frame.i32_const(0);
                  local9 = frame.pop();
                }
                frame.push(local7);
                frame.push(arg1);
                frame.push(local5);
                frame.push(local1);
                frame.push(local5);
                frame.push(local1);
                frame.i32_lt_u();
                frame.select();
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func007(t0, t1, t2));
                }
                local8 = frame.pop();
                frame.push(local6);
                arg1 = frame.pop();
                frame.push(local7);
                frame.i32_const(8);
                frame.i32_add();
                local7 = frame.pop();
                frame.i32_const(-1);
                frame.push(local8);
                frame.push(local5);
                frame.push(local1);
                frame.i32_sub();
                frame.push(local8);
                frame.select();
                local1 = frame.peek();
                frame.i32_const(0);
                frame.i32_ne();
                frame.push(local1);
                frame.i32_const(0);
                frame.i32_lt_s();
                frame.select();
                local1 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                frame.unwindTo(0, 0);
                break block_label_0;

                break;
              }
            }
            frame.i32_const(1);
            local1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg0);
          frame.push(local3);
          frame.i32_ne();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.i32_const(2);
      local1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local1);
    return frame.pop();
  }

  i32 _func101(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local2 = frame.pop();
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i32_const(0xf4714);
    frame.i32_store(2, 40);
    frame.i32_const(1);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 36);
    frame.push(local0);
    frame.i32_const(0xf4724);
    frame.i32_store(2, 32);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 24);
    block_label_0:
    {
      frame.push(local2);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func038(t0, t1, t2));
      }
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 24);
        frame.i32_const(8);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(11);
        frame.i32_store(2, 4);
        frame.push(local0);
        frame.push(arg0);
        frame.i32_const(24);
        frame.i32_add();
        frame.i32_store(2, 0);
        frame.i32_const(1);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 36);
        frame.push(local0);
        frame.i32_const(0xf4768);
        frame.i32_store(2, 32);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.push(local0);
        frame.i32_store(2, 40);
        frame.push(local2);
        frame.push(local1);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func038(t0, t1, t2));
        }
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load8_u(0, 15);
        frame.i32_const(2);
        frame.i32_eq();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(2, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.push(arg0);
        frame.i64_load(2, 0);
        frame.i64_store(3, 0);
        frame.push(local0);
        frame.i32_const(12);
        frame.i32_store(2, 20);
        frame.push(local0);
        frame.push(local0);
        frame.i32_store(2, 16);
        frame.i32_const(1);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_store(2, 36);
        frame.push(local0);
        frame.i32_const(0xf4778);
        frame.i32_store(2, 32);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_store(2, 40);
        frame.push(local2);
        frame.push(local1);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func038(t0, t1, t2));
        }
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load(2, 16);
        arg1 = frame.peek();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_store(2, 20);
      frame.push(local0);
      frame.i32_const(6);
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 36);
      frame.push(local0);
      frame.i32_const(0xf4768);
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_store(2, 40);
      frame.push(local2);
      frame.push(local1);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func038(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func102(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(arg0);
                          frame.i32_load8_u(0, 0);
                          var t0 = frame.pop();
                          switch (t0) {
                            case 0:
                              frame.unwindTo(0, 0);
                              break block_label_10;

                            case 1:
                              frame.unwindTo(0, 0);
                              break block_label_9;

                            case 2:
                              frame.unwindTo(0, 0);
                              break block_label_8;

                            case 3:
                              frame.unwindTo(0, 0);
                              break block_label_7;

                            case 4:
                              frame.unwindTo(0, 0);
                              break block_label_6;

                            case 5:
                              frame.unwindTo(0, 0);
                              break block_label_5;

                            case 6:
                              frame.unwindTo(0, 0);
                              break block_label_4;

                            case 7:
                              frame.unwindTo(0, 0);
                              break block_label_3;

                            case 8:
                              frame.unwindTo(0, 0);
                              break block_label_2;

                            case 9:
                              frame.unwindTo(0, 0);
                              break block_label_1;

                            default:
                              frame.unwindTo(0, 0);
                              break block_label_10;
                          }
                        }
                        frame.push(arg1);
                        frame.i32_load(2, 4);
                        arg0 = frame.pop();
                        frame.push(arg1);
                        frame.i32_load(2, 0);
                        arg1 = frame.pop();
                        frame.push(local0);
                        frame.i32_const(0);
                        frame.i32_store(2, 44);
                        frame.push(local0);
                        frame.i32_const(0xf4714);
                        frame.i32_store(2, 40);
                        frame.push(local0);
                        frame.i32_const(1);
                        frame.i32_store(2, 36);
                        frame.push(local0);
                        frame.i32_const(0xf49ec);
                        frame.i32_store(2, 32);
                        frame.push(local0);
                        frame.i32_const(0);
                        frame.i32_store(2, 24);
                        frame.push(arg1);
                        frame.push(arg0);
                        frame.push(local0);
                        frame.i32_const(24);
                        frame.i32_add();
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_func038(t0, t1, t2));
                        }
                        arg1 = frame.pop();
                        frame.unwindTo(0, 0);
                        break block_label_0;
                      }
                      frame.push(arg1);
                      frame.i32_load(2, 4);
                      arg0 = frame.pop();
                      frame.push(arg1);
                      frame.i32_load(2, 0);
                      arg1 = frame.pop();
                      frame.push(local0);
                      frame.i32_const(0);
                      frame.i32_store(2, 44);
                      frame.push(local0);
                      frame.i32_const(0xf4714);
                      frame.i32_store(2, 40);
                      frame.push(local0);
                      frame.i32_const(1);
                      frame.i32_store(2, 36);
                      frame.push(local0);
                      frame.i32_const(0xf49d0);
                      frame.i32_store(2, 32);
                      frame.push(local0);
                      frame.i32_const(0);
                      frame.i32_store(2, 24);
                      frame.push(arg1);
                      frame.push(arg0);
                      frame.push(local0);
                      frame.i32_const(24);
                      frame.i32_add();
                      {
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        frame.push(_func038(t0, t1, t2));
                      }
                      arg1 = frame.pop();
                      frame.unwindTo(0, 0);
                      break block_label_0;
                    }
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    arg0 = frame.pop();
                    frame.push(arg1);
                    frame.i32_load(2, 0);
                    arg1 = frame.pop();
                    frame.push(local0);
                    frame.i32_const(0);
                    frame.i32_store(2, 44);
                    frame.push(local0);
                    frame.i32_const(0xf4714);
                    frame.i32_store(2, 40);
                    frame.push(local0);
                    frame.i32_const(1);
                    frame.i32_store(2, 36);
                    frame.push(local0);
                    frame.i32_const(0xf49b0);
                    frame.i32_store(2, 32);
                    frame.push(local0);
                    frame.i32_const(0);
                    frame.i32_store(2, 24);
                    frame.push(arg1);
                    frame.push(arg0);
                    frame.push(local0);
                    frame.i32_const(24);
                    frame.i32_add();
                    {
                      var t2 = frame.pop();
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      frame.push(_func038(t0, t1, t2));
                    }
                    arg1 = frame.pop();
                    frame.unwindTo(0, 0);
                    break block_label_0;
                  }
                  frame.push(arg1);
                  frame.i32_load(2, 4);
                  arg0 = frame.pop();
                  frame.push(arg1);
                  frame.i32_load(2, 0);
                  arg1 = frame.pop();
                  frame.push(local0);
                  frame.i32_const(0);
                  frame.i32_store(2, 44);
                  frame.push(local0);
                  frame.i32_const(0xf4714);
                  frame.i32_store(2, 40);
                  frame.push(local0);
                  frame.i32_const(1);
                  frame.i32_store(2, 36);
                  frame.push(local0);
                  frame.i32_const(0xf4990);
                  frame.i32_store(2, 32);
                  frame.push(local0);
                  frame.i32_const(0);
                  frame.i32_store(2, 24);
                  frame.push(arg1);
                  frame.push(arg0);
                  frame.push(local0);
                  frame.i32_const(24);
                  frame.i32_add();
                  {
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    frame.push(_func038(t0, t1, t2));
                  }
                  arg1 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_0;
                }
                frame.push(arg1);
                frame.i32_load(2, 4);
                arg0 = frame.pop();
                frame.push(arg1);
                frame.i32_load(2, 0);
                arg1 = frame.pop();
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 44);
                frame.push(local0);
                frame.i32_const(0xf4714);
                frame.i32_store(2, 40);
                frame.push(local0);
                frame.i32_const(1);
                frame.i32_store(2, 36);
                frame.push(local0);
                frame.i32_const(0xf4968);
                frame.i32_store(2, 32);
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 24);
                frame.push(arg1);
                frame.push(arg0);
                frame.push(local0);
                frame.i32_const(24);
                frame.i32_add();
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func038(t0, t1, t2));
                }
                arg1 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.push(local0);
              frame.push(arg0);
              frame.i32_const(4);
              frame.i32_add();
              frame.i32_store(2, 12);
              frame.push(local0);
              frame.i32_const(13);
              frame.i32_store(2, 20);
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_store(2, 16);
              frame.push(arg1);
              frame.i32_load(2, 0);
              arg0 = frame.pop();
              frame.push(arg1);
              frame.i32_load(2, 4);
              arg1 = frame.pop();
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_store(2, 44);
              frame.push(local0);
              frame.i32_const(2);
              frame.i32_store(2, 36);
              frame.push(local0);
              frame.i32_const(0xf493c);
              frame.i32_store(2, 32);
              frame.push(local0);
              frame.i32_const(0);
              frame.i32_store(2, 24);
              frame.push(local0);
              frame.push(local0);
              frame.i32_const(16);
              frame.i32_add();
              frame.i32_store(2, 40);
              frame.push(arg0);
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(24);
              frame.i32_add();
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func038(t0, t1, t2));
              }
              arg1 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            frame.push(arg1);
            frame.i32_load(2, 4);
            arg0 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 0);
            arg1 = frame.pop();
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 44);
            frame.push(local0);
            frame.i32_const(0xf4714);
            frame.i32_store(2, 40);
            frame.push(local0);
            frame.i32_const(1);
            frame.i32_store(2, 36);
            frame.push(local0);
            frame.i32_const(0xf48ec);
            frame.i32_store(2, 32);
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 24);
            frame.push(arg1);
            frame.push(arg0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            {
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func038(t0, t1, t2));
            }
            arg1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.push(arg1);
          frame.i32_load(2, 4);
          arg0 = frame.pop();
          frame.push(arg1);
          frame.i32_load(2, 0);
          arg1 = frame.pop();
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 44);
          frame.push(local0);
          frame.i32_const(0xf4714);
          frame.i32_store(2, 40);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_store(2, 36);
          frame.push(local0);
          frame.i32_const(0xf48d4);
          frame.i32_store(2, 32);
          frame.push(local0);
          frame.i32_const(0);
          frame.i32_store(2, 24);
          frame.push(arg1);
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(24);
          frame.i32_add();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func038(t0, t1, t2));
          }
          arg1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_load(2, 4);
        arg0 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 0);
        arg1 = frame.pop();
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 44);
        frame.push(local0);
        frame.i32_const(0xf4714);
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.i32_const(1);
        frame.i32_store(2, 36);
        frame.push(local0);
        frame.i32_const(0xf48bc);
        frame.i32_store(2, 32);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 24);
        frame.push(arg1);
        frame.push(arg0);
        frame.push(local0);
        frame.i32_const(24);
        frame.i32_add();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func038(t0, t1, t2));
        }
        arg1 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.push(arg0);
      frame.i32_const(1);
      frame.i32_add();
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.i32_const(14);
      frame.i32_store(2, 20);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 16);
      frame.push(arg1);
      frame.i32_load(2, 0);
      arg0 = frame.pop();
      frame.push(arg1);
      frame.i32_load(2, 4);
      arg1 = frame.pop();
      frame.push(local0);
      frame.i32_const(1);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_store(2, 36);
      frame.push(local0);
      frame.i32_const(0xf48a4);
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(arg0);
      frame.push(arg1);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func038(t0, t1, t2));
      }
      arg1 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func103(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_const(14);
    frame.i32_add();
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.i32_const(-15);
    frame.i32_add();
    frame.push(arg1);
    frame.i32_load(2, 4);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()] as FunctionType0?;
      if (func == null) throw Trap('uninitialized element');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  void _func104(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg3);
    frame.i32_store(2, 12);
    frame.push(arg1);
    frame.i32_const(24);
    frame.i32_add();
    arg3 = frame.pop();
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_load8_u(0, 24);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      frame.i32_load(2, 0xf530c);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(15);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(4);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0xf4794);
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.push(arg2);
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 44);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf47c8);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func094(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg0);
    frame.push(arg3);
    frame.i64_load(2, 0);
    frame.i64_store(2, 24);
    frame.push(arg0);
    frame.push(arg2);
    frame.i64_load(2, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i64_load(2, 16);
    frame.i64_store(2, 16);
    frame.push(arg0);
    frame.i32_const(32);
    frame.i32_add();
    frame.push(arg3);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg2);
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(2, 0);
    frame.i64_store(2, 0);
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func105(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i64 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.i32_const(1);
    local2 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store8(0, 23);
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 28);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(23);
    frame.i32_add();
    frame.i32_store(2, 24);
    block_label_0:
    {
      frame.push(local1);
      frame.i32_const(20);
      frame.i32_add();
      local3 = frame.peek();
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func080(t0, t1));
      }
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(local1);
        frame.i32_load8_u(0, 4);
        frame.i32_const(3);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        local2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      frame.i32_const(0xf4810);
      frame.i32_const(3);
      frame.push(arg1);
      frame.i32_load(2, 4);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()] as FunctionType0?;
        if (func == null) throw Trap('uninitialized element');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      local2 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local1);
          frame.i32_load8_u(0, 4);
          arg0 = frame.peek();
          frame.i32_const(-3);
          frame.i32_add();
          frame.i32_const(1);
          frame.push(arg0);
          frame.i32_const(2);
          frame.i32_gt_u();
          frame.select();
          frame.i32_const(255);
          frame.i32_and();
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              frame.unwindTo(0, 0);
              break block_label_0;

            case 1:
              frame.unwindTo(6, 0);
              break block_label_1;

            case 2:
              frame.unwindTo(6, 0);
              break block_label_2;

            default:
              frame.unwindTo(0, 0);
              break block_label_0;
          }
        }
        frame.i32_const(0);
        local2 = frame.pop();
        frame.push(local1);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_load(2, 0);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local1);
        frame.i32_const(12);
        frame.i32_add();
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.push(arg0);
        frame.i32_const(20);
        frame.i32_mul();
        frame.i32_add();
        local3 = frame.pop();
      }
      frame.i32_const(0);
      local2 = frame.pop();
      frame.i32_const(0);
      local4 = frame.pop();

      loop_label_1:
      for (;;) {
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func050(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 8);
        arg0 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_load(2, 12);
        local5 = frame.pop();
        frame.push(arg0);
        frame.i32_load16_u(0, 0);
        local6 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              frame.i32_const(1);
              frame.i32_and();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(9, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) {
                frame.unwindTo(9, 0);
                break block_label_3;
              }
            }
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.push(arg0);
            frame.i32_const(4);
            frame.push(local6);
            frame.i32_clz();
            frame.i32_const(3);
            frame.i32_shr_u();
            frame.i32_sub();
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()] as FunctionType0?;
              if (func == null) throw Trap('uninitialized element');
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1, t2));
            }
            if (frame.pop() != 0) {
              frame.unwindTo(9, 0);
              break block_label_3;
            }
            frame.i32_const(0xf4714);
            arg0 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local5);
                  frame.i32_load8_u(0, 0);
                  local4 = frame.peek();
                  var t0 = frame.pop();
                  switch (t0) {
                    case 0:
                      frame.unwindTo(13, 0);
                      break block_label_4;

                    case 1:
                      frame.unwindTo(13, 0);
                      break block_label_6;

                    case 2:
                      frame.unwindTo(13, 0);
                      break block_label_5;

                    default:
                      frame.unwindTo(13, 0);
                      break block_label_4;
                  }
                }
                frame.i32_const(1);
                local4 = frame.pop();
                frame.push(local5);
                frame.i32_const(1);
                frame.i32_add();
                arg0 = frame.pop();
                frame.unwindTo(13, 0);
                break block_label_4;
              }
              frame.push(local5);
              frame.i32_const(12);
              frame.i32_add();
              frame.i32_load(2, 0);
              local4 = frame.pop();
              frame.push(local5);
              frame.i32_const(8);
              frame.i32_add();
              frame.i32_load(2, 0);
              arg0 = frame.pop();
            }
            frame.push(local1);
            frame.i32_const(20);
            frame.i32_add();
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(3);
            frame.i32_shl();
            local5 = frame.pop();

            loop_label_4:
            for (;;) {
              frame.push(local5);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(9, 0);
                break block_label_2;
              }
              frame.push(arg0);
              frame.i64_load(0, 0);
              local7 = frame.pop();
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_const(45);
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_load(2, 16);
              {
                var func = table0[frame.pop()] as FunctionType1?;
                if (func == null) throw Trap('uninitialized element');
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1));
              }
              if (frame.pop() != 0) {
                frame.unwindTo(9, 0);
                break block_label_3;
              }
              frame.push(local5);
              frame.i32_const(-8);
              frame.i32_add();
              local5 = frame.pop();
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.push(arg0);
              frame.i32_const(8);
              frame.push(local7);
              frame.i64_clz();
              frame.i32_wrap_i64();
              frame.i32_const(3);
              frame.i32_shr_u();
              frame.i32_sub();
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()] as FunctionType0?;
                if (func == null) throw Trap('uninitialized element');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              local4 = frame.pop();
              frame.push(arg0);
              frame.i32_const(8);
              frame.i32_add();
              arg0 = frame.pop();
              frame.push(local4);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
          }
          frame.i32_const(1);
          local2 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.i32_const(1);
        local4 = frame.pop();
        frame.push(local1);
        frame.push(local3);
        frame.i32_ne();
        if (frame.pop() != 0) {
          continue loop_label_1;
        }
        break;
      }
    }
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local2);
    return frame.pop();
  }

  void _func106(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i64 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_const(118);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_const(116);
    frame.i32_add();
    local2 = frame.peek();
    frame.i32_load16_u(1, 0);
    local3 = frame.pop();
    frame.push(arg1);
    frame.i32_const(121);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    local4 = frame.pop();
    frame.push(arg1);
    frame.i32_const(119);
    frame.i32_add();
    frame.i32_load16_u(0, 0);
    local5 = frame.pop();
    frame.push(local2);
    frame.i32_load8_u(0, 0);
    local6 = frame.pop();
    frame.push(arg1);
    frame.i32_const(112);
    frame.i32_add();
    local2 = frame.peek();
    frame.i32_load(2, 0);
    local7 = frame.pop();
    frame.push(local2);
    frame.i32_load8_u(0, 0);
    local8 = frame.pop();
    frame.i32_const(0);
    local9 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg1);
          frame.i32_load8_u(0, 96);
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              frame.unwindTo(0, 0);
              break block_label_0;

            case 1:
              frame.unwindTo(0, 0);
              break block_label_2;

            case 2:
              frame.unwindTo(0, 0);
              break block_label_1;

            default:
              frame.unwindTo(0, 0);
              break block_label_0;
          }
        }
        frame.push(arg1);
        frame.i32_const(97);
        frame.i32_add();
        frame.i64_load32_u(0, 0);
        local10 = frame.peek();
        frame.push(arg1);
        frame.i32_const(101);
        frame.i32_add();
        frame.i64_load16_u(0, 0);
        frame.push(arg1);
        frame.i32_const(103);
        frame.i32_add();
        frame.i64_load8_u(0, 0);
        frame.i64_const(16);
        frame.i64_shl();
        frame.i64_or();
        frame.i64_const(32);
        frame.i64_shl();
        frame.i64_or();
        frame.i64_const(24);
        frame.i64_shr_u();
        frame.i32_wrap_i64();
        local2 = frame.pop();
        frame.push(arg1);
        frame.i32_const(104);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        local11 = frame.pop();
        frame.push(local10);
        frame.i32_wrap_i64();
        local12 = frame.pop();
        frame.i32_const(1);
        local9 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.i32_const(104);
      frame.i32_add();
      frame.i32_load(2, 0);
      local9 = frame.pop();
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_const(108);
      frame.i32_add();
      frame.i32_load(2, 0);
      local13 = frame.peek();
      frame.i32_const(0);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func097(t0, t1, t2);
      }
      frame.push(local0);
      frame.i32_load(2, 16);
      local2 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 20);
      local11 = frame.peek();
      frame.push(local9);
      frame.push(local13);
      frame.i32_const(3);
      frame.i32_shl();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func002(t0, t1, t2));
      }
      frame.drop();
      frame.i32_const(2);
      local9 = frame.pop();
    }
    frame.push(local3);
    frame.push(local1);
    frame.i32_or();
    local1 = frame.pop();
    frame.push(local5);
    frame.push(local4);
    frame.i32_or();
    local3 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(16);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            local4 = frame.peek();
            frame.i32_const(-3);
            frame.i32_add();
            frame.i32_const(1);
            frame.push(local4);
            frame.i32_const(2);
            frame.i32_gt_u();
            frame.select();
            frame.i32_const(255);
            frame.i32_and();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(0, 0);
                break block_label_3;

              case 1:
                frame.unwindTo(0, 0);
                break block_label_2;

              case 2:
                frame.unwindTo(0, 0);
                break block_label_1;

              default:
                frame.unwindTo(0, 0);
                break block_label_3;
            }
          }
          frame.push(local0);
          frame.i32_const(3);
          frame.i32_store8(0, 28);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_load16_u(1, 12);
        local14 = frame.pop();
        frame.i32_const(0);
        local15 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local4);
              var t0 = frame.pop();
              switch (t0) {
                case 0:
                  frame.unwindTo(0, 0);
                  break block_label_2;

                case 1:
                  frame.unwindTo(0, 0);
                  break block_label_4;

                case 2:
                  frame.unwindTo(0, 0);
                  break block_label_3;

                default:
                  frame.unwindTo(0, 0);
                  break block_label_2;
              }
            }
            frame.push(arg1);
            frame.i32_const(17);
            frame.i32_add();
            frame.i64_load32_u(0, 0);
            local10 = frame.peek();
            frame.push(arg1);
            frame.i32_const(21);
            frame.i32_add();
            frame.i64_load16_u(0, 0);
            frame.push(arg1);
            frame.i32_const(23);
            frame.i32_add();
            frame.i64_load8_u(0, 0);
            frame.i64_const(16);
            frame.i64_shl();
            frame.i64_or();
            frame.i64_const(32);
            frame.i64_shl();
            frame.i64_or();
            frame.i64_const(24);
            frame.i64_shr_u();
            frame.i32_wrap_i64();
            local5 = frame.pop();
            frame.push(arg1);
            frame.i32_const(24);
            frame.i32_add();
            frame.i32_load8_u(0, 0);
            local16 = frame.pop();
            frame.push(local10);
            frame.i32_wrap_i64();
            local17 = frame.pop();
            frame.i32_const(1);
            local15 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg1);
          frame.i32_const(24);
          frame.i32_add();
          frame.i32_load(2, 0);
          local4 = frame.pop();
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(arg1);
          frame.i32_const(28);
          frame.i32_add();
          frame.i32_load(2, 0);
          local18 = frame.peek();
          frame.i32_const(0);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func059(t0, t1, t2);
          }
          frame.push(local0);
          frame.i32_load(2, 8);
          local5 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 12);
          local16 = frame.peek();
          frame.push(local4);
          frame.push(local18);
          frame.i32_const(3);
          frame.i32_shl();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func002(t0, t1, t2));
          }
          frame.drop();
          frame.i32_const(2);
          local15 = frame.pop();
        }
        frame.push(local0);
        frame.i32_const(35);
        frame.i32_add();
        frame.push(local5);
        frame.i32_const(24);
        frame.i32_shr_u();
        frame.i64_extend_i32_u();
        frame.i64_store8(0, 0);
        frame.push(local0);
        frame.i32_const(33);
        frame.i32_add();
        frame.push(local5);
        frame.i32_const(8);
        frame.i32_shr_u();
        frame.i64_extend_i32_u();
        frame.i64_store16(0, 0);
        frame.push(local0);
        frame.push(local18);
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.push(local16);
        frame.i32_store(2, 36);
        frame.push(local0);
        frame.push(local15);
        frame.i32_store8(0, 28);
        frame.push(local0);
        frame.push(local14);
        frame.i32_store16(1, 24);
        frame.push(local0);
        frame.push(local5);
        frame.i32_const(24);
        frame.i32_shl();
        frame.i64_extend_i32_u();
        frame.push(local17);
        frame.i64_extend_i32_u();
        frame.i64_const(0xffffff);
        frame.i64_and();
        frame.i64_or();
        frame.i64_store32(0, 29);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.push(arg1);
      frame.i32_const(20);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func099(t0, t1);
      }
      frame.push(local0);
      frame.i32_const(5);
      frame.i32_store8(0, 28);
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i64_load(3, 24);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(3, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(45);
    frame.i32_add();
    frame.push(local3);
    frame.i32_const(16);
    frame.i32_shr_u();
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(43);
    frame.i32_add();
    frame.push(local3);
    frame.i32_store16(0, 0);
    frame.push(arg0);
    frame.i32_const(42);
    frame.i32_add();
    frame.i32_const(0);
    frame.push(local1);
    frame.i32_const(0xffff00);
    frame.i32_and();
    frame.push(local6);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(128);
    frame.i32_eq();
    arg1 = frame.peek();
    frame.select();
    local3 = frame.peek();
    frame.i32_const(16);
    frame.i32_shr_u();
    frame.i32_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(27);
    frame.i32_add();
    frame.push(local2);
    frame.i32_const(24);
    frame.i32_shr_u();
    frame.i64_extend_i32_u();
    frame.i64_store8(0, 0);
    frame.push(arg0);
    frame.i32_const(25);
    frame.i32_add();
    frame.push(local2);
    frame.i32_const(8);
    frame.i32_shr_u();
    frame.i64_extend_i32_u();
    frame.i64_store16(0, 0);
    frame.push(arg0);
    frame.i32_const(21);
    frame.i32_add();
    frame.push(local2);
    frame.i32_const(24);
    frame.i32_shl();
    frame.i64_extend_i32_u();
    frame.push(local12);
    frame.i64_extend_i32_u();
    frame.i64_const(0xffffff);
    frame.i64_and();
    frame.i64_or();
    frame.i64_store32(0, 0);
    frame.push(arg0);
    frame.i32_const(36);
    frame.i32_add();
    frame.i32_const(128);
    frame.push(local7);
    frame.push(local8);
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_const(128);
    frame.i32_eq();
    frame.select();
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(32);
    frame.i32_add();
    frame.push(local13);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(28);
    frame.i32_add();
    frame.push(local11);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.push(local9);
    frame.i32_store8(0, 20);
    frame.push(arg0);
    frame.i32_const(40);
    frame.i32_add();
    frame.push(local3);
    frame.i32_const(-128);
    frame.push(local1);
    frame.push(arg1);
    frame.select();
    frame.i32_const(255);
    frame.i32_and();
    frame.i32_or();
    frame.i32_store16(1, 0);
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func107(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(4);
    frame.push(arg0);
    frame.i32_const(43);
    frame.i32_add();
    local1 = frame.peek();
    frame.i32_load16_u(0, 0);
    frame.push(arg0);
    frame.i32_const(45);
    frame.i32_add();
    frame.i32_load8_u(0, 0);
    frame.i32_const(16);
    frame.i32_shl();
    frame.i32_or();
    frame.i32_clz();
    frame.i32_const(3);
    frame.i32_shr_u();
    frame.i32_sub();
    local2 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg2);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local3 = frame.pop();
        frame.i32_const(0);
        arg2 = frame.pop();
        frame.push(arg1);
        local4 = frame.pop();
        frame.i32_const(0);
        local5 = frame.pop();
        frame.i32_const(0);
        local6 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      local6 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(arg1);
          frame.push(local6);
          frame.i32_add();
          local4 = frame.peek();
          frame.i32_load8_u(0, 0);
          frame.i32_const(45);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(1);
          local3 = frame.pop();
          frame.push(arg2);
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_add();
          local6 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
        frame.i32_const(0);
        local5 = frame.pop();
        frame.push(arg1);
        local4 = frame.pop();
        frame.push(arg2);
        local6 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local6);
      frame.i32_const(-1);
      frame.i32_xor();
      frame.push(arg2);
      frame.i32_add();
      arg2 = frame.pop();
      frame.i32_const(1);
      local5 = frame.pop();
      frame.push(local4);
      frame.i32_const(1);
      frame.i32_add();
      local4 = frame.pop();
      frame.i32_const(0);
      local3 = frame.pop();
    }
    block_label_0:
    {
      frame.i32_const(-1);
      frame.push(local1);
      frame.push(arg1);
      frame.push(local2);
      frame.push(local6);
      frame.push(local2);
      frame.push(local6);
      frame.i32_lt_u();
      frame.select();
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(_func007(t0, t1, t2));
      }
      arg1 = frame.peek();
      frame.push(local2);
      frame.push(local6);
      frame.i32_sub();
      frame.push(arg1);
      frame.select();
      local6 = frame.peek();
      frame.i32_const(0);
      frame.i32_ne();
      frame.push(local6);
      frame.i32_const(0);
      frame.i32_lt_s();
      frame.select();
      local6 = frame.peek();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(36);
          frame.i32_add();
          local1 = frame.peek();
          frame.i32_load8_u(0, 0);
          frame.i32_const(128);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local4);
          local2 = frame.pop();
          frame.push(local3);
          arg1 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(local5);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.i32_const(4);
        frame.push(local1);
        frame.i32_load(2, 0);
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        local5 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            if (frame.pop() != 0) {
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.i32_const(0);
            arg2 = frame.pop();
            frame.push(local4);
            local2 = frame.pop();
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.i32_const(0);
            local6 = frame.pop();
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local4);
              frame.push(local6);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_load8_u(0, 0);
              frame.i32_const(45);
              frame.i32_eq();
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_3;
              }
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.push(arg2);
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.push(local4);
            local2 = frame.pop();
            frame.push(arg2);
            local6 = frame.pop();
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.push(local6);
          frame.i32_const(-1);
          frame.i32_xor();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          local2 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.i32_const(-1);
        frame.push(local1);
        frame.push(local4);
        frame.push(local5);
        frame.push(local6);
        frame.push(local5);
        frame.push(local6);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func007(t0, t1, t2));
        }
        local4 = frame.peek();
        frame.push(local5);
        frame.push(local6);
        frame.i32_sub();
        frame.push(local4);
        frame.select();
        local6 = frame.peek();
        frame.i32_const(0);
        frame.i32_ne();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.peek();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_const(40);
          frame.i32_add();
          local4 = frame.peek();
          frame.i32_load8_u(0, 0);
          frame.i32_const(128);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local2);
          local7 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(arg1);
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.i32_const(4);
        frame.push(local4);
        frame.i32_load16_u(1, 0);
        frame.push(local4);
        frame.i32_const(2);
        frame.i32_add();
        frame.i32_load8_u(0, 0);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_or();
        frame.i32_clz();
        frame.i32_const(3);
        frame.i32_shr_u();
        frame.i32_sub();
        local1 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            if (frame.pop() != 0) {
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.i32_const(0);
            arg2 = frame.pop();
            frame.push(local2);
            local7 = frame.pop();
            frame.i32_const(1);
            arg1 = frame.pop();
            frame.i32_const(0);
            local6 = frame.pop();
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              frame.push(local2);
              frame.push(local6);
              frame.i32_add();
              arg1 = frame.peek();
              frame.i32_load8_u(0, 0);
              frame.i32_const(45);
              frame.i32_eq();
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_3;
              }
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.push(arg2);
              frame.push(local6);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.i32_const(1);
            local3 = frame.pop();
            frame.push(local2);
            local7 = frame.pop();
            frame.push(arg2);
            local6 = frame.pop();
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.push(local6);
          frame.i32_const(-1);
          frame.i32_xor();
          frame.push(arg2);
          frame.i32_add();
          arg2 = frame.pop();
          frame.push(arg1);
          frame.i32_const(1);
          frame.i32_add();
          local7 = frame.pop();
          frame.i32_const(0);
          arg1 = frame.pop();
        }
        frame.i32_const(-1);
        frame.push(local4);
        frame.push(local2);
        frame.push(local1);
        frame.push(local6);
        frame.push(local1);
        frame.push(local6);
        frame.i32_lt_u();
        frame.select();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func007(t0, t1, t2));
        }
        local4 = frame.peek();
        frame.push(local1);
        frame.push(local6);
        frame.i32_sub();
        frame.push(local4);
        frame.select();
        local6 = frame.peek();
        frame.i32_const(0);
        frame.i32_ne();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.peek();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      frame.i32_const(0xf4610);
      local1 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 20);
            local6 = frame.peek();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(3, 0);
                break block_label_1;

              case 1:
                frame.unwindTo(3, 0);
                break block_label_3;

              case 2:
                frame.unwindTo(3, 0);
                break block_label_2;

              default:
                frame.unwindTo(3, 0);
                break block_label_1;
            }
          }
          frame.push(arg0);
          frame.i32_const(21);
          frame.i32_add();
          local1 = frame.pop();
          frame.i32_const(1);
          local6 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_load(2, 0);
        local6 = frame.pop();
        frame.push(arg0);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        local1 = frame.pop();
      }
      frame.push(local1);
      frame.push(local6);
      frame.i32_const(3);
      frame.i32_shl();
      frame.i32_add();
      local8 = frame.pop();
      frame.push(arg2);
      local2 = frame.pop();
      frame.push(local7);
      local9 = frame.pop();
      block_label_1:
      {
        loop_label_2:
        for (;;) {
          frame.push(local9);
          local4 = frame.pop();
          frame.push(local1);
          local5 = frame.peek();
          frame.push(local8);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_1;
          }
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.i32_const(1);
            local6 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          frame.i32_const(8);
          frame.push(local5);
          frame.i64_load(0, 0);
          frame.i64_clz();
          frame.i32_wrap_i64();
          frame.i32_const(3);
          frame.i32_shr_u();
          frame.i32_sub();
          local10 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              frame.push(local2);
              if (frame.pop() != 0) {
                frame.unwindTo(4, 0);
                break block_label_4;
              }
              frame.i32_const(0);
              local2 = frame.pop();
              frame.i32_const(1);
              local3 = frame.pop();
              frame.push(local4);
              local9 = frame.pop();
              frame.i32_const(1);
              arg1 = frame.pop();
              frame.i32_const(0);
              local6 = frame.pop();
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            local6 = frame.pop();
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local4);
                frame.push(local6);
                frame.i32_add();
                local1 = frame.peek();
                frame.i32_load8_u(0, 0);
                frame.i32_const(45);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(4, 0);
                  break block_label_4;
                }
                frame.i32_const(1);
                arg1 = frame.pop();
                frame.push(local2);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_ne();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
              frame.i32_const(1);
              local3 = frame.pop();
              frame.push(local4);
              local9 = frame.pop();
              frame.push(local2);
              local6 = frame.pop();
              frame.unwindTo(4, 0);
              break block_label_3;
            }
            frame.i32_const(0);
            arg1 = frame.pop();
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_xor();
            frame.push(local2);
            frame.i32_add();
            arg2 = frame.peek();
            local2 = frame.pop();
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local7 = frame.peek();
            local9 = frame.pop();
          }
          frame.push(local5);
          frame.i32_const(8);
          frame.i32_add();
          local1 = frame.pop();
          frame.i32_const(-1);
          frame.push(local5);
          frame.push(local4);
          frame.push(local10);
          frame.push(local6);
          frame.push(local10);
          frame.push(local6);
          frame.i32_lt_u();
          frame.select();
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func007(t0, t1, t2));
          }
          local4 = frame.peek();
          frame.push(local10);
          frame.push(local6);
          frame.i32_sub();
          frame.push(local4);
          frame.select();
          local6 = frame.peek();
          frame.i32_const(0);
          frame.i32_ne();
          frame.push(local6);
          frame.i32_const(0);
          frame.i32_lt_s();
          frame.select();
          local6 = frame.peek();
          frame.i32_eqz();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          frame.unwindTo(0, 0);
          break block_label_0;

          break;
        }
      }
      block_label_1:
      {
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load8_u(0, 4);
          frame.i32_const(3);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local7);
          frame.i32_const(8);
          frame.i32_shr_u();
          local4 = frame.pop();
          frame.push(local7);
          local6 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local6 = frame.pop();
        frame.push(local3);
        frame.i32_const(255);
        frame.i32_and();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.i32_const(0);
        local6 = frame.pop();
        block_label_2:
        {
          frame.push(arg2);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.i32_const(0);
          local6 = frame.pop();
          block_label_3:
          {
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local7);
                frame.push(local6);
                frame.i32_add();
                arg1 = frame.peek();
                frame.i32_load8_u(0, 0);
                frame.i32_const(45);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(5, 0);
                  break block_label_4;
                }
                frame.i32_const(1);
                arg1 = frame.pop();
                frame.push(arg2);
                frame.push(local6);
                frame.i32_const(1);
                frame.i32_add();
                local6 = frame.peek();
                frame.i32_ne();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
              frame.push(local7);
              local4 = frame.pop();
              frame.push(arg2);
              local6 = frame.pop();
              frame.unwindTo(5, 0);
              break block_label_3;
            }
            frame.push(local6);
            frame.i32_const(-1);
            frame.i32_xor();
            frame.push(arg2);
            frame.i32_add();
            arg2 = frame.pop();
            frame.push(arg1);
            frame.i32_const(1);
            frame.i32_add();
            local4 = frame.pop();
            frame.i32_const(0);
            arg1 = frame.pop();
          }
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.i32_const(1);
          local6 = frame.pop();
          frame.push(local7);
          frame.i32_load8_u(0, 0);
          frame.i32_const(117);
          frame.i32_ne();
          if (frame.pop() != 0) {
            frame.unwindTo(4, 0);
            break block_label_2;
          }
          frame.push(local0);
          frame.push(arg1);
          frame.i32_store8(0, 8);
          frame.push(local0);
          frame.push(arg2);
          frame.i32_store(2, 4);
          frame.push(local0);
          frame.push(local4);
          frame.i32_store(2, 0);
          frame.push(local0);
          frame.push(local0);
          frame.i32_store(2, 12);
          frame.i32_const(2);
          local3 = frame.pop();
          block_label_3:
          {
            frame.push(arg0);
            frame.push(local0);
            frame.i32_const(12);
            frame.i32_add();
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(_func100(t0, t1));
            }
            local6 = frame.peek();
            frame.i32_const(255);
            frame.i32_and();
            frame.i32_const(2);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(7, 0);
              break block_label_3;
            }
            frame.unwindTo(3, 0);
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_load16_u(0, 1);
          frame.push(local0);
          frame.i32_load8_u(0, 3);
          frame.i32_const(16);
          frame.i32_shl();
          frame.i32_or();
          local4 = frame.pop();
          frame.push(local0);
          frame.i32_load8_u(0, 8);
          local3 = frame.pop();
          frame.push(local0);
          frame.i32_load(2, 4);
          arg2 = frame.pop();
          frame.push(local0);
          frame.i32_load8_u(0, 0);
          local6 = frame.pop();
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        frame.i32_const(-1);
        frame.i32_const(0);
        frame.push(local7);
        frame.i32_const(0xf4813);
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_ne();
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func007(t0, t1, t2));
        }
        arg2 = frame.peek();
        frame.push(local6);
        frame.i32_const(-1);
        frame.i32_add();
        frame.push(arg2);
        frame.select();
        local6 = frame.peek();
        frame.select();
        frame.push(local6);
        frame.i32_const(0);
        frame.i32_lt_s();
        frame.select();
        local6 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      arg1 = frame.pop();
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local3);
          frame.i32_const(255);
          frame.i32_and();
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              frame.unwindTo(3, 0);
              break block_label_2;

            case 1:
              frame.unwindTo(3, 0);
              break block_label_1;

            case 2:
              frame.unwindTo(0, 0);
              break block_label_0;

            default:
              frame.unwindTo(3, 0);
              break block_label_1;
          }
        }
        frame.push(local4);
        frame.i32_const(8);
        frame.i32_shl();
        frame.push(local6);
        frame.i32_const(255);
        frame.i32_and();
        frame.i32_or();
        arg1 = frame.pop();
        frame.push(arg2);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        local6 = frame.pop();

        loop_label_2:
        for (;;) {
          frame.push(arg1);
          frame.push(local6);
          frame.i32_add();
          frame.i32_load8_u(0, 0);
          frame.i32_const(45);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_1;
          }
          frame.push(arg2);
          frame.push(local6);
          frame.i32_const(1);
          frame.i32_add();
          local6 = frame.peek();
          frame.i32_ne();
          if (frame.pop() != 0) {
            continue loop_label_2;
          }
          break;
        }
      }
      frame.i32_const(-1);
      frame.i32_const(0);
      frame.push(arg1);
      frame.select();
      local6 = frame.pop();
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(local6);
    return frame.pop();
  }

  void _func108(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(96);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store8(0, 15);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_const(20);
    frame.i32_add();
    frame.i32_const(20);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(0xf4814);
    frame.i32_store(2, 32);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_store8(0, 40);
    frame.i32_const(0);
    frame.i32_load(2, 0xf530c);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(2);
    frame.i32_store8(0, 31);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(15);
    frame.i32_add();
    frame.i32_store(2, 52);
    block_label_0:
    {
      frame.push(arg1);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(17);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0xf47e4);
      frame.i32_store(2, 64);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_store(2, 84);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(80);
      frame.i32_add();
      frame.i32_store(2, 72);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_store(2, 88);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 80);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf47f4);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func094(t0, t1, t2, t3, t4);
      }
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_const(36);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func002(t0, t1, t2));
    }
    frame.drop();
    frame.push(local0);
    frame.i32_const(96);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func109(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(40);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 32);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_const(52);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 44);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 0);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 16);
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_const(24);
      frame.i32_add();
      frame.i32_load(2, 0);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func110(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;

    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_load(2, 0);
    local0 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local1 = frame.peek();
    frame.i32_add();
    local2 = frame.pop();
    frame.i32_const(0);
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(-1);
    local5 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            loop_label_4:
            for (;;) {
              block_label_5:
              {
                frame.push(local0);
                frame.push(local1);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.i32_const(4);
                local3 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.push(arg1);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_add();
              local6 = frame.peek();
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.i32_load8_s(0, 0);
              local7 = frame.peek();
              frame.i32_const(127);
              frame.i32_and();
              local8 = frame.peek();
              frame.push(local3);
              frame.i32_shl();
              frame.push(local4);
              frame.i32_or();
              local4 = frame.pop();
              block_label_5:
              {
                frame.push(local7);
                frame.i32_const(0);
                frame.i32_lt_s();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.i32_const(5);
                local3 = frame.pop();
                frame.push(local5);
                frame.push(local8);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_3;
                }
                frame.push(local2);
                frame.push(local4);
                frame.i32_ge_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(arg0);
                frame.i32_const(4);
                frame.i32_store8(0, 1);
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(local2);
              frame.i32_const(-1);
              frame.i32_add();
              local2 = frame.pop();
              frame.push(local5);
              frame.i32_const(7);
              frame.i32_shr_u();
              local5 = frame.pop();
              frame.push(local6);
              local0 = frame.pop();
              frame.push(local3);
              frame.i32_const(7);
              frame.i32_add();
              local3 = frame.peek();
              frame.i32_const(35);
              frame.i32_ne();
              if (frame.pop() != 0) {
                continue loop_label_4;
              }
              break;
            }
            frame.i32_const(5);
            local3 = frame.pop();
          }
          frame.push(arg0);
          frame.push(local3);
          frame.i32_store8(0, 1);
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(1);
        local3 = frame.pop();
        frame.push(arg1);
        frame.push(local0);
        frame.push(local4);
        frame.i32_add();
        frame.i32_const(1);
        frame.i32_add();
        frame.i32_store(2, 0);
        block_label_2:
        {
          frame.push(local4);
          frame.i32_const(3);
          frame.i32_and();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(1);
          frame.i32_add();
          frame.i32_store(2, 4);
          frame.i32_const(0);
          local3 = frame.pop();
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.i32_const(0);
          frame.i32_store(2, 0);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local4);
          frame.i32_const(2);
          frame.i32_shr_u();
          frame.i32_store(2, 0);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(13);
        frame.i32_store8(0, 1);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(1);
      local3 = frame.pop();
    }
    frame.push(arg0);
    frame.push(local3);
    frame.i32_store8(0, 0);
  }

  void _func111(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.push(arg1);
    frame.push(arg2);
    frame.i32_add();
    frame.i32_store(2, 4);
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func112(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 8);
        arg1 = frame.peek();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load8_u(0, 12);
        arg2 = frame.pop();
        frame.push(arg0);
        frame.i32_const(5);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_const(5);
        frame.i32_or();
        frame.i32_const(35);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(_func002(t0, t1, t2));
        }
        frame.drop();
        frame.push(arg0);
        frame.i32_const(0);
        frame.i32_store(2, 40);
        frame.push(arg0);
        frame.push(arg2);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store(2, 0);
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(4);
      frame.i32_add();
      frame.push(local0);
      frame.i32_load8_u(0, 12);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func108(t0, t1);
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 0);
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func112(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.pop();
    frame.i32_const(-1);
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            block_label_4:
            {
              frame.push(local1);
              frame.push(local2);
              frame.i32_ne();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.i32_const(4);
              local1 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local6 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.i32_load8_s(0, 0);
            local1 = frame.peek();
            frame.i32_const(127);
            frame.i32_and();
            local7 = frame.peek();
            frame.push(local4);
            frame.i32_shl();
            frame.push(local5);
            frame.i32_or();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local1);
              frame.i32_const(0);
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.i32_const(5);
              local1 = frame.pop();
              frame.push(local3);
              frame.push(local7);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.i32_const(13);
              local1 = frame.pop();
              frame.push(local5);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local3);
            frame.i32_const(7);
            frame.i32_shr_u();
            local3 = frame.pop();
            frame.push(local6);
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(7);
            frame.i32_add();
            local4 = frame.peek();
            frame.i32_const(35);
            frame.i32_ne();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
          frame.i32_const(5);
          local1 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func114(t0, t1);
        }
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 8);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(2, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.push(local0);
          frame.i32_const(8);
          frame.i32_add();
          frame.i32_const(40);
          {
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(_func002(t0, t1, t2));
          }
          frame.drop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i32_load8_u(0, 12);
        frame.i32_store8(0, 4);
        frame.push(arg0);
        frame.i32_const(0);
        frame.i32_store(2, 0);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store8(0, 4);
    }
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func113(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i64 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(144);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg2);
    frame.i32_load(2, 12);
    local1 = frame.pop();
    frame.push(arg2);
    frame.i64_load(2, 0);
    local2 = frame.pop();
    frame.push(local0);
    frame.push(arg2);
    frame.i32_load(2, 8);
    local3 = frame.peek();
    frame.i32_store(2, 80);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg1);
                frame.i32_load(2, 4);
                local4 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_5;
                }
                frame.push(arg1);
                frame.i32_load(2, 0);
                local5 = frame.pop();
                frame.push(local4);
                local6 = frame.pop();
                frame.i32_const(0);
                arg2 = frame.pop();
                frame.push(local4);
                local7 = frame.pop();
                block_label_6:
                {
                  loop_label_7:
                  for (;;) {
                    frame.push(local0);
                    frame.push(local5);
                    frame.push(local6);
                    frame.i32_const(1);
                    frame.i32_shr_u();
                    frame.push(arg2);
                    frame.i32_add();
                    local6 = frame.peek();
                    frame.i32_const(2);
                    frame.i32_shl();
                    frame.i32_add();
                    frame.i32_load(0, 0);
                    frame.i32_store(2, 104);
                    block_label_8:
                    {
                      block_label_9:
                      {
                        frame.i32_const(-1);
                        frame.push(local0);
                        frame.i32_const(104);
                        frame.i32_add();
                        frame.push(local0);
                        frame.i32_const(80);
                        frame.i32_add();
                        frame.i32_const(4);
                        {
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(_func007(t0, t1, t2));
                        }
                        local8 = frame.peek();
                        frame.i32_const(0);
                        frame.i32_ne();
                        frame.push(local8);
                        frame.i32_const(0);
                        frame.i32_lt_s();
                        frame.select();
                        local8 = frame.peek();
                        frame.i32_const(1);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          frame.unwindTo(1, 0);
                          break block_label_9;
                        }
                        frame.push(local6);
                        local7 = frame.pop();
                        frame.unwindTo(1, 0);
                        break block_label_8;
                      }
                      frame.push(local8);
                      frame.i32_const(255);
                      frame.i32_and();
                      frame.i32_const(255);
                      frame.i32_ne();
                      if (frame.pop() != 0) {
                        frame.unwindTo(1, 0);
                        break block_label_6;
                      }
                      frame.push(local6);
                      frame.i32_const(1);
                      frame.i32_add();
                      arg2 = frame.pop();
                    }
                    frame.push(local7);
                    frame.push(arg2);
                    frame.i32_sub();
                    local6 = frame.pop();
                    frame.push(local7);
                    frame.push(arg2);
                    frame.i32_le_u();
                    if (frame.pop() != 0) {
                      frame.unwindTo(0, 0);
                      break block_label_5;
                    }
                    continue loop_label_7;

                    break;
                  }
                }
                frame.push(arg1);
                frame.i32_const(28);
                frame.i32_add();
                frame.i32_load(2, 0);
                local9 = frame.pop();
                frame.push(arg1);
                frame.i32_const(20);
                frame.i32_add();
                frame.i32_load(2, 0);
                local5 = frame.pop();
                frame.push(arg1);
                frame.i32_const(12);
                frame.i32_add();
                frame.i32_load(2, 0);
                local10 = frame.pop();
                frame.push(arg1);
                frame.i32_load(2, 24);
                local11 = frame.pop();
                frame.push(arg1);
                frame.i32_load(2, 16);
                local8 = frame.pop();
                frame.push(arg1);
                frame.i32_load(2, 8);
                arg2 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local6);
                    if (frame.pop() != 0) {
                      frame.unwindTo(1, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0);
                    local12 = frame.pop();
                    frame.unwindTo(1, 0);
                    break block_label_6;
                  }
                  frame.push(local6);
                  frame.i32_const(-1);
                  frame.i32_add();
                  local7 = frame.peek();
                  frame.push(local10);
                  frame.i32_ge_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(0, 0);
                    break block_label_2;
                  }
                  frame.push(arg2);
                  frame.push(local7);
                  frame.i32_const(2);
                  frame.i32_shl();
                  frame.i32_add();
                  frame.i32_load(0, 0);
                  local12 = frame.pop();
                }
                frame.push(local6);
                frame.push(local10);
                frame.i32_ge_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(arg2);
                frame.push(local6);
                frame.i32_const(2);
                frame.i32_shl();
                frame.i32_add();
                frame.i32_load(0, 0);
                arg2 = frame.pop();
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(local5);
                    if (frame.pop() != 0) {
                      frame.unwindTo(2, 0);
                      break block_label_7;
                    }
                    frame.i32_const(0xf49f4);
                    local7 = frame.pop();
                    frame.i32_const(0);
                    local13 = frame.pop();
                    frame.i32_const(0);
                    local6 = frame.pop();
                    frame.i32_const(0xf49f4);
                    local14 = frame.pop();
                    frame.i32_const(0);
                    local15 = frame.pop();
                    frame.unwindTo(2, 0);
                    break block_label_6;
                  }
                  frame.push(local8);
                  frame.i32_const(4);
                  frame.i32_add();
                  local7 = frame.pop();
                  frame.push(local8);
                  frame.i32_load(0, 0);
                  local13 = frame.peek();
                  frame.i32_const(0x3fffffff);
                  frame.i32_and();
                  local6 = frame.pop();
                  frame.push(local5);
                  frame.push(local13);
                  frame.i32_const(2);
                  frame.i32_shl();
                  frame.i32_const(4);
                  frame.i32_add();
                  local16 = frame.peek();
                  frame.i32_sub();
                  local15 = frame.pop();
                  frame.push(local8);
                  frame.push(local16);
                  frame.i32_add();
                  local14 = frame.pop();
                }
                frame.push(arg2);
                frame.push(local12);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(local6);
                frame.push(arg2);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                block_label_6:
                {
                  block_label_7:
                  {
                    frame.push(arg2);
                    frame.push(local12);
                    frame.i32_sub();
                    local8 = frame.peek();
                    frame.i32_eqz();
                    if (frame.pop() != 0) {
                      frame.unwindTo(4, 0);
                      break block_label_7;
                    }
                    frame.push(local7);
                    frame.push(local12);
                    frame.i32_const(2);
                    frame.i32_shl();
                    frame.i32_add();
                    local17 = frame.pop();
                    frame.i32_const(0);
                    arg2 = frame.pop();
                    frame.push(local8);
                    local6 = frame.pop();
                    block_label_8:
                    {
                      loop_label_9:
                      for (;;) {
                        frame.push(local0);
                        frame.push(local15);
                        frame.i32_store(2, 104);
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(arg3);
                              frame.push(local14);
                              frame.push(local7);
                              frame.push(local17);
                              frame.push(local8);
                              frame.i32_const(1);
                              frame.i32_shr_u();
                              frame.push(arg2);
                              frame.i32_add();
                              local8 = frame.peek();
                              frame.i32_const(2);
                              frame.i32_shl();
                              frame.i32_add();
                              frame.push(local7);
                              frame.i32_sub();
                              local5 = frame.peek();
                              frame.i32_const(-4);
                              frame.i32_and();
                              frame.i32_add();
                              frame.i32_load(0, 0);
                              local16 = frame.peek();
                              frame.i32_add();
                              frame.push(local0);
                              frame.i32_const(104);
                              frame.i32_add();
                              frame.push(local7);
                              frame.push(local5);
                              frame.i32_const(2);
                              frame.i32_shr_u();
                              frame.i32_const(1);
                              frame.i32_add();
                              local5 = frame.peek();
                              frame.i32_const(2);
                              frame.i32_shl();
                              frame.i32_add();
                              frame.push(local5);
                              frame.push(local13);
                              frame.i32_eq();
                              frame.select();
                              frame.i32_load(0, 0);
                              frame.push(local16);
                              frame.i32_sub();
                              {
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                frame.push(_func107(t0, t1, t2));
                              }
                              frame.i32_const(255);
                              frame.i32_and();
                              var t0 = frame.pop();
                              switch (t0) {
                                case 0:
                                  frame.unwindTo(5, 0);
                                  break block_label_8;

                                case 1:
                                  frame.unwindTo(5, 0);
                                  break block_label_11;

                                default:
                                  frame.unwindTo(5, 0);
                                  break block_label_12;
                              }
                            }
                            frame.push(local8);
                            local6 = frame.pop();
                            frame.unwindTo(5, 0);
                            break block_label_10;
                          }
                          frame.push(local8);
                          frame.i32_const(1);
                          frame.i32_add();
                          arg2 = frame.pop();
                        }
                        frame.push(local6);
                        frame.push(arg2);
                        frame.i32_sub();
                        local8 = frame.pop();
                        frame.push(local6);
                        frame.push(arg2);
                        frame.i32_le_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(4, 0);
                          break block_label_7;
                        }
                        continue loop_label_9;

                        break;
                      }
                    }
                    frame.push(local8);
                    frame.push(local12);
                    frame.i32_add();
                    local8 = frame.pop();
                    frame.i32_const(1);
                    local7 = frame.pop();
                    frame.unwindTo(4, 0);
                    break block_label_6;
                  }
                  frame.i32_const(0);
                  local7 = frame.pop();
                }
                frame.push(local4);
                frame.i32_const(8);
                frame.i32_shr_u();
                arg2 = frame.pop();
                block_label_6:
                {
                  frame.push(local7);
                  if (frame.pop() != 0) {
                    frame.unwindTo(4, 0);
                    break block_label_6;
                  }
                  frame.i32_const(1);
                  local7 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.i32_const(1);
                local7 = frame.pop();
                frame.push(local8);
                frame.push(local11);
                frame.i32_load8_u(0, 0);
                local6 = frame.peek();
                frame.i32_mul();
                local8 = frame.peek();
                frame.push(local6);
                frame.i32_add();
                local5 = frame.peek();
                frame.push(local8);
                frame.i32_lt_u();
                frame.push(local5);
                frame.push(local9);
                frame.i32_gt_u();
                frame.i32_or();
                local5 = frame.peek();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.i32_const(0);
                frame.i32_store(2, 104);
                frame.push(local6);
                frame.i32_const(5);
                frame.i32_ge_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(0, 0);
                  break block_label_2;
                }
                frame.push(local0);
                frame.i32_const(104);
                frame.i32_add();
                frame.i32_const(0);
                frame.push(local11);
                frame.push(local8);
                frame.i32_add();
                frame.i32_const(1);
                frame.i32_add();
                frame.push(local5);
                frame.select();
                frame.push(local6);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func002(t0, t1, t2));
                }
                frame.drop();
                frame.push(local0);
                frame.i32_load(2, 104);
                arg2 = frame.pop();
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.i32_const(0);
              local7 = frame.pop();
            }
            frame.push(local0);
            frame.i32_const(131);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_const(16);
            frame.i32_shr_u();
            frame.i32_store8(0, 0);
            frame.push(local0);
            frame.i32_const(129);
            frame.i32_add();
            frame.push(arg2);
            frame.i32_store16(0, 0);
            frame.push(local0);
            frame.i32_const(104);
            frame.i32_add();
            frame.i32_const(32);
            frame.i32_add();
            frame.push(local10);
            frame.i32_store(2, 0);
            frame.push(local0);
            frame.push(local7);
            frame.i32_store8(0, 128);
            frame.push(local0);
            frame.i32_const(0);
            frame.i32_store(2, 120);
            frame.push(local0);
            frame.i32_const(2);
            frame.i32_store8(0, 119);
            frame.push(local0);
            frame.push(local1);
            frame.i32_store(2, 100);
            frame.push(local0);
            frame.push(local3);
            frame.i32_store(2, 96);
            frame.push(local0);
            frame.push(local2);
            frame.i64_store(3, 88);
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(104);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(88);
            frame.i32_add();
            frame.push(arg3);
            {
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func104(t0, t1, t2, t3);
            }
            frame.push(local0);
            frame.i32_load(2, 40);
            arg2 = frame.pop();
            frame.push(local0);
            frame.i32_load8_u(0, 55);
            local7 = frame.peek();
            frame.i32_const(3);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(11);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(11);
            frame.i32_add();
            frame.i32_load(0, 0);
            frame.i32_store(0, 0);
            frame.push(local0);
            frame.i32_const(24);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(24);
            frame.i32_add();
            frame.i64_load(3, 0);
            frame.i64_store(3, 0);
            frame.push(local0);
            frame.i32_const(32);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.i32_const(32);
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_store(2, 0);
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(2, 44);
            frame.i64_store(2, 4);
            frame.push(local0);
            frame.push(local0);
            frame.i64_load(3, 56);
            frame.i64_store(3, 16);
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_const(36);
              frame.i32_add();
              frame.i32_load(2, 0);
              local7 = frame.peek();
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(arg1);
              frame.i32_load(2, 32);
              local8 = frame.peek();
              frame.i32_load(0, 0);
              local6 = frame.peek();
              frame.push(arg2);
              frame.i32_le_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_4;
              }
              frame.push(local0);
              frame.push(local7);
              frame.push(local6);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_const(4);
              frame.i32_add();
              local5 = frame.peek();
              frame.i32_sub();
              frame.i32_store(2, 104);
              frame.push(local0);
              frame.i32_const(104);
              frame.i32_add();
              frame.push(local8);
              frame.i32_const(4);
              frame.i32_add();
              local7 = frame.peek();
              frame.push(arg2);
              frame.i32_const(1);
              frame.i32_add();
              local16 = frame.peek();
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.push(local16);
              frame.push(local6);
              frame.i32_eq();
              frame.select();
              frame.i32_load(0, 0);
              frame.push(local7);
              frame.push(arg2);
              frame.i32_const(2);
              frame.i32_shl();
              frame.i32_add();
              frame.i32_load(0, 0);
              arg2 = frame.peek();
              frame.i32_sub();
              local6 = frame.pop();
              frame.push(local8);
              frame.push(local5);
              frame.i32_add();
              frame.push(arg2);
              frame.i32_add();
              arg2 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(124);
            frame.i32_add();
            frame.i32_const(18);
            frame.i32_store(2, 0);
            frame.push(local0);
            frame.i32_const(0xf49f4);
            frame.i32_store(2, 120);
            frame.push(local0);
            frame.i32_const(2);
            frame.i32_store8(0, 119);
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_store8(0, 128);
            frame.push(local0);
            frame.push(local1);
            frame.i32_store(2, 52);
            frame.push(local0);
            frame.push(local3);
            frame.i32_store(2, 48);
            frame.push(local0);
            frame.push(local2);
            frame.i64_store(3, 40);
            frame.push(local0);
            frame.push(local0);
            frame.i32_const(104);
            frame.i32_add();
            frame.push(local0);
            frame.i32_const(40);
            frame.i32_add();
            frame.push(arg3);
            {
              var t3 = frame.pop();
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func104(t0, t1, t2, t3);
            }
            frame.push(local0);
            frame.i32_load(2, 0);
            arg2 = frame.pop();
            frame.push(local0);
            frame.i32_load8_u(0, 15);
            local7 = frame.peek();
            frame.i32_const(3);
            frame.i32_ne();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local0);
            frame.i32_load(2, 4);
            local6 = frame.pop();
          }
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 40);
            local7 = frame.peek();
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local7);
            frame.push(local7);
            frame.i32_load(2, 0);
            frame.i32_const(1);
            frame.i32_add();
            local8 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local8);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
          }
          frame.push(arg0);
          frame.push(arg2);
          frame.i32_store(2, 4);
          frame.push(arg0);
          frame.i32_const(64);
          frame.i32_add();
          frame.i32_const(2);
          frame.i32_store8(0, 0);
          frame.push(arg0);
          frame.i32_const(36);
          frame.i32_add();
          frame.i32_const(3);
          frame.i32_store8(0, 0);
          frame.push(arg0);
          frame.i32_const(12);
          frame.i32_add();
          frame.push(local7);
          frame.i32_store(2, 0);
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          frame.push(local6);
          frame.i32_store(2, 0);
          frame.i32_const(0);
          arg2 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        throw Trap('unreachable');
        throw Trap('unreachable');
      }
      frame.push(arg0);
      frame.i32_const(16);
      frame.i32_add();
      frame.push(local0);
      frame.i32_load16_u(1, 12);
      frame.i32_store16(1, 0);
      frame.push(arg0);
      frame.i32_const(20);
      frame.i32_add();
      frame.push(local0);
      frame.i64_load(3, 16);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.i32_const(18);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(14);
      frame.i32_add();
      frame.i32_load8_u(0, 0);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_add();
      frame.i64_load(3, 0);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.i32_const(36);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_load(2, 0);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i64_load(2, 4);
      local2 = frame.pop();
      frame.push(arg0);
      frame.i32_const(19);
      frame.i32_add();
      frame.push(local7);
      frame.i32_store8(0, 0);
      frame.push(arg0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(local2);
      frame.i64_store(2, 0);
      frame.push(arg0);
      frame.push(arg2);
      frame.i32_store(2, 4);
      frame.i32_const(1);
      arg2 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(144);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func114(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;
    i32 local10 = 0;
    i32 local11 = 0;
    i32 local12 = 0;
    i32 local13 = 0;
    i32 local14 = 0;
    i32 local15 = 0;
    i32 local16 = 0;
    i32 local17 = 0;
    i32 local18 = 0;
    i32 local19 = 0;
    i32 local20 = 0;
    i32 local21 = 0;
    i32 local22 = 0;
    i32 local23 = 0;
    i32 local24 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(80);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.peek();
    frame.i32_add();
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    frame.i32_const(-1);
    local6 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            frame.i32_const(4);
            local7 = frame.pop();
            frame.push(local1);
            frame.push(local2);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local8 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.i32_load8_s(0, 0);
            local7 = frame.peek();
            frame.i32_const(127);
            frame.i32_and();
            local9 = frame.peek();
            frame.push(local4);
            frame.i32_shl();
            frame.push(local5);
            frame.i32_or();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local7);
              frame.i32_const(0);
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.i32_const(5);
              local7 = frame.pop();
              frame.push(local6);
              frame.push(local9);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.i32_const(4);
              local7 = frame.pop();
              frame.push(local3);
              frame.push(local5);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg1);
              frame.push(local1);
              frame.push(local5);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_add();
              frame.i32_store(2, 0);
              frame.i32_const(13);
              local7 = frame.pop();
              frame.push(local5);
              frame.i32_const(3);
              frame.i32_and();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(local0);
              frame.i32_const(64);
              frame.i32_add();
              frame.push(arg1);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func110(t0, t1);
              }
              frame.push(local0);
              frame.i32_load8_u(0, 64);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local0);
              frame.i32_load8_u(0, 65);
              local7 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.pop();
            frame.push(local6);
            frame.i32_const(7);
            frame.i32_shr_u();
            local6 = frame.pop();
            frame.push(local8);
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(7);
            frame.i32_add();
            local4 = frame.peek();
            frame.i32_const(35);
            frame.i32_ne();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
          frame.i32_const(5);
          local7 = frame.pop();
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local1);
        frame.i32_const(1);
        frame.i32_add();
        local10 = frame.pop();
        frame.push(local5);
        frame.i32_const(2);
        frame.i32_shr_u();
        local11 = frame.pop();
        frame.push(local0);
        frame.i32_const(76);
        frame.i32_add();
        frame.i32_load(2, 0);
        local12 = frame.pop();
        frame.push(local0);
        frame.i32_const(72);
        frame.i32_add();
        frame.i32_load(2, 0);
        local13 = frame.pop();
        frame.push(local0);
        frame.i32_load(2, 68);
        local14 = frame.pop();
        frame.i32_const(0);
        local6 = frame.pop();
        frame.push(arg1);
        frame.i32_load(2, 4);
        local9 = frame.peek();
        frame.push(arg1);
        frame.i32_load(2, 0);
        local15 = frame.peek();
        frame.i32_sub();
        local16 = frame.peek();
        local2 = frame.pop();
        frame.i32_const(0);
        local3 = frame.pop();
        frame.i32_const(-1);
        local8 = frame.pop();
        frame.i32_const(0);
        local1 = frame.pop();
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    loop_label_8:
                    for (;;) {
                      frame.push(local15);
                      frame.push(local1);
                      frame.i32_add();
                      local4 = frame.peek();
                      frame.push(local9);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_3;
                      }
                      frame.push(arg1);
                      frame.push(local4);
                      frame.i32_const(1);
                      frame.i32_add();
                      frame.i32_store(2, 0);
                      frame.push(local4);
                      frame.i32_load8_s(0, 0);
                      local7 = frame.peek();
                      frame.i32_const(127);
                      frame.i32_and();
                      local17 = frame.peek();
                      frame.push(local6);
                      frame.i32_shl();
                      frame.push(local3);
                      frame.i32_or();
                      local3 = frame.pop();
                      block_label_9:
                      {
                        block_label_10:
                        {
                          frame.push(local7);
                          frame.i32_const(0);
                          frame.i32_lt_s();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_10;
                          }
                          frame.i32_const(5);
                          local7 = frame.pop();
                          frame.push(local8);
                          frame.push(local17);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_2;
                          }
                          frame.push(local1);
                          frame.i32_const(-1);
                          frame.i32_xor();
                          frame.push(local16);
                          frame.i32_add();
                          frame.push(local3);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_3;
                          }
                          frame.push(arg1);
                          frame.push(local15);
                          frame.push(local1);
                          frame.push(local3);
                          frame.i32_add();
                          frame.i32_add();
                          local18 = frame.peek();
                          frame.i32_const(1);
                          frame.i32_add();
                          frame.i32_store(2, 0);
                          frame.push(local3);
                          frame.i32_eqz();
                          if (frame.pop() != 0) {
                            frame.unwindTo(1, 0);
                            break block_label_9;
                          }
                          frame.i32_const(13);
                          local7 = frame.pop();
                          frame.push(local3);
                          frame.i32_const(4);
                          frame.i32_lt_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_2;
                          }
                          frame.push(local4);
                          frame.i32_const(1);
                          frame.i32_add();
                          frame.i32_load(0, 0);
                          local6 = frame.peek();
                          frame.i32_const(2);
                          frame.i32_shl();
                          frame.i32_const(4);
                          frame.i32_add();
                          local8 = frame.peek();
                          frame.i32_eqz();
                          frame.push(local3);
                          frame.push(local8);
                          frame.i32_lt_u();
                          frame.i32_or();
                          local17 = frame.peek();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_2;
                          }
                          frame.push(local0);
                          frame.push(local3);
                          frame.push(local8);
                          frame.i32_sub();
                          local19 = frame.peek();
                          frame.i32_store(2, 64);
                          frame.push(local6);
                          frame.i32_const(0x3fffffff);
                          frame.i32_gt_u();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_7;
                          }
                          block_label_11:
                          {
                            frame.push(local6);
                            if (frame.pop() != 0) {
                              frame.unwindTo(8, 0);
                              break block_label_11;
                            }
                            frame.push(local3);
                            frame.push(local8);
                            frame.i32_ne();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_2;
                            }
                            frame.unwindTo(1, 0);
                            break block_label_9;
                          }
                          frame.i32_const(0);
                          frame.push(local4);
                          frame.i32_const(5);
                          frame.i32_add();
                          frame.push(local17);
                          frame.select();
                          local8 = frame.peek();
                          frame.i32_load(0, 0);
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_2;
                          }
                          frame.push(local8);
                          frame.i32_const(4);
                          frame.i32_add();
                          local8 = frame.pop();
                          frame.i32_const(0);
                          local20 = frame.pop();

                          loop_label_11:
                          for (;;) {
                            frame.push(local6);
                            frame.i32_eqz();
                            if (frame.pop() != 0) {
                              frame.unwindTo(1, 0);
                              break block_label_9;
                            }
                            frame.push(local20);
                            frame.push(local0);
                            frame.i32_const(64);
                            frame.i32_add();
                            frame.push(local8);
                            frame.push(local6);
                            frame.i32_const(1);
                            frame.i32_eq();
                            frame.select();
                            frame.i32_load(0, 0);
                            local17 = frame.peek();
                            frame.i32_gt_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_2;
                            }
                            frame.push(local6);
                            frame.i32_const(-1);
                            frame.i32_add();
                            local6 = frame.pop();
                            frame.push(local8);
                            frame.i32_const(4);
                            frame.i32_add();
                            local8 = frame.pop();
                            frame.push(local17);
                            local20 = frame.pop();
                            frame.push(local17);
                            frame.push(local19);
                            frame.i32_le_u();
                            if (frame.pop() != 0) {
                              continue loop_label_11;
                            }
                            frame.unwindTo(0, 0);
                            break block_label_2;

                            break;
                          }
                        }
                        frame.push(local6);
                        frame.i32_const(7);
                        frame.i32_add();
                        local6 = frame.pop();
                        frame.push(local2);
                        frame.i32_const(-1);
                        frame.i32_add();
                        local2 = frame.pop();
                        frame.push(local8);
                        frame.i32_const(7);
                        frame.i32_shr_u();
                        local8 = frame.pop();
                        frame.i32_const(5);
                        local7 = frame.pop();
                        frame.push(local1);
                        frame.i32_const(1);
                        frame.i32_add();
                        local1 = frame.peek();
                        frame.i32_const(5);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          continue loop_label_8;
                        }
                        frame.unwindTo(0, 0);
                        break block_label_2;
                      }
                      break;
                    }
                    frame.push(local4);
                    frame.i32_const(1);
                    frame.i32_add();
                    local21 = frame.pop();
                    frame.push(local16);
                    frame.push(local3);
                    frame.i32_sub();
                    frame.push(local1);
                    frame.i32_sub();
                    frame.i32_const(-3);
                    frame.i32_add();
                    local22 = frame.pop();
                    frame.push(local3);
                    local19 = frame.pop();
                    frame.i32_const(0);
                    local8 = frame.pop();
                    frame.i32_const(0);
                    local16 = frame.pop();
                    frame.i32_const(-1);
                    local20 = frame.pop();
                    frame.i32_const(0);
                    local6 = frame.pop();

                    loop_label_8:
                    for (;;) {
                      frame.push(local6);
                      frame.i32_const(1);
                      frame.i32_add();
                      local17 = frame.peek();
                      frame.push(local18);
                      frame.i32_add();
                      local7 = frame.peek();
                      frame.push(local9);
                      frame.i32_eq();
                      if (frame.pop() != 0) {
                        frame.unwindTo(0, 0);
                        break block_label_3;
                      }
                      frame.push(arg1);
                      frame.push(local18);
                      frame.push(local6);
                      frame.i32_add();
                      local23 = frame.peek();
                      frame.i32_const(2);
                      frame.i32_add();
                      frame.i32_store(2, 0);
                      frame.push(local7);
                      frame.i32_load8_s(0, 0);
                      local7 = frame.peek();
                      frame.i32_const(127);
                      frame.i32_and();
                      local24 = frame.peek();
                      frame.push(local8);
                      frame.i32_shl();
                      frame.push(local16);
                      frame.i32_or();
                      local16 = frame.pop();
                      block_label_9:
                      {
                        frame.push(local7);
                        frame.i32_const(0);
                        frame.i32_lt_s();
                        if (frame.pop() != 0) {
                          frame.unwindTo(1, 0);
                          break block_label_9;
                        }
                        frame.i32_const(5);
                        local7 = frame.pop();
                        frame.push(local20);
                        frame.push(local24);
                        frame.i32_lt_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.i32_const(4);
                        local7 = frame.pop();
                        frame.push(local2);
                        frame.push(local3);
                        frame.i32_sub();
                        frame.push(local6);
                        frame.i32_sub();
                        frame.i32_const(-2);
                        frame.i32_add();
                        frame.push(local16);
                        frame.i32_lt_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.push(arg1);
                        frame.push(local15);
                        frame.push(local16);
                        frame.push(local19);
                        frame.i32_add();
                        local2 = frame.peek();
                        frame.i32_add();
                        frame.push(local1);
                        frame.i32_add();
                        local17 = frame.peek();
                        frame.i32_const(2);
                        frame.i32_add();
                        frame.i32_store(2, 0);
                        frame.i32_const(13);
                        local7 = frame.pop();
                        frame.push(local16);
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.push(local23);
                        frame.i32_const(2);
                        frame.i32_add();
                        local20 = frame.peek();
                        frame.i32_load8_u(0, 0);
                        local8 = frame.peek();
                        frame.i32_const(-5);
                        frame.i32_add();
                        frame.i32_const(255);
                        frame.i32_and();
                        frame.i32_const(252);
                        frame.i32_lt_u();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.push(local16);
                        frame.i32_const(-1);
                        frame.i32_add();
                        local18 = frame.peek();
                        frame.push(local18);
                        frame.push(local8);
                        frame.i32_div_u();
                        local24 = frame.peek();
                        frame.push(local8);
                        frame.i32_mul();
                        frame.i32_sub();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_2;
                        }
                        frame.push(local11);
                        frame.push(local13);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_4;
                        }
                        block_label_10:
                        {
                          block_label_11:
                          {
                            frame.push(local3);
                            if (frame.pop() != 0) {
                              frame.unwindTo(8, 0);
                              break block_label_11;
                            }
                            frame.i32_const(0);
                            local7 = frame.pop();
                            frame.unwindTo(8, 0);
                            break block_label_10;
                          }
                          frame.push(local4);
                          frame.i32_const(1);
                          frame.i32_add();
                          frame.i32_load(0, 0);
                          local7 = frame.pop();
                        }
                        frame.push(local7);
                        frame.push(local24);
                        frame.i32_ne();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_4;
                        }
                        block_label_10:
                        {
                          frame.push(local5);
                          frame.i32_const(4);
                          frame.i32_lt_u();
                          local23 = frame.peek();
                          if (frame.pop() != 0) {
                            frame.unwindTo(9, 0);
                            break block_label_10;
                          }
                          frame.push(local14);
                          frame.i32_eqz();
                          if (frame.pop() != 0) {
                            frame.unwindTo(9, 0);
                            break block_label_10;
                          }
                          frame.push(local11);
                          local8 = frame.pop();
                          frame.push(local14);
                          local7 = frame.pop();

                          loop_label_11:
                          for (;;) {
                            frame.push(local8);
                            frame.i32_const(-1);
                            frame.i32_add();
                            local8 = frame.peek();
                            frame.i32_eqz();
                            if (frame.pop() != 0) {
                              frame.unwindTo(9, 0);
                              break block_label_10;
                            }
                            frame.push(local7);
                            frame.i32_const(4);
                            frame.i32_add();
                            local13 = frame.pop();
                            frame.push(local7);
                            frame.i32_load(0, 0);
                            local24 = frame.pop();
                            frame.push(local7);
                            frame.i32_const(4);
                            frame.i32_add();
                            local7 = frame.pop();
                            frame.push(local24);
                            frame.push(local13);
                            frame.i32_load(0, 0);
                            frame.i32_ge_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_4;
                            }
                            continue loop_label_11;

                            break;
                          }
                        }
                        block_label_10:
                        {
                          frame.push(local23);
                          if (frame.pop() != 0) {
                            frame.unwindTo(9, 0);
                            break block_label_10;
                          }
                          frame.push(local11);
                          frame.i32_const(2);
                          frame.i32_shl();
                          frame.push(local14);
                          frame.i32_add();
                          frame.i32_const(-4);
                          frame.i32_add();
                          frame.i32_load(0, 0);
                          local7 = frame.pop();
                          block_label_11:
                          {
                            block_label_12:
                            {
                              frame.push(local3);
                              if (frame.pop() != 0) {
                                frame.unwindTo(10, 0);
                                break block_label_12;
                              }
                              frame.i32_const(0);
                              local8 = frame.pop();
                              frame.unwindTo(10, 0);
                              break block_label_11;
                            }
                            frame.push(local4);
                            frame.i32_const(1);
                            frame.i32_add();
                            frame.i32_load(0, 0);
                            local8 = frame.pop();
                          }
                          frame.push(local8);
                          frame.push(local7);
                          frame.i32_ne();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_4;
                          }
                        }
                        frame.push(local0);
                        frame.push(local12);
                        frame.i32_store(2, 60);
                        frame.push(local0);
                        frame.push(local11);
                        frame.i32_store(2, 56);
                        frame.push(local0);
                        frame.push(local14);
                        frame.i32_store(2, 52);
                        frame.push(local0);
                        frame.i32_const(0);
                        frame.i32_store(2, 48);
                        frame.push(local0);
                        frame.push(local11);
                        frame.i32_store(2, 44);
                        frame.push(local0);
                        frame.push(local10);
                        frame.i32_store(2, 40);
                        frame.i32_const(13);
                        local7 = frame.pop();
                        frame.push(local0);
                        frame.i32_const(13);
                        frame.i32_store(2, 36);
                        frame.push(local0);
                        frame.push(local18);
                        frame.i32_store(2, 32);
                        frame.push(local0);
                        frame.push(local4);
                        frame.push(local3);
                        frame.i32_add();
                        frame.push(local6);
                        frame.i32_add();
                        frame.i32_const(2);
                        frame.i32_add();
                        frame.i32_store(2, 28);
                        frame.push(local0);
                        frame.i32_const(1);
                        frame.i32_store(2, 24);
                        frame.push(local0);
                        frame.push(local3);
                        frame.i32_store(2, 16);
                        frame.push(local0);
                        frame.i32_const(1);
                        frame.i32_store(2, 8);
                        frame.push(local0);
                        frame.push(local21);
                        frame.i32_store8(0, 12);
                        frame.push(local0);
                        frame.push(local21);
                        frame.i32_const(24);
                        frame.i32_shr_u();
                        frame.i32_store8(0, 15);
                        frame.push(local0);
                        frame.push(local21);
                        frame.i32_const(8);
                        frame.i32_shr_u();
                        frame.i32_store16(0, 13);
                        frame.push(local12);
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_5;
                        }
                        frame.push(local14);
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_5;
                        }
                        frame.push(local0);
                        frame.i32_load(2, 12);
                        local23 = frame.peek();
                        frame.i32_eqz();
                        if (frame.pop() != 0) {
                          frame.unwindTo(0, 0);
                          break block_label_5;
                        }
                        frame.push(local5);
                        frame.i32_const(10);
                        frame.i32_shr_u();
                        local21 = frame.pop();
                        frame.push(local0);
                        frame.i32_const(8);
                        frame.i32_add();
                        {
                          var t0 = frame.pop();
                          _func109(t0);
                        }
                        frame.i32_const(-1);
                        local8 = frame.pop();
                        frame.push(local16);
                        local24 = frame.pop();
                        frame.i32_const(0);
                        local5 = frame.pop();
                        frame.i32_const(0);
                        local6 = frame.pop();
                        frame.i32_const(0);
                        local4 = frame.pop();

                        loop_label_10:
                        for (;;) {
                          frame.i32_const(4);
                          local7 = frame.pop();
                          frame.push(local17);
                          frame.push(local4);
                          frame.i32_add();
                          local12 = frame.peek();
                          frame.i32_const(2);
                          frame.i32_add();
                          local13 = frame.peek();
                          frame.push(local9);
                          frame.i32_eq();
                          if (frame.pop() != 0) {
                            frame.unwindTo(0, 0);
                            break block_label_1;
                          }
                          frame.push(arg1);
                          frame.push(local12);
                          frame.i32_const(3);
                          frame.i32_add();
                          frame.i32_store(2, 0);
                          frame.push(local13);
                          frame.i32_load8_s(0, 0);
                          local7 = frame.peek();
                          frame.i32_const(127);
                          frame.i32_and();
                          local12 = frame.peek();
                          frame.push(local5);
                          frame.i32_shl();
                          frame.push(local6);
                          frame.i32_or();
                          local6 = frame.pop();
                          block_label_11:
                          {
                            frame.push(local7);
                            frame.i32_const(0);
                            frame.i32_lt_s();
                            if (frame.pop() != 0) {
                              frame.unwindTo(14, 0);
                              break block_label_11;
                            }
                            frame.i32_const(5);
                            local7 = frame.pop();
                            frame.push(local8);
                            frame.push(local12);
                            frame.i32_lt_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.i32_const(4);
                            local7 = frame.pop();
                            frame.push(local22);
                            frame.push(local16);
                            frame.i32_sub();
                            frame.push(local4);
                            frame.i32_sub();
                            frame.push(local6);
                            frame.i32_lt_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.push(local15);
                            frame.push(local16);
                            frame.push(local19);
                            frame.i32_add();
                            frame.i32_add();
                            frame.push(local1);
                            frame.i32_add();
                            frame.push(local4);
                            frame.i32_add();
                            local4 = frame.peek();
                            frame.i32_const(3);
                            frame.i32_add();
                            local5 = frame.pop();
                            frame.push(arg1);
                            frame.push(local15);
                            frame.push(local6);
                            frame.push(local2);
                            frame.i32_add();
                            frame.i32_add();
                            frame.push(local1);
                            frame.i32_add();
                            frame.i32_const(3);
                            frame.i32_add();
                            frame.i32_store(2, 0);
                            frame.push(local6);
                            frame.i32_eqz();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_6;
                            }
                            frame.i32_const(13);
                            local7 = frame.pop();
                            frame.push(local6);
                            frame.i32_const(4);
                            frame.i32_lt_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.push(local5);
                            frame.i32_load(0, 0);
                            local1 = frame.peek();
                            frame.i32_const(2);
                            frame.i32_shl();
                            frame.i32_const(4);
                            frame.i32_add();
                            local8 = frame.peek();
                            frame.i32_eqz();
                            frame.push(local6);
                            frame.push(local8);
                            frame.i32_lt_u();
                            frame.i32_or();
                            arg1 = frame.peek();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.push(local0);
                            frame.push(local6);
                            frame.push(local8);
                            frame.i32_sub();
                            local2 = frame.peek();
                            frame.i32_store(2, 8);
                            frame.push(local1);
                            frame.i32_const(0x3fffffff);
                            frame.i32_gt_u();
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_7;
                            }
                            block_label_12:
                            {
                              frame.push(local1);
                              if (frame.pop() != 0) {
                                frame.unwindTo(21, 0);
                                break block_label_12;
                              }
                              frame.push(local6);
                              frame.push(local8);
                              frame.i32_ne();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_1;
                              }
                              frame.unwindTo(0, 0);
                              break block_label_6;
                            }
                            frame.i32_const(0);
                            frame.push(local4);
                            frame.i32_const(7);
                            frame.i32_add();
                            frame.push(arg1);
                            frame.select();
                            local4 = frame.peek();
                            frame.i32_load(0, 0);
                            if (frame.pop() != 0) {
                              frame.unwindTo(0, 0);
                              break block_label_1;
                            }
                            frame.push(local4);
                            frame.i32_const(4);
                            frame.i32_add();
                            local4 = frame.pop();
                            frame.i32_const(0);
                            arg1 = frame.pop();

                            loop_label_12:
                            for (;;) {
                              frame.push(local1);
                              frame.i32_eqz();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_6;
                              }
                              frame.push(arg1);
                              frame.push(local0);
                              frame.i32_const(8);
                              frame.i32_add();
                              frame.push(local4);
                              frame.push(local1);
                              frame.i32_const(1);
                              frame.i32_eq();
                              frame.select();
                              frame.i32_load(0, 0);
                              local8 = frame.peek();
                              frame.i32_gt_u();
                              if (frame.pop() != 0) {
                                frame.unwindTo(0, 0);
                                break block_label_1;
                              }
                              frame.push(local1);
                              frame.i32_const(-1);
                              frame.i32_add();
                              local1 = frame.pop();
                              frame.push(local4);
                              frame.i32_const(4);
                              frame.i32_add();
                              local4 = frame.pop();
                              frame.push(local8);
                              arg1 = frame.pop();
                              frame.push(local8);
                              frame.push(local2);
                              frame.i32_le_u();
                              if (frame.pop() != 0) {
                                continue loop_label_12;
                              }
                              frame.unwindTo(0, 0);
                              break block_label_1;

                              break;
                            }
                          }
                          frame.push(local2);
                          frame.i32_const(1);
                          frame.i32_add();
                          local2 = frame.pop();
                          frame.push(local24);
                          frame.i32_const(1);
                          frame.i32_add();
                          local24 = frame.pop();
                          frame.push(local5);
                          frame.i32_const(7);
                          frame.i32_add();
                          local5 = frame.pop();
                          frame.push(local8);
                          frame.i32_const(7);
                          frame.i32_shr_u();
                          local8 = frame.pop();
                          frame.i32_const(5);
                          local7 = frame.pop();
                          frame.push(local4);
                          frame.i32_const(1);
                          frame.i32_add();
                          local4 = frame.peek();
                          frame.i32_const(5);
                          frame.i32_ne();
                          if (frame.pop() != 0) {
                            continue loop_label_10;
                          }
                          frame.unwindTo(0, 0);
                          break block_label_1;

                          break;
                        }
                      }
                      frame.push(local19);
                      frame.i32_const(1);
                      frame.i32_add();
                      local19 = frame.pop();
                      frame.push(local8);
                      frame.i32_const(7);
                      frame.i32_add();
                      local8 = frame.pop();
                      frame.push(local22);
                      frame.i32_const(-1);
                      frame.i32_add();
                      local22 = frame.pop();
                      frame.push(local20);
                      frame.i32_const(7);
                      frame.i32_shr_u();
                      local20 = frame.pop();
                      frame.i32_const(5);
                      local7 = frame.pop();
                      frame.push(local17);
                      local6 = frame.pop();
                      frame.push(local17);
                      frame.i32_const(5);
                      frame.i32_ne();
                      if (frame.pop() != 0) {
                        continue loop_label_8;
                      }
                      frame.unwindTo(0, 0);
                      break block_label_2;

                      break;
                    }
                  }
                  throw Trap('unreachable');
                  throw Trap('unreachable');
                }
                frame.push(arg0);
                frame.push(local21);
                frame.i32_store16(0, 5);
                frame.push(arg0);
                frame.push(local18);
                frame.i32_store(2, 28);
                frame.push(arg0);
                frame.push(local20);
                frame.i32_store(2, 24);
                frame.push(arg0);
                frame.push(local3);
                frame.i32_store(2, 20);
                frame.push(arg0);
                frame.push(local23);
                frame.i32_store(2, 16);
                frame.push(arg0);
                frame.push(local11);
                frame.i32_store(2, 12);
                frame.push(arg0);
                frame.push(local14);
                frame.i32_store(2, 8);
                frame.push(arg0);
                frame.push(local6);
                frame.i32_store(2, 36);
                frame.push(arg0);
                frame.push(local5);
                frame.i32_store(2, 32);
                frame.push(arg0);
                frame.push(local11);
                frame.i32_store8(0, 4);
                frame.push(arg0);
                frame.push(local10);
                frame.i32_store(2, 0);
                frame.push(arg0);
                frame.i32_const(7);
                frame.i32_add();
                frame.push(local21);
                frame.i32_const(16);
                frame.i32_shr_u();
                frame.i32_store8(0, 0);
                frame.unwindTo(0, 0);
                break block_label_0;
              }
              frame.push(local0);
              frame.i32_const(8);
              frame.i32_add();
              {
                var t0 = frame.pop();
                _func109(t0);
              }
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.i32_const(13);
            local7 = frame.pop();
            frame.push(local12);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_1;
            }
            frame.i32_const(0xf5144);
            frame.push(local14);
            {
              var t1 = frame.pop();
              var t0 = frame.pop();
              _func019(t0, t1);
            }
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.i32_const(4);
          local7 = frame.pop();
        }
        frame.push(local12);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0xf5144);
        frame.push(local14);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 0);
      frame.push(arg0);
      frame.push(local7);
      frame.i32_store8(0, 4);
    }
    frame.push(local0);
    frame.i32_const(80);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func115(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_load(2, 8);
        local1 = frame.peek();
        frame.i32_const(8);
        frame.push(local1);
        frame.i32_const(8);
        frame.i32_gt_u();
        local2 = frame.peek();
        frame.select();
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.push(local1);
        frame.push(local2);
        frame.select();
        local1 = frame.peek();
        frame.i32_sub();
        frame.push(arg2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(-0x7fffffff);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(local1);
        frame.push(arg2);
        frame.i32_add();
        local2 = frame.peek();
        frame.push(local1);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.i32_const(0);
        arg2 = frame.pop();
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0);
      arg2 = frame.pop();
      frame.i32_const(0);
      frame.i32_const(-1);
      frame.push(local2);
      frame.i32_const(-1);
      frame.i32_add();
      frame.i32_clz();
      frame.i32_shr_u();
      frame.push(local2);
      frame.i32_const(2);
      frame.i32_lt_u();
      frame.select();
      frame.i32_const(1);
      frame.i32_add();
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.push(arg1);
      frame.push(local1);
      {
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func116(t0, t1, t2);
      }
      frame.push(local0);
      frame.i32_load(2, 12);
      arg2 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 8);
      local1 = frame.pop();
    }
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func116(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.push(arg1);
            frame.i32_load(2, 8);
            local0 = frame.peek();
            frame.push(local0);
            frame.i32_const(8);
            frame.i32_gt_u();
            local1 = frame.peek();
            frame.select();
            local2 = frame.peek();
            frame.push(arg2);
            frame.i32_gt_u();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(8);
            frame.push(local1);
            frame.select();
            local3 = frame.pop();
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.push(arg1);
            frame.push(local1);
            frame.select();
            local4 = frame.pop();
            block_label_4:
            {
              block_label_5:
              {
                frame.push(arg2);
                frame.i32_const(9);
                frame.i32_lt_u();
                if (frame.pop() != 0) {
                  frame.unwindTo(1, 0);
                  break block_label_5;
                }
                frame.i32_const(-0x7fffffff);
                local1 = frame.pop();
                frame.push(local3);
                frame.push(arg2);
                frame.i32_ne();
                if (frame.pop() != 0) {
                  frame.unwindTo(1, 0);
                  break block_label_4;
                }
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.i32_const(-0x7fffffff);
              local1 = frame.pop();
              frame.push(local0);
              frame.i32_const(9);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.push(arg1);
              frame.push(local4);
              frame.push(local2);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func002(t0, t1, t2));
              }
              frame.push(local2);
              frame.i32_store(2, 8);
              frame.push(local3);
              frame.i32_const(-1);
              frame.i32_le_s();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_3;
              }
              frame.i32_const(0xf5144);
              frame.push(local4);
              {
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func019(t0, t1);
              }
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            block_label_4:
            {
              frame.push(arg2);
              frame.i32_const(0);
              frame.i32_ge_s();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.i32_const(0);
              local1 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_0;
            }
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  frame.push(local0);
                  frame.i32_const(9);
                  frame.i32_lt_u();
                  if (frame.pop() != 0) {
                    frame.unwindTo(1, 0);
                    break block_label_6;
                  }
                  frame.push(local3);
                  frame.i32_const(-1);
                  frame.i32_gt_s();
                  if (frame.pop() != 0) {
                    frame.unwindTo(1, 0);
                    break block_label_5;
                  }
                  frame.i32_const(0);
                  local1 = frame.pop();
                  frame.push(local3);
                  arg2 = frame.pop();
                  frame.unwindTo(0, 0);
                  break block_label_0;
                }
                frame.i32_const(0xf5144);
                frame.push(arg2);
                {
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func020(t0, t1));
                }
                local0 = frame.peek();
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  frame.unwindTo(1, 0);
                  break block_label_4;
                }
                frame.push(local0);
                frame.push(local4);
                frame.push(local2);
                {
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(_func002(t0, t1, t2));
                }
                frame.drop();
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(local4);
              frame.push(local3);
              frame.i32_const(1);
              frame.push(arg2);
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(_func009(t0, t1, t2, t3));
              }
              local0 = frame.peek();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
            }
            frame.i32_const(1);
            local1 = frame.pop();
            frame.unwindTo(0, 0);
            break block_label_0;
          }
          throw Trap('unreachable');
          throw Trap('unreachable');
        }
        frame.push(arg1);
        frame.push(arg2);
        frame.i32_store(2, 8);
        frame.push(arg1);
        frame.push(local2);
        frame.i32_store(2, 4);
        frame.push(arg1);
        frame.push(local0);
        frame.i32_store(2, 0);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
    }
    frame.push(arg0);
    frame.push(local1);
    frame.i32_store(2, 4);
    frame.push(arg0);
    frame.push(arg2);
    frame.i32_store(2, 0);
  }

  void _func117(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(arg0);
    frame.push(arg3);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func115(t0, t1, t2);
    }
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.push(local0);
          frame.i32_load(2, 12);
          local1 = frame.peek();
          frame.i32_const(-0x7fffffff);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_2;
          }
          frame.push(local1);
          frame.i32_eqz();
          if (frame.pop() != 0) {
            frame.unwindTo(3, 0);
            break block_label_1;
          }
          frame.push(local0);
          frame.i32_load(2, 8);
          frame.push(local1);
          {
            var t1 = frame.pop();
            var t0 = frame.pop();
            _func030(t0, t1);
          }
          throw Trap('unreachable');
        }
        frame.push(arg0);
        frame.i32_load(2, 4);
        frame.push(arg0);
        frame.i32_load(2, 8);
        local1 = frame.peek();
        frame.push(local1);
        frame.i32_const(8);
        frame.i32_gt_u();
        local2 = frame.peek();
        frame.select();
        local1 = frame.peek();
        frame.push(arg1);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(3, 0);
          break block_label_0;
        }
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg0);
    frame.push(local2);
    frame.select();
    frame.push(arg1);
    frame.i32_add();
    local2 = frame.peek();
    frame.push(arg3);
    frame.i32_add();
    frame.push(local2);
    frame.push(local1);
    frame.push(arg1);
    frame.i32_sub();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func004(t0, t1, t2));
    }
    frame.drop();
    frame.push(local2);
    frame.push(arg2);
    frame.push(arg3);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func002(t0, t1, t2));
    }
    frame.drop();
    frame.push(arg0);
    frame.i32_const(4);
    frame.i32_const(8);
    frame.push(arg0);
    frame.i32_load(2, 8);
    frame.i32_const(8);
    frame.i32_gt_u();
    frame.select();
    frame.i32_add();
    frame.push(local1);
    frame.push(arg3);
    frame.i32_add();
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func118(i32 arg0, i32 arg1, i32 arg2) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.i32_const(0);
    local1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_add();
    frame.i32_const(0);
    frame.i32_const(39);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func000(t0, t1, t2));
    }
    frame.drop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              frame.push(arg1);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(2, 0);
                break block_label_4;
              }
              frame.i32_const(0);
              local2 = frame.pop();
              frame.unwindTo(2, 0);
              break block_label_3;
            }
            frame.push(local0);
            frame.i32_const(55);
            frame.i32_add();
            frame.i32_const(0);
            frame.i32_store(0, 0);
            frame.push(local0);
            frame.i64_const(0);
            frame.i64_store(3, 48);
            frame.unwindTo(2, 0);
            break block_label_2;
          }

          loop_label_3:
          for (;;) {
            frame.push(local2);
            frame.i32_const(-0x8000);
            frame.i32_add();
            local3 = frame.pop();
            frame.i32_const(0);
            local4 = frame.pop();
            frame.push(arg1);
            local5 = frame.pop();
            block_label_4:
            {
              loop_label_5:
              for (;;) {
                frame.push(local5);
                frame.i32_const(10);
                frame.i32_div_u();
                arg1 = frame.pop();
                frame.push(local3);
                frame.push(local4);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_1;
                }
                frame.push(local5);
                frame.push(arg1);
                frame.i32_const(10);
                frame.i32_mul();
                frame.i32_sub();
                local6 = frame.pop();
                block_label_6:
                {
                  frame.push(local4);
                  if (frame.pop() != 0) {
                    frame.unwindTo(3, 0);
                    break block_label_6;
                  }
                  frame.push(local6);
                  frame.i32_const(255);
                  frame.i32_and();
                  frame.i32_eqz();
                  if (frame.pop() != 0) {
                    frame.unwindTo(2, 0);
                    break block_label_4;
                  }
                }
                frame.push(local4);
                frame.i32_const(-39);
                frame.i32_eq();
                if (frame.pop() != 0) {
                  frame.unwindTo(2, 0);
                  break block_label_1;
                }
                frame.push(local0);
                frame.i32_const(1);
                frame.i32_add();
                frame.push(local4);
                frame.i32_add();
                frame.i32_const(38);
                frame.i32_add();
                frame.push(local6);
                frame.i32_store8(0, 0);
                frame.push(local4);
                frame.i32_const(-1);
                frame.i32_add();
                local4 = frame.pop();
                frame.push(local5);
                frame.i32_const(10);
                frame.i32_lt_u();
                local6 = frame.pop();
                frame.push(arg1);
                local5 = frame.pop();
                frame.push(local6);
                frame.i32_eqz();
                if (frame.pop() != 0) {
                  continue loop_label_5;
                }
                break;
              }
              frame.push(local0);
              frame.i32_const(55);
              frame.i32_add();
              frame.i32_const(0);
              frame.i32_store(0, 0);
              frame.push(local0);
              frame.i64_const(0);
              frame.i64_store(3, 48);
              frame.push(local0);
              frame.push(local4);
              frame.i32_const(-1);
              frame.i32_xor();
              frame.push(local1);
              frame.i32_add();
              local5 = frame.peek();
              frame.i32_store16(1, 54);
              frame.push(local0);
              frame.push(local5);
              frame.i32_store16(1, 52);
              frame.push(local0);
              frame.i32_const(40);
              frame.i32_add();
              frame.i32_const(0);
              frame.push(local0);
              frame.i32_const(1);
              frame.i32_add();
              frame.push(local4);
              frame.i32_add();
              frame.i32_const(39);
              frame.i32_add();
              frame.i32_const(0);
              frame.push(local4);
              frame.i32_sub();
              {
                var t3 = frame.pop();
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func117(t0, t1, t2, t3);
              }
              frame.unwindTo(2, 0);
              break block_label_2;
            }
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local1 = frame.pop();
            frame.push(local2);
            frame.push(local4);
            frame.i32_sub();
            frame.i32_const(1);
            frame.i32_add();
            local2 = frame.pop();
            frame.push(local5);
            frame.i32_const(10);
            frame.i32_ge_u();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
          frame.push(local0);
          frame.i32_const(55);
          frame.i32_add();
          frame.i32_const(0);
          frame.i32_store(0, 0);
          frame.push(local0);
          frame.i64_const(0);
          frame.i64_store(3, 48);
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i64_load(3, 40);
        frame.i64_store(2, 0);
        frame.push(arg0);
        frame.i32_const(16);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_const(8);
        frame.i32_add();
        frame.i64_load(3, 0);
        frame.i64_store(2, 0);
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(3);
      frame.i32_store8(0, 18);
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 0);
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func119(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          frame.i32_const(-1);
          frame.push(arg1);
          frame.i32_const(0xffff);
          frame.i32_and();
          frame.i32_const(0);
          frame.i32_ne();
          frame.push(arg1);
          frame.i32_const(16);
          frame.i32_shl();
          frame.i32_const(16);
          frame.i32_shr_s();
          local0 = frame.peek();
          frame.i32_const(0);
          frame.i32_lt_s();
          frame.select();
          frame.i32_const(255);
          frame.i32_and();
          var t0 = frame.pop();
          switch (t0) {
            case 0:
              frame.unwindTo(0, 0);
              break block_label_0;

            case 1:
              frame.unwindTo(0, 0);
              break block_label_2;

            default:
              frame.unwindTo(0, 0);
              break block_label_1;
          }
        }
        block_label_2:
        {
          frame.push(arg0);
          frame.i32_load16_s(1, 14);
          frame.push(local0);
          frame.i32_add();
          local0 = frame.peek();
          frame.i32_const(16);
          frame.i32_shl();
          frame.i32_const(16);
          frame.i32_shr_s();
          frame.push(local0);
          frame.i32_eq();
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_2;
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store(2, 12);
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store16(1, 16);
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_const(8);
            frame.push(arg0);
            frame.i32_load(2, 8);
            frame.i32_const(8);
            frame.i32_gt_u();
            local0 = frame.peek();
            frame.select();
            frame.i32_add();
            frame.i32_load(2, 0);
            frame.i32_eqz();
            if (frame.pop() != 0) {
              frame.unwindTo(1, 0);
              break block_label_3;
            }
            frame.push(arg0);
            frame.i32_const(4);
            frame.i32_add();
            frame.push(arg0);
            frame.i32_const(8);
            frame.i32_add();
            frame.push(local0);
            frame.select();
            frame.i32_const(0);
            frame.i32_store(2, 0);
          }
          frame.push(arg0);
          frame.i32_const(0);
          frame.i32_store8(0, 18);
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store16(1, 14);
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load16_u(1, 16);
        frame.push(arg1);
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(31);
        frame.i32_shr_s();
        frame.push(local0);
        frame.i32_and();
        frame.i32_store16(1, 16);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_load16_s(1, 16);
        frame.push(arg1);
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        frame.i32_add();
        local0 = frame.peek();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        frame.push(local0);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.push(local0);
        frame.i32_store16(1, 16);
        frame.push(arg0);
        frame.push(arg0);
        frame.i32_load16_u(1, 14);
        frame.push(arg1);
        frame.i32_add();
        frame.i32_const(16);
        frame.i32_shl();
        frame.i32_const(16);
        frame.i32_shr_s();
        local0 = frame.peek();
        frame.i32_const(0);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_gt_s();
        frame.select();
        frame.i32_store16(1, 14);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 12);
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store16(1, 16);
      block_label_1:
      {
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_const(8);
        frame.push(arg0);
        frame.i32_load(2, 8);
        frame.i32_const(8);
        frame.i32_gt_u();
        local0 = frame.peek();
        frame.select();
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(4);
        frame.i32_add();
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.push(local0);
        frame.select();
        frame.i32_const(0);
        frame.i32_store(2, 0);
      }
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store8(0, 18);
    }
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 4);
      frame.push(arg0);
      frame.i32_load(2, 8);
      local0 = frame.peek();
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_gt_u();
      frame.select();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
    }
    frame.push(arg0);
    frame.push(arg0);
    frame.i32_load16_u(1, 12);
    frame.push(arg1);
    frame.i32_add();
    frame.i32_store16(1, 12);
  }

  void _func120(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(32);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(-0x80000000);
    frame.push(arg1);
    frame.push(arg1);
    frame.i32_const(31);
    frame.i32_shr_s();
    local1 = frame.peek();
    frame.i32_xor();
    frame.push(local1);
    frame.i32_sub();
    frame.push(arg1);
    frame.i32_const(-0x80000000);
    frame.i32_eq();
    frame.select();
    frame.i32_const(0);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func118(t0, t1, t2);
    }
    block_label_0:
    {
      frame.push(local0);
      frame.i32_load8_u(0, 26);
      frame.i32_const(3);
      frame.i32_ne();
      if (frame.pop() != 0) {
        frame.unwindTo(3, 0);
        break block_label_0;
      }
      throw Trap('unreachable');
      throw Trap('unreachable');
    }
    frame.push(arg0);
    frame.push(local0);
    frame.i64_load(3, 8);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.i32_const(16);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_load(2, 0);
    frame.i32_store(2, 0);
    frame.push(arg0);
    frame.i32_const(8);
    frame.i32_add();
    frame.push(local0);
    frame.i32_const(8);
    frame.i32_add();
    frame.i32_const(8);
    frame.i32_add();
    frame.i64_load(3, 0);
    frame.i64_store(2, 0);
    frame.push(arg0);
    frame.push(arg1);
    frame.i32_const(31);
    frame.i32_shr_u();
    frame.i32_store8(0, 18);
    frame.push(local0);
    frame.i32_const(32);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func121(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func101(t0, t1));
    }
    return frame.pop();
  }

  i32 _func122(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func101(t0, t1));
    }
    return frame.pop();
  }

  i32 _func123(i32 arg0, i32 arg1, i32 arg2, i32 arg3) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.i32_const(0);
    local0 = frame.pop();
    block_label_0:
    {
      frame.push(arg3);
      frame.i32_load8_u(0, 0);
      local1 = frame.peek();
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local1);
      frame.push(arg1);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.i32_gt_s();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg2);
            frame.i32_const(255);
            frame.i32_and();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(2, 0);
                break block_label_3;

              case 1:
                frame.unwindTo(0, 0);
                break block_label_0;

              case 2:
                frame.unwindTo(2, 0);
                break block_label_3;

              case 3:
                frame.unwindTo(2, 0);
                break block_label_2;

              default:
                frame.unwindTo(2, 0);
                break block_label_3;
            }
          }
          frame.push(arg3);
          frame.i32_load8_u(0, 2);
          arg2 = frame.peek();
          frame.i32_const(1);
          frame.push(arg2);
          frame.i32_const(1);
          frame.i32_gt_u();
          frame.select();
          arg2 = frame.pop();
          frame.unwindTo(2, 0);
          break block_label_1;
        }
        frame.push(arg3);
        frame.i32_load8_u(0, 2);
        arg2 = frame.peek();
        frame.i32_const(2);
        frame.push(arg2);
        frame.i32_const(2);
        frame.i32_gt_u();
        frame.select();
        arg2 = frame.pop();
      }
      frame.push(local1);
      frame.push(arg2);
      frame.i32_add();
      frame.i32_const(-1);
      frame.i32_add();
      frame.push(arg0);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.i32_gt_s();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg1);
      frame.push(local1);
      frame.i32_sub();
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_const(16);
      frame.i32_shr_s();
      frame.push(arg3);
      frame.i32_load8_u(0, 1);
      arg3 = frame.peek();
      frame.push(local1);
      frame.push(arg3);
      frame.select();
      frame.i32_rem_s();
      frame.i32_eqz();
      local0 = frame.pop();
    }
    frame.push(local0);
    return frame.pop();
  }

  i32 _func124(i32 arg0, i32 arg1) {
    i32 local0 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(48);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.i32_store(2, 12);
    frame.push(local0);
    frame.i32_const(18);
    frame.i32_store(2, 20);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(12);
    frame.i32_add();
    frame.i32_store(2, 16);
    frame.push(arg1);
    frame.i32_load(2, 0);
    arg0 = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 4);
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 44);
    frame.push(local0);
    frame.i32_const(1);
    frame.i32_store(2, 36);
    frame.push(local0);
    frame.i32_const(0xf4a1c);
    frame.i32_store(2, 32);
    frame.push(local0);
    frame.i32_const(0);
    frame.i32_store(2, 24);
    frame.push(local0);
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    frame.i32_store(2, 40);
    frame.push(arg0);
    frame.push(arg1);
    frame.push(local0);
    frame.i32_const(24);
    frame.i32_add();
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func038(t0, t1, t2));
    }
    arg1 = frame.pop();
    frame.push(local0);
    frame.i32_const(48);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    return frame.pop();
  }

  i32 _func125(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg1);
    frame.i32_const(0xf4258);
    frame.i32_const(45);
    {
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func040(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func128(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(0);
    return frame.pop();
  }

  void _func129(i32 arg0) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 4);
    frame.push(arg0);
    frame.i32_load(2, 8);
    frame.i32_add();
    frame.i32_const(0);
    frame.i32_store8(0, 0);
  }

  i32 _func131(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 4);
      local1 = frame.peek();
      frame.i32_store(2, 4);
      frame.push(local0);
      frame.push(arg0);
      frame.i32_load(2, 12);
      local2 = frame.peek();
      frame.i32_store(2, 0);
      block_label_1:
      {
        frame.push(local2);
        frame.push(arg1);
        frame.i32_ge_u();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(0);
        frame.push(arg1);
        {
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func031(t0, t1, t2);
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        local1 = frame.pop();
        frame.push(local0);
        frame.i32_load(2, 0);
        local2 = frame.pop();
      }
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local2);
      frame.i32_store(2, 12);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      globals.__stack_pointer = frame.pop();
      frame.i32_const(1);
      return frame.pop();
    }
    throw Trap('unreachable');
    throw Trap('unreachable');
    return frame.pop();
  }

  void _func132(i32 arg0) {
    final frame = Frame(this);
  }

  void _func138(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(local0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      _func139(t0, t1);
    }
    block_label_0:
    {
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.i32_const(2);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load8_u(0, 4);
        arg1 = frame.pop();
        frame.push(arg0);
        frame.i32_const(2);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.push(arg1);
        frame.i32_store8(0, 4);
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_load(2, 12);
      local2 = frame.pop();
      frame.push(local0);
      frame.i32_load(2, 8);
      local3 = frame.pop();
      frame.push(local0);
      frame.i32_load8_u(0, 4);
      local4 = frame.pop();
      frame.push(local0);
      frame.i32_load16_u(0, 5);
      local5 = frame.pop();
      frame.push(local0);
      frame.i32_load8_u(0, 7);
      local6 = frame.pop();
      frame.push(local0);
      frame.push(arg1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func139(t0, t1);
      }
      frame.push(local5);
      frame.push(local6);
      frame.i32_const(16);
      frame.i32_shl();
      frame.i32_or();
      arg1 = frame.pop();
      block_label_1:
      {
        frame.push(local0);
        frame.i32_load(2, 0);
        local5 = frame.peek();
        frame.i32_const(2);
        frame.i32_ne();
        if (frame.pop() != 0) {
          frame.unwindTo(4, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_load8_u(0, 4);
        local5 = frame.pop();
        frame.push(arg0);
        frame.i32_const(2);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.push(local5);
        frame.i32_store8(0, 4);
        frame.push(local1);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_0;
        }
        frame.push(arg1);
        frame.i32_const(8);
        frame.i32_shl();
        frame.push(local4);
        frame.i32_or();
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(2, 0);
          break block_label_0;
        }
        frame.i32_const(0xf5144);
        frame.push(local3);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
        frame.unwindTo(2, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i64_load(0, 5);
      frame.i64_store(0, 21);
      frame.push(arg0);
      frame.i32_const(28);
      frame.i32_add();
      frame.push(local0);
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_load(0, 0);
      frame.i32_store(0, 0);
      frame.push(arg0);
      frame.push(local0);
      frame.i32_load8_u(0, 4);
      frame.i32_store8(0, 20);
      frame.push(arg0);
      frame.push(local5);
      frame.i32_store(2, 16);
      frame.push(arg0);
      frame.push(local2);
      frame.i32_store(2, 12);
      frame.push(arg0);
      frame.push(local3);
      frame.i32_store(2, 8);
      frame.push(arg0);
      frame.push(arg1);
      frame.i32_const(8);
      frame.i32_shl();
      frame.push(local4);
      frame.i32_or();
      frame.i32_store(2, 4);
      frame.push(arg0);
      frame.push(local1);
      frame.i32_store(2, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func139(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;
    i32 local2 = 0;
    i32 local3 = 0;
    i32 local4 = 0;
    i32 local5 = 0;
    i32 local6 = 0;
    i32 local7 = 0;
    i32 local8 = 0;
    i32 local9 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(16);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg1);
    frame.i32_load(2, 0);
    local1 = frame.peek();
    frame.i32_const(-1);
    frame.i32_xor();
    frame.push(arg1);
    frame.i32_load(2, 4);
    local2 = frame.peek();
    frame.i32_add();
    local3 = frame.pop();
    frame.i32_const(0);
    local4 = frame.pop();
    frame.i32_const(0);
    local5 = frame.pop();
    frame.i32_const(-1);
    local6 = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          loop_label_3:
          for (;;) {
            frame.i32_const(4);
            local7 = frame.pop();
            frame.push(local1);
            frame.push(local2);
            frame.i32_eq();
            if (frame.pop() != 0) {
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(arg1);
            frame.push(local1);
            frame.i32_const(1);
            frame.i32_add();
            local8 = frame.peek();
            frame.i32_store(2, 0);
            frame.push(local1);
            frame.i32_load8_s(0, 0);
            local7 = frame.peek();
            frame.i32_const(127);
            frame.i32_and();
            local9 = frame.peek();
            frame.push(local4);
            frame.i32_shl();
            frame.push(local5);
            frame.i32_or();
            local5 = frame.pop();
            block_label_4:
            {
              frame.push(local7);
              frame.i32_const(0);
              frame.i32_lt_s();
              if (frame.pop() != 0) {
                frame.unwindTo(1, 0);
                break block_label_4;
              }
              frame.i32_const(5);
              local7 = frame.pop();
              frame.push(local6);
              frame.push(local9);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.i32_const(4);
              local7 = frame.pop();
              frame.push(local3);
              frame.push(local5);
              frame.i32_lt_u();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_2;
              }
              frame.push(arg1);
              frame.push(local1);
              frame.push(local5);
              frame.i32_add();
              frame.i32_const(1);
              frame.i32_add();
              frame.i32_store(2, 0);
              frame.push(local0);
              frame.push(local1);
              frame.i32_const(1);
              frame.i32_add();
              frame.push(local5);
              {
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                _func042(t0, t1, t2);
              }
              frame.push(local0);
              frame.i32_load(2, 0);
              frame.i32_eqz();
              if (frame.pop() != 0) {
                frame.unwindTo(0, 0);
                break block_label_1;
              }
              frame.i32_const(8);
              local7 = frame.pop();
              frame.unwindTo(0, 0);
              break block_label_2;
            }
            frame.push(local3);
            frame.i32_const(-1);
            frame.i32_add();
            local3 = frame.pop();
            frame.push(local6);
            frame.i32_const(7);
            frame.i32_shr_u();
            local6 = frame.pop();
            frame.push(local8);
            local1 = frame.pop();
            frame.push(local4);
            frame.i32_const(7);
            frame.i32_add();
            local4 = frame.peek();
            frame.i32_const(35);
            frame.i32_ne();
            if (frame.pop() != 0) {
              continue loop_label_3;
            }
            break;
          }
          frame.i32_const(5);
          local7 = frame.pop();
        }
        frame.push(arg0);
        frame.i32_const(2);
        frame.i32_store(2, 0);
        frame.push(arg0);
        frame.push(local7);
        frame.i32_store8(0, 4);
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.push(local0);
      frame.i64_load(2, 4);
      frame.i64_store(2, 4);
      frame.push(arg0);
      frame.i32_const(0);
      frame.i32_store(2, 0);
    }
    frame.push(local0);
    frame.i32_const(16);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  i32 _func140(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.push(arg0);
    frame.i32_load(2, 0);
    frame.push(arg1);
    {
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(_func088(t0, t1));
    }
    return frame.pop();
  }

  void _func141(i32 arg0) {
    final frame = Frame(this);
  }

  void _func142(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            frame.push(arg0);
            frame.i32_load8_u(0, 4);
            local0 = frame.peek();
            frame.i32_const(-3);
            frame.i32_add();
            frame.i32_const(1);
            frame.push(local0);
            frame.i32_const(2);
            frame.i32_gt_u();
            frame.select();
            frame.i32_const(255);
            frame.i32_and();
            var t0 = frame.pop();
            switch (t0) {
              case 0:
                frame.unwindTo(0, 0);
                break block_label_0;

              case 1:
                frame.unwindTo(0, 0);
                break block_label_2;

              default:
                frame.unwindTo(0, 0);
                break block_label_3;
            }
          }
          frame.push(arg0);
          frame.i32_const(8);
          frame.i32_add();
          {
            var t0 = frame.pop();
            _func053(t0);
          }
          frame.push(arg0);
          frame.i32_load(2, 8);
          if (frame.pop() != 0) {
            frame.unwindTo(0, 0);
            break block_label_1;
          }
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.push(arg0);
        frame.i32_const(8);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
      }
      frame.i32_const(0xf5144);
      frame.push(arg0);
      frame.i32_load(2, 12);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
  }

  void _func143(i32 arg0) {
    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load(2, 40);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(arg0);
      frame.i32_const(40);
      frame.i32_add();
      {
        var t0 = frame.pop();
        _func098(t0);
      }
    }
  }

  void _func144(i32 arg0) {
    i32 local0 = 0;

    final frame = Frame(this);
    block_label_0:
    {
      frame.push(arg0);
      frame.i32_load8_u(0, 20);
      local0 = frame.peek();
      frame.i32_const(3);
      frame.i32_eq();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      block_label_1:
      {
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.push(arg0);
        frame.i32_const(24);
        frame.i32_add();
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(1, 0);
          break block_label_1;
        }
        frame.i32_const(0xf5144);
        frame.push(arg0);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_load(2, 0);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
      }
      frame.push(arg0);
      {
        var t0 = frame.pop();
        _func142(t0);
      }
    }
  }

  i32 _func145(i32 arg0) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    frame.i32_load8_u(0, 24);
    local1 = frame.pop();
    frame.push(local0);
    frame.push(arg0);
    frame.i32_store(2, 0);
    frame.push(local0);
    frame.push(local1);
    frame.i32_const(2);
    frame.i32_shl();
    frame.i32_const(0xf5104);
    frame.i32_add();
    frame.i32_load(2, 0);
    arg0 = frame.peek();
    frame.i32_store(2, 4);
    block_label_0:
    {
      frame.i32_const(0);
      frame.i32_load(2, 0xf530c);
      frame.i32_const(2);
      frame.i32_lt_u();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(23);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(6);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(12);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(20);
      frame.i32_add();
      frame.i32_const(3);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.i32_const(0xf4b48);
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 8);
      frame.push(local0);
      frame.i32_const(24);
      frame.i32_store(2, 36);
      frame.push(local0);
      frame.i32_const(30);
      frame.i32_store(2, 60);
      frame.push(local0);
      frame.i32_const(0xf4a8c);
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(56);
      frame.i32_add();
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(4);
      frame.i32_add();
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.i32_const(8);
      frame.i32_add();
      frame.i32_const(2);
      frame.i32_const(0xf4bac);
      frame.i32_const(0);
      frame.push(local0);
      {
        var t4 = frame.pop();
        var t3 = frame.pop();
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func094(t0, t1, t2, t3, t4);
      }
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
    frame.push(arg0);
    return frame.pop();
  }

  i32 _func146(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    block_label_0:
    {
      block_label_1:
      {
        block_label_2:
        {
          block_label_3:
          {
            block_label_4:
            {
              block_label_5:
              {
                block_label_6:
                {
                  block_label_7:
                  {
                    block_label_8:
                    {
                      block_label_9:
                      {
                        block_label_10:
                        {
                          block_label_11:
                          {
                            block_label_12:
                            {
                              block_label_13:
                              {
                                block_label_14:
                                {
                                  block_label_15:
                                  {
                                    block_label_16:
                                    {
                                      block_label_17:
                                      {
                                        block_label_18:
                                        {
                                          block_label_19:
                                          {
                                            block_label_20:
                                            {
                                              block_label_21:
                                              {
                                                block_label_22:
                                                {
                                                  block_label_23:
                                                  {
                                                    block_label_24:
                                                    {
                                                      block_label_25:
                                                      {
                                                        block_label_26:
                                                        {
                                                          block_label_27:
                                                          {
                                                            block_label_28:
                                                            {
                                                              block_label_29:
                                                              {
                                                                block_label_30:
                                                                {
                                                                  block_label_31:
                                                                  {
                                                                    block_label_32:
                                                                    {
                                                                      block_label_33:
                                                                      {
                                                                        block_label_34:
                                                                        {
                                                                          block_label_35:
                                                                          {
                                                                            block_label_36:
                                                                            {
                                                                              block_label_37:
                                                                              {
                                                                                block_label_38:
                                                                                {
                                                                                  block_label_39:
                                                                                  {
                                                                                    block_label_40:
                                                                                    {
                                                                                      block_label_41:
                                                                                      {
                                                                                        block_label_42:
                                                                                        {
                                                                                          block_label_43:
                                                                                          {
                                                                                            block_label_44:
                                                                                            {
                                                                                              block_label_45:
                                                                                              {
                                                                                                block_label_46:
                                                                                                {
                                                                                                  block_label_47:
                                                                                                  {
                                                                                                    block_label_48:
                                                                                                    {
                                                                                                      block_label_49:
                                                                                                      {
                                                                                                        block_label_50:
                                                                                                        {
                                                                                                          block_label_51:
                                                                                                          {
                                                                                                            block_label_52:
                                                                                                            {
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_load(2, 0);
                                                                                                                arg0 = frame.peek();
                                                                                                                frame.i32_const(0x6ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) {
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_53;
                                                                                                                }
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(511);
                                                                                                                  frame.i32_gt_s();
                                                                                                                  if (frame.pop() != 0) {
                                                                                                                    frame.unwindTo(1, 0);
                                                                                                                    break block_label_54;
                                                                                                                  }
                                                                                                                  block_label_55:
                                                                                                                  {
                                                                                                                    frame.push(arg0);
                                                                                                                    frame.i32_const(-256);
                                                                                                                    frame.i32_add();
                                                                                                                    var t0 = frame.pop();
                                                                                                                    switch (t0) {
                                                                                                                      case 0:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_49;

                                                                                                                      case 1:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_48;

                                                                                                                      case 2:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_47;

                                                                                                                      case 3:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_46;

                                                                                                                      case 4:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_45;

                                                                                                                      case 5:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_44;

                                                                                                                      case 6:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_43;

                                                                                                                      case 7:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_42;

                                                                                                                      case 8:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_41;

                                                                                                                      case 9:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_40;

                                                                                                                      case 10:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_39;

                                                                                                                      case 11:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_38;

                                                                                                                      case 12:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_37;

                                                                                                                      case 13:
                                                                                                                        frame.unwindTo(0, 0);
                                                                                                                        break block_label_36;

                                                                                                                      default:
                                                                                                                        frame.unwindTo(2, 0);
                                                                                                                        break block_label_55;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  frame.push(arg0);
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_52;

                                                                                                                    case 1:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_51;

                                                                                                                    case 2:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_50;

                                                                                                                    default:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_52;
                                                                                                                  }
                                                                                                                }
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(0x3ff);
                                                                                                                  frame.i32_gt_s();
                                                                                                                  if (frame.pop() != 0) {
                                                                                                                    frame.unwindTo(1, 0);
                                                                                                                    break block_label_54;
                                                                                                                  }
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(-512);
                                                                                                                  frame.i32_add();
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_35;

                                                                                                                    case 1:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_34;

                                                                                                                    case 2:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_33;

                                                                                                                    case 3:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_32;

                                                                                                                    default:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_31;
                                                                                                                  }
                                                                                                                }
                                                                                                                block_label_54:
                                                                                                                {
                                                                                                                  frame.push(arg0);
                                                                                                                  frame.i32_const(-0x400);
                                                                                                                  frame.i32_add();
                                                                                                                  var t0 = frame.pop();
                                                                                                                  switch (t0) {
                                                                                                                    case 0:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_30;

                                                                                                                    case 1:
                                                                                                                      frame.unwindTo(0, 0);
                                                                                                                      break block_label_29;

                                                                                                                    default:
                                                                                                                      frame.unwindTo(1, 0);
                                                                                                                      break block_label_54;
                                                                                                                  }
                                                                                                                }
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x500);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_28;

                                                                                                                  case 1:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_27;

                                                                                                                  default:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_26;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(0x7ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) {
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_53;
                                                                                                                }
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x700);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_25;

                                                                                                                  case 1:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_24;

                                                                                                                  case 2:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_23;

                                                                                                                  case 3:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_22;

                                                                                                                  case 4:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_21;

                                                                                                                  case 5:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_20;

                                                                                                                  case 6:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_19;

                                                                                                                  case 7:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_18;

                                                                                                                  case 8:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_17;

                                                                                                                  default:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_25;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(0x8ff);
                                                                                                                frame.i32_gt_s();
                                                                                                                if (frame.pop() != 0) {
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_53;
                                                                                                                }
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x800);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_16;

                                                                                                                  case 1:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_15;

                                                                                                                  case 2:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_14;

                                                                                                                  case 3:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_13;

                                                                                                                  case 4:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_12;

                                                                                                                  case 5:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_11;

                                                                                                                  case 6:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_10;

                                                                                                                  case 7:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_9;

                                                                                                                  case 8:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_8;

                                                                                                                  default:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_16;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0x900);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_7;

                                                                                                                  case 1:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_6;

                                                                                                                  case 2:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_5;

                                                                                                                  default:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_53;
                                                                                                                }
                                                                                                              }
                                                                                                              block_label_53:
                                                                                                              {
                                                                                                                frame.push(arg0);
                                                                                                                frame.i32_const(-0xa00);
                                                                                                                frame.i32_add();
                                                                                                                var t0 = frame.pop();
                                                                                                                switch (t0) {
                                                                                                                  case 0:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_4;

                                                                                                                  case 1:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_3;

                                                                                                                  case 2:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_2;

                                                                                                                  default:
                                                                                                                    frame.unwindTo(0, 0);
                                                                                                                    break block_label_53;
                                                                                                                }
                                                                                                              }
                                                                                                              frame.push(arg0);
                                                                                                              frame.i32_const(-0xb00);
                                                                                                              frame.i32_add();
                                                                                                              var t0 = frame.pop();
                                                                                                              switch (t0) {
                                                                                                                case 0:
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_1;

                                                                                                                case 1:
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_0;

                                                                                                                default:
                                                                                                                  frame.unwindTo(0, 0);
                                                                                                                  break block_label_1;
                                                                                                              }
                                                                                                            }
                                                                                                            frame.push(arg1);
                                                                                                            frame.i32_load(2, 0);
                                                                                                            frame.i32_const(0xf50e8);
                                                                                                            frame.i32_const(12);
                                                                                                            frame.push(arg1);
                                                                                                            frame.i32_load(2, 4);
                                                                                                            frame.i32_load(2, 12);
                                                                                                            {
                                                                                                              var func = table0[frame.pop()] as FunctionType0?;
                                                                                                              if (func == null) throw Trap('uninitialized element');
                                                                                                              var t2 = frame.pop();
                                                                                                              var t1 = frame.pop();
                                                                                                              var t0 = frame.pop();
                                                                                                              frame.push(func(t0, t1, t2));
                                                                                                            }
                                                                                                            return frame.pop();
                                                                                                          }
                                                                                                          frame.push(arg1);
                                                                                                          frame.i32_load(2,
                                                                                                              0);
                                                                                                          frame.i32_const(0xf50da);
                                                                                                          frame.i32_const(14);
                                                                                                          frame.push(arg1);
                                                                                                          frame.i32_load(2,
                                                                                                              4);
                                                                                                          frame.i32_load(2,
                                                                                                              12);
                                                                                                          {
                                                                                                            var func = table0[frame.pop()] as FunctionType0?;
                                                                                                            if (func == null)
                                                                                                              throw Trap('uninitialized element');
                                                                                                            var t2 = frame.pop();
                                                                                                            var t1 = frame.pop();
                                                                                                            var t0 = frame.pop();
                                                                                                            frame.push(func(t0, t1, t2));
                                                                                                          }
                                                                                                          return frame.pop();
                                                                                                        }
                                                                                                        frame.push(
                                                                                                            arg1);
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            0);
                                                                                                        frame.i32_const(
                                                                                                            0xf50ca);
                                                                                                        frame.i32_const(
                                                                                                            16);
                                                                                                        frame.push(
                                                                                                            arg1);
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            4);
                                                                                                        frame.i32_load(
                                                                                                            2,
                                                                                                            12);
                                                                                                        {
                                                                                                          var func =
                                                                                                              table0[frame.pop()] as FunctionType0?;
                                                                                                          if (func ==
                                                                                                              null)
                                                                                                            throw Trap('uninitialized element');
                                                                                                          var t2 =
                                                                                                              frame.pop();
                                                                                                          var t1 =
                                                                                                              frame.pop();
                                                                                                          var t0 =
                                                                                                              frame.pop();
                                                                                                          frame.push(func(
                                                                                                              t0,
                                                                                                              t1,
                                                                                                              t2));
                                                                                                        }
                                                                                                        return frame
                                                                                                            .pop();
                                                                                                      }
                                                                                                      frame.push(
                                                                                                          arg1);
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          0);
                                                                                                      frame.i32_const(
                                                                                                          0xf50b3);
                                                                                                      frame.i32_const(
                                                                                                          23);
                                                                                                      frame.push(
                                                                                                          arg1);
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          4);
                                                                                                      frame.i32_load(
                                                                                                          2,
                                                                                                          12);
                                                                                                      {
                                                                                                        var func =
                                                                                                            table0[frame.pop()] as FunctionType0?;
                                                                                                        if (func ==
                                                                                                            null)
                                                                                                          throw Trap('uninitialized element');
                                                                                                        var t2 =
                                                                                                            frame.pop();
                                                                                                        var t1 =
                                                                                                            frame.pop();
                                                                                                        var t0 =
                                                                                                            frame.pop();
                                                                                                        frame.push(func(
                                                                                                            t0,
                                                                                                            t1,
                                                                                                            t2));
                                                                                                      }
                                                                                                      return frame
                                                                                                          .pop();
                                                                                                    }
                                                                                                    frame.push(
                                                                                                        arg1);
                                                                                                    frame.i32_load(
                                                                                                        2, 0);
                                                                                                    frame.i32_const(
                                                                                                        0xf509c);
                                                                                                    frame.i32_const(
                                                                                                        23);
                                                                                                    frame.push(
                                                                                                        arg1);
                                                                                                    frame.i32_load(
                                                                                                        2, 4);
                                                                                                    frame.i32_load(
                                                                                                        2,
                                                                                                        12);
                                                                                                    {
                                                                                                      var func =
                                                                                                          table0[frame.pop()]
                                                                                                              as FunctionType0?;
                                                                                                      if (func ==
                                                                                                          null)
                                                                                                        throw Trap(
                                                                                                            'uninitialized element');
                                                                                                      var t2 =
                                                                                                          frame.pop();
                                                                                                      var t1 =
                                                                                                          frame.pop();
                                                                                                      var t0 =
                                                                                                          frame.pop();
                                                                                                      frame.push(func(
                                                                                                          t0,
                                                                                                          t1,
                                                                                                          t2));
                                                                                                    }
                                                                                                    return frame
                                                                                                        .pop();
                                                                                                  }
                                                                                                  frame.push(
                                                                                                      arg1);
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          0);
                                                                                                  frame.i32_const(
                                                                                                      0xf5086);
                                                                                                  frame
                                                                                                      .i32_const(
                                                                                                          22);
                                                                                                  frame.push(
                                                                                                      arg1);
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          4);
                                                                                                  frame
                                                                                                      .i32_load(
                                                                                                          2,
                                                                                                          12);
                                                                                                  {
                                                                                                    var func =
                                                                                                        table0[frame.pop()]
                                                                                                            as FunctionType0?;
                                                                                                    if (func ==
                                                                                                        null)
                                                                                                      throw Trap(
                                                                                                          'uninitialized element');
                                                                                                    var t2 = frame
                                                                                                        .pop();
                                                                                                    var t1 = frame
                                                                                                        .pop();
                                                                                                    var t0 = frame
                                                                                                        .pop();
                                                                                                    frame.push(func(
                                                                                                        t0,
                                                                                                        t1,
                                                                                                        t2));
                                                                                                  }
                                                                                                  return frame
                                                                                                      .pop();
                                                                                                }
                                                                                                frame.push(
                                                                                                    arg1);
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2, 0);
                                                                                                frame.i32_const(
                                                                                                    0xf5071);
                                                                                                frame
                                                                                                    .i32_const(
                                                                                                        21);
                                                                                                frame.push(
                                                                                                    arg1);
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2, 4);
                                                                                                frame
                                                                                                    .i32_load(
                                                                                                        2,
                                                                                                        12);
                                                                                                {
                                                                                                  var func = table0[
                                                                                                          frame.pop()]
                                                                                                      as FunctionType0?;
                                                                                                  if (func ==
                                                                                                      null)
                                                                                                    throw Trap(
                                                                                                        'uninitialized element');
                                                                                                  var t2 = frame
                                                                                                      .pop();
                                                                                                  var t1 = frame
                                                                                                      .pop();
                                                                                                  var t0 = frame
                                                                                                      .pop();
                                                                                                  frame.push(
                                                                                                      func(
                                                                                                          t0,
                                                                                                          t1,
                                                                                                          t2));
                                                                                                }
                                                                                                return frame
                                                                                                    .pop();
                                                                                              }
                                                                                              frame
                                                                                                  .push(arg1);
                                                                                              frame.i32_load(
                                                                                                  2, 0);
                                                                                              frame.i32_const(
                                                                                                  0xf505d);
                                                                                              frame.i32_const(
                                                                                                  20);
                                                                                              frame
                                                                                                  .push(arg1);
                                                                                              frame.i32_load(
                                                                                                  2, 4);
                                                                                              frame.i32_load(
                                                                                                  2, 12);
                                                                                              {
                                                                                                var func = table0[
                                                                                                        frame
                                                                                                            .pop()]
                                                                                                    as FunctionType0?;
                                                                                                if (func ==
                                                                                                    null)
                                                                                                  throw Trap(
                                                                                                      'uninitialized element');
                                                                                                var t2 = frame
                                                                                                    .pop();
                                                                                                var t1 = frame
                                                                                                    .pop();
                                                                                                var t0 = frame
                                                                                                    .pop();
                                                                                                frame.push(
                                                                                                    func(
                                                                                                        t0,
                                                                                                        t1,
                                                                                                        t2));
                                                                                              }
                                                                                              return frame
                                                                                                  .pop();
                                                                                            }
                                                                                            frame.push(arg1);
                                                                                            frame.i32_load(
                                                                                                2, 0);
                                                                                            frame.i32_const(
                                                                                                0xf5044);
                                                                                            frame.i32_const(
                                                                                                25);
                                                                                            frame.push(arg1);
                                                                                            frame.i32_load(
                                                                                                2, 4);
                                                                                            frame.i32_load(
                                                                                                2, 12);
                                                                                            {
                                                                                              var func = table0[
                                                                                                      frame
                                                                                                          .pop()]
                                                                                                  as FunctionType0?;
                                                                                              if (func ==
                                                                                                  null)
                                                                                                throw Trap(
                                                                                                    'uninitialized element');
                                                                                              var t2 =
                                                                                                  frame.pop();
                                                                                              var t1 =
                                                                                                  frame.pop();
                                                                                              var t0 =
                                                                                                  frame.pop();
                                                                                              frame.push(func(
                                                                                                  t0,
                                                                                                  t1,
                                                                                                  t2));
                                                                                            }
                                                                                            return frame
                                                                                                .pop();
                                                                                          }
                                                                                          frame.push(arg1);
                                                                                          frame.i32_load(
                                                                                              2, 0);
                                                                                          frame.i32_const(
                                                                                              0xf502b);
                                                                                          frame.i32_const(25);
                                                                                          frame.push(arg1);
                                                                                          frame.i32_load(
                                                                                              2, 4);
                                                                                          frame.i32_load(
                                                                                              2, 12);
                                                                                          {
                                                                                            var func = table0[
                                                                                                    frame
                                                                                                        .pop()]
                                                                                                as FunctionType0?;
                                                                                            if (func == null)
                                                                                              throw Trap(
                                                                                                  'uninitialized element');
                                                                                            var t2 =
                                                                                                frame.pop();
                                                                                            var t1 =
                                                                                                frame.pop();
                                                                                            var t0 =
                                                                                                frame.pop();
                                                                                            frame.push(func(
                                                                                                t0, t1, t2));
                                                                                          }
                                                                                          return frame.pop();
                                                                                        }
                                                                                        frame.push(arg1);
                                                                                        frame.i32_load(2, 0);
                                                                                        frame.i32_const(
                                                                                            0xf5014);
                                                                                        frame.i32_const(23);
                                                                                        frame.push(arg1);
                                                                                        frame.i32_load(2, 4);
                                                                                        frame.i32_load(2, 12);
                                                                                        {
                                                                                          var func = table0[
                                                                                                  frame.pop()]
                                                                                              as FunctionType0?;
                                                                                          if (func == null)
                                                                                            throw Trap(
                                                                                                'uninitialized element');
                                                                                          var t2 =
                                                                                              frame.pop();
                                                                                          var t1 =
                                                                                              frame.pop();
                                                                                          var t0 =
                                                                                              frame.pop();
                                                                                          frame.push(func(
                                                                                              t0, t1, t2));
                                                                                        }
                                                                                        return frame.pop();
                                                                                      }
                                                                                      frame.push(arg1);
                                                                                      frame.i32_load(2, 0);
                                                                                      frame
                                                                                          .i32_const(0xf4ffd);
                                                                                      frame.i32_const(23);
                                                                                      frame.push(arg1);
                                                                                      frame.i32_load(2, 4);
                                                                                      frame.i32_load(2, 12);
                                                                                      {
                                                                                        var func = table0[
                                                                                                frame.pop()]
                                                                                            as FunctionType0?;
                                                                                        if (func == null)
                                                                                          throw Trap(
                                                                                              'uninitialized element');
                                                                                        var t2 = frame.pop();
                                                                                        var t1 = frame.pop();
                                                                                        var t0 = frame.pop();
                                                                                        frame.push(
                                                                                            func(t0, t1, t2));
                                                                                      }
                                                                                      return frame.pop();
                                                                                    }
                                                                                    frame.push(arg1);
                                                                                    frame.i32_load(2, 0);
                                                                                    frame.i32_const(0xf4fe8);
                                                                                    frame.i32_const(21);
                                                                                    frame.push(arg1);
                                                                                    frame.i32_load(2, 4);
                                                                                    frame.i32_load(2, 12);
                                                                                    {
                                                                                      var func = table0[
                                                                                              frame.pop()]
                                                                                          as FunctionType0?;
                                                                                      if (func == null)
                                                                                        throw Trap(
                                                                                            'uninitialized element');
                                                                                      var t2 = frame.pop();
                                                                                      var t1 = frame.pop();
                                                                                      var t0 = frame.pop();
                                                                                      frame.push(
                                                                                          func(t0, t1, t2));
                                                                                    }
                                                                                    return frame.pop();
                                                                                  }
                                                                                  frame.push(arg1);
                                                                                  frame.i32_load(2, 0);
                                                                                  frame.i32_const(0xf4fd9);
                                                                                  frame.i32_const(15);
                                                                                  frame.push(arg1);
                                                                                  frame.i32_load(2, 4);
                                                                                  frame.i32_load(2, 12);
                                                                                  {
                                                                                    var func =
                                                                                        table0[frame.pop()]
                                                                                            as FunctionType0?;
                                                                                    if (func == null)
                                                                                      throw Trap(
                                                                                          'uninitialized element');
                                                                                    var t2 = frame.pop();
                                                                                    var t1 = frame.pop();
                                                                                    var t0 = frame.pop();
                                                                                    frame.push(
                                                                                        func(t0, t1, t2));
                                                                                  }
                                                                                  return frame.pop();
                                                                                }
                                                                                frame.push(arg1);
                                                                                frame.i32_load(2, 0);
                                                                                frame.i32_const(0xf4fce);
                                                                                frame.i32_const(11);
                                                                                frame.push(arg1);
                                                                                frame.i32_load(2, 4);
                                                                                frame.i32_load(2, 12);
                                                                                {
                                                                                  var func =
                                                                                      table0[frame.pop()]
                                                                                          as FunctionType0?;
                                                                                  if (func == null)
                                                                                    throw Trap(
                                                                                        'uninitialized element');
                                                                                  var t2 = frame.pop();
                                                                                  var t1 = frame.pop();
                                                                                  var t0 = frame.pop();
                                                                                  frame
                                                                                      .push(func(t0, t1, t2));
                                                                                }
                                                                                return frame.pop();
                                                                              }
                                                                              frame.push(arg1);
                                                                              frame.i32_load(2, 0);
                                                                              frame.i32_const(0xf4fae);
                                                                              frame.i32_const(32);
                                                                              frame.push(arg1);
                                                                              frame.i32_load(2, 4);
                                                                              frame.i32_load(2, 12);
                                                                              {
                                                                                var func = table0[frame.pop()]
                                                                                    as FunctionType0?;
                                                                                if (func == null)
                                                                                  throw Trap(
                                                                                      'uninitialized element');
                                                                                var t2 = frame.pop();
                                                                                var t1 = frame.pop();
                                                                                var t0 = frame.pop();
                                                                                frame.push(func(t0, t1, t2));
                                                                              }
                                                                              return frame.pop();
                                                                            }
                                                                            frame.push(arg1);
                                                                            frame.i32_load(2, 0);
                                                                            frame.i32_const(0xf4f92);
                                                                            frame.i32_const(28);
                                                                            frame.push(arg1);
                                                                            frame.i32_load(2, 4);
                                                                            frame.i32_load(2, 12);
                                                                            {
                                                                              var func = table0[frame.pop()]
                                                                                  as FunctionType0?;
                                                                              if (func == null)
                                                                                throw Trap(
                                                                                    'uninitialized element');
                                                                              var t2 = frame.pop();
                                                                              var t1 = frame.pop();
                                                                              var t0 = frame.pop();
                                                                              frame.push(func(t0, t1, t2));
                                                                            }
                                                                            return frame.pop();
                                                                          }
                                                                          frame.push(arg1);
                                                                          frame.i32_load(2, 0);
                                                                          frame.i32_const(0xf4f78);
                                                                          frame.i32_const(26);
                                                                          frame.push(arg1);
                                                                          frame.i32_load(2, 4);
                                                                          frame.i32_load(2, 12);
                                                                          {
                                                                            var func = table0[frame.pop()]
                                                                                as FunctionType0?;
                                                                            if (func == null)
                                                                              throw Trap(
                                                                                  'uninitialized element');
                                                                            var t2 = frame.pop();
                                                                            var t1 = frame.pop();
                                                                            var t0 = frame.pop();
                                                                            frame.push(func(t0, t1, t2));
                                                                          }
                                                                          return frame.pop();
                                                                        }
                                                                        frame.push(arg1);
                                                                        frame.i32_load(2, 0);
                                                                        frame.i32_const(0xf4f5f);
                                                                        frame.i32_const(25);
                                                                        frame.push(arg1);
                                                                        frame.i32_load(2, 4);
                                                                        frame.i32_load(2, 12);
                                                                        {
                                                                          var func = table0[frame.pop()]
                                                                              as FunctionType0?;
                                                                          if (func == null)
                                                                            throw Trap(
                                                                                'uninitialized element');
                                                                          var t2 = frame.pop();
                                                                          var t1 = frame.pop();
                                                                          var t0 = frame.pop();
                                                                          frame.push(func(t0, t1, t2));
                                                                        }
                                                                        return frame.pop();
                                                                      }
                                                                      frame.push(arg1);
                                                                      frame.i32_load(2, 0);
                                                                      frame.i32_const(0xf4f48);
                                                                      frame.i32_const(23);
                                                                      frame.push(arg1);
                                                                      frame.i32_load(2, 4);
                                                                      frame.i32_load(2, 12);
                                                                      {
                                                                        var func = table0[frame.pop()]
                                                                            as FunctionType0?;
                                                                        if (func == null)
                                                                          throw Trap('uninitialized element');
                                                                        var t2 = frame.pop();
                                                                        var t1 = frame.pop();
                                                                        var t0 = frame.pop();
                                                                        frame.push(func(t0, t1, t2));
                                                                      }
                                                                      return frame.pop();
                                                                    }
                                                                    frame.push(arg1);
                                                                    frame.i32_load(2, 0);
                                                                    frame.i32_const(0xf4f2e);
                                                                    frame.i32_const(26);
                                                                    frame.push(arg1);
                                                                    frame.i32_load(2, 4);
                                                                    frame.i32_load(2, 12);
                                                                    {
                                                                      var func = table0[frame.pop()]
                                                                          as FunctionType0?;
                                                                      if (func == null)
                                                                        throw Trap('uninitialized element');
                                                                      var t2 = frame.pop();
                                                                      var t1 = frame.pop();
                                                                      var t0 = frame.pop();
                                                                      frame.push(func(t0, t1, t2));
                                                                    }
                                                                    return frame.pop();
                                                                  }
                                                                  frame.push(arg1);
                                                                  frame.i32_load(2, 0);
                                                                  frame.i32_const(0xf4f17);
                                                                  frame.i32_const(23);
                                                                  frame.push(arg1);
                                                                  frame.i32_load(2, 4);
                                                                  frame.i32_load(2, 12);
                                                                  {
                                                                    var func =
                                                                        table0[frame.pop()] as FunctionType0?;
                                                                    if (func == null)
                                                                      throw Trap('uninitialized element');
                                                                    var t2 = frame.pop();
                                                                    var t1 = frame.pop();
                                                                    var t0 = frame.pop();
                                                                    frame.push(func(t0, t1, t2));
                                                                  }
                                                                  return frame.pop();
                                                                }
                                                                frame.push(arg1);
                                                                frame.i32_load(2, 0);
                                                                frame.i32_const(0xf4efb);
                                                                frame.i32_const(28);
                                                                frame.push(arg1);
                                                                frame.i32_load(2, 4);
                                                                frame.i32_load(2, 12);
                                                                {
                                                                  var func =
                                                                      table0[frame.pop()] as FunctionType0?;
                                                                  if (func == null)
                                                                    throw Trap('uninitialized element');
                                                                  var t2 = frame.pop();
                                                                  var t1 = frame.pop();
                                                                  var t0 = frame.pop();
                                                                  frame.push(func(t0, t1, t2));
                                                                }
                                                                return frame.pop();
                                                              }
                                                              frame.push(arg1);
                                                              frame.i32_load(2, 0);
                                                              frame.i32_const(0xf4ed3);
                                                              frame.i32_const(40);
                                                              frame.push(arg1);
                                                              frame.i32_load(2, 4);
                                                              frame.i32_load(2, 12);
                                                              {
                                                                var func =
                                                                    table0[frame.pop()] as FunctionType0?;
                                                                if (func == null)
                                                                  throw Trap('uninitialized element');
                                                                var t2 = frame.pop();
                                                                var t1 = frame.pop();
                                                                var t0 = frame.pop();
                                                                frame.push(func(t0, t1, t2));
                                                              }
                                                              return frame.pop();
                                                            }
                                                            frame.push(arg1);
                                                            frame.i32_load(2, 0);
                                                            frame.i32_const(0xf4ebd);
                                                            frame.i32_const(22);
                                                            frame.push(arg1);
                                                            frame.i32_load(2, 4);
                                                            frame.i32_load(2, 12);
                                                            {
                                                              var func =
                                                                  table0[frame.pop()] as FunctionType0?;
                                                              if (func == null)
                                                                throw Trap('uninitialized element');
                                                              var t2 = frame.pop();
                                                              var t1 = frame.pop();
                                                              var t0 = frame.pop();
                                                              frame.push(func(t0, t1, t2));
                                                            }
                                                            return frame.pop();
                                                          }
                                                          frame.push(arg1);
                                                          frame.i32_load(2, 0);
                                                          frame.i32_const(0xf4ea6);
                                                          frame.i32_const(23);
                                                          frame.push(arg1);
                                                          frame.i32_load(2, 4);
                                                          frame.i32_load(2, 12);
                                                          {
                                                            var func = table0[frame.pop()] as FunctionType0?;
                                                            if (func == null)
                                                              throw Trap('uninitialized element');
                                                            var t2 = frame.pop();
                                                            var t1 = frame.pop();
                                                            var t0 = frame.pop();
                                                            frame.push(func(t0, t1, t2));
                                                          }
                                                          return frame.pop();
                                                        }
                                                        frame.push(arg1);
                                                        frame.i32_load(2, 0);
                                                        frame.i32_const(0xf4e94);
                                                        frame.i32_const(18);
                                                        frame.push(arg1);
                                                        frame.i32_load(2, 4);
                                                        frame.i32_load(2, 12);
                                                        {
                                                          var func = table0[frame.pop()] as FunctionType0?;
                                                          if (func == null)
                                                            throw Trap('uninitialized element');
                                                          var t2 = frame.pop();
                                                          var t1 = frame.pop();
                                                          var t0 = frame.pop();
                                                          frame.push(func(t0, t1, t2));
                                                        }
                                                        return frame.pop();
                                                      }
                                                      frame.push(arg1);
                                                      frame.i32_load(2, 0);
                                                      frame.i32_const(0xf4e82);
                                                      frame.i32_const(18);
                                                      frame.push(arg1);
                                                      frame.i32_load(2, 4);
                                                      frame.i32_load(2, 12);
                                                      {
                                                        var func = table0[frame.pop()] as FunctionType0?;
                                                        if (func == null) throw Trap('uninitialized element');
                                                        var t2 = frame.pop();
                                                        var t1 = frame.pop();
                                                        var t0 = frame.pop();
                                                        frame.push(func(t0, t1, t2));
                                                      }
                                                      return frame.pop();
                                                    }
                                                    frame.push(arg1);
                                                    frame.i32_load(2, 0);
                                                    frame.i32_const(0xf4e6d);
                                                    frame.i32_const(21);
                                                    frame.push(arg1);
                                                    frame.i32_load(2, 4);
                                                    frame.i32_load(2, 12);
                                                    {
                                                      var func = table0[frame.pop()] as FunctionType0?;
                                                      if (func == null) throw Trap('uninitialized element');
                                                      var t2 = frame.pop();
                                                      var t1 = frame.pop();
                                                      var t0 = frame.pop();
                                                      frame.push(func(t0, t1, t2));
                                                    }
                                                    return frame.pop();
                                                  }
                                                  frame.push(arg1);
                                                  frame.i32_load(2, 0);
                                                  frame.i32_const(0xf4e57);
                                                  frame.i32_const(22);
                                                  frame.push(arg1);
                                                  frame.i32_load(2, 4);
                                                  frame.i32_load(2, 12);
                                                  {
                                                    var func = table0[frame.pop()] as FunctionType0?;
                                                    if (func == null) throw Trap('uninitialized element');
                                                    var t2 = frame.pop();
                                                    var t1 = frame.pop();
                                                    var t0 = frame.pop();
                                                    frame.push(func(t0, t1, t2));
                                                  }
                                                  return frame.pop();
                                                }
                                                frame.push(arg1);
                                                frame.i32_load(2, 0);
                                                frame.i32_const(0xf4e40);
                                                frame.i32_const(23);
                                                frame.push(arg1);
                                                frame.i32_load(2, 4);
                                                frame.i32_load(2, 12);
                                                {
                                                  var func = table0[frame.pop()] as FunctionType0?;
                                                  if (func == null) throw Trap('uninitialized element');
                                                  var t2 = frame.pop();
                                                  var t1 = frame.pop();
                                                  var t0 = frame.pop();
                                                  frame.push(func(t0, t1, t2));
                                                }
                                                return frame.pop();
                                              }
                                              frame.push(arg1);
                                              frame.i32_load(2, 0);
                                              frame.i32_const(0xf4e29);
                                              frame.i32_const(23);
                                              frame.push(arg1);
                                              frame.i32_load(2, 4);
                                              frame.i32_load(2, 12);
                                              {
                                                var func = table0[frame.pop()] as FunctionType0?;
                                                if (func == null) throw Trap('uninitialized element');
                                                var t2 = frame.pop();
                                                var t1 = frame.pop();
                                                var t0 = frame.pop();
                                                frame.push(func(t0, t1, t2));
                                              }
                                              return frame.pop();
                                            }
                                            frame.push(arg1);
                                            frame.i32_load(2, 0);
                                            frame.i32_const(0xf4e0c);
                                            frame.i32_const(29);
                                            frame.push(arg1);
                                            frame.i32_load(2, 4);
                                            frame.i32_load(2, 12);
                                            {
                                              var func = table0[frame.pop()] as FunctionType0?;
                                              if (func == null) throw Trap('uninitialized element');
                                              var t2 = frame.pop();
                                              var t1 = frame.pop();
                                              var t0 = frame.pop();
                                              frame.push(func(t0, t1, t2));
                                            }
                                            return frame.pop();
                                          }
                                          frame.push(arg1);
                                          frame.i32_load(2, 0);
                                          frame.i32_const(0xf4df3);
                                          frame.i32_const(25);
                                          frame.push(arg1);
                                          frame.i32_load(2, 4);
                                          frame.i32_load(2, 12);
                                          {
                                            var func = table0[frame.pop()] as FunctionType0?;
                                            if (func == null) throw Trap('uninitialized element');
                                            var t2 = frame.pop();
                                            var t1 = frame.pop();
                                            var t0 = frame.pop();
                                            frame.push(func(t0, t1, t2));
                                          }
                                          return frame.pop();
                                        }
                                        frame.push(arg1);
                                        frame.i32_load(2, 0);
                                        frame.i32_const(0xf4ddb);
                                        frame.i32_const(24);
                                        frame.push(arg1);
                                        frame.i32_load(2, 4);
                                        frame.i32_load(2, 12);
                                        {
                                          var func = table0[frame.pop()] as FunctionType0?;
                                          if (func == null) throw Trap('uninitialized element');
                                          var t2 = frame.pop();
                                          var t1 = frame.pop();
                                          var t0 = frame.pop();
                                          frame.push(func(t0, t1, t2));
                                        }
                                        return frame.pop();
                                      }
                                      frame.push(arg1);
                                      frame.i32_load(2, 0);
                                      frame.i32_const(0xf4dc7);
                                      frame.i32_const(20);
                                      frame.push(arg1);
                                      frame.i32_load(2, 4);
                                      frame.i32_load(2, 12);
                                      {
                                        var func = table0[frame.pop()] as FunctionType0?;
                                        if (func == null) throw Trap('uninitialized element');
                                        var t2 = frame.pop();
                                        var t1 = frame.pop();
                                        var t0 = frame.pop();
                                        frame.push(func(t0, t1, t2));
                                      }
                                      return frame.pop();
                                    }
                                    frame.push(arg1);
                                    frame.i32_load(2, 0);
                                    frame.i32_const(0xf4db3);
                                    frame.i32_const(20);
                                    frame.push(arg1);
                                    frame.i32_load(2, 4);
                                    frame.i32_load(2, 12);
                                    {
                                      var func = table0[frame.pop()] as FunctionType0?;
                                      if (func == null) throw Trap('uninitialized element');
                                      var t2 = frame.pop();
                                      var t1 = frame.pop();
                                      var t0 = frame.pop();
                                      frame.push(func(t0, t1, t2));
                                    }
                                    return frame.pop();
                                  }
                                  frame.push(arg1);
                                  frame.i32_load(2, 0);
                                  frame.i32_const(0xf4d95);
                                  frame.i32_const(30);
                                  frame.push(arg1);
                                  frame.i32_load(2, 4);
                                  frame.i32_load(2, 12);
                                  {
                                    var func = table0[frame.pop()] as FunctionType0?;
                                    if (func == null) throw Trap('uninitialized element');
                                    var t2 = frame.pop();
                                    var t1 = frame.pop();
                                    var t0 = frame.pop();
                                    frame.push(func(t0, t1, t2));
                                  }
                                  return frame.pop();
                                }
                                frame.push(arg1);
                                frame.i32_load(2, 0);
                                frame.i32_const(0xf4d80);
                                frame.i32_const(21);
                                frame.push(arg1);
                                frame.i32_load(2, 4);
                                frame.i32_load(2, 12);
                                {
                                  var func = table0[frame.pop()] as FunctionType0?;
                                  if (func == null) throw Trap('uninitialized element');
                                  var t2 = frame.pop();
                                  var t1 = frame.pop();
                                  var t0 = frame.pop();
                                  frame.push(func(t0, t1, t2));
                                }
                                return frame.pop();
                              }
                              frame.push(arg1);
                              frame.i32_load(2, 0);
                              frame.i32_const(0xf4d63);
                              frame.i32_const(29);
                              frame.push(arg1);
                              frame.i32_load(2, 4);
                              frame.i32_load(2, 12);
                              {
                                var func = table0[frame.pop()] as FunctionType0?;
                                if (func == null) throw Trap('uninitialized element');
                                var t2 = frame.pop();
                                var t1 = frame.pop();
                                var t0 = frame.pop();
                                frame.push(func(t0, t1, t2));
                              }
                              return frame.pop();
                            }
                            frame.push(arg1);
                            frame.i32_load(2, 0);
                            frame.i32_const(0xf4d44);
                            frame.i32_const(31);
                            frame.push(arg1);
                            frame.i32_load(2, 4);
                            frame.i32_load(2, 12);
                            {
                              var func = table0[frame.pop()] as FunctionType0?;
                              if (func == null) throw Trap('uninitialized element');
                              var t2 = frame.pop();
                              var t1 = frame.pop();
                              var t0 = frame.pop();
                              frame.push(func(t0, t1, t2));
                            }
                            return frame.pop();
                          }
                          frame.push(arg1);
                          frame.i32_load(2, 0);
                          frame.i32_const(0xf4d23);
                          frame.i32_const(33);
                          frame.push(arg1);
                          frame.i32_load(2, 4);
                          frame.i32_load(2, 12);
                          {
                            var func = table0[frame.pop()] as FunctionType0?;
                            if (func == null) throw Trap('uninitialized element');
                            var t2 = frame.pop();
                            var t1 = frame.pop();
                            var t0 = frame.pop();
                            frame.push(func(t0, t1, t2));
                          }
                          return frame.pop();
                        }
                        frame.push(arg1);
                        frame.i32_load(2, 0);
                        frame.i32_const(0xf4d04);
                        frame.i32_const(31);
                        frame.push(arg1);
                        frame.i32_load(2, 4);
                        frame.i32_load(2, 12);
                        {
                          var func = table0[frame.pop()] as FunctionType0?;
                          if (func == null) throw Trap('uninitialized element');
                          var t2 = frame.pop();
                          var t1 = frame.pop();
                          var t0 = frame.pop();
                          frame.push(func(t0, t1, t2));
                        }
                        return frame.pop();
                      }
                      frame.push(arg1);
                      frame.i32_load(2, 0);
                      frame.i32_const(0xf4ceb);
                      frame.i32_const(25);
                      frame.push(arg1);
                      frame.i32_load(2, 4);
                      frame.i32_load(2, 12);
                      {
                        var func = table0[frame.pop()] as FunctionType0?;
                        if (func == null) throw Trap('uninitialized element');
                        var t2 = frame.pop();
                        var t1 = frame.pop();
                        var t0 = frame.pop();
                        frame.push(func(t0, t1, t2));
                      }
                      return frame.pop();
                    }
                    frame.push(arg1);
                    frame.i32_load(2, 0);
                    frame.i32_const(0xf4ccc);
                    frame.i32_const(31);
                    frame.push(arg1);
                    frame.i32_load(2, 4);
                    frame.i32_load(2, 12);
                    {
                      var func = table0[frame.pop()] as FunctionType0?;
                      if (func == null) throw Trap('uninitialized element');
                      var t2 = frame.pop();
                      var t1 = frame.pop();
                      var t0 = frame.pop();
                      frame.push(func(t0, t1, t2));
                    }
                    return frame.pop();
                  }
                  frame.push(arg1);
                  frame.i32_load(2, 0);
                  frame.i32_const(0xf4cb8);
                  frame.i32_const(20);
                  frame.push(arg1);
                  frame.i32_load(2, 4);
                  frame.i32_load(2, 12);
                  {
                    var func = table0[frame.pop()] as FunctionType0?;
                    if (func == null) throw Trap('uninitialized element');
                    var t2 = frame.pop();
                    var t1 = frame.pop();
                    var t0 = frame.pop();
                    frame.push(func(t0, t1, t2));
                  }
                  return frame.pop();
                }
                frame.push(arg1);
                frame.i32_load(2, 0);
                frame.i32_const(0xf4ca0);
                frame.i32_const(24);
                frame.push(arg1);
                frame.i32_load(2, 4);
                frame.i32_load(2, 12);
                {
                  var func = table0[frame.pop()] as FunctionType0?;
                  if (func == null) throw Trap('uninitialized element');
                  var t2 = frame.pop();
                  var t1 = frame.pop();
                  var t0 = frame.pop();
                  frame.push(func(t0, t1, t2));
                }
                return frame.pop();
              }
              frame.push(arg1);
              frame.i32_load(2, 0);
              frame.i32_const(0xf4c8c);
              frame.i32_const(20);
              frame.push(arg1);
              frame.i32_load(2, 4);
              frame.i32_load(2, 12);
              {
                var func = table0[frame.pop()] as FunctionType0?;
                if (func == null) throw Trap('uninitialized element');
                var t2 = frame.pop();
                var t1 = frame.pop();
                var t0 = frame.pop();
                frame.push(func(t0, t1, t2));
              }
              return frame.pop();
            }
            frame.push(arg1);
            frame.i32_load(2, 0);
            frame.i32_const(0xf4c6e);
            frame.i32_const(30);
            frame.push(arg1);
            frame.i32_load(2, 4);
            frame.i32_load(2, 12);
            {
              var func = table0[frame.pop()] as FunctionType0?;
              if (func == null) throw Trap('uninitialized element');
              var t2 = frame.pop();
              var t1 = frame.pop();
              var t0 = frame.pop();
              frame.push(func(t0, t1, t2));
            }
            return frame.pop();
          }
          frame.push(arg1);
          frame.i32_load(2, 0);
          frame.i32_const(0xf4c54);
          frame.i32_const(26);
          frame.push(arg1);
          frame.i32_load(2, 4);
          frame.i32_load(2, 12);
          {
            var func = table0[frame.pop()] as FunctionType0?;
            if (func == null) throw Trap('uninitialized element');
            var t2 = frame.pop();
            var t1 = frame.pop();
            var t0 = frame.pop();
            frame.push(func(t0, t1, t2));
          }
          return frame.pop();
        }
        frame.push(arg1);
        frame.i32_load(2, 0);
        frame.i32_const(0xf4c3b);
        frame.i32_const(25);
        frame.push(arg1);
        frame.i32_load(2, 4);
        frame.i32_load(2, 12);
        {
          var func = table0[frame.pop()] as FunctionType0?;
          if (func == null) throw Trap('uninitialized element');
          var t2 = frame.pop();
          var t1 = frame.pop();
          var t0 = frame.pop();
          frame.push(func(t0, t1, t2));
        }
        return frame.pop();
      }
      frame.push(arg1);
      frame.i32_load(2, 0);
      frame.i32_const(0xf4c1d);
      frame.i32_const(30);
      frame.push(arg1);
      frame.i32_load(2, 4);
      frame.i32_load(2, 12);
      {
        var func = table0[frame.pop()] as FunctionType0?;
        if (func == null) throw Trap('uninitialized element');
        var t2 = frame.pop();
        var t1 = frame.pop();
        var t0 = frame.pop();
        frame.push(func(t0, t1, t2));
      }
      return frame.pop();
    }
    frame.push(arg1);
    frame.i32_load(2, 0);
    frame.i32_const(0xf4c04);
    frame.i32_const(25);
    frame.push(arg1);
    frame.i32_load(2, 4);
    frame.i32_load(2, 12);
    {
      var func = table0[frame.pop()] as FunctionType0?;
      if (func == null) throw Trap('uninitialized element');
      var t2 = frame.pop();
      var t1 = frame.pop();
      var t0 = frame.pop();
      frame.push(func(t0, t1, t2));
    }
    return frame.pop();
  }

  i32 _func147(i32 arg0, i32 arg1) {
    final frame = Frame(this);
    frame.i32_const(1);
    return frame.pop();
  }

  void _func148(i32 arg0, i32 arg1) {
    i32 local0 = 0;
    i32 local1 = 0;

    final frame = Frame(this);
    frame.push(globals.__stack_pointer);
    frame.i32_const(64);
    frame.i32_sub();
    local0 = frame.peek();
    globals.__stack_pointer = frame.pop();
    block_label_0:
    {
      block_label_1:
      {
        frame.push(arg1);
        frame.i32_const(40);
        frame.i32_add();
        frame.i32_load(2, 0);
        local1 = frame.peek();
        frame.i32_const(3);
        frame.i32_lt_u();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_1;
        }
        frame.push(local0);
        frame.i32_const(28);
        frame.i32_add();
        frame.i32_const(25);
        frame.i32_store(2, 0);
        frame.push(local0);
        frame.push(local1);
        frame.i32_store(2, 32);
        frame.push(local0);
        frame.i32_const(26);
        frame.i32_store(2, 20);
        frame.push(local0);
        frame.push(arg1);
        frame.i32_store(2, 36);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(36);
        frame.i32_add();
        frame.i32_store(2, 24);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(32);
        frame.i32_add();
        frame.i32_store(2, 16);
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_store(2, 60);
        frame.push(local0);
        frame.i32_const(2);
        frame.i32_store(2, 52);
        frame.push(local0);
        frame.i32_const(0xf4bcc);
        frame.i32_store(2, 48);
        frame.push(local0);
        frame.i32_const(0);
        frame.i32_store(2, 40);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(16);
        frame.i32_add();
        frame.i32_store(2, 56);
        frame.push(local0);
        frame.push(local0);
        frame.i32_const(40);
        frame.i32_add();
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func035(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 4);
        arg1 = frame.peek();
        frame.push(local0);
        frame.i32_load(2, 8);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          envImports.log_js(t0, t1);
        }
        frame.push(local0);
        frame.i32_load(2, 0);
        frame.i32_eqz();
        if (frame.pop() != 0) {
          frame.unwindTo(0, 0);
          break block_label_0;
        }
        frame.i32_const(0xf5144);
        frame.push(arg1);
        {
          var t1 = frame.pop();
          var t0 = frame.pop();
          _func019(t0, t1);
        }
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.push(local0);
      frame.i32_const(28);
      frame.i32_add();
      frame.i32_const(25);
      frame.i32_store(2, 0);
      frame.push(local0);
      frame.push(local1);
      frame.i32_store(2, 32);
      frame.push(local0);
      frame.i32_const(26);
      frame.i32_store(2, 20);
      frame.push(local0);
      frame.push(arg1);
      frame.i32_store(2, 36);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(36);
      frame.i32_add();
      frame.i32_store(2, 24);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(32);
      frame.i32_add();
      frame.i32_store(2, 16);
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_store(2, 60);
      frame.push(local0);
      frame.i32_const(2);
      frame.i32_store(2, 52);
      frame.push(local0);
      frame.i32_const(0xf4bcc);
      frame.i32_store(2, 48);
      frame.push(local0);
      frame.i32_const(0);
      frame.i32_store(2, 40);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(16);
      frame.i32_add();
      frame.i32_store(2, 56);
      frame.push(local0);
      frame.push(local0);
      frame.i32_const(40);
      frame.i32_add();
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func035(t0, t1);
      }
      frame.push(local0);
      frame.i32_load(2, 4);
      arg1 = frame.peek();
      frame.push(local0);
      frame.i32_load(2, 8);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        envImports.warn_js(t0, t1);
      }
      frame.push(local0);
      frame.i32_load(2, 0);
      frame.i32_eqz();
      if (frame.pop() != 0) {
        frame.unwindTo(0, 0);
        break block_label_0;
      }
      frame.i32_const(0xf5144);
      frame.push(arg1);
      {
        var t1 = frame.pop();
        var t0 = frame.pop();
        _func019(t0, t1);
      }
    }
    frame.push(local0);
    frame.i32_const(64);
    frame.i32_add();
    globals.__stack_pointer = frame.pop();
  }

  void _func149(i32 arg0) {
    final frame = Frame(this);
  }

  List<Function> _initFunctionTable() {
    return [
      envImports.warn_js,
      envImports.log_js,
      _func000,
      _func001,
      _func002,
      _func003,
      _func004,
      _func005,
      _func006,
      _func007,
      _func008,
      _func009,
      _func010,
      _func011,
      _func012,
      _func013,
      _func014,
      _func015,
      _func016,
      _func017,
      _func018,
      _func019,
      _func020,
      _func021,
      _func022,
      _func023,
      _func024,
      _func025,
      _func026,
      _func027,
      _func028,
      _func029,
      _func030,
      _func031,
      _func032,
      _func033,
      _func034,
      _func035,
      _func036,
      _func037,
      _func038,
      _func039,
      _func040,
      _func041,
      _func042,
      _func043,
      _func044,
      _func045,
      _func046,
      _func047,
      _func048,
      _func049,
      _func050,
      _func051,
      _func052,
      _func053,
      _func054,
      _func055,
      _func056,
      _func057,
      _func058,
      _func059,
      _func060,
      _func061,
      _func062,
      _func063,
      _func064,
      _func065,
      _func066,
      _func067,
      _func068,
      _func069,
      _func070,
      _func071,
      _func072,
      _func073,
      _func074,
      _func075,
      _func076,
      _func077,
      _func078,
      _func079,
      _func080,
      _func081,
      _func082,
      _func083,
      _func084,
      _func085,
      _func086,
      _func087,
      _func088,
      _func089,
      _func090,
      _func091,
      _func092,
      _func093,
      _func094,
      _func095,
      _func096,
      _func097,
      _func098,
      _func099,
      _func100,
      _func101,
      _func102,
      _func103,
      _func104,
      _func105,
      _func106,
      _func107,
      _func108,
      _func109,
      _func110,
      _func111,
      _func112,
      _func113,
      _func114,
      _func115,
      _func116,
      _func117,
      _func118,
      _func119,
      _func120,
      _func121,
      _func122,
      _func123,
      _func124,
      _func125,
      diplomat_init,
      diplomat_simple_writeable,
      _func128,
      _func129,
      diplomat_buffer_writeable_create,
      _func131,
      _func132,
      diplomat_buffer_writeable_get_bytes,
      diplomat_buffer_writeable_len,
      diplomat_buffer_writeable_destroy,
      diplomat_alloc,
      diplomat_free,
      _func138,
      _func139,
      _func140,
      _func141,
      _func142,
      _func143,
      _func144,
      _func145,
      _func146,
      _func147,
      _func148,
      _func149,
      icu4x_init,
      ICU4XFixedDecimalFormatter_create_with_grouping_strategy,
      ICU4XFixedDecimalFormatter_format,
      ICU4XFixedDecimalFormatter_destroy,
      ICU4XFixedDecimal_create_from_i32,
      ICU4XFixedDecimal_multiply_pow10,
      ICU4XFixedDecimal_destroy,
      ICU4XLocale_create_from_string,
      ICU4XLocale_destroy,
      ICU4XDataProvider_create_from_byte_slice,
      ICU4XDataProvider_destroy
    ];
  }
}

typedef FunctionType0 = i32 Function(i32, i32, i32);
typedef FunctionType1 = i32 Function(i32, i32);
typedef FunctionType2 = void Function(i32, i32);
typedef FunctionType3 = void Function(i32, i32, i32, i32);
typedef FunctionType4 = void Function(i32);
typedef FunctionType5 = i32 Function(i32, i32, i32, i32);
typedef FunctionType6 = void Function(i32, i32, i32);
typedef FunctionType7 = void Function(i32, i32, i32, i32, i32);
typedef FunctionType8 = void Function();
typedef FunctionType9 = i32 Function(i32);

class Globals {
  i32 __stack_pointer = 0xf4240;

  final i32 global1 = 0xf5310;

  final i32 global2 = 0xf5310;
}

class DataSegments {
  final Uint8List _rodata = decodeDataLiteral(_hex0);

  final Uint8List _data = decodeDataLiteral(_hex1);

  static const String _hex0 =
      '\x01\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x61\x6E'
      '\x20\x65\x72\x72\x6F\x72\x20\x6F\x63\x63\x75\x72\x72\x65\x64\x20\x77\x68\x65\x6E\x20\x66\x6F\x72\x6D\x61'
      '\x74\x74\x69\x6E\x67\x20\x61\x6E\x20\x61\x72\x67\x75\x6D\x65\x6E\x74\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
      '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
      '\x00\x00\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02'
      '\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04'
      '\x04\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x43\x0F\x00\x00\x00\x00\x00\x45\x72'
      '\x72\x6F\x72\x20\x77\x68\x69\x6C\x65\x20\x70\x72\x6F\x63\x65\x73\x73\x69\x6E\x67\x20\x60\x63\x6F\x6C\x6C'
      '\x65\x63\x74\x5F\x73\x74\x72\x60\x20\x64\x75\x72\x69\x6E\x67\x20\x73\x65\x72\x69\x61\x6C\x69\x7A\x61\x74'
      '\x69\x6F\x6E\x53\x65\x72\x64\x65\x20\x44\x65\x73\x65\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x20\x45'
      '\x72\x72\x6F\x72\x53\x65\x72\x64\x65\x20\x53\x65\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x20\x45\x72'
      '\x72\x6F\x72\x54\x68\x65\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x64\x61\x74\x61\x20\x77\x61\x73\x20\x6E'
      '\x6F\x74\x20\x77\x65\x6C\x6C\x20\x65\x6E\x63\x6F\x64\x65\x64\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20\x65\x6E'
      '\x75\x6D\x20\x64\x69\x73\x63\x72\x69\x6D\x69\x6E\x61\x6E\x74\x20\x74\x68\x61\x74\x20\x77\x61\x73\x20\x3E'
      '\x20\x75\x33\x32\x3A\x3A\x6D\x61\x78\x5F\x76\x61\x6C\x75\x65\x28\x29\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20'
      '\x4F\x70\x74\x69\x6F\x6E\x20\x64\x69\x73\x63\x72\x69\x6D\x69\x6E\x61\x6E\x74\x20\x74\x68\x61\x74\x20\x77'
      '\x61\x73\x6E\x27\x74\x20\x30\x20\x6F\x72\x20\x31\x54\x72\x69\x65\x64\x20\x74\x6F\x20\x70\x61\x72\x73\x65'
      '\x20\x69\x6E\x76\x61\x6C\x69\x64\x20\x75\x74\x66\x2D\x38\x46\x6F\x75\x6E\x64\x20\x61\x6E\x20\x69\x6E\x76'
      '\x61\x6C\x69\x64\x20\x75\x6E\x69\x63\x6F\x64\x65\x20\x63\x68\x61\x72\x46\x6F\x75\x6E\x64\x20\x61\x20\x62'
      '\x6F\x6F\x6C\x20\x74\x68\x61\x74\x20\x77\x61\x73\x6E\x27\x74\x20\x30\x20\x6F\x72\x20\x31\x46\x6F\x75\x6E'
      '\x64\x20\x61\x20\x76\x61\x72\x69\x6E\x74\x20\x74\x68\x61\x74\x20\x64\x69\x64\x6E\x27\x74\x20\x74\x65\x72'
      '\x6D\x69\x6E\x61\x74\x65\x2E\x20\x49\x73\x20\x74\x68\x65\x20\x75\x73\x69\x7A\x65\x20\x74\x6F\x6F\x20\x62'
      '\x69\x67\x20\x66\x6F\x72\x20\x74\x68\x69\x73\x20\x70\x6C\x61\x74\x66\x6F\x72\x6D\x3F\x48\x69\x74\x20\x74'
      '\x68\x65\x20\x65\x6E\x64\x20\x6F\x66\x20\x62\x75\x66\x66\x65\x72\x2C\x20\x65\x78\x70\x65\x63\x74\x65\x64'
      '\x20\x6D\x6F\x72\x65\x20\x64\x61\x74\x61\x54\x68\x65\x20\x6C\x65\x6E\x67\x74\x68\x20\x6F\x66\x20\x61\x20'
      '\x73\x65\x71\x75\x65\x6E\x63\x65\x20\x6D\x75\x73\x74\x20\x62\x65\x20\x6B\x6E\x6F\x77\x6E\x54\x68\x65\x20'
      '\x73\x65\x72\x69\x61\x6C\x69\x7A\x65\x20\x62\x75\x66\x66\x65\x72\x20\x69\x73\x20\x66\x75\x6C\x6C\x54\x68'
      '\x69\x73\x20\x69\x73\x20\x61\x20\x66\x65\x61\x74\x75\x72\x65\x20\x74\x68\x61\x74\x20\x50\x6F\x73\x74\x63'
      '\x61\x72\x64\x20\x69\x6E\x74\x65\x6E\x64\x73\x20\x74\x6F\x20\x73\x75\x70\x70\x6F\x72\x74\x2C\x20\x62\x75'
      '\x74\x20\x64\x6F\x65\x73\x20\x6E\x6F\x74\x20\x79\x65\x74\x54\x68\x69\x73\x20\x69\x73\x20\x61\x20\x66\x65'
      '\x61\x74\x75\x72\x65\x20\x74\x68\x61\x74\x20\x50\x6F\x73\x74\x43\x61\x72\x64\x20\x77\x69\x6C\x6C\x20\x6E'
      '\x65\x76\x65\x72\x20\x69\x6D\x70\x6C\x65\x6D\x65\x6E\x74\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'
      '\x74\x72\x75\x65\x00\x00\x00\x00\x44\x75\x70\x6C\x69\x63\x61\x74\x65\x64\x20\x65\x78\x74\x65\x6E\x73\x69'
      '\x6F\x6E\x24\x46\x0F\x00\x14\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x65\x78\x74\x65\x6E\x73\x69\x6F'
      '\x6E\x00\x00\x00\x40\x46\x0F\x00\x11\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x75\x62\x74\x61\x67'
      '\x00\x00\x5C\x46\x0F\x00\x0E\x00\x00\x00\x54\x68\x65\x20\x67\x69\x76\x65\x6E\x20\x6C\x61\x6E\x67\x75\x61'
      '\x67\x65\x20\x73\x75\x62\x74\x61\x67\x20\x69\x73\x20\x69\x6E\x76\x61\x6C\x69\x64\x74\x46\x0F\x00\x24\x00'
      '\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
      '\xA0\x46\x0F\x00\x08\x00\x00\x00\x09\x00\x00\x00\x0A\x00\x00\x00\x4F\x46\x46\x45\x52\x52\x4F\x52\x57\x41'
      '\x52\x4E\x49\x4E\x46\x4F\x44\x45\x42\x55\x47\x54\x52\x41\x43\x45\x00\x00\xC8\x46\x0F\x00\x03\x00\x00\x00'
      '\xCB\x46\x0F\x00\x05\x00\x00\x00\xD0\x46\x0F\x00\x04\x00\x00\x00\xD4\x46\x0F\x00\x04\x00\x00\x00\xD8\x46'
      '\x0F\x00\x05\x00\x00\x00\xDD\x46\x0F\x00\x05\x00\x00\x00\x49\x43\x55\x34\x58\x20\x64\x61\x74\x61\x20\x65'
      '\x72\x72\x6F\x72\x14\x47\x0F\x00\x10\x00\x00\x00\x2F\x55\x73\x65\x72\x73\x2F\x72\x6F\x62\x65\x72\x74\x62'
      '\x61\x73\x74\x69\x61\x6E\x2F\x43\x6F\x64\x65\x2F\x69\x63\x75\x34\x78\x2F\x70\x72\x6F\x76\x69\x64\x65\x72'
      '\x2F\x63\x6F\x72\x65\x2F\x73\x72\x63\x2F\x65\x72\x72\x6F\x72\x2E\x72\x73\x3A\x20\x66\x47\x0F\x00\x02\x00'
      '\x00\x00\x20\x28\x6B\x65\x79\x3A\x20\x29\x70\x47\x0F\x00\x07\x00\x00\x00\x77\x47\x0F\x00\x01\x00\x00\x00'
      '\x2C\x20\x72\x65\x71\x75\x65\x73\x74\x3A\x20\x00\x14\x47\x0F\x00\x00\x00\x00\x00\x70\x47\x0F\x00\x07\x00'
      '\x00\x00\x88\x47\x0F\x00\x0B\x00\x00\x00\x77\x47\x0F\x00\x01\x00\x00\x00\x69\x63\x75\x5F\x70\x72\x6F\x76'
      '\x69\x64\x65\x72\x3A\x3A\x65\x72\x72\x6F\x72\x00\xB4\x47\x0F\x00\x13\x00\x00\x00\xB4\x47\x0F\x00\x13\x00'
      '\x00\x00\x2C\x47\x0F\x00\x3A\x00\x00\x00\xCE\x00\x00\x00\x14\x47\x0F\x00\x00\x00\x00\x00\x66\x47\x0F\x00'
      '\x02\x00\x00\x00\xB4\x47\x0F\x00\x13\x00\x00\x00\xB4\x47\x0F\x00\x13\x00\x00\x00\x2C\x47\x0F\x00\x3A\x00'
      '\x00\x00\xE7\x00\x00\x00\x2D\x75\x2D\x75\x50\x6F\x73\x74\x63\x61\x72\x64\x20\x64\x65\x73\x65\x72\x69\x61'
      '\x6C\x69\x7A\x65\x50\x6F\x73\x74\x63\x61\x72\x64\x31\x42\x69\x6E\x63\x6F\x64\x65\x31\x4A\x73\x6F\x6E\x55'
      '\x6E\x61\x76\x61\x69\x6C\x61\x62\x6C\x65\x20\x62\x75\x66\x66\x65\x72\x20\x66\x6F\x72\x6D\x61\x74\x3A\x20'
      '\x20\x28\x64\x6F\x65\x73\x20\x69\x63\x75\x5F\x70\x72\x6F\x76\x69\x64\x65\x72\x20\x6E\x65\x65\x64\x20\x74'
      '\x6F\x20\x62\x65\x20\x63\x6F\x6D\x70\x69\x6C\x65\x64\x20\x77\x69\x74\x68\x20\x61\x6E\x20\x61\x64\x64\x69'
      '\x74\x69\x6F\x6E\x61\x6C\x20\x43\x61\x72\x67\x6F\x20\x66\x65\x61\x74\x75\x72\x65\x3F\x29\x00\x00\x3D\x48'
      '\x0F\x00\x1B\x00\x00\x00\x58\x48\x0F\x00\x4A\x00\x00\x00\x43\x75\x73\x74\x6F\x6D\x00\x00\xB4\x48\x0F\x00'
      '\x06\x00\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x74\x61\x74\x65\x00\x00\x00\xC4\x48\x0F\x00\x0D\x00'
      '\x00\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x70\x61\x79\x6C\x6F\x61\x64\x00\xDC\x48\x0F\x00\x0F\x00\x00\x00'
      '\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x20\x74\x79\x70\x65\x73\x3A\x20\x74\x72\x69\x65\x64\x20\x74\x6F'
      '\x20\x64\x6F\x77\x6E\x63\x61\x73\x74\x20\x77\x69\x74\x68\x20\x2C\x20\x62\x75\x74\x20\x61\x63\x74\x75\x61'
      '\x6C\x20\x74\x79\x70\x65\x20\x69\x73\x20\x64\x69\x66\x66\x65\x72\x65\x6E\x74\x00\xF4\x48\x0F\x00\x29\x00'
      '\x00\x00\x1D\x49\x0F\x00\x1E\x00\x00\x00\x52\x65\x73\x6F\x75\x72\x63\x65\x20\x62\x6C\x6F\x63\x6B\x65\x64'
      '\x20\x62\x79\x20\x66\x69\x6C\x74\x65\x72\x00\x00\x4C\x49\x0F\x00\x1A\x00\x00\x00\x52\x65\x71\x75\x65\x73'
      '\x74\x20\x68\x61\x73\x20\x61\x6E\x20\x65\x78\x74\x72\x61\x6E\x65\x6F\x75\x73\x20\x6C\x6F\x63\x61\x6C\x65'
      '\x70\x49\x0F\x00\x20\x00\x00\x00\x52\x65\x71\x75\x65\x73\x74\x20\x6E\x65\x65\x64\x73\x20\x61\x20\x6C\x6F'
      '\x63\x61\x6C\x65\x00\x00\x98\x49\x0F\x00\x16\x00\x00\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x64\x61\x74\x61'
      '\x20\x66\x6F\x72\x20\x6C\x6F\x63\x61\x6C\x65\x00\xB8\x49\x0F\x00\x17\x00\x00\x00\x4D\x69\x73\x73\x69\x6E'
      '\x67\x20\x64\x61\x74\x61\x20\x66\x6F\x72\x20\x6B\x65\x79\xD8\x49\x0F\x00\x14\x00\x00\x00\x49\x6E\x76\x61'
      '\x6C\x69\x64\x20\x62\x6C\x6F\x62\x20\x62\x79\x74\x65\x73\x65\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E'
      '\x67\x20\x64\x61\x74\x61\x3A\x20\x00\x00\x06\x4A\x0F\x00\x14\x00\x00\x00\x0A\x69\x63\x75\x34\x78\x5F\x6B'
      '\x65\x79\x5F\x74\x61\x67\x64\x65\x63\x69\x6D\x61\x6C\x2F\x73\x79\x6D\x62\x6F\x6C\x73\x40\x31\x0A\x24\x4A'
      '\x0F\x00\x20\x00\x00\x00\x96\x79\xE2\x20\x6E\x75\x00\x00\x3A\x20\x42\x75\x66\x66\x65\x72\x50\x72\x6F\x76'
      '\x69\x64\x65\x72\x20\x64\x69\x64\x6E\x27\x74\x20\x73\x65\x74\x20\x42\x75\x66\x66\x65\x72\x46\x6F\x72\x6D'
      '\x61\x74\x63\x6F\x72\x65\x3A\x3A\x66\x6D\x74\x3A\x3A\x45\x72\x72\x6F\x72\x69\x63\x75\x5F\x70\x72\x6F\x76'
      '\x69\x64\x65\x72\x3A\x3A\x65\x72\x72\x6F\x72\x3A\x3A\x44\x61\x74\x61\x45\x72\x72\x6F\x72\x69\x63\x75\x5F'
      '\x64\x65\x63\x69\x6D\x61\x6C\x3A\x3A\x70\x72\x6F\x76\x69\x64\x65\x72\x3A\x3A\x44\x65\x63\x69\x6D\x61\x6C'
      '\x53\x79\x6D\x62\x6F\x6C\x73\x56\x31\x4D\x61\x72\x6B\x65\x72\x69\x63\x75\x5F\x64\x65\x63\x69\x6D\x61\x6C'
      '\x3A\x3A\x65\x72\x72\x6F\x72\x3A\x3A\x44\x65\x63\x69\x6D\x61\x6C\x45\x72\x72\x6F\x72\x69\x63\x75\x5F\x6C'
      '\x6F\x63\x69\x64\x3A\x3A\x70\x61\x72\x73\x65\x72\x3A\x3A\x65\x72\x72\x6F\x72\x73\x3A\x3A\x50\x61\x72\x73'
      '\x65\x72\x45\x72\x72\x6F\x72\x52\x65\x74\x75\x72\x6E\x69\x6E\x67\x20\x49\x43\x55\x34\x58\x45\x72\x72\x6F'
      '\x72\x3A\x3A\x20\x62\x61\x73\x65\x64\x20\x6F\x6E\x20\x6F\x72\x69\x67\x69\x6E\x61\x6C\x20\x00\x00\x1D\x4B'
      '\x0F\x00\x16\x00\x00\x00\x33\x4B\x0F\x00\x13\x00\x00\x00\x54\x4A\x0F\x00\x02\x00\x00\x00\x69\x63\x75\x5F'
      '\x63\x61\x70\x69\x3A\x3A\x65\x72\x72\x6F\x72\x73\x2F\x55\x73\x65\x72\x73\x2F\x72\x6F\x62\x65\x72\x74\x62'
      '\x61\x73\x74\x69\x61\x6E\x2F\x43\x6F\x64\x65\x2F\x69\x63\x75\x34\x78\x2F\x66\x66\x69\x2F\x64\x69\x70\x6C'
      '\x6F\x6D\x61\x74\x2F\x73\x72\x63\x2F\x65\x72\x72\x6F\x72\x73\x2E\x72\x73\x00\x00\x60\x4B\x0F\x00\x10\x00'
      '\x00\x00\x60\x4B\x0F\x00\x10\x00\x00\x00\x70\x4B\x0F\x00\x3A\x00\x00\x00\x8D\x00\x00\x00\x5B\x5D\x20\x00'
      '\xC8\x4B\x0F\x00\x01\x00\x00\x00\xC9\x4B\x0F\x00\x02\x00\x00\x00\x1E\x00\x00\x00\x00\x00\x00\x00\x01\x00'
      '\x00\x00\x1E\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xDC\x4B\x0F\x00\x1F\x00\x00\x00\x20\x00\x00\x00'
      '\x21\x00\x00\x00\x4E\x6F\x72\x6D\x61\x6C\x69\x7A\x65\x72\x56\x61\x6C\x69\x64\x61\x74\x69\x6F\x6E\x45\x72'
      '\x72\x6F\x72\x4E\x6F\x72\x6D\x61\x6C\x69\x7A\x65\x72\x46\x75\x74\x75\x72\x65\x45\x78\x74\x65\x6E\x73\x69'
      '\x6F\x6E\x45\x72\x72\x6F\x72\x54\x69\x6D\x65\x5A\x6F\x6E\x65\x4D\x69\x73\x73\x69\x6E\x67\x49\x6E\x70\x75'
      '\x74\x45\x72\x72\x6F\x72\x54\x69\x6D\x65\x5A\x6F\x6E\x65\x49\x6E\x76\x61\x6C\x69\x64\x4F\x66\x66\x73\x65'
      '\x74\x45\x72\x72\x6F\x72\x54\x69\x6D\x65\x5A\x6F\x6E\x65\x4F\x66\x66\x73\x65\x74\x4F\x75\x74\x4F\x66\x42'
      '\x6F\x75\x6E\x64\x73\x45\x72\x72\x6F\x72\x54\x69\x6E\x79\x53\x74\x72\x4E\x6F\x6E\x41\x73\x63\x69\x69\x45'
      '\x72\x72\x6F\x72\x54\x69\x6E\x79\x53\x74\x72\x43\x6F\x6E\x74\x61\x69\x6E\x73\x4E\x75\x6C\x6C\x45\x72\x72'
      '\x6F\x72\x54\x69\x6E\x79\x53\x74\x72\x54\x6F\x6F\x4C\x61\x72\x67\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x65'
      '\x54\x69\x6D\x65\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x43\x61\x6C\x65\x6E\x64\x61\x72\x45\x72\x72\x6F'
      '\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x46\x69\x78\x65\x64\x44\x65\x63\x69\x6D\x61\x6C\x45\x72\x72\x6F\x72'
      '\x44\x61\x74\x65\x54\x69\x6D\x65\x4D\x69\x73\x73\x69\x6E\x67\x4D\x6F\x6E\x74\x68\x53\x79\x6D\x62\x6F\x6C'
      '\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x4D\x69\x73\x73\x69\x6E\x67\x57\x65\x65\x6B\x64\x61'
      '\x79\x53\x79\x6D\x62\x6F\x6C\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x55\x6E\x73\x75\x70\x70'
      '\x6F\x72\x74\x65\x64\x4F\x70\x74\x69\x6F\x6E\x73\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x55'
      '\x6E\x73\x75\x70\x70\x6F\x72\x74\x65\x64\x46\x69\x65\x6C\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69'
      '\x6D\x65\x53\x6B\x65\x6C\x65\x74\x6F\x6E\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D\x65\x4D\x69\x73'
      '\x73\x69\x6E\x67\x49\x6E\x70\x75\x74\x46\x69\x65\x6C\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x65\x54\x69\x6D'
      '\x65\x50\x61\x74\x74\x65\x72\x6E\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x4D\x69\x73\x73\x69'
      '\x6E\x67\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x4B\x69\x6E\x64'
      '\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x4D\x69\x73\x73\x69\x6E\x67\x49\x6E\x70\x75\x74\x45'
      '\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x4D\x6F\x6E\x74\x68\x43\x6F'
      '\x64\x65\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x45\x72\x61\x45'
      '\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x4F\x75\x74\x4F\x66\x52\x61\x6E\x67\x65\x45\x72\x72\x6F'
      '\x72\x43\x61\x6C\x65\x6E\x64\x61\x72\x55\x6E\x64\x65\x72\x66\x6C\x6F\x77\x45\x72\x72\x6F\x72\x43\x61\x6C'
      '\x65\x6E\x64\x61\x72\x4F\x76\x65\x72\x66\x6C\x6F\x77\x45\x72\x72\x6F\x72\x43\x61\x6C\x65\x6E\x64\x61\x72'
      '\x50\x61\x72\x73\x65\x45\x72\x72\x6F\x72\x50\x6C\x75\x72\x61\x6C\x73\x50\x61\x72\x73\x65\x72\x45\x72\x72'
      '\x6F\x72\x46\x69\x78\x65\x64\x44\x65\x63\x69\x6D\x61\x6C\x53\x79\x6E\x74\x61\x78\x45\x72\x72\x6F\x72\x46'
      '\x69\x78\x65\x64\x44\x65\x63\x69\x6D\x61\x6C\x4C\x69\x6D\x69\x74\x45\x72\x72\x6F\x72\x50\x72\x6F\x70\x65'
      '\x72\x74\x79\x55\x6E\x6B\x6E\x6F\x77\x6E\x47\x65\x6E\x65\x72\x61\x6C\x43\x61\x74\x65\x67\x6F\x72\x79\x47'
      '\x72\x6F\x75\x70\x45\x72\x72\x6F\x72\x50\x72\x6F\x70\x65\x72\x74\x79\x55\x6E\x6B\x6E\x6F\x77\x6E\x53\x63'
      '\x72\x69\x70\x74\x49\x64\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x53\x74\x72\x75\x63\x74\x56\x61\x6C\x69\x64'
      '\x69\x74\x79\x45\x72\x72\x6F\x72\x4C\x6F\x63\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x45\x78\x74\x65\x6E\x73'
      '\x69\x6F\x6E\x45\x72\x72\x6F\x72\x4C\x6F\x63\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x53\x75\x62\x74\x61\x67'
      '\x45\x72\x72\x6F\x72\x4C\x6F\x63\x61\x6C\x65\x50\x61\x72\x73\x65\x72\x4C\x61\x6E\x67\x75\x61\x67\x65\x45'
      '\x72\x72\x6F\x72\x4C\x6F\x63\x61\x6C\x65\x55\x6E\x64\x65\x66\x69\x6E\x65\x64\x53\x75\x62\x74\x61\x67\x45'
      '\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x41\x6E\x79\x42\x75\x66\x66\x65'
      '\x72\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x55\x6E\x61\x76\x61\x69\x6C\x61\x62\x6C\x65\x42\x75\x66\x66\x65'
      '\x72\x46\x6F\x72\x6D\x61\x74\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x49\x6F\x45\x72\x72\x6F\x72\x44\x61\x74'
      '\x61\x43\x75\x73\x74\x6F\x6D\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x49\x6E\x76\x61\x6C\x69\x64\x53\x74\x61'
      '\x74\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x50\x61\x79\x6C\x6F\x61\x64\x45'
      '\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x6D\x61\x74\x63\x68\x65\x64\x54\x79\x70\x65\x45\x72\x72\x6F'
      '\x72\x44\x61\x74\x61\x46\x69\x6C\x74\x65\x72\x65\x64\x52\x65\x73\x6F\x75\x72\x63\x65\x45\x72\x72\x6F\x72'
      '\x44\x61\x74\x61\x45\x78\x74\x72\x61\x6E\x65\x6F\x75\x73\x4C\x6F\x63\x61\x6C\x65\x45\x72\x72\x6F\x72\x44'
      '\x61\x74\x61\x4E\x65\x65\x64\x73\x4C\x6F\x63\x61\x6C\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4E\x65\x65'
      '\x64\x73\x56\x61\x72\x69\x61\x6E\x74\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x4C'
      '\x6F\x63\x61\x6C\x65\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x56\x61\x72\x69\x61'
      '\x6E\x74\x45\x72\x72\x6F\x72\x44\x61\x74\x61\x4D\x69\x73\x73\x69\x6E\x67\x44\x61\x74\x61\x4B\x65\x79\x45'
      '\x72\x72\x6F\x72\x4F\x75\x74\x4F\x66\x42\x6F\x75\x6E\x64\x73\x45\x72\x72\x6F\x72\x57\x72\x69\x74\x65\x61'
      '\x62\x6C\x65\x45\x72\x72\x6F\x72\x55\x6E\x6B\x6E\x6F\x77\x6E\x45\x72\x72\x6F\x72\x22\x00\x00\x00\x2C\x00'
      '\x00\x00\x04\x00\x00\x00\x23\x00\x00\x00\x00\x01\x00\x00\x02\x01\x00\x00\x04\x01\x00\x00\x05\x01\x00\x00'
      '\x06\x01\x00\x00\x07\x01\x00\x00\x08\x01\x00\x00\x09\x01\x00\x00\x0A\x01\x00\x00\x0C\x01\x00\x00\x03\x02'
      '\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x02\x02\x00\x00';

  static const String _hex1 = '\x14\x47\x0F\x00\xAC\x46\x0F\x00';

  void init(Memory memory) {
    memory.copyFrom(_rodata, 0, 1000000, _rodata.length);
    memory.copyFrom(_data, 0, 1003836, _data.length);
  }
}

class ElementSegments extends AbstractElementSegments {
  ElementSegments(this.module);

  final IcuCapiModule module;

  @override
  List<Function> get functionTable => module.functionTable;

  void init() {
    copyTo(module.table0, 0, 1, 35, [
      25,
      30,
      26,
      29,
      39,
      46,
      91,
      93,
      94,
      95,
      104,
      105,
      47,
      97,
      107,
      103,
      98,
      124,
      130,
      131,
      133,
      134,
      123,
      148,
      45,
      92,
      126,
      127,
      142,
      143,
      149,
      150,
      151,
      145,
      115
    ]); /* segment0 */
  }
}
